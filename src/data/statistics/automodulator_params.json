{
    "eval_example.py": {
        "torch": {
            "load_20": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "repo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'heljakka/automodulator'",
                            "Constant"
                        ]
                    ]
                },
                "map_location": {
                    "value": "datatype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'ffhq512'",
                            "Constant"
                        ]
                    ]
                },
                "pretrained": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "source": {
                    "value": "github",
                    "type": "str",
                    "possible_values": []
                },
                "force_reload": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_35": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[model.tf()(Image.open(simg[0])), model.tf()(Image.open(simg[1]))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_63": {
                "variable": {
                    "value": "omgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[model.decode(model.zbuilder().use(z[0], [0, i]).use(z[1], [i, -1])) for i in range(0, 9)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "hubconf.py": {
        "torch": {}
    },
    "pioneer/FID/fid_score.py": {
        "torch": {
            "adaptive_avg_pool2d_256": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(pred, output_size=(1, 1))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "pioneer/FID/inception.py": {
        "torch": {
            "ModuleList_77": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_210": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_238": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_271": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_300": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_306": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_147": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_215": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_243": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_276": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_310": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_89": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "*args": {
                    "value": "*block0",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_98": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "*args": {
                    "value": "*block1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "*args": {
                    "value": "*block2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_122": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "*args": {
                    "value": "*block3",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "pioneer/LPIPS/__init__.py": {
        "torch": {}
    },
    "pioneer/LPIPS/base_model.py": {
        "torch": {
            "save_40": {
                "obj": {
                    "value": "network.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_47": {
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pioneer/LPIPS/dist_model.py": {
        "torch": {
            "Adam_94": {
                "variable": {
                    "value": "self.optimizer_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.old_lr - lrd",
                            "BinOp"
                        ],
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_100": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "gpu_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0]",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_163": {
                "input": {
                    "value": "self.loss_total",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "backward_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_130": {
                "variable": {
                    "value": "module.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "module.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_73": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(os.path.join(inspect.getfile(self.initialize), '..', 'weights/v%s/%s.pth' % (version, net)))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "pioneer/LPIPS/networks_basic.py": {
        "torch": {
            "Sequential_111": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BCELoss_136": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_24": {
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 * out_H / in_H",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_157": {
                "input": {
                    "value": "(in0 - in1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "in_channels": {
                    "value": "chn_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "chn_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_119": {
                "in_channels": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "chn_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_120": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_121": {
                "in_channels": {
                    "value": "chn_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "chn_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_122": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "chn_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_129": {
                "tensors": {
                    "value": "(d0, d1, d0 - d1, d0 / (d1 + eps), d1 / (d0 + eps))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pioneer/LPIPS/pretrained_networks.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_11": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_12": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_15": {
                "variable": {
                    "value": "self.slice6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.slice7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pioneer/LPIPS/util.py": {
        "torch": {
            "sqrt_12": {
                "variable": {
                    "value": "norm_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(in_feat ** 2, dim=1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_12": {
                "input": {
                    "value": "in_feat ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pioneer/config.py": {
        "torch": {
            "device_count_166": {
                "variable": {
                    "value": "args.gpu_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_170": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_172": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "pioneer/data.py": {
        "torch": {
            "DataLoader_86": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.LSUNClass(path, transform=transform, target_transform=lambda x: 0)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(Path(path), transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=path, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "max(1, int(batch_size / 2))",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "args.gpu_count > 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "DataLoader_98": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.LSUNClass(path, transform=transform, target_transform=lambda x: 0)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(Path(path), transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=path, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "max(1, int(batch_size / 2))",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "args.gpu_count > 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "DataLoader_110": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.LSUNClass(path, transform=transform, target_transform=lambda x: 0)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(Path(path), transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=path, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "max(1, int(batch_size / 2))",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "args.gpu_count > 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_50": {
                "variable": {
                    "value": "low_res_batch_x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([self.dataset[lr_key][i] / 127.5 - 1.0 for i in idx], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_122": {
                "ndarray": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataloader(batch_size, image_size, 0.0)",
                            "Call"
                        ],
                        [
                            "dataloader(batch_size, image_size, session.alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_171": {
                "ndarray": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataloader(batch_size, image_size, 0.0)",
                            "Call"
                        ],
                        [
                            "dataloader(batch_size, image_size, session.alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_258": {
                "ndarray": {
                    "value": "low_resol_batch_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([transform_with_resize_previous(img[i]).numpy() for i in range(img.size(0))], dtype=np.float32).repeat(2, axis=2).repeat(2, axis=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_264": {
                "ndarray": {
                    "value": "mixed_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img * session.alpha + (1.0 - session.alpha) * torch.from_numpy(low_resol_batch_x)",
                            "BinOp"
                        ],
                        [
                            "np.array([transform_with_normalize(mixed_img[i]).numpy() for i in range(img.size(0))], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pioneer/evaluate.py": {
        "torch": {
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_336": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_428": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_460": {
                "variable": {
                    "value": "z0_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(19, args.nz + args.n_label)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_68": {
                "ndarray": {
                    "value": "zrange.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_397": {
                "variable": {
                    "value": "real_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "real_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(real_images, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_398": {
                "variable": {
                    "value": "reco_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reco_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(reco_images, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_399": {
                "variable": {
                    "value": "rand_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rand_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rand_images, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_403": {
                "variable": {
                    "value": "lpips_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lpips_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "lpips_model.forward(real_images, reco_images)",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_145": {
                "variable": {
                    "value": "(_, ii)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cost_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.mismatchV(torch.cat(myzs[b * batch_size:(b + 1) * batch_size], 0), reco_z, 'cos')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_527": {
                "variable": {
                    "value": "z0_x[x_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Utils.slerp(z0_y1, z0_y2, t_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_160": {
                "tensors": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "filtered_images",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_470": {
                "ndarray": {
                    "value": "weights.T.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_144": {
                "tensors": {
                    "value": "myzs[b * batch_size:(b + 1) * batch_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_116": {
                "*size": {
                    "value": "args.n_label * colN",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "args.nz + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_359": {
                "*size": {
                    "value": "args.n_label * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "args.nz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_143": {
                "tensors": {
                    "value": "img_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images[b * batch_size:(b + 1) * batch_size]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pioneer/model.py": {
        "torch": {
            "ModuleList_170": {
                "variable": {
                    "value": "spectral_norm_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_144": {
                "variable": {
                    "value": "self.mod",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "outz * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_174": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_189": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "conv2d_220": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.from_numpy(f).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "groups": {
                    "value": "nin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.shape(x)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_235": {
                "variable": {
                    "value": "self.noise_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(mysize, requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_357": {
                "variable": {
                    "value": "self.adanorm_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_419": {
                "variable": {
                    "value": "self.z_preprocess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Sequential(equal_lr(nn.Linear(nz, nz), gain=mapping_lrmul), nn.LeakyReLU(0.2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_532": {
                "variable": {
                    "value": "self.progression",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConvBlock(int(nz / 32), int(nz / 16), 3, 1, pixel_norm=pixelNormInDiscriminator, spectral_norm=spectralNormInDiscriminator, ada_norm=False), ConvBlock(int(nz / 16), int(nz / 8), 3, 1, pixel_norm=pixelNormInDiscriminator, spectral_norm=spectralNormInDiscriminator, ada_norm=False), ConvBlock(int(nz / 8), int(nz / 4), 3, 1, pixel_norm=pixelNormInDiscriminator, spectral_norm=spectralNormInDiscriminator, ada_norm=False), ConvBlock(int(nz / 4), int(nz / 2), 3, 1, pixel_norm=pixelNormInDiscriminator, spectral_norm=spectralNormInDiscriminator, ada_norm=False), ConvBlock(int(nz / 2), nz, 3, 1, pixel_norm=pixelNormInDiscriminator, spectral_norm=spectralNormInDiscriminator, ada_norm=False), ConvBlock(nz, nz, 3, 1, pixel_norm=pixelNormInDiscriminator, spectral_norm=spectralNormInDiscriminator, ada_norm=False), ConvBlock(nz, nz, 3, 1, pixel_norm=pixelNormInDiscriminator, spectral_norm=spectralNormInDiscriminator, ada_norm=False), ConvBlock(nz, nz, 3, 1, pixel_norm=pixelNormInDiscriminator, spectral_norm=spectralNormInDiscriminator, ada_norm=False), ConvBlock(nz + 1 if use_mean_std_layer else nz, nz, 3, 1, 4, 0, pixel_norm=pixelNormInDiscriminator, spectral_norm=spectralNormInDiscriminator, ada_norm=False, last_act=None)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_570": {
                "variable": {
                    "value": "self.from_rgb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(3, int(nz / 32), 1), nn.Conv2d(3, int(nz / 16), 1), nn.Conv2d(3, int(nz / 8), 1), nn.Conv2d(3, int(nz / 4), 1), nn.Conv2d(3, int(nz / 2), 1), nn.Conv2d(3, nz, 1), nn.Conv2d(3, nz, 1), nn.Conv2d(3, nz, 1), nn.Conv2d(3, nz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_220": {
                "ndarray": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 2, 1]",
                            "List"
                        ],
                        [
                            "np.array(f, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "f[:, np.newaxis] * f[np.newaxis, :]",
                            "BinOp"
                        ],
                        [
                            "f / np.sum(f)",
                            "BinOp"
                        ],
                        [
                            "f[::-1, ::-1]",
                            "Subscript"
                        ],
                        [
                            "f[np.newaxis, np.newaxis, :, :]",
                            "Subscript"
                        ],
                        [
                            "np.tile(f, [int(x.shape[1]), 1, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_252": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_256": {
                "variable": {
                    "value": "last_act",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Embedding_353": {
                "variable": {
                    "value": "self.label_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "n_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_397": {
                "variable": {
                    "value": "self.progression",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "progression_raw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[ConvBlock(nz, nz, 4, 3, 3, 1, spectral_norm=gen_spectral_norm, const_layer=True, holder=self), ConvBlock(nz, nz, 3, 1, spectral_norm=gen_spectral_norm, holder=self), ConvBlock(nz, nz, 3, 1, spectral_norm=gen_spectral_norm, holder=self), ConvBlock(nz, nz, 3, 1, spectral_norm=gen_spectral_norm, holder=self), ConvBlock(nz, int(nz / 2) * HLM, 3, 1, spectral_norm=gen_spectral_norm, holder=self), ConvBlock(int(nz / 2) * HLM, int(nz / 4) * HLM, 3, 1, spectral_norm=gen_spectral_norm, holder=self), ConvBlock(int(nz / 4) * HLM, int(nz / 8) * HLM, 3, 1, spectral_norm=gen_spectral_norm, holder=self), ConvBlock(int(nz / 8) * HLM, int(nz / 16) * HLM, 3, 1, spectral_norm=gen_spectral_norm, holder=self), ConvBlock(int(nz / 16) * HLM, int(nz / 32) * HLM, 3, 1, spectral_norm=gen_spectral_norm, holder=self)]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_398": {
                "variable": {
                    "value": "self.to_rgb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "to_rgb_raw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[nn.Conv2d(nz, 3, 1), nn.Conv2d(nz, 3, 1), nn.Conv2d(nz, 3, 1), nn.Conv2d(nz, 3, 1), nn.Conv2d(int(nz / 2) * HLM, 3, 1), nn.Conv2d(int(nz / 4) * HLM, 3, 1), nn.Conv2d(int(nz / 8) * HLM, 3, 1), nn.Conv2d(int(nz / 16) * HLM, 3, 1), nn.Conv2d(int(nz / 32) * HLM, 3, 1)]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2d_403": {
                "variable": {
                    "value": "self.supportTorgbBlock8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_409": {
                "variable": {
                    "value": "self.progression",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "progression_raw[:args.flip_invariance_layer] + [self.supportProgression] + progression_raw[args.flip_invariance_layer:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_410": {
                "variable": {
                    "value": "self.to_rgb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "to_rgb_raw[:args.flip_invariance_layer] + [self.supportTorgbBlock8] + to_rgb_raw[args.flip_invariance_layer:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_457": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input, label]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_475": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_583": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1 + n_label",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_68": {
                "data": {
                    "value": "weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_109": {
                "data": {
                    "value": "weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_110": {
                "data": {
                    "value": "torch.ones(1) * gain",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_130": {
                "input": {
                    "value": "torch.mean(input ** 2, dim=1, keepdim=True) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_235": {
                "*size": {
                    "value": "mysize",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_275": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SpectralNormConv2d(in_channel, out_channel, kernel1, padding=pad1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_284": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SpectralNormConv2d(in_channel, out_channel, kernel1, padding=pad1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_317": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "firstBlock",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_371": {
                "in_channels": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_372": {
                "in_channels": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_373": {
                "in_channels": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_374": {
                "in_channels": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_375": {
                "in_channels": {
                    "value": "int(nz / 2) * HLM",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_376": {
                "in_channels": {
                    "value": "int(nz / 4) * HLM",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_377": {
                "in_channels": {
                    "value": "int(nz / 8) * HLM",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_378": {
                "in_channels": {
                    "value": "int(nz / 16) * HLM",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_379": {
                "in_channels": {
                    "value": "int(nz / 32) * HLM",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_381": {
                "modules": {
                    "value": "[NoiseLayer(nz), NoiseLayer(nz)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_382": {
                "modules": {
                    "value": "[NoiseLayer(nz), NoiseLayer(nz)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_383": {
                "modules": {
                    "value": "[NoiseLayer(nz), NoiseLayer(nz)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_384": {
                "modules": {
                    "value": "[NoiseLayer(nz), NoiseLayer(nz)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_385": {
                "modules": {
                    "value": "[NoiseLayer(int(nz / 2) * HLM), NoiseLayer(int(nz / 2) * HLM)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_386": {
                "modules": {
                    "value": "[NoiseLayer(int(nz / 4) * HLM), NoiseLayer(int(nz / 4) * HLM)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_387": {
                "modules": {
                    "value": "[NoiseLayer(int(nz / 8) * HLM), NoiseLayer(int(nz / 8) * HLM)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_388": {
                "modules": {
                    "value": "[NoiseLayer(int(nz / 16) * HLM), NoiseLayer(int(nz / 16) * HLM)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_389": {
                "modules": {
                    "value": "[NoiseLayer(int(nz / 32) * HLM), NoiseLayer(int(nz / 32) * HLM)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_400": {
                "variable": {
                    "value": "self.noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "noise_raw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[nn.ModuleList([NoiseLayer(nz), NoiseLayer(nz)]), nn.ModuleList([NoiseLayer(nz), NoiseLayer(nz)]), nn.ModuleList([NoiseLayer(nz), NoiseLayer(nz)]), nn.ModuleList([NoiseLayer(nz), NoiseLayer(nz)]), nn.ModuleList([NoiseLayer(int(nz / 2) * HLM), NoiseLayer(int(nz / 2) * HLM)]), nn.ModuleList([NoiseLayer(int(nz / 4) * HLM), NoiseLayer(int(nz / 4) * HLM)]), nn.ModuleList([NoiseLayer(int(nz / 8) * HLM), NoiseLayer(int(nz / 8) * HLM)]), nn.ModuleList([NoiseLayer(int(nz / 16) * HLM), NoiseLayer(int(nz / 16) * HLM)]), nn.ModuleList([NoiseLayer(int(nz / 32) * HLM), NoiseLayer(int(nz / 32) * HLM)])]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_406": {
                "variable": {
                    "value": "self.supportNoise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[NoiseLayer(nz), NoiseLayer(nz)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_412": {
                "variable": {
                    "value": "self.noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "noise_raw[:args.flip_invariance_layer] + [self.supportNoise] + noise_raw[args.flip_invariance_layer:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_420": {
                "*args": {
                    "value": "equal_lr(nn.Linear(nz, nz), gain=mapping_lrmul)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_421": {
                "*args": {
                    "value": "equal_lr(nn.Linear(nz, nz), gain=mapping_lrmul)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_595": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, mean_std]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_600": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.A[:, :self.outz, :, :] * o2 + self.A[:, self.outz:, :, :]",
                            "BinOp"
                        ],
                        [
                            "o2",
                            "Name"
                        ],
                        [
                            "self.conv(input)",
                            "Call"
                        ],
                        [
                            "torch.ones(512, 4, 4).to(device=input.device).repeat(batchN, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "content_input",
                            "Name"
                        ],
                        [
                            "out_act(self.to_rgb[step](out))",
                            "Call"
                        ],
                        [
                            "upsample",
                            "Name"
                        ],
                        [
                            "self.progression[i](out)",
                            "Call"
                        ],
                        [
                            "self.progression[i].conv[0][0](out)",
                            "Call"
                        ],
                        [
                            "self.progression[i].conv[0][1](out)",
                            "Call"
                        ],
                        [
                            "self.noise[i][0](out)",
                            "Call"
                        ],
                        [
                            "self.progression[i].conv[0][2](out)",
                            "Call"
                        ],
                        [
                            "(1 - alpha) * skip_rgb + alpha * out",
                            "BinOp"
                        ],
                        [
                            "self.progression[i].conv[0][3](out)",
                            "Call"
                        ],
                        [
                            "self.progression[i].conv[1](out)",
                            "Call"
                        ],
                        [
                            "self.noise[i][1](out)",
                            "Call"
                        ],
                        [
                            "self.progression[i].conv[2](out)",
                            "Call"
                        ],
                        [
                            "self.progression[i].conv[3](out)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[index](input)",
                            "Call"
                        ],
                        [
                            "self.linear(z_out)",
                            "Call"
                        ],
                        [
                            "z_out.view(z_out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([out, mean_std], 1)",
                            "Call"
                        ],
                        [
                            "self.progression[index](out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "(1 - alpha) * skip_rgb + alpha * out",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_70": {
                "*size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_238": {
                "mean": {
                    "value": "torch.zeros_like(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "torch.ones_like(input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_315": {
                "variable": {
                    "value": "firstBlock",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_324": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "EqualConv2d(in_channel, out_channel, kernel1, padding=pad1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_333": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channel, out_channel, kernel1, padding=pad1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_420": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_421": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "upsample_484": {
                "variable": {
                    "value": "upsample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.A[:, :self.outz, :, :] * o2 + self.A[:, self.outz:, :, :]",
                            "BinOp"
                        ],
                        [
                            "o2",
                            "Name"
                        ],
                        [
                            "self.conv(input)",
                            "Call"
                        ],
                        [
                            "torch.ones(512, 4, 4).to(device=input.device).repeat(batchN, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "content_input",
                            "Name"
                        ],
                        [
                            "out_act(self.to_rgb[step](out))",
                            "Call"
                        ],
                        [
                            "upsample",
                            "Name"
                        ],
                        [
                            "self.progression[i](out)",
                            "Call"
                        ],
                        [
                            "self.progression[i].conv[0][0](out)",
                            "Call"
                        ],
                        [
                            "self.progression[i].conv[0][1](out)",
                            "Call"
                        ],
                        [
                            "self.noise[i][0](out)",
                            "Call"
                        ],
                        [
                            "self.progression[i].conv[0][2](out)",
                            "Call"
                        ],
                        [
                            "(1 - alpha) * skip_rgb + alpha * out",
                            "BinOp"
                        ],
                        [
                            "self.progression[i].conv[0][3](out)",
                            "Call"
                        ],
                        [
                            "self.progression[i].conv[1](out)",
                            "Call"
                        ],
                        [
                            "self.noise[i][1](out)",
                            "Call"
                        ],
                        [
                            "self.progression[i].conv[2](out)",
                            "Call"
                        ],
                        [
                            "self.progression[i].conv[3](out)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[index](input)",
                            "Call"
                        ],
                        [
                            "self.linear(z_out)",
                            "Call"
                        ],
                        [
                            "z_out.view(z_out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([out, mean_std], 1)",
                            "Call"
                        ],
                        [
                            "self.progression[index](out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "(1 - alpha) * skip_rgb + alpha * out",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_486": {
                "variable": {
                    "value": "upsample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.A[:, :self.outz, :, :] * o2 + self.A[:, self.outz:, :, :]",
                            "BinOp"
                        ],
                        [
                            "o2",
                            "Name"
                        ],
                        [
                            "self.conv(input)",
                            "Call"
                        ],
                        [
                            "torch.ones(512, 4, 4).to(device=input.device).repeat(batchN, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "content_input",
                            "Name"
                        ],
                        [
                            "out_act(self.to_rgb[step](out))",
                            "Call"
                        ],
                        [
                            "upsample",
                            "Name"
                        ],
                        [
                            "self.progression[i](out)",
                            "Call"
                        ],
                        [
                            "self.progression[i].conv[0][0](out)",
                            "Call"
                        ],
                        [
                            "self.progression[i].conv[0][1](out)",
                            "Call"
                        ],
                        [
                            "self.noise[i][0](out)",
                            "Call"
                        ],
                        [
                            "self.progression[i].conv[0][2](out)",
                            "Call"
                        ],
                        [
                            "(1 - alpha) * skip_rgb + alpha * out",
                            "BinOp"
                        ],
                        [
                            "self.progression[i].conv[0][3](out)",
                            "Call"
                        ],
                        [
                            "self.progression[i].conv[1](out)",
                            "Call"
                        ],
                        [
                            "self.noise[i][1](out)",
                            "Call"
                        ],
                        [
                            "self.progression[i].conv[2](out)",
                            "Call"
                        ],
                        [
                            "self.progression[i].conv[3](out)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[index](input)",
                            "Call"
                        ],
                        [
                            "self.linear(z_out)",
                            "Call"
                        ],
                        [
                            "z_out.view(z_out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([out, mean_std], 1)",
                            "Call"
                        ],
                        [
                            "self.progression[index](out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "(1 - alpha) * skip_rgb + alpha * out",
                            "BinOp"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_570": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(nz / 32)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_571": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(nz / 16)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_572": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(nz / 8)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_573": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(nz / 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_574": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(nz / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_575": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_576": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_577": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_578": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_603": {
                "variable": {
                    "value": "skip_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([input, label], 1)",
                            "Call"
                        ],
                        [
                            "self.z_preprocess[0](input)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_52": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_110": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_130": {
                "input": {
                    "value": "input ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_238": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([input, label], 1)",
                            "Call"
                        ],
                        [
                            "self.z_preprocess[0](input)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_238": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([input, label], 1)",
                            "Call"
                        ],
                        [
                            "self.z_preprocess[0](input)",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_278": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_288": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_304": {
                "variable": {
                    "value": "firstBlock",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "ada_conv2D(in_channel, out_channel, kernel1, padding=pad1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_309": {
                "variable": {
                    "value": "firstBlock",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "ada_conv2D(in_channel, out_channel, kernel1, padding=pad1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_320": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_420": {
                "in_features": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_421": {
                "in_features": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_327": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_331": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_333": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Name"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Name"
                        ]
                    ]
                }
            },
            "LeakyReLU_335": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_336": {
                "in_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Name"
                        ],
                        [
                            "kernel_size2",
                            "Name"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Name"
                        ],
                        [
                            "padding2",
                            "Name"
                        ]
                    ]
                }
            },
            "LeakyReLU_338": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_306": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_312": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "pioneer/robust_loss_pytorch/adaptive.py": {
        "torch": {
            "as_tensor_198": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "util.rgb_to_syuv(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_256": {
                "variable": {
                    "value": "self.log_df",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((1, self.num_dims)).to(dtype=self.float_dtype, device=self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "as_tensor_298": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "util.rgb_to_syuv(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_311": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "util.rgb_to_syuv(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_320": {
                "variable": {
                    "value": "x_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.permute(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, width, height)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_338": {
                "variable": {
                    "value": "x_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.reshape(x_stack, (-1, num_channels, width, height)).permute(0, 2, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, width * height * num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_430": {
                "variable": {
                    "value": "x_example",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1] + list(self.image_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_463": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.adaptive_lossfun.lossfun(x_mat)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1] + list(self.image_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_272": {
                "variable": {
                    "value": "self.latent_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((1, self.num_dims)).to(dtype=self.float_dtype, device=self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_469": {
                "input": {
                    "value": "self.adaptive_lossfun.alpha()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.image_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_474": {
                "input": {
                    "value": "self.adaptive_lossfun.df()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.image_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_478": {
                "input": {
                    "value": "self.adaptive_lossfun.scale()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.image_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_254": {
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_257": {
                "*size": {
                    "value": "(1, self.num_dims)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_278": {
                "input": {
                    "value": "self.log_df",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_339": {
                "input": {
                    "value": "x_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x.permute(0, 3, 1, 2), (-1, width, height))",
                            "Call"
                        ],
                        [
                            "wavelet.flatten(wavelet.rescale(wavelet.construct(x_stack, self.wavelet_num_levels, self.representation), self.wavelet_scale_base))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, num_channels, width, height)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "permute_339": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_153": {
                "data": {
                    "value": "latent_alpha_init.clone().detach().to(dtype=self.float_dtype, device=self.device)[np.newaxis, np.newaxis].repeat(1, self.num_dims)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_174": {
                "data": {
                    "value": "torch.zeros((1, self.num_dims)).to(dtype=self.float_dtype, device=self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_273": {
                "*size": {
                    "value": "(1, self.num_dims)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_175": {
                "*size": {
                    "value": "(1, self.num_dims)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_139": {
                "data": {
                    "value": "alpha_lo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.float_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_165": {
                "data": {
                    "value": "scale_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.float_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_266": {
                "data": {
                    "value": "scale_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.float_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pioneer/robust_loss_pytorch/cubic_spline.py": {
        "torch": {
            "floor_65": {
                "variable": {
                    "value": "x_lo",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(x, torch.as_tensor(0), values.shape[0] - 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_55": {
                "obj": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_56": {
                "obj": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_57": {
                "obj": {
                    "value": "tangents",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_96": {
                "condition": {
                    "value": "t < 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "value_before",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tangents[0] * t + values[0]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.where(t > 1.0, value_after, value_mid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_97": {
                "condition": {
                    "value": "t > 1.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "value_after",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tangents[-1] * (t - 1.0) + values[-1]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "value_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neighbor_values_lo * h00 + neighbor_values_hi * h01 + neighbor_tangents_lo * h10 + neighbor_tangents_hi * h11",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_65": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "torch.as_tensor(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "max": {
                    "value": "values.shape[0] - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "as_tensor_65": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pioneer/robust_loss_pytorch/distribution.py": {
        "torch": {
            "as_tensor_60": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(alpha)",
                            "Call"
                        ],
                        [
                            "torch.where(x < 8, 0.5 * x + torch.where(x <= 4, 1.25 - torch.sqrt(1.5625 - x + 0.25 * x ** 2), -1.25 + torch.sqrt(9.5625 - 3 * x + 0.25 * x ** 2)), 3.75 + 0.25 * util.exp_safe(x * 3.6 - 28.8))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(alpha)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(alpha)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_61": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "alpha < 4",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "(2.25 * alpha - 4.5) / (torch.abs(alpha - 2) + 0.25) + alpha + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "5.0 / 18.0 * util.log_safe(4 * alpha - 15) + 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "as_tensor_69": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(alpha < 4, (2.25 * alpha - 4.5) / (torch.abs(alpha - 2) + 0.25) + alpha + 2, 5.0 / 18.0 * util.log_safe(4 * alpha - 15) + 8)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "partition_spline_curve(alpha)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_71": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "x < 8",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * x + torch.where(x <= 4, 1.25 - torch.sqrt(1.5625 - x + 0.25 * x ** 2), -1.25 + torch.sqrt(9.5625 - 3 * x + 0.25 * x ** 2))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "3.75 + 0.25 * util.exp_safe(x * 3.6 - 28.8)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "as_tensor_112": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(alpha)",
                            "Call"
                        ],
                        [
                            "torch.where(x < 8, 0.5 * x + torch.where(x <= 4, 1.25 - torch.sqrt(1.5625 - x + 0.25 * x ** 2), -1.25 + torch.sqrt(9.5625 - 3 * x + 0.25 * x ** 2)), 3.75 + 0.25 * util.exp_safe(x * 3.6 - 28.8))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(alpha)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(alpha)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_148": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(alpha < 4, (2.25 * alpha - 4.5) / (torch.abs(alpha - 2) + 0.25) + alpha + 2, 5.0 / 18.0 * util.log_safe(4 * alpha - 15) + 8)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "partition_spline_curve(alpha)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_149": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(alpha)",
                            "Call"
                        ],
                        [
                            "torch.where(x < 8, 0.5 * x + torch.where(x <= 4, 1.25 - torch.sqrt(1.5625 - x + 0.25 * x ** 2), -1.25 + torch.sqrt(9.5625 - 3 * x + 0.25 * x ** 2)), 3.75 + 0.25 * util.exp_safe(x * 3.6 - 28.8))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(alpha)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(alpha)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_150": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(scale)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_188": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(alpha)",
                            "Call"
                        ],
                        [
                            "torch.where(x < 8, 0.5 * x + torch.where(x <= 4, 1.25 - torch.sqrt(1.5625 - x + 0.25 * x ** 2), -1.25 + torch.sqrt(9.5625 - 3 * x + 0.25 * x ** 2)), 3.75 + 0.25 * util.exp_safe(x * 3.6 - 28.8))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(alpha)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(alpha)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_189": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(scale)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "Cauchy_195": {
                "variable": {
                    "value": "cauchy",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "scale": {
                    "value": "np.sqrt(2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Uniform_196": {
                "variable": {
                    "value": "uniform",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_197": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(alpha)",
                            "Call"
                        ],
                        [
                            "torch.where(x < 8, 0.5 * x + torch.where(x <= 4, 1.25 - torch.sqrt(1.5625 - x + 0.25 * x ** 2), -1.25 + torch.sqrt(9.5625 - 3 * x + 0.25 * x ** 2)), 3.75 + 0.25 * util.exp_safe(x * 3.6 - 28.8))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(alpha)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(alpha)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_198": {
                "variable": {
                    "value": "accepted",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "alpha.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_201": {
                "variable": {
                    "value": "cauchy_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cauchy.sample((np.prod(alpha.shape),))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "alpha.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_220": {
                "variable": {
                    "value": "uniform_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "uniform.sample((np.prod(alpha.shape),))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "alpha.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_227": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "accept",
                    "type": "variable",
                    "possible_values": [
                        [
                            "uniform_sample <= torch.exp(nll_bound - nll)",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "cauchy_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(cauchy.sample((np.prod(alpha.shape),)), alpha.shape)",
                            "Call"
                        ],
                        [
                            "cauchy_sample.type(alpha.dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(alpha)",
                            "Call"
                        ],
                        [
                            "torch.where(accept, cauchy_sample, samples)",
                            "Call"
                        ],
                        [
                            "samples * scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_73": {
                "condition": {
                    "value": "x <= 4",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "1.25 - torch.sqrt(1.5625 - x + 0.25 * x ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "-1.25 + torch.sqrt(9.5625 - 3 * x + 0.25 * x ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "self._spline_x_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "f['x_scale']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "variable": {
                    "value": "self._spline_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "f['values']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "variable": {
                    "value": "self._spline_tangents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "f['tangents']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_158": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(scale)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_207": {
                "data": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(alpha)",
                            "Call"
                        ],
                        [
                            "torch.where(x < 8, 0.5 * x + torch.where(x <= 4, 1.25 - torch.sqrt(1.5625 - x + 0.25 * x ** 2), -1.25 + torch.sqrt(9.5625 - 3 * x + 0.25 * x ** 2)), 3.75 + 0.25 * util.exp_safe(x * 3.6 - 28.8))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(alpha)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(alpha)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_208": {
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_223": {
                "input": {
                    "value": "nll_bound - nll",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_73": {
                "input": {
                    "value": "1.5625 - x + 0.25 * x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_74": {
                "input": {
                    "value": "9.5625 - 3 * x + 0.25 * x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_214": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cauchy_sample.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_215": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cauchy_sample.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_62": {
                "input": {
                    "value": "alpha - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pioneer/robust_loss_pytorch/general.py": {
        "torch": {
            "is_tensor_70": {
                "obj": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_71": {
                "obj": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_72": {
                "obj": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_82": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "alpha >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "alpha + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha - epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "variable": {
                    "value": "machine_epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.finfo(np.float32).eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_102": {
                "variable": {
                    "value": "beta_safe",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "machine_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(np.finfo(np.float32).eps).to(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_111": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "alpha == -float('inf')",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_neginf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.expm1(-0.5 * squared_scaled_x)",
                            "UnaryOp"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.where(alpha == 0, loss_zero, torch.where(alpha == 2, loss_two, torch.where(alpha == float('inf'), loss_posinf, loss_otherwise)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_81": {
                "input": {
                    "value": "alpha - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expm1_95": {
                "input": {
                    "value": "-0.5 * squared_scaled_x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_102": {
                "input": {
                    "value": "alpha - 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_104": {
                "condition": {
                    "value": "alpha >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(alpha)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "-torch.ones_like(alpha)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_105": {
                "input": {
                    "value": "machine_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(np.finfo(np.float32).eps).to(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_113": {
                "condition": {
                    "value": "alpha == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.log1p_safe(0.5 * squared_scaled_x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.where(alpha == 2, loss_two, torch.where(alpha == float('inf'), loss_posinf, loss_otherwise))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_83": {
                "input": {
                    "value": "(x / scale) ** 2 / b + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "0.5 * d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_104": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_106": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pow_108": {
                "input": {
                    "value": "squared_scaled_x / beta_safe + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "0.5 * alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_115": {
                "condition": {
                    "value": "alpha == 2",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_two",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * squared_scaled_x",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.where(alpha == float('inf'), loss_posinf, loss_otherwise)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_105": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_117": {
                "condition": {
                    "value": "alpha == float('inf')",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_posinf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.expm1_safe(0.5 * squared_scaled_x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "loss_otherwise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta_safe / alpha_safe * (torch.pow(squared_scaled_x / beta_safe + 1.0, 0.5 * alpha) - 1.0)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "pioneer/robust_loss_pytorch/util.py": {
        "torch": {
            "as_tensor_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "inv_softplus((y - lo) / (ref - lo)) - shift",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "inv_softplus((y - lo) / (ref - lo)) - shift",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_42": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "inv_softplus((y - lo) / (ref - lo)) - shift",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "inv_softplus((y - lo) / (ref - lo)) - shift",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_54": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(y).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(y).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "(ref - lo) * torch.nn.Softplus()(x + shift) + lo",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(y).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "vec(f(var_x))[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "as_tensor_60": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(y).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(y).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "(ref - lo) * torch.nn.Softplus()(x + shift) + lo",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(y).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "vec(f(var_x))[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "as_tensor_69": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(logits).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "logit((probs - lo) / (hi - lo))",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_70": {
                "variable": {
                    "value": "lo",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(lo).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(lo).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(lo).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(lo).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_71": {
                "variable": {
                    "value": "hi",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "hi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(hi).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(hi).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_80": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(probs).to(torch.device('cuda'))",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_81": {
                "variable": {
                    "value": "lo",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(lo).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(lo).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(lo).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(lo).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_82": {
                "variable": {
                    "value": "hi",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "hi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(hi).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(hi).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_91": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "inv_softplus((y - lo) / (ref - lo)) - shift",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_92": {
                "variable": {
                    "value": "lo",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(lo).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(lo).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(lo).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(lo).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_93": {
                "variable": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(ref).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(ref).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_103": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(y).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(y).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "(ref - lo) * torch.nn.Softplus()(x + shift) + lo",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(y).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "vec(f(var_x))[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "as_tensor_104": {
                "variable": {
                    "value": "lo",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(lo).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(lo).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(lo).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(lo).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_105": {
                "variable": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(ref).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(ref).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_113": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "inv_softplus((y - lo) / (ref - lo)) - shift",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_114": {
                "variable": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(df)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_115": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_142": {
                "variable": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(rgb).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.reshape(torch.matmul(torch.reshape(yuv, [-1, 3]), kernel), yuv.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_143": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.299, -0.14714119, 0.61497538], [0.587, -0.28886916, -0.51496512], [0.114, 0.43601035, -0.10001026]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_146": {
                "variable": {
                    "value": "yuv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(torch.reshape(rgb, [-1, 3]), kernel)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "rgb.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_166": {
                "variable": {
                    "value": "yuv",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "yuv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(torch.matmul(torch.reshape(rgb, [-1, 3]), kernel), rgb.shape)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(yuv).to(torch.device('cuda'))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_167": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 1, 1], [0, -0.394642334, 2.03206185], [1.13988303, -0.58062185, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_169": {
                "variable": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(torch.reshape(yuv, [-1, 3]), kernel)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "yuv.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_31": {
                "input": {
                    "value": "torch.min(x, torch.tensor(3.3e+38).to(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log1p_37": {
                "input": {
                    "value": "torch.min(x, torch.tensor(3.3e+38).to(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_43": {
                "input": {
                    "value": "torch.min(x, torch.tensor(87.5).to(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expm1_49": {
                "input": {
                    "value": "torch.min(x, torch.tensor(87.5).to(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_55": {
                "condition": {
                    "value": "y > 87.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(y).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(y).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "(ref - lo) * torch.nn.Softplus()(x + shift) + lo",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(y).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "vec(f(var_x))[i]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.log(torch.expm1(y))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_30": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "min_31": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "inv_softplus((y - lo) / (ref - lo)) - shift",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_36": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "min_37": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "inv_softplus((y - lo) / (ref - lo)) - shift",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_42": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "min_43": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "inv_softplus((y - lo) / (ref - lo)) - shift",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_48": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "min_49": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "inv_softplus((y - lo) / (ref - lo)) - shift",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_54": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_55": {
                "input": {
                    "value": "torch.expm1(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_60": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_61": {
                "input": {
                    "value": "1.0 / y - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_69": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_70": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_71": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_80": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_81": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_82": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_91": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_92": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_93": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_94": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_103": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_104": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_105": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_117": {
                "data": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_142": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_145": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_147": {
                "input": {
                    "value": "torch.reshape(rgb, [-1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0.299, -0.14714119, 0.61497538], [0.587, -0.28886916, -0.51496512], [0.114, 0.43601035, -0.10001026]]).to(rgb).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1, 1, 1], [0, -0.394642334, 2.03206185], [1.13988303, -0.58062185, 0]]).to(yuv).to(torch.device('cuda'))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_166": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_168": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_170": {
                "input": {
                    "value": "torch.reshape(yuv, [-1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0.299, -0.14714119, 0.61497538], [0.587, -0.28886916, -0.51496512], [0.114, 0.43601035, -0.10001026]]).to(rgb).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1, 1, 1], [0, -0.394642334, 2.03206185], [1.13988303, -0.58062185, 0]]).to(yuv).to(torch.device('cuda'))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_192": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "data": {
                    "value": "3.3e+38",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "data": {
                    "value": "3.3e+38",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "87.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "data": {
                    "value": "87.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "expm1_55": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(y).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(y).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "(ref - lo) * torch.nn.Softplus()(x + shift) + lo",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(y).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "vec(f(var_x))[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_72": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(logits).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "logit((probs - lo) / (hi - lo))",
                            "Call"
                        ]
                    ]
                }
            },
            "lgamma_117": {
                "input": {
                    "value": "0.5 * df + torch.tensor(0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_147": {
                "input": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(rgb).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.reshape(torch.matmul(torch.reshape(yuv, [-1, 3]), kernel), yuv.shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_170": {
                "input": {
                    "value": "yuv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(torch.matmul(torch.reshape(rgb, [-1, 3]), kernel), rgb.shape)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(yuv).to(torch.device('cuda'))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_195": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "inv_softplus((y - lo) / (ref - lo)) - shift",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Softplus_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_116": {
                "input": {
                    "value": "torch.abs(scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "lgamma_116": {
                "input": {
                    "value": "0.5 * df",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_120": {
                "input": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(df)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_116": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "log1p_119": {
                "input": {
                    "value": "(x / scale) ** 2.0 / df",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pioneer/robust_loss_pytorch/wavelet.py": {
        "torch": {
            "as_tensor_137": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_148": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.as_tensor(j).type(torch.int64).to(x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_195": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_196": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(f).to(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_246": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_258": {
                "variable": {
                    "value": "x_undecimated",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(x_and_zeros, direction + 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "list(sz_ex)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_263": {
                "variable": {
                    "value": "x_undecimated",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_undecimated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(torch.stack(x_and_zeros, direction + 2), list(sz_ex))",
                            "Call"
                        ],
                        [
                            "x_undecimated[:, 0:up_sz[0], 0:up_sz[1]]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.pad(x_undecimated, [0, up_sz[1] - x_undecimated.shape[2], 0, up_sz[0] - x_undecimated.shape[1], 0, 0])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, up_sz[1] - x_undecimated.shape[2], 0, up_sz[0] - x_undecimated.shape[1], 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_321": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(im)",
                            "Call"
                        ],
                        [
                            "_downsample(lo, filters.analysis_lo, 1, 0)",
                            "Call"
                        ],
                        [
                            "pyr[-1]",
                            "Subscript"
                        ],
                        [
                            "_upsample(_upsample(im, lo_sz, filters.synthesis_lo, 1, 0) + _upsample(hi_lo, lo_sz, filters.synthesis_hi, 1, 1), up_sz, filters.synthesis_lo, 0, 0) + _upsample(_upsample(lo_hi, hi_sz, filters.synthesis_lo, 1, 0) + _upsample(hi_hi, hi_sz, filters.synthesis_hi, 1, 1), up_sz, filters.synthesis_hi, 0, 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "as_tensor_478": {
                "variable": {
                    "value": "resid",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pyr[d]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "round_482": {
                "variable": {
                    "value": "vis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "255.0 * flatten(vis_pyr).permute([1, 2, 0])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_442": {
                "variable": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.cat([flat, pyr[d][1]], dim=2), torch.cat([pyr[d][2], pyr[d][0]], dim=2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_149": {
                "data": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.minimum(2 * (n - 1) - i_mod, i_mod)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_206": {
                "input": {
                    "value": "x_padded[:, np.newaxis, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "f_ex[np.newaxis, np.newaxis].type(x.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[2, 1]",
                            "List"
                        ],
                        [
                            "[1, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_259": {
                "tensors": {
                    "value": "x_and_zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x, torch.zeros_like(x)]",
                            "List"
                        ],
                        [
                            "[torch.zeros_like(x), x]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "direction + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_271": {
                "input": {
                    "value": "x_padded[:, np.newaxis, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "f_ex[np.newaxis, np.newaxis].type(x.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_471": {
                "variable": {
                    "value": "band",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "band",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pyr[d][b]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(band)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_200": {
                "data": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(f).to(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_249": {
                "data": {
                    "value": "f[::-1].copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_255": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_479": {
                "input": {
                    "value": "resid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(pyr[d])",
                            "Call"
                        ]
                    ]
                }
            },
            "max_480": {
                "input": {
                    "value": "resid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(pyr[d])",
                            "Call"
                        ]
                    ]
                }
            },
            "min_480": {
                "input": {
                    "value": "resid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(pyr[d])",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_204": {
                "data": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(f).to(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_252": {
                "data": {
                    "value": "f[::-1].copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_257": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_443": {
                "tensors": {
                    "value": "[flat, pyr[d][1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_444": {
                "tensors": {
                    "value": "[pyr[d][2], pyr[d][0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_472": {
                "input": {
                    "value": "torch.reshape(torch.abs(band), [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_472": {
                "input": {
                    "value": "torch.abs(band)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_472": {
                "input": {
                    "value": "band",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pyr[d][b]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(band)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_475": {
                "input": {
                    "value": "band / max_mag",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "pioneer/session.py": {
        "torch": {
            "device_count_18": {
                "variable": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_69": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "pioneer.model.Generator(self.nz, self.n_label, arch=arch).to(device=self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_70": {
                "variable": {
                    "value": "self.g_running",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "pioneer.model.Generator(self.nz, self.n_label, arch=arch).to(device=self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_71": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "pioneer.model.Discriminator(nz=self.nz, n_label=self.n_label, binary_predictor=False).to(device=self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_114": {
                "variable": {
                    "value": "self.optimizerG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_115": {
                "variable": {
                    "value": "self.optimizerD",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.encoder.parameters()) + adaptive_loss_params",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_122": {
                "variable": {
                    "value": "self.optimizerA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "_adaparams",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_142": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'G_state_dict': self.generator.state_dict(), 'D_state_dict': self.encoder.state_dict(), 'G_running_state_dict': self.g_running.state_dict(), 'optimizerD': self.optimizerD.state_dict(), 'optimizerG': self.optimizerG.state_dict(), 'optimizerA': self.optimizerA.state_dict(), 'iteration': self.sample_i, 'phase': self.phase, 'alpha': self.alpha, 'SNU': us}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_65": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_67": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_count_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_328": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_338": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_342": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_278": {
                "*size": {
                    "value": "num_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_318": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_236": {
                "f": {
                    "value": "reload_from",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/checkpoint/{}_state.pth'.format(save_dir, str(self.requested_start_iteration).zfill(6))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pioneer/train.py": {
        "torch": {
            "manual_seed_53": {
                "seed": {
                    "value": "args.manual_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_54": {
                "seed": {
                    "value": "args.manual_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_536": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.hub",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "args.hub_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pretrained": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "source": {
                    "value": "github",
                    "type": "str",
                    "possible_values": []
                }
            },
            "min_227": {
                "variable": {
                    "value": "KL_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones_like(KL_fake) * margin / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_294": {
                "tensors": {
                    "value": "(alt_mix_z, z[mix_N:, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_309": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_205": {
                "tensors": {
                    "value": "(alt_mix_z, z[mix_N:, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_227": {
                "input": {
                    "value": "-torch.ones_like(KL_fake) * margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_158": {
                "input": {
                    "value": "session.adaptive_loss[session.getResoPhase()].lossfun((x_in - x_reco_in).view(-1, x_in.size()[1] * x_in.size()[2] * x_in.size()[3]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_159": {
                "input": {
                    "value": "session.adaptive_loss[session.getResoPhase()].lossfun((x_mirror - x_reco_in_mirror).view(-1, x_mirror.size()[1] * x_mirror.size()[2] * x_mirror.size()[3]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_176": {
                "input": {
                    "value": "session.adaptive_loss[session.getResoPhase()].lossfun((recon_x - x).view(-1, x.size()[1] * x.size()[2] * x.size()[3]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_227": {
                "input": {
                    "value": "KL_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KL_maximizer(egz) * args.fake_D_KL_scale",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "pioneer/training_scheduler.py": {
        "torch": {
            "Conv2d_42": {
                "variable": {
                    "value": "nw",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_44": {
                "variable": {
                    "value": "opt1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "nw.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_45": {
                "variable": {
                    "value": "opt2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "nw.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "pioneer/utils.py": {
        "torch": {
            "unsqueeze_19": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z[:, -args.n_label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_111": {
                "variable": {
                    "value": "return_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "return_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(return_images, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_97": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}