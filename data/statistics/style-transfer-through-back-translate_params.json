{
    "classifier/cnn_train.py": {
        "torch": {
            "BCELoss_112": {
                "variable": {
                    "value": "crit",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_269": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_109": {
                "device": {
                    "value": "opt.gpus[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ge_127": {
                "variable": {
                    "value": "pred_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.cuda.FloatTensor(outputs.size(0), outputs.size(1)).fill_(0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ge_129": {
                "variable": {
                    "value": "pred_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.FloatTensor(outputs.size(0), outputs.size(1)).fill_(0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_150": {
                "variable": {
                    "value": "inp_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src[0] % vocab_size",
                            "BinOp"
                        ],
                        [
                            "src[0] % vocab_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_186": {
                "variable": {
                    "value": "batchOrder",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(trainData)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_274": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "dict_checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.train_from if opt.train_from else opt.train_from_state_dict",
                            "IfExp"
                        ]
                    ]
                }
            },
            "DataParallel_313": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "onmt.CNNModels.ConvNet(opt, dicts['src'])",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=opt.gpus, dim=1)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "opt.gpus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_199": {
                "variable": {
                    "value": "inp_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src[0] % vocab_size",
                            "BinOp"
                        ],
                        [
                            "src[0] % vocab_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_262": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model_state_dict, 'dicts': dataset['dicts'], 'opt': opt, 'epoch': epoch, 'optim': optim}",
                            "Dict"
                        ],
                        [
                            "torch.load(dict_checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'%s_acc_%.2f_loss_%.2f_e%d.pt' % (opt.save_model, 100 * valid_acc, valid_loss, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "classifier/cnn_translate.py": {
        "torch": {
            "set_device_52": {
                "device": {
                    "value": "opt.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "classifier/onmt/CNNModels.py": {
        "torch": {
            "Embedding_20": {
                "variable": {
                    "value": "self.word_lut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "opt.word_vec_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "onmt.Constants.PAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.word_vec_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(opt.filter_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool3d_29": {
                "variable": {
                    "value": "self.maxpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, pooling_window_size, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_30": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "opt.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt.num_classes - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sigmoid_32": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_42": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.view(-1, input.size(2))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.word_lut.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_36": {
                "variable": {
                    "value": "pretrained",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.pre_word_vecs_enc",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "classifier/onmt/Dataset.py": {
        "torch": {
            "stack_65": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(b, 0).t().contiguous()",
                            "Call"
                        ],
                        [
                            "b.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(b, volatile=self.volatile)",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_65": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_79": {
                "n": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "classifier/onmt/Dict.py": {
        "torch": {
            "Tensor_95": {
                "variable": {
                    "value": "freq",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sort_97": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "freq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([self.frequencies[i] for i in range(len(self.frequencies))])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "classifier/onmt/Optim.py": {
        "torch": {
            "SGD_11": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adagrad_13": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adadelta_15": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_17": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "classifier/onmt/Translator_cnn.py": {
        "torch": {
            "load_15": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_51": {
                "variable": {
                    "value": "inp_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "srcBatch[0] % self.src_dict.size()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ge_62": {
                "variable": {
                    "value": "pred_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.cuda.FloatTensor(outputs.size(0), outputs.size(1)).fill_(0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ge_64": {
                "variable": {
                    "value": "pred_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.FloatTensor(outputs.size(0), outputs.size(1)).fill_(0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "classifier/preprocess.py": {
        "torch": {
            "manual_seed_48": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_144": {
                "variable": {
                    "value": "(_, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(sizes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_138": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(src)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_179": {
                "obj": {
                    "value": "save_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'dicts': dicts, 'train': train, 'valid': valid}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "opt.save_data + '.train.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "style_decoder/nmt_train.py": {
        "torch": {
            "ones_121": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "vocabSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocabSize",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "NLLLoss_123": {
                "variable": {
                    "value": "crit",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(vocabSize)",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "split_135": {
                "variable": {
                    "value": "outputs_split",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(outputs.data, requires_grad=not eval, volatile=eval)",
                            "Call"
                        ],
                        [
                            "model(batch)",
                            "Call"
                        ],
                        [
                            "model(batch)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "opt.max_generator_batches",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_136": {
                "variable": {
                    "value": "targets_split",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[1][1:]",
                            "Subscript"
                        ],
                        [
                            "batch[1][1:]",
                            "Subscript"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "opt.max_generator_batches",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_270": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_296": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(opt.rnn_size, dicts['tgt'].size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_118": {
                "device": {
                    "value": "opt.gpus[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_187": {
                "variable": {
                    "value": "batchOrder",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(trainData)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_275": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "dict_checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.train_from if opt.train_from else opt.train_from_state_dict",
                            "IfExp"
                        ]
                    ]
                }
            },
            "DataParallel_325": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "onmt.Models.NMTModel(encoder, decoder)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=opt.gpus, dim=1)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "opt.gpus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_326": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Sequential(nn.Linear(opt.rnn_size, dicts['tgt'].size()), nn.LogSoftmax())",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator, device_ids=opt.gpus, dim=0)",
                            "Call"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "opt.gpus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_263": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'encoder': model.encoder.state_dict(), 'decoder': model.decoder.state_dict(), 'generator': generator_state_dict, 'dicts': dataset['dicts'], 'opt': opt, 'epoch': epoch, 'optim': optim}",
                            "Dict"
                        ],
                        [
                            "torch.load(dict_checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'%s_acc_%.2f_ppl_%.2f_e%d.pt' % (opt.save_model, 100 * valid_acc, valid_ppl, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_297": {
                "in_features": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dicts['tgt'].size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LogSoftmax_298": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "style_decoder/onmt/Beam.py": {
        "torch": {
            "sort_86": {
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_111": {
                "tensors": {
                    "value": "attn[::-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "style_decoder/onmt/CNNModels.py": {
        "torch": {
            "Embedding_20": {
                "variable": {
                    "value": "self.word_lut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "opt.word_vec_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "onmt.Constants.PAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.word_vec_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(opt.filter_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool3d_29": {
                "variable": {
                    "value": "self.maxpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, pooling_window_size, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_30": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "opt.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt.num_classes - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sigmoid_33": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_44": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.view(-1, input.size(2))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.word_lut.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_38": {
                "variable": {
                    "value": "pretrained",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.pre_word_vecs_enc",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "style_decoder/onmt/Dataset.py": {
        "torch": {
            "stack_65": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(b, 0).t().contiguous()",
                            "Call"
                        ],
                        [
                            "b.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(b, volatile=self.volatile)",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_65": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_79": {
                "n": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "style_decoder/onmt/Dict.py": {
        "torch": {
            "Tensor_94": {
                "variable": {
                    "value": "freq",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sort_96": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "freq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([self.frequencies[i] for i in range(len(self.frequencies))])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "style_decoder/onmt/Models.py": {
        "torch": {
            "Embedding_18": {
                "variable": {
                    "value": "self.word_lut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "dicts.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "opt.word_vec_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "onmt.Constants.PAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_21": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "opt.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "opt.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "opt.brnn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_45": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_47": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_64": {
                "variable": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(h_1)",
                            "Call"
                        ],
                        [
                            "h_1 + [h_1_i]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_65": {
                "variable": {
                    "value": "c_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "c_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(c_1)",
                            "Call"
                        ],
                        [
                            "c_1 + [c_1_i]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Embedding_80": {
                "variable": {
                    "value": "self.word_lut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "dicts.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "opt.word_vec_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "onmt.Constants.PAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_85": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "opt.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_112": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rnn(emb, hidden)",
                            "Call"
                        ],
                        [
                            "unpack(outputs)[0]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + [output]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_28": {
                "variable": {
                    "value": "pretrained",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.pre_word_vecs_enc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_91": {
                "variable": {
                    "value": "pretrained",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.pre_word_vecs_dec",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "emb_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[emb_t, output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMCell_50": {
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.word_vec_size",
                            "Attribute"
                        ],
                        [
                            "rnn_size",
                            "variable"
                        ],
                        [
                            "opt.word_vec_size",
                            "Attribute"
                        ],
                        [
                            "input_size + opt.rnn_size",
                            "BinOp"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "rnn_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_size",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "style_decoder/onmt/Models_decoder.py": {
        "torch": {
            "Dropout_12": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_14": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_33": {
                "variable": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(h_1)",
                            "Call"
                        ],
                        [
                            "h_1 + [h_1_i]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_34": {
                "variable": {
                    "value": "c_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "c_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(c_1)",
                            "Call"
                        ],
                        [
                            "c_1 + [c_1_i]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Embedding_49": {
                "variable": {
                    "value": "self.word_lut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "dicts.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "opt.word_vec_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "onmt.Constants.PAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_54": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "opt.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_82": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + [output]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_61": {
                "variable": {
                    "value": "pretrained",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.pre_word_vecs_dec",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "emb_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[emb_t, output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMCell_17": {
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_size",
                            "variable"
                        ],
                        [
                            "opt.word_vec_size",
                            "Attribute"
                        ],
                        [
                            "input_size + opt.rnn_size",
                            "BinOp"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "rnn_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_size",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "style_decoder/onmt/Optim.py": {
        "torch": {
            "SGD_11": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adagrad_13": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adadelta_15": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_17": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "style_decoder/onmt/Translator.py": {
        "torch": {
            "load_12": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(model_opt.rnn_size, self.tgt_dict.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_122": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.getCurrentState() for b in beam if not b.done]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "t_122": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "model_opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.tgt_dict.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LogSoftmax_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "style_decoder/onmt/Translator_style.py": {
        "torch": {
            "load_12": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.decoder_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_13": {
                "variable": {
                    "value": "encoder_check",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.encoder_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(enc_opt.rnn_size, self.tgt_dict.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_125": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.getCurrentState() for b in beam if not b.done]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "t_125": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "enc_opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.tgt_dict.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LogSoftmax_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "style_decoder/onmt/modules/GlobalAttention.py": {
        "torch": {
            "Linear_30": {
                "variable": {
                    "value": "self.linear_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_31": {
                "variable": {
                    "value": "self.sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_33": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_47": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "targetT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_in(input).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_47": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_54": {
                "variable": {
                    "value": "weightedContext",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn.view(attn.size(0), 1, attn.size(1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_54": {
                "variable": {
                    "value": "weightedContext",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "contextCombined",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(weightedContext, input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "style_decoder/preprocess.py": {
        "torch": {
            "manual_seed_50": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_156": {
                "variable": {
                    "value": "(_, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(sizes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_150": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(src)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_197": {
                "obj": {
                    "value": "save_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'dicts': dicts, 'train': train, 'valid': valid}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "opt.save_data + '.train.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "style_decoder/train_decoder.py": {
        "torch": {
            "ones_139": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "vocabSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocabSize",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "NLLLoss_141": {
                "variable": {
                    "value": "crit",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(vocabSize)",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BCELoss_147": {
                "variable": {
                    "value": "crit",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_156": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_323": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_345": {
                "variable": {
                    "value": "enc_check",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.encoder_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_352": {
                "variable": {
                    "value": "class_check",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.classifier_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Sequential_362": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(opt.rnn_size, dicts['tgt'].size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_366": {
                "variable": {
                    "value": "class_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(opt.rnn_size, class_dict.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_136": {
                "device": {
                    "value": "opt.gpus[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "soft_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(soft_out, curr_zeros)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_234": {
                "variable": {
                    "value": "batchOrder",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(trainData)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_328": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "dict_checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.train_from if opt.train_from else opt.train_from_state_dict",
                            "IfExp"
                        ]
                    ]
                }
            },
            "DataParallel_400": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "onmt.Models.Encoder(m_opt, src_dict)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(encoder, device_ids=opt.gpus, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "opt.gpus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_401": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "onmt.Models_decoder.DecoderModel(decoder)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=opt.gpus, dim=1)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "opt.gpus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_402": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Sequential(nn.Linear(opt.rnn_size, dicts['tgt'].size()), nn.LogSoftmax())",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator, device_ids=opt.gpus, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "opt.gpus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_403": {
                "variable": {
                    "value": "class_input",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "class_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Sequential(nn.Linear(opt.rnn_size, class_dict.size()))",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(class_input, device_ids=opt.gpus, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "opt.gpus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_313": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'decoder': model.decoder.state_dict(), 'generator': generator_state_dict, 'dicts': dataset['dicts'], 'opt': opt, 'epoch': epoch, 'optim': optim}",
                            "Dict"
                        ],
                        [
                            "torch.load(dict_checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'%s_acc_%.2f_ppl_%.2f_e%d.pt' % (opt.save_model, 100 * valid_acc, valid_ppl, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_363": {
                "in_features": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dicts['tgt'].size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LogSoftmax_364": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_367": {
                "in_features": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_dict.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "style_decoder/translate.py": {
        "torch": {
            "set_device_63": {
                "device": {
                    "value": "opt.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}