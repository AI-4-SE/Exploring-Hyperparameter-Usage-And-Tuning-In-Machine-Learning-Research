{
    "src/ops/bin/__init__.py": {
        "tensorflow": {
            "load_op_library_10": {
                "variable": {
                    "value": "clustering_op",
                    "type": "variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "os.path.join(module_dir, 'clustering_op.so')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_op_library_11": {
                "variable": {
                    "value": "clustering_raw_op",
                    "type": "variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "os.path.join(module_dir, 'clustering_raw_op.so')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_op_library_12": {
                "variable": {
                    "value": "combinatorial_op",
                    "type": "variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "os.path.join(module_dir, 'combinatorial_op.so')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_op_library_13": {
                "variable": {
                    "value": "knn_dataset_op",
                    "type": "variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "os.path.join(module_dir, 'knn_dataset_op.so')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_op_library_14": {
                "variable": {
                    "value": "rec_dataset_op",
                    "type": "variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "os.path.join(module_dir, 'rec_dataset_op.so')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_op_library_15": {
                "variable": {
                    "value": "search_op",
                    "type": "variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "os.path.join(module_dir, 'search_op.so')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_op_library_16": {
                "variable": {
                    "value": "tokenizer_op",
                    "type": "variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "os.path.join(module_dir, 'tokenizer_op.so')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/ops/python/clustering.py": {
        "tensorflow": {}
    },
    "src/ops/python/combinatorics.py": {
        "tensorflow": {
            "Session_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_17": {
                "main": {
                    "value": "bipartite_match([[1, 2], [3, 4]])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/ops/python/encode.py": {
        "tensorflow": {
            "reshape_21": {
                "variable": {
                    "value": "reshaped_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n_item, D, dd]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_22": {
                "variable": {
                    "value": "norm_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "reshaped_data ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_23": {
                "variable": {
                    "value": "norm_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_sum(codebook ** 2, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_24": {
                "variable": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(reshaped_data, perm=[1, 0, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(codebook, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_27": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_1 - 2 * tf.transpose(dot, perm=[1, 0, 2]) + norm_2",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(distance, [-1, D, K])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, D, K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmin_28": {
                "variable": {
                    "value": "code",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_1 - 2 * tf.transpose(dot, perm=[1, 0, 2]) + norm_2",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(distance, [-1, D, K])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "control_dependencies_20": {
                "control_inputs": {
                    "value": "[tf.assert_equal(dd * D, d, message='inputs and codebook must have consistent dimensions')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_18": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_19": {
                "input": {
                    "value": "codebook",
                    "type": "variable",
                    "possible_values": [
                        [
                            "codebook",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_23": {
                "input_tensor": {
                    "value": "codebook ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_24": {
                "a": {
                    "value": "reshaped_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(data, [n_item, D, dd])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_25": {
                "a": {
                    "value": "codebook",
                    "type": "variable",
                    "possible_values": [
                        [
                            "codebook",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assert_equal_20": {
                "x": {
                    "value": "dd * D",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(data)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "message": {
                    "value": "inputs and codebook must have consistent dimensions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_26": {
                "a": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.transpose(reshaped_data, perm=[1, 0, 2]), tf.transpose(codebook, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/ops/python/indexing.py": {
        "tensorflow": {
            "placeholder_73": {
                "variable": {
                    "value": "item_code_plh",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint16",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "item_code_plh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "codebook_plh",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "codebook_plh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/ops/python/knn_dataset.py": {
        "tensorflow": {
            "convert_to_tensor_27": {
                "variable": {
                    "value": "self._batch_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "batch_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtypes.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_file",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_31": {
                "variable": {
                    "value": "self._item_feature_dict_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "item_feature_dict_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtypes.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "item_feature_dict_file",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TensorShape_56": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/ops/python/rec_dataset.py": {
        "tensorflow": {
            "convert_to_tensor_19": {
                "variable": {
                    "value": "self.train_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "train_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtypes.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "train_file",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_23": {
                "variable": {
                    "value": "self.user_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "user_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtypes.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "user_file",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_27": {
                "variable": {
                    "value": "self.item_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "item_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtypes.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "item_file",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_31": {
                "variable": {
                    "value": "self.user_column_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "user_column_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "user_column_index",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_35": {
                "variable": {
                    "value": "self.item_column_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "item_column_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "item_column_index",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_39": {
                "variable": {
                    "value": "self.neg_item_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "neg_item_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "neg_item_count",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TensorShape_65": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/ops/python/search.py": {
        "tensorflow": {
            "name_scope_11": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_32": {
                "variable": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._filename",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "asset_filepath",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_36": {
                "name": {
                    "value": "tf.GraphKeys.TABLE_INITIALIZERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "search_op.initialize_index_from_file(index.resource_handle, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_37": {
                "name": {
                    "value": "tf.GraphKeys.ASSET_FILEPATHS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(self._filename, tf.string, name='asset_filepath')",
                            "Call"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_12": {
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "name_scope_31": {
                "name": {
                    "value": "self._name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "init_scope_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/ops/python/tokenizer.py": {
        "tensorflow": {
            "SparseTensor_13": {
                "indices": {
                    "value": "*tokenizer_op.unigrams_and_en_trigram_parser(query)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "SparseTensor_23": {
                "indices": {
                    "value": "*tokenizer_op.bigrams_and_en_trigram_parser(query)",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "src/ops/test/test_clustering_raw_op.py": {
        "tensorflow": {
            "main_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_25": {
                "value": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([points1, points2, points3, points4, points5], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_28": {
                "x": {
                    "value": "assignments[num_points * 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "assignments[num_points * 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_30": {
                "x": {
                    "value": "assignments[num_points * 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "assignments[num_points * 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_32": {
                "x": {
                    "value": "assignments[num_points * 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "assignments[num_points * 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_34": {
                "x": {
                    "value": "assignments[num_points * 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "assignments[num_points * 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_36": {
                "x": {
                    "value": "assignments[num_points * 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "assignments[num_points * 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_38": {
                "x": {
                    "value": "assignments[num_points * 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "assignments[num_points * 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_40": {
                "x": {
                    "value": "assignments[num_points * 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "assignments[num_points * 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_42": {
                "x": {
                    "value": "assignments[num_points * 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "assignments[num_points * 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_44": {
                "x": {
                    "value": "assignments[num_points * 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "assignments[num_points * 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_46": {
                "x": {
                    "value": "assignments[num_points * 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "assignments[num_points * 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/ops/test/test_encode_op.py": {
        "tensorflow": {
            "main_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_12": {
                "variable": {
                    "value": "item_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.1, 0.4, -0.51, -0.9], [0.2, 0.4, -0.2, -0.2], [0.1, 0.7, -0.4, -0.8], [0.6, 0.4, -0.8, -0.3], [0.9, 0.6, -0.2, -0.3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_18": {
                "variable": {
                    "value": "codebook",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.0, 0.0], [0.0, 1.0], [1.0, 0.0], [1.0, 1.0]], [[0.0, 0.0], [0.0, -1.0], [-1.0, 0.0], [-1.0, -1.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/ops/test/test_indexing.py": {
        "tensorflow": {
            "main_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/ops/test/test_knn_dataset_op.py": {
        "tensorflow": {
            "main_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/ops/test/test_rec_dataset.py": {
        "tensorflow": {
            "main_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/ops/test/test_search_op.py": {
        "tensorflow": {
            "placeholder_9": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 2, 512)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "query",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tables_initializer_14": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/ops/test/test_tokenizer_op.py": {
        "tensorflow": {
            "placeholder_8": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "query",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_23": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "query",
                    "type": "str",
                    "possible_values": []
                }
            },
            "main_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/python/embedding.py": {
        "tensorflow": {
            "matmul_34": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [n_batch, self._D, self._sub_d])",
                            "Call"
                        ],
                        [
                            "x - coarse_output",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "tf.matmul(self._sample_buffer, R)",
                            "Call"
                        ],
                        [
                            "tf.matmul(data, R)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "x_tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coarse_output + output",
                            "BinOp"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "self.quantize(x, self._coarse_centroids, self._centroids)",
                            "Call"
                        ],
                        [
                            "self.quantize(x, self._coarse_centroids, self._centroids)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x_tau, tf.transpose(rotation_matrix, [1, 0]))",
                            "Call"
                        ],
                        [
                            "self.quantize(x, coarse_centroids, centroids)",
                            "Call"
                        ],
                        [
                            "tf.Print(x_tau, [i, distortion], message='distortion = ')",
                            "Call"
                        ],
                        [
                            "pq_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.less_equal(step, self._warmup_steps), true_fn=lambda : forward_layer(x), false_fn=lambda : pq_layer(x))",
                            "Call"
                        ],
                        [
                            "tf.identity(x_tau)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "self._quantizer.forward(x, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "x_tau",
                            "Method Argument"
                        ],
                        [
                            "x_tau",
                            "Method Argument"
                        ],
                        [
                            "x_tau",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "svd_35": {
                "variable": {
                    "value": "(s, u, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, x_tau, transpose_a=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_36": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.svd(M)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.svd(M)",
                            "Call"
                        ],
                        [
                            "tf.unique_with_counts(code)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_10": {
                "input_tensor": {
                    "value": "tf.square(x - x_tau)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_60": {
                "variable": {
                    "value": "self._sample_buffer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sample_buffer",
                    "type": "str",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([0, self._d])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self._d]",
                    "type": "List",
                    "possible_values": []
                },
                "use_resource": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_66": {
                "variable": {
                    "value": "self._sample_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sample_size",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "use_resource": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_73": {
                "variable": {
                    "value": "self._initialized",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "initialized",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "use_resource": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_83": {
                "variable": {
                    "value": "self._centroids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "centroids_k",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._D, self._K, self._sub_d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_94": {
                "variable": {
                    "value": "norm_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_sum(x ** 2, axis=-1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self._coarse_K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_97": {
                "variable": {
                    "value": "norm_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.transpose(tf.reduce_sum(coarse_centroids ** 2, axis=-1, keep_dims=True), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_batch, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_103": {
                "variable": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [n_batch, self._D, self._sub_d])",
                            "Call"
                        ],
                        [
                            "x - coarse_output",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "tf.matmul(self._sample_buffer, R)",
                            "Call"
                        ],
                        [
                            "tf.matmul(data, R)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "coarse_centroids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "clustering.kmeans_raw(x, self._coarse_K, max_iter=max_iter, change_percentage_thr=change_pct_thr, verbose=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(coarse_centroids, [self._coarse_K, self._d])",
                            "Call"
                        ],
                        [
                            "self.compute_centroids(x, max_iter=max_iter or 100, change_pct_thr=change_pct_thr)",
                            "Call"
                        ],
                        [
                            "self.compute_centroids(self._sample_buffer, max_iter=max_iter or 100, change_pct_thr=change_pct_thr)",
                            "Call"
                        ],
                        [
                            "self.compute_centroids(x, max_iter=max_iter or 10, change_pct_thr=change_pct_thr)",
                            "Call"
                        ],
                        [
                            "coarse_centroids",
                            "Method Argument"
                        ],
                        [
                            "coarse_centroids",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [n_batch, self._D, self._sub_d])",
                            "Call"
                        ],
                        [
                            "x - coarse_output",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "tf.matmul(self._sample_buffer, R)",
                            "Call"
                        ],
                        [
                            "tf.matmul(data, R)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n_batch, self._D, self._sub_d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_113": {
                "variable": {
                    "value": "norm_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_114": {
                "variable": {
                    "value": "norm_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_sum(centroids ** 2, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_115": {
                "variable": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(x, perm=[1, 0, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(centroids, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmin_136": {
                "variable": {
                    "value": "code",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l2_sqr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_1 + norm_2 - 2 * dot",
                            "BinOp"
                        ],
                        [
                            "norm_1 + norm_2 - 2 * tf.transpose(dot, perm=[1, 0, 2])",
                            "BinOp"
                        ],
                        [
                            "self.pq_l2_distance(x, centroids)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_140": {
                "variable": {
                    "value": "D_base",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[self._K * d for d in range(self._D)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_143": {
                "variable": {
                    "value": "neighbor_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "neighbor_idxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "code",
                            "variable"
                        ],
                        [
                            "neighbor_idxs + tf.expand_dims(D_base, 0)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(neighbor_idxs, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_144": {
                "variable": {
                    "value": "centroids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "centroids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(centroids, [-1, self._sub_d])",
                            "Call"
                        ],
                        [
                            "tf.stack(centroids_list, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(centroids, [self._D, self._K, self._sub_d])",
                            "Call"
                        ],
                        [
                            "self.compute_centroids(x, max_iter=max_iter or 100, change_pct_thr=change_pct_thr)",
                            "Call"
                        ],
                        [
                            "self.compute_centroids(self._sample_buffer, max_iter=max_iter or 100, change_pct_thr=change_pct_thr)",
                            "Call"
                        ],
                        [
                            "self.compute_centroids(x, max_iter=max_iter or 10, change_pct_thr=change_pct_thr)",
                            "Call"
                        ],
                        [
                            "centroids",
                            "Method Argument"
                        ],
                        [
                            "centroids",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self._sub_d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_145": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "centroids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(centroids, [-1, self._sub_d])",
                            "Call"
                        ],
                        [
                            "tf.stack(centroids_list, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(centroids, [self._D, self._K, self._sub_d])",
                            "Call"
                        ],
                        [
                            "self.compute_centroids(x, max_iter=max_iter or 100, change_pct_thr=change_pct_thr)",
                            "Call"
                        ],
                        [
                            "self.compute_centroids(self._sample_buffer, max_iter=max_iter or 100, change_pct_thr=change_pct_thr)",
                            "Call"
                        ],
                        [
                            "self.compute_centroids(x, max_iter=max_iter or 10, change_pct_thr=change_pct_thr)",
                            "Call"
                        ],
                        [
                            "centroids",
                            "Method Argument"
                        ],
                        [
                            "centroids",
                            "Method Argument"
                        ]
                    ]
                },
                "ids": {
                    "value": "neighbor_idxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "code",
                            "variable"
                        ],
                        [
                            "neighbor_idxs + tf.expand_dims(D_base, 0)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(neighbor_idxs, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_146": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(centroids, neighbor_idxs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [n_batch, self._d])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n_batch, self._d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_169": {
                "variable": {
                    "value": "centroids",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "centroids_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_170": {
                "variable": {
                    "value": "centroids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "centroids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(centroids, [-1, self._sub_d])",
                            "Call"
                        ],
                        [
                            "tf.stack(centroids_list, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(centroids, [self._D, self._K, self._sub_d])",
                            "Call"
                        ],
                        [
                            "self.compute_centroids(x, max_iter=max_iter or 100, change_pct_thr=change_pct_thr)",
                            "Call"
                        ],
                        [
                            "self.compute_centroids(self._sample_buffer, max_iter=max_iter or 100, change_pct_thr=change_pct_thr)",
                            "Call"
                        ],
                        [
                            "self.compute_centroids(x, max_iter=max_iter or 10, change_pct_thr=change_pct_thr)",
                            "Call"
                        ],
                        [
                            "centroids",
                            "Method Argument"
                        ],
                        [
                            "centroids",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self._D, self._K, self._sub_d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "minimum_190": {
                "variable": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(x)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self._buffer_size - self._sample_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "slice_193": {
                "variable": {
                    "value": "x_sub",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [n_batch, self._D, self._sub_d])",
                            "Call"
                        ],
                        [
                            "x - coarse_output",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "tf.matmul(self._sample_buffer, R)",
                            "Call"
                        ],
                        [
                            "tf.matmul(data, R)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_244": {
                "variable": {
                    "value": "buffer_assign",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self._sample_buffer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.zeros([0, self._d])",
                    "type": "Call",
                    "possible_values": []
                },
                "validate_shape": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_10": {
                "x": {
                    "value": "tf.reduce_mean(tf.square(x - x_tau), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmin_128": {
                "variable": {
                    "value": "coarse_code",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coarse_l2_sqr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.coarse_l2_distance(x, coarse_centroids)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "embedding_lookup_129": {
                "variable": {
                    "value": "coarse_output",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "coarse_centroids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "clustering.kmeans_raw(x, self._coarse_K, max_iter=max_iter, change_percentage_thr=change_pct_thr, verbose=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(coarse_centroids, [self._coarse_K, self._d])",
                            "Call"
                        ],
                        [
                            "self.compute_centroids(x, max_iter=max_iter or 100, change_pct_thr=change_pct_thr)",
                            "Call"
                        ],
                        [
                            "self.compute_centroids(self._sample_buffer, max_iter=max_iter or 100, change_pct_thr=change_pct_thr)",
                            "Call"
                        ],
                        [
                            "self.compute_centroids(x, max_iter=max_iter or 10, change_pct_thr=change_pct_thr)",
                            "Call"
                        ],
                        [
                            "coarse_centroids",
                            "Method Argument"
                        ],
                        [
                            "coarse_centroids",
                            "Method Argument"
                        ]
                    ]
                },
                "ids": {
                    "value": "coarse_code",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.argmin(coarse_l2_sqr, -1)",
                            "Call"
                        ],
                        [
                            "self.quantize(x, self._coarse_centroids, self._centroids)",
                            "Call"
                        ],
                        [
                            "self.quantize(x, self._coarse_centroids, self._centroids)",
                            "Call"
                        ],
                        [
                            "self.quantize(x, coarse_centroids, centroids)",
                            "Call"
                        ],
                        [
                            "pq_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.less_equal(step, self._warmup_steps), true_fn=lambda : forward_layer(x), false_fn=lambda : pq_layer(x))",
                            "Call"
                        ],
                        [
                            "tf.zeros([n_batch], dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "self._quantizer.forward(x, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "tf.zeros([tf.shape(x)[0]], dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "coarse_code",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_142": {
                "input": {
                    "value": "D_base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([self._K * d for d in range(self._D)], dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_161": {
                "variable": {
                    "value": "coarse_centroids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "coarse_centroids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "clustering.kmeans_raw(x, self._coarse_K, max_iter=max_iter, change_percentage_thr=change_pct_thr, verbose=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(coarse_centroids, [self._coarse_K, self._d])",
                            "Call"
                        ],
                        [
                            "self.compute_centroids(x, max_iter=max_iter or 100, change_pct_thr=change_pct_thr)",
                            "Call"
                        ],
                        [
                            "self.compute_centroids(self._sample_buffer, max_iter=max_iter or 100, change_pct_thr=change_pct_thr)",
                            "Call"
                        ],
                        [
                            "self.compute_centroids(x, max_iter=max_iter or 10, change_pct_thr=change_pct_thr)",
                            "Call"
                        ],
                        [
                            "coarse_centroids",
                            "Method Argument"
                        ],
                        [
                            "coarse_centroids",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self._coarse_K, self._d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_219": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_220": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "num_rows": {
                    "value": "self._d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_221": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self._sample_buffer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._buffer_size, self._d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "while_loop_222": {
                "variable": {
                    "value": "(_, R, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "condition",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "loop_body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loop_body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[i, R, data]",
                    "type": "List",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "[tf.TensorShape([]), tf.TensorShape([self._d, self._d]), tf.TensorShape([self._buffer_size, self._d])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_230": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self._sample_buffer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(u, v, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.eye(self._d)",
                            "Call"
                        ],
                        [
                            "tf.while_loop(condition, loop_body, [i, R, data], shape_invariants=[tf.TensorShape([]), tf.TensorShape([self._d, self._d]), tf.TensorShape([self._buffer_size, self._d])])",
                            "Call"
                        ],
                        [
                            "compute_rotation(data, x_tau)",
                            "Call"
                        ],
                        [
                            "R",
                            "Method Argument"
                        ],
                        [
                            "R",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_316": {
                "variable": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.train.get_global_step()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_327": {
                "variable": {
                    "value": "x_tau",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coarse_output + output",
                            "BinOp"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "self.quantize(x, self._coarse_centroids, self._centroids)",
                            "Call"
                        ],
                        [
                            "self.quantize(x, self._coarse_centroids, self._centroids)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x_tau, tf.transpose(rotation_matrix, [1, 0]))",
                            "Call"
                        ],
                        [
                            "self.quantize(x, coarse_centroids, centroids)",
                            "Call"
                        ],
                        [
                            "tf.Print(x_tau, [i, distortion], message='distortion = ')",
                            "Call"
                        ],
                        [
                            "pq_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.less_equal(step, self._warmup_steps), true_fn=lambda : forward_layer(x), false_fn=lambda : pq_layer(x))",
                            "Call"
                        ],
                        [
                            "tf.identity(x_tau)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "self._quantizer.forward(x, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "x_tau",
                            "Method Argument"
                        ],
                        [
                            "x_tau",
                            "Method Argument"
                        ],
                        [
                            "x_tau",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_332": {
                "name": {
                    "value": "distortion",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "distortion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_distortion(x, x_tau)",
                            "Call"
                        ],
                        [
                            "compute_distortion(x, x_tau)",
                            "Call"
                        ]
                    ]
                }
            },
            "unique_with_counts_335": {
                "variable": {
                    "value": "(v, idx, counts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "code",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmin(l2_sqr, -1)",
                            "Call"
                        ],
                        [
                            "self.quantize(x, self._coarse_centroids, self._centroids)",
                            "Call"
                        ],
                        [
                            "self.quantize(x, self._coarse_centroids, self._centroids)",
                            "Call"
                        ],
                        [
                            "self.quantize(x, coarse_centroids, centroids)",
                            "Call"
                        ],
                        [
                            "pq_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.less_equal(step, self._warmup_steps), true_fn=lambda : forward_layer(x), false_fn=lambda : pq_layer(x))",
                            "Call"
                        ],
                        [
                            "tf.zeros([n_batch, self._D], dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "self._quantizer.forward(x, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "code",
                            "Method Argument"
                        ],
                        [
                            "code",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_340": {
                "variable": {
                    "value": "tally_var",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([dim], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_cumulative_count'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_float_343": {
                "variable": {
                    "value": "tally_var",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tally_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([dim], dtype=tf.int64), name=name + '_cumulative_count', dtype=tf.int64, trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tally_var)",
                            "Call"
                        ]
                    ]
                }
            },
            "KLDivergence_345": {
                "variable": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_80": {
                "name": {
                    "value": "coarse_centroids",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._coarse_K, self._d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_86": {
                "name": {
                    "value": "rotation_matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._d, self._d]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.keras.initializers.Identity()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_93": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [n_batch, self._D, self._sub_d])",
                            "Call"
                        ],
                        [
                            "x - coarse_output",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "tf.matmul(self._sample_buffer, R)",
                            "Call"
                        ],
                        [
                            "tf.matmul(data, R)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_95": {
                "input_tensor": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_98": {
                "a": {
                    "value": "tf.reduce_sum(coarse_centroids ** 2, axis=-1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_111": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [n_batch, self._D, self._sub_d])",
                            "Call"
                        ],
                        [
                            "x - coarse_output",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "tf.matmul(self._sample_buffer, R)",
                            "Call"
                        ],
                        [
                            "tf.matmul(data, R)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_114": {
                "input_tensor": {
                    "value": "centroids ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_115": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [n_batch, self._D, self._sub_d])",
                            "Call"
                        ],
                        [
                            "x - coarse_output",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "tf.matmul(self._sample_buffer, R)",
                            "Call"
                        ],
                        [
                            "tf.matmul(data, R)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_116": {
                "a": {
                    "value": "centroids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(centroids, [-1, self._sub_d])",
                            "Call"
                        ],
                        [
                            "tf.stack(centroids_list, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(centroids, [self._D, self._K, self._sub_d])",
                            "Call"
                        ],
                        [
                            "self.compute_centroids(x, max_iter=max_iter or 100, change_pct_thr=change_pct_thr)",
                            "Call"
                        ],
                        [
                            "self.compute_centroids(self._sample_buffer, max_iter=max_iter or 100, change_pct_thr=change_pct_thr)",
                            "Call"
                        ],
                        [
                            "self.compute_centroids(x, max_iter=max_iter or 10, change_pct_thr=change_pct_thr)",
                            "Call"
                        ],
                        [
                            "centroids",
                            "Method Argument"
                        ],
                        [
                            "centroids",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_122": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [n_batch, self._D, self._sub_d])",
                            "Call"
                        ],
                        [
                            "x - coarse_output",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "tf.matmul(self._sample_buffer, R)",
                            "Call"
                        ],
                        [
                            "tf.matmul(data, R)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_175": {
                "name": {
                    "value": "Poeem_forward",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_178": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [n_batch, self._D, self._sub_d])",
                            "Call"
                        ],
                        [
                            "x - coarse_output",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "tf.matmul(self._sample_buffer, R)",
                            "Call"
                        ],
                        [
                            "tf.matmul(data, R)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._quantizer._rotation_matrix",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(rotation_matrix)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_181": {
                "variable": {
                    "value": "x_tau",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coarse_output + output",
                            "BinOp"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "self.quantize(x, self._coarse_centroids, self._centroids)",
                            "Call"
                        ],
                        [
                            "self.quantize(x, self._coarse_centroids, self._centroids)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x_tau, tf.transpose(rotation_matrix, [1, 0]))",
                            "Call"
                        ],
                        [
                            "self.quantize(x, coarse_centroids, centroids)",
                            "Call"
                        ],
                        [
                            "tf.Print(x_tau, [i, distortion], message='distortion = ')",
                            "Call"
                        ],
                        [
                            "pq_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.less_equal(step, self._warmup_steps), true_fn=lambda : forward_layer(x), false_fn=lambda : pq_layer(x))",
                            "Call"
                        ],
                        [
                            "tf.identity(x_tau)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "self._quantizer.forward(x, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "x_tau",
                            "Method Argument"
                        ],
                        [
                            "x_tau",
                            "Method Argument"
                        ],
                        [
                            "x_tau",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(rotation_matrix, [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_196": {
                "values": {
                    "value": "[self._sample_buffer, x_sub]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_205": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self._sample_buffer, [self._buffer_size, self._d])",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(u, v, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.eye(self._d)",
                            "Call"
                        ],
                        [
                            "tf.while_loop(condition, loop_body, [i, R, data], shape_invariants=[tf.TensorShape([]), tf.TensorShape([self._d, self._d]), tf.TensorShape([self._buffer_size, self._d])])",
                            "Call"
                        ],
                        [
                            "compute_rotation(data, x_tau)",
                            "Call"
                        ],
                        [
                            "R",
                            "Method Argument"
                        ],
                        [
                            "R",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Print_210": {
                "variable": {
                    "value": "x_tau",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "x_tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coarse_output + output",
                            "BinOp"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "self.quantize(x, self._coarse_centroids, self._centroids)",
                            "Call"
                        ],
                        [
                            "self.quantize(x, self._coarse_centroids, self._centroids)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x_tau, tf.transpose(rotation_matrix, [1, 0]))",
                            "Call"
                        ],
                        [
                            "self.quantize(x, coarse_centroids, centroids)",
                            "Call"
                        ],
                        [
                            "tf.Print(x_tau, [i, distortion], message='distortion = ')",
                            "Call"
                        ],
                        [
                            "pq_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.less_equal(step, self._warmup_steps), true_fn=lambda : forward_layer(x), false_fn=lambda : pq_layer(x))",
                            "Call"
                        ],
                        [
                            "tf.identity(x_tau)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "self._quantizer.forward(x, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "x_tau",
                            "Method Argument"
                        ],
                        [
                            "x_tau",
                            "Method Argument"
                        ],
                        [
                            "x_tau",
                            "Method Argument"
                        ]
                    ]
                },
                "data": {
                    "value": "[i, distortion]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "distortion = ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_212": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(self._D)",
                            "Call"
                        ],
                        [
                            "tf.constant(0)",
                            "Call"
                        ],
                        [
                            "tf.add(i, 1)",
                            "Call"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_244": {
                "shape": {
                    "value": "[0, self._d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_297": {
                "variable": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(x_tau - tf.stop_gradient(x)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cond_304": {
                "pred": {
                    "value": "tf.less(self._quantizer._sample_size, self._quantizer._buffer_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : accumulate_layer(x)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.cond(tf.equal(self._quantizer._initialized, 0), lambda : init_layer(x), lambda : internal_pq_layer(x))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_318": {
                "variable": {
                    "value": "(x_tau, coarse_code, code, regularizer)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.less_equal(step, self._warmup_steps)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : forward_layer(x)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : pq_layer(x)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "control_dependencies_326": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.metrics(x, x_tau, coarse_code, code)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "scalar_336": {
                "name": {
                    "value": "'code_distribution/unique_%s_count' % name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.shape(v)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_338": {
                "name": {
                    "value": "'code_distribution/%s_histogram' % name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "code",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmin(l2_sqr, -1)",
                            "Call"
                        ],
                        [
                            "self.quantize(x, self._coarse_centroids, self._centroids)",
                            "Call"
                        ],
                        [
                            "self.quantize(x, self._coarse_centroids, self._centroids)",
                            "Call"
                        ],
                        [
                            "self.quantize(x, coarse_centroids, centroids)",
                            "Call"
                        ],
                        [
                            "pq_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.less_equal(step, self._warmup_steps), true_fn=lambda : forward_layer(x), false_fn=lambda : pq_layer(x))",
                            "Call"
                        ],
                        [
                            "tf.zeros([n_batch, self._D], dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "self._quantizer.forward(x, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "code",
                            "Method Argument"
                        ],
                        [
                            "code",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_350": {
                "name": {
                    "value": "'code_distribution/%s_kld' % name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "kl(cum_frac, uniform)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_351": {
                "name": {
                    "value": "'code_distribution/%s_tvd' % name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tv(cum_frac, uniform)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_10": {
                "x": {
                    "value": "x - x_tau",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "shape": {
                    "value": "[0, self._d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_initializer_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_99": {
                "input_tensor": {
                    "value": "coarse_centroids ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_117": {
                "a": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, coarse_centroids, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.transpose(x, perm=[1, 0, 2]), tf.transpose(centroids, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_191": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [n_batch, self._D, self._sub_d])",
                            "Call"
                        ],
                        [
                            "x - coarse_output",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "tf.matmul(self._sample_buffer, R)",
                            "Call"
                        ],
                        [
                            "tf.matmul(data, R)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_216": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(self._D)",
                            "Call"
                        ],
                        [
                            "tf.constant(0)",
                            "Call"
                        ],
                        [
                            "tf.add(i, 1)",
                            "Call"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self._svd_steps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_264": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [n_batch, self._D, self._sub_d])",
                            "Call"
                        ],
                        [
                            "x - coarse_output",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "tf.matmul(self._sample_buffer, R)",
                            "Call"
                        ],
                        [
                            "tf.matmul(data, R)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_267": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [n_batch, self._D, self._sub_d])",
                            "Call"
                        ],
                        [
                            "x - coarse_output",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "tf.matmul(self._sample_buffer, R)",
                            "Call"
                        ],
                        [
                            "tf.matmul(data, R)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_268": {
                "shape": {
                    "value": "[n_batch]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_269": {
                "shape": {
                    "value": "[n_batch, self._D]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_295": {
                "variable": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._quantizer._rotation_matrix",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(rotation_matrix)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_299": {
                "variable": {
                    "value": "coarse_code",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(x)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_304": {
                "x": {
                    "value": "self._quantizer._sample_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self._quantizer._buffer_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_global_step_316": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_340": {
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scatter_add_342": {
                "ref": {
                    "value": "tally_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([dim], dtype=tf.int64), name=name + '_cumulative_count', dtype=tf.int64, trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tally_var)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.svd(M)",
                            "Call"
                        ],
                        [
                            "tf.unique_with_counts(code)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "tf.to_int64(counts)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_347": {
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Identity_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_181": {
                "a": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._quantizer._rotation_matrix",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(rotation_matrix)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_306": {
                "pred": {
                    "value": "tf.equal(self._quantizer._initialized, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : init_layer(x)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : internal_pq_layer(x)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "less_equal_319": {
                "x": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.train.get_global_step(), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self._warmup_steps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_337": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.svd(M)",
                            "Call"
                        ],
                        [
                            "tf.unique_with_counts(code)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int64_342": {
                "x": {
                    "value": "counts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unique_with_counts(code)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_344": {
                "input_tensor": {
                    "value": "tally_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([dim], dtype=tf.int64), name=name + '_cumulative_count', dtype=tf.int64, trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tally_var)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_349": {
                "input_tensor": {
                    "value": "tf.abs(dist1 - dist2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorShape_225": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_226": {
                "dims": {
                    "value": "[self._d, self._d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_227": {
                "dims": {
                    "value": "[self._buffer_size, self._d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_275": {
                "device_name": {
                    "value": "/device:CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_278": {
                "control_inputs": {
                    "value": "deps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._quantizer.accumulate(x)",
                            "Call"
                        ],
                        [
                            "self._quantizer.init_centroids(max_iter=self._hparams.kmeans_max_iter, change_pct_thr=self._hparams.kmeans_change_pct_thr)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_282": {
                "device_name": {
                    "value": "/device:CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_287": {
                "control_inputs": {
                    "value": "deps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._quantizer.accumulate(x)",
                            "Call"
                        ],
                        [
                            "self._quantizer.init_centroids(max_iter=self._hparams.kmeans_max_iter, change_pct_thr=self._hparams.kmeans_change_pct_thr)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_307": {
                "x": {
                    "value": "self._quantizer._initialized",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_349": {
                "x": {
                    "value": "dist1 - dist2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_289": {
                "control_inputs": {
                    "value": "clear_deps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._quantizer.clear_sample_buffer()",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_297": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [n_batch, self._D, self._sub_d])",
                            "Call"
                        ],
                        [
                            "x - coarse_output",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "tf.matmul(self._sample_buffer, R)",
                            "Call"
                        ],
                        [
                            "tf.matmul(data, R)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_299": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [n_batch, self._D, self._sub_d])",
                            "Call"
                        ],
                        [
                            "x - coarse_output",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "tf.matmul(self._sample_buffer, R)",
                            "Call"
                        ],
                        [
                            "tf.matmul(data, R)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}