{
    "distnet/keras_models/attention.py": {
        "tensorflow": {
            "matmul_79": {
                "variable": {
                    "value": "matmul_qk",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wq(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, (batch_size, -1, depth_dim))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wk(input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, (batch_size, -1, depth_dim))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_82": {
                "variable": {
                    "value": "dk",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(k)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_87": {
                "variable": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scaled_attention_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matmul_qk / tf.math.sqrt(dk)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_89": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scaled_attention_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wv(input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, (batch_size, -1, depth_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_18": {
                "variable": {
                    "value": "self.wq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_q'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_19": {
                "variable": {
                    "value": "self.wk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_k'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_20": {
                "variable": {
                    "value": "self.wv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_w'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_30": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_weights, v)",
                            "Call"
                        ],
                        [
                            "output + pos_emb",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(scaled_attention, (batch_size, self.spatial_dims[0], self.spatial_dims[1], self.d_model))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_47": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wq(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, (batch_size, -1, depth_dim))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, depth_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_48": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wk(input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, (batch_size, -1, depth_dim))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, depth_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_49": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wv(input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, (batch_size, -1, depth_dim))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, depth_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scaled_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, self.spatial_dims[0], self.spatial_dims[1], self.d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Embedding_23": {
                "variable": {
                    "value": "self.pos_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "self.spatial_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + 'pos_enc'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "range_37": {
                "variable": {
                    "value": "x_index",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_39": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pos_embedding(x_index)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pos_emb, (self.spatial_dims[0], self.spatial_dims[1], self.d_model))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.spatial_dims[0], self.spatial_dims[1], self.d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "identity_55": {
                "input": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scaled_attention_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "self.name + '_attention_weights'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_83": {
                "x": {
                    "value": "dk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(k)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_82": {
                "input": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wk(input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, (batch_size, -1, depth_dim))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "distnet/keras_models/attention_self_attention.py": {
        "tensorflow": {
            "Dense_20": {
                "variable": {
                    "value": "self.wq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.depth * num_heads * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_q'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_21": {
                "variable": {
                    "value": "self.wka",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.depth * num_heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_ka'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_22": {
                "variable": {
                    "value": "self.wva",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.depth * num_heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_va'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_23": {
                "variable": {
                    "value": "self.wksa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.depth * num_heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_ksa'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_24": {
                "variable": {
                    "value": "self.wvsa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.depth * num_heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_vsa'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_25": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_lin'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (batch_size, self.spatial_dim, num_heads, self.depth))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, self.spatial_dim, num_heads, self.depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_42": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qx + pos_emb",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_66": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ka, ksa]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_67": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[va, vsa]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_73": {
                "variable": {
                    "value": "scaled_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "scaled_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(scaled_attention, perm=[0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "variable": {
                    "value": "concat_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scaled_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(scaled_attention, perm=[0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.depth * self.num_heads * 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_76": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dense(concat_attention)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, (batch_size, self.spatial_dims[0], self.spatial_dims[1], self.depth))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, self.spatial_dims[0], self.spatial_dims[1], self.depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Embedding_28": {
                "variable": {
                    "value": "self.pos_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "self.spatial_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "self.depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name + 'pos_enc'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_35": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (batch_size, self.spatial_dim, num_heads, self.depth))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_49": {
                "variable": {
                    "value": "x_index",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_51": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pos_embedding(x_index)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pos_emb, (self.spatial_dims[0], self.spatial_dims[1], self.depth))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.spatial_dims[0], self.spatial_dims[1], self.depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "identity_72": {
                "input": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "self.name + '_attention_selfattention_weights'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "distnet/keras_models/intensity_transformer.py": {
        "tensorflow": {
            "Input_6": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(input_size, input_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_input'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_18": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dense(1, name='{}_offset'.format(name))(conv_flat)",
                            "Call"
                        ],
                        [
                            "K.mean(offset, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_19": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dense(1, activation='relu', name='{}_scale'.format(name))(conv_flat)",
                            "Call"
                        ],
                        [
                            "K.mean(scale, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Model_20": {
                "*args": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Input(shape=(input_size, input_size, 1), name='{}_input'.format(name), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "Input(shape=model.input.shape[1:], name='input_to_transform_' + model.name)",
                            "Call"
                        ],
                        [
                            "Input(shape=intensity_transformer_model.input.shape[1:], name='input_to_transform_' + model.name)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "[offset, scale]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Input_24": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "model.input.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "'input_to_transform_' + model.name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Input_32": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "intensity_transformer_model.input.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "'input_to_transform_' + model.name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Flatten_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_15": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_offset'.format(name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_16": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_scale'.format(name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Model_30": {
                "*args": {
                    "value": "[input, thumb_input]",
                    "type": "List",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "scaled_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output / scale + offset",
                            "BinOp"
                        ],
                        [
                            "output / scale + offset",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Model_37": {
                "*args": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Input(shape=(input_size, input_size, 1), name='{}_input'.format(name), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "Input(shape=model.input.shape[1:], name='input_to_transform_' + model.name)",
                            "Call"
                        ],
                        [
                            "Input(shape=intensity_transformer_model.input.shape[1:], name='input_to_transform_' + model.name)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "scaled_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output / scale + offset",
                            "BinOp"
                        ],
                        [
                            "output / scale + offset",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2D_10": {
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters",
                            "variable"
                        ],
                        [
                            "filters * 2",
                            "BinOp"
                        ],
                        [
                            "min(filters, n_filters_max)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "LeakyReLU(alpha=0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_conv_{}'.format(name, l)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_10": {
                "alpha": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "distnet/keras_models/layers.py": {
        "tensorflow": {
            "constant_42": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.kernelYX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_47": {
                "variable": {
                    "value": "self.pointwise_filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_rows": {
                    "value": "n_chan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[-1] if input_shape[-1] is not None else self.n_chan",
                            "IfExp"
                        ]
                    ]
                },
                "batch_shape": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv3D_93": {
                "variable": {
                    "value": "self.convL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernelYX[0], kernelYX[1], 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name + 'conv' if name is not None else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "InputSpec_94": {
                "variable": {
                    "value": "self.input_spec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorShape_107": {
                "variable": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_shape.TensorShape(input_shape)",
                            "Call"
                        ],
                        [
                            "tensor_shape.TensorShape(input_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_118": {
                "variable": {
                    "value": "self.kernel_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "kernel_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones(shape=self.convL.kernel_size + (self.n_channels, self.convL.filters))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "InputSpec_146": {
                "variable": {
                    "value": "self.input_spec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorShape_160": {
                "variable": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_shape.TensorShape(input_shape)",
                            "Call"
                        ],
                        [
                            "tensor_shape.TensorShape(input_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv3D_162": {
                "variable": {
                    "value": "self.convL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernelYX + (n_channels,)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "self._name + 'conv' if self._name is not None else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "pad_19": {
                "tensor": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.padL(input_tensor)",
                            "Call"
                        ],
                        [
                            "pad(input_tensor, [[0, 0], [padding_height, padding_height], [padding_width, padding_width], [0, 0]], mode=self.padding, constant_values=self.padding_constant_value, name=self.name + 'pad' if self.name is not None else None)",
                            "Call"
                        ],
                        [
                            "pad(input_tensor, [[0, 0], [padding_height, padding_height], [padding_width, padding_width], [0, 0]], mode=self.padding, constant_values=self.padding_constant_value, name=self.name + 'pad' if self.name is not None else None)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [padding_height, padding_height], [padding_width, padding_width], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_44": {
                "variable": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(self.kernelYX, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, n_chan, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "separable_conv2d_61": {
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.padL(input_tensor)",
                            "Call"
                        ],
                        [
                            "pad(input_tensor, [[0, 0], [padding_height, padding_height], [padding_width, padding_width], [0, 0]], mode=self.padding, constant_values=self.padding_constant_value, name=self.name + 'pad' if self.name is not None else None)",
                            "Call"
                        ],
                        [
                            "pad(input_tensor, [[0, 0], [padding_height, padding_height], [padding_width, padding_width], [0, 0]], mode=self.padding, constant_values=self.padding_constant_value, name=self.name + 'pad' if self.name is not None else None)",
                            "Call"
                        ]
                    ]
                },
                "depthwise_filter": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pointwise_filter": {
                    "value": "self.pointwise_filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_123": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.padL(input_tensor)",
                            "Call"
                        ],
                        [
                            "pad(input_tensor, [[0, 0], [padding_height, padding_height], [padding_width, padding_width], [0, 0]], mode=self.padding, constant_values=self.padding_constant_value, name=self.name + 'pad' if self.name is not None else None)",
                            "Call"
                        ],
                        [
                            "pad(input_tensor, [[0, 0], [padding_height, padding_height], [padding_width, padding_width], [0, 0]], mode=self.padding, constant_values=self.padding_constant_value, name=self.name + 'pad' if self.name is not None else None)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [padding_height, padding_height], [padding_width, padding_width], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "constant_values": {
                    "value": "self.padding_constant_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.name + 'pad' if self.name is not None else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "split_129": {
                "variable": {
                    "value": "(context, center)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.padL(input_tensor)",
                            "Call"
                        ],
                        [
                            "pad(input_tensor, [[0, 0], [padding_height, padding_height], [padding_width, padding_width], [0, 0]], mode=self.padding, constant_values=self.padding_constant_value, name=self.name + 'pad' if self.name is not None else None)",
                            "Call"
                        ],
                        [
                            "pad(input_tensor, [[0, 0], [padding_height, padding_height], [padding_width, padding_width], [0, 0]], mode=self.padding, constant_values=self.padding_constant_value, name=self.name + 'pad' if self.name is not None else None)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_130": {
                "variable": {
                    "value": "conv_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[context[..., tf.newaxis, :], center[..., tf.newaxis, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_169": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.padL(input_tensor)",
                            "Call"
                        ],
                        [
                            "pad(input_tensor, [[0, 0], [padding_height, padding_height], [padding_width, padding_width], [0, 0]], mode=self.padding, constant_values=self.padding_constant_value, name=self.name + 'pad' if self.name is not None else None)",
                            "Call"
                        ],
                        [
                            "pad(input_tensor, [[0, 0], [padding_height, padding_height], [padding_width, padding_width], [0, 0]], mode=self.padding, constant_values=self.padding_constant_value, name=self.name + 'pad' if self.name is not None else None)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [padding_height, padding_height], [padding_width, padding_width], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "constant_values": {
                    "value": "self.padding_constant_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.name + 'pad' if self.name is not None else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "GlobalAveragePooling2D_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Reshape_76": {
                "target_shape": {
                    "value": "(1, 1, n_filters)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_77": {
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "filters": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'relu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_78": {
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "filters": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Multiply_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_131": {
                "condition": {
                    "value": "self.kernel_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.convL.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros_like(self.convL.kernel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_131": {
                "input": {
                    "value": "self.convL.kernel",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "distnet/keras_models/multihead_self_attention.py": {
        "tensorflow": {
            "Dense_22": {
                "variable": {
                    "value": "self.wq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_q'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_23": {
                "variable": {
                    "value": "self.wk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_k'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_24": {
                "variable": {
                    "value": "self.wv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_w'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_25": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_lin'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (batch_size, self.spatial_dim, self.num_heads, self.depth))",
                            "Call"
                        ],
                        [
                            "x + pos_emb",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, self.spatial_dim, self.num_heads, self.depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_41": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (batch_size, self.spatial_dim, self.num_heads, self.depth))",
                            "Call"
                        ],
                        [
                            "x + pos_emb",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_65": {
                "variable": {
                    "value": "scaled_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "scaled_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(scaled_attention, perm=[0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "concat_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scaled_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(scaled_attention, perm=[0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dense(concat_attention)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, (batch_size, self.spatial_dims[0], self.spatial_dims[1], self.depth))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, self.spatial_dims[0], self.spatial_dims[1], self.depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Embedding_28": {
                "variable": {
                    "value": "self.pos_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "self.spatial_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "self.depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name + 'pos_enc'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_35": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (batch_size, self.spatial_dim, self.num_heads, self.depth))",
                            "Call"
                        ],
                        [
                            "x + pos_emb",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_48": {
                "variable": {
                    "value": "x_index",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pos_embedding(x_index)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pos_emb, (self.spatial_dims[0], self.spatial_dims[1], self.depth))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.spatial_dims[0], self.spatial_dims[1], self.depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "identity_64": {
                "input": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "self.name + '_attention_weights'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "distnet/keras_models/self_attention.py": {
        "tensorflow": {
            "matmul_77": {
                "variable": {
                    "value": "matmul_qk",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wq(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, (batch_size, -1, depth_dim))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wk(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, (batch_size, -1, depth_dim))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_80": {
                "variable": {
                    "value": "dk",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(k)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_85": {
                "variable": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scaled_attention_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matmul_qk / tf.math.sqrt(dk)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_87": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scaled_attention_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wv(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, (batch_size, -1, depth_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_18": {
                "variable": {
                    "value": "self.wq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_q'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_19": {
                "variable": {
                    "value": "self.wk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_k'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_20": {
                "variable": {
                    "value": "self.wv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_w'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_29": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + pos_emb",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_45": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wq(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, (batch_size, -1, depth_dim))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, depth_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_46": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wk(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, (batch_size, -1, depth_dim))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, depth_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wv(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, (batch_size, -1, depth_dim))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, depth_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_52": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scaled_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, self.spatial_dims[0], self.spatial_dims[1], self.d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Embedding_23": {
                "variable": {
                    "value": "self.pos_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "self.spatial_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + 'pos_enc'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "range_36": {
                "variable": {
                    "value": "x_index",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_38": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pos_embedding(x_index)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pos_emb, (self.spatial_dims[0], self.spatial_dims[1], self.d_model))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.spatial_dims[0], self.spatial_dims[1], self.d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "identity_53": {
                "input": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scaled_attention_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "self.name + '_attention_weights'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_81": {
                "x": {
                    "value": "dk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(k)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_80": {
                "input": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wk(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, (batch_size, -1, depth_dim))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "distnet/keras_models/unet.py": {
        "tensorflow": {
            "Model_516": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[Input(shape=image_shape + (n_input_channels[i],), name='input' + str(i)) for i in range(n_inputs)]",
                            "ListComp"
                        ],
                        [
                            "Input(shape=image_shape + (n_input_channels[0],), name='input')",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=-1)(flatten_list(input))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "flatten_list(all_outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'UNet'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Lambda_17": {
                "function": {
                    "value": "lambda x: x[:, :, :, channel:channel + 1]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "(name if name else 'get_channel') + '_' + str(channel)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2D_363": {
                "variable": {
                    "value": "spa_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ensure_multiplicity(2, filters)",
                            "Call"
                        ],
                        [
                            "self._get_n_filters(layer_idx)",
                            "Call"
                        ],
                        [
                            "int(filters)",
                            "Call"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'same'",
                            "Method Argument"
                        ],
                        [
                            "'same'",
                            "Method Argument"
                        ],
                        [
                            "'same'",
                            "Method Argument"
                        ],
                        [
                            "'same'",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'relu'",
                            "Method Argument"
                        ],
                        [
                            "'relu'",
                            "Method Argument"
                        ],
                        [
                            "'relu'",
                            "Method Argument"
                        ],
                        [
                            "'relu'",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'he_normal'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'' if rank == 0 else '_i' + str(rank) + '_'",
                            "IfExp"
                        ],
                        [
                            "'{}_l{}_concat'.format(self.name, layer_idx) if self.name else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'encoder'",
                            "Method Argument"
                        ],
                        [
                            "'decoder'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_373": {
                "variable": {
                    "value": "convL",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ensure_multiplicity(2, filters)",
                            "Call"
                        ],
                        [
                            "self._get_n_filters(layer_idx)",
                            "Call"
                        ],
                        [
                            "int(filters)",
                            "Call"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'same'",
                            "Method Argument"
                        ],
                        [
                            "'same'",
                            "Method Argument"
                        ],
                        [
                            "'same'",
                            "Method Argument"
                        ],
                        [
                            "'same'",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'he_normal'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'' if rank == 0 else '_i' + str(rank) + '_'",
                            "IfExp"
                        ],
                        [
                            "'{}_l{}_concat'.format(self.name, layer_idx) if self.name else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'encoder'",
                            "Method Argument"
                        ],
                        [
                            "'decoder'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNormalization_374": {
                "variable": {
                    "value": "batch_normL",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_375": {
                "variable": {
                    "value": "activationL",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'relu'",
                            "Method Argument"
                        ],
                        [
                            "'relu'",
                            "Method Argument"
                        ],
                        [
                            "'relu'",
                            "Method Argument"
                        ],
                        [
                            "'relu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Input_451": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "image_shape + (n_input_channels[0],)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPool2D_105": {
                "variable": {
                    "value": "max_poolL",
                    "type": "variable",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_l{}_maxpool'.format(self.name, layer_idx) if self.name else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "UpSampling2D_257": {
                "variable": {
                    "value": "upsampleL",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "interpolation": {
                    "value": "bilinear if self.upsampling_bilinear else nearest",
                    "type": "IfExp",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_l{}_up'.format(self.name, layer_idx) if self.name else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Lambda_277": {
                "variable": {
                    "value": "concatL",
                    "type": "variable",
                    "possible_values": []
                },
                "function": {
                    "value": "lambda array: tf.reduce_sum(tf.stack(array, axis=0), axis=0)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'' if rank == 0 else '_i' + str(rank) + '_'",
                            "IfExp"
                        ],
                        [
                            "'{}_l{}_concat'.format(self.name, layer_idx) if self.name else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'encoder'",
                            "Method Argument"
                        ],
                        [
                            "'decoder'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Concatenate_279": {
                "variable": {
                    "value": "concatL",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'' if rank == 0 else '_i' + str(rank) + '_'",
                            "IfExp"
                        ],
                        [
                            "'{}_l{}_concat'.format(self.name, layer_idx) if self.name else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'encoder'",
                            "Method Argument"
                        ],
                        [
                            "'decoder'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Concatenate_385": {
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_name + '_concat'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2D_386": {
                "filters": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'relu'",
                            "Method Argument"
                        ],
                        [
                            "'relu'",
                            "Method Argument"
                        ],
                        [
                            "'relu'",
                            "Method Argument"
                        ],
                        [
                            "'relu'",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_name + '_conv1x1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_246": {
                "variable": {
                    "value": "upsampleL",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "int(filters * filter_factor)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.upsampling_conv_kernel, self.upsampling_conv_kernel)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_l{}_up'.format(self.name, layer_idx) if self.name else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "BatchNormalization_247": {
                "variable": {
                    "value": "batch_normL",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_248": {
                "variable": {
                    "value": "activationL",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.up_sampling_activation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Input_449": {
                "shape": {
                    "value": "image_shape + (n_input_channels[i],)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "'input' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Concatenate_512": {
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Concatenate_66": {
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Concatenate_97": {
                "variable": {
                    "value": "sa_concatL",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_{}_self_attention_concat'.format(self.name, layer_idx) if self.name else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Conv2D_98": {
                "variable": {
                    "value": "sa_conv1x1L",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ensure_multiplicity(2, filters)",
                            "Call"
                        ],
                        [
                            "self._get_n_filters(layer_idx)",
                            "Call"
                        ],
                        [
                            "int(filters)",
                            "Call"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_l{}_self_attention_conv1x1'.format(self.name, layer_idx) if self.name else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Dropout_120": {
                "rate": {
                    "value": "dropout_level",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_levels[self.dropout_contraction_levels.index(layer_idx)]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "'{}_l{}_dropout'.format(self.name, layer_idx) if self.name else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Conv2D_240": {
                "filters": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "last_1x1_activations[oidx][i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "ensure_multiplicity(len(n_last_1x1_conv), last_1x1_activations)",
                            "Call"
                        ],
                        [
                            "'relu'",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_conv1x1_{}_{}'.format(self.name, oidx, i) if self.name else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_255": {
                "filters": {
                    "value": "int(filters * filter_factor)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.upsampling_conv_kernel, self.upsampling_conv_kernel)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.up_sampling_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_l{}_up'.format(self.name, layer_idx) if self.name else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "stop_gradient_336": {
                "variable": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv",
                            "variable"
                        ],
                        [
                            "layers[idx](residual)",
                            "Call"
                        ],
                        [
                            "[stop_gradient(r) for r in residual]",
                            "ListComp"
                        ],
                        [
                            "stop_gradient(residual)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_474": {
                "filters": {
                    "value": "n_output_channels[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "ensure_multiplicity(n_outputs, n_output_channels)",
                            "Call"
                        ],
                        [
                            "[1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "out_activations[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "ensure_multiplicity(n_outputs, out_activations)",
                            "Call"
                        ],
                        [
                            "['linear'",
                            "Method Argument"
                        ],
                        [
                            "['linear']",
                            "Method Argument"
                        ],
                        [
                            "['linear']",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'output' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SpatialDropout2D_116": {
                "rate": {
                    "value": "dropout_level",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_levels[self.dropout_contraction_levels.index(layer_idx)]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "'{}_l{}_dropout'.format(self.name, layer_idx) if self.name else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SpatialDropout3D_118": {
                "rate": {
                    "value": "dropout_level",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout_levels[self.dropout_contraction_levels.index(layer_idx)]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "'{}_l{}_dropout'.format(self.name, layer_idx) if self.name else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "reduce_sum_277": {
                "input_tensor": {
                    "value": "tf.stack(array, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2D_369": {
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ensure_multiplicity(2, filters)",
                            "Call"
                        ],
                        [
                            "self._get_n_filters(layer_idx)",
                            "Call"
                        ],
                        [
                            "int(filters)",
                            "Call"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'he_normal'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name + '_1x1_{}'.format(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2D_381": {
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ensure_multiplicity(2, filters)",
                            "Call"
                        ],
                        [
                            "self._get_n_filters(layer_idx)",
                            "Call"
                        ],
                        [
                            "int(filters)",
                            "Call"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'he_normal'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name + '1x1_{}'.format(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_277": {
                "values": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Cropping2D_283": {
                "cropping": {
                    "value": "self.valid_padding_crop[layer_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stop_gradient_332": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2D_460": {
                "filters": {
                    "value": "n_output_channels[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "ensure_multiplicity(n_outputs, n_output_channels)",
                            "Call"
                        ],
                        [
                            "[1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "out_activations[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "ensure_multiplicity(n_outputs, out_activations)",
                            "Call"
                        ],
                        [
                            "['linear'",
                            "Method Argument"
                        ],
                        [
                            "['linear']",
                            "Method Argument"
                        ],
                        [
                            "['linear']",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'output' + name + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2D_462": {
                "filters": {
                    "value": "n_output_channels[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "ensure_multiplicity(n_outputs, n_output_channels)",
                            "Call"
                        ],
                        [
                            "[1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "out_activations[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "ensure_multiplicity(n_outputs, out_activations)",
                            "Call"
                        ],
                        [
                            "['linear'",
                            "Method Argument"
                        ],
                        [
                            "['linear']",
                            "Method Argument"
                        ],
                        [
                            "['linear']",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'output' + name + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "distnet/utils/callbacks.py": {
        "tensorflow": {}
    },
    "distnet/utils/helpers.py": {
        "tensorflow": {
            "clip_8": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.clip(y_pred, K.epsilon(), 1 - K.epsilon())",
                            "Call"
                        ]
                    ]
                },
                "a_min": {
                    "value": "K.epsilon()",
                    "type": "Call",
                    "possible_values": []
                },
                "a_max": {
                    "value": "1 - K.epsilon()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_9": {
                "x": {
                    "value": "y_pred / (1 - y_pred)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LearningRateScheduler_48": {
                "schedule": {
                    "value": "schedule",
                    "type": "variable",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_variables_to_constants_73": {
                "variable": {
                    "value": "frozen_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "input_graph_def": {
                    "value": "input_graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.as_graph_def()",
                            "Call"
                        ]
                    ]
                },
                "output_node_names": {
                    "value": "output_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_names or []",
                            "BoolOp"
                        ],
                        [
                            "output_names + [v.op.name for v in tf.global_variables()]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "variable_names_whitelist": {
                    "value": "freeze_var_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(set((v.op.name for v in tf.global_variables())).difference(keep_var_names or []))",
                            "Call"
                        ]
                    ]
                }
            },
            "write_graph_93": {
                "graph_or_graph_def": {
                    "value": "frozen_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.graph_util.convert_variables_to_constants(session, input_graph_def, output_names, freeze_var_names)",
                            "Call"
                        ],
                        [
                            "freeze_session(K.get_session(), output_names=output_names)",
                            "Call"
                        ]
                    ]
                },
                "logdir": {
                    "value": "outdir",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'saved_model.pb'",
                            "Method Argument"
                        ]
                    ]
                },
                "as_text": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "simple_save_104": {
                "session": {
                    "value": "K.get_session()",
                    "type": "Call",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "outdir",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict(zip([input.op.name for input in model.inputs], model.inputs))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict(zip([out.op.name for out in model.outputs], model.outputs))",
                            "Call"
                        ]
                    ]
                }
            },
            "epsilon_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_session_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_session_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "distnet/utils/losses.py": {
        "tensorflow": {
            "convert_to_tensor_45": {
                "variable": {
                    "value": "mask_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones(shape=(1,) + shape, dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_135": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true[..., y_true_channels[0]:y_true_channels[1]]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., -1:]",
                            "Subscript"
                        ],
                        [
                            "K.cast(y_true[..., 0], 'int32')",
                            "Call"
                        ],
                        [
                            "K.one_hot(y_true, K.shape(y_pred)[-1])",
                            "Call"
                        ],
                        [
                            "y_true[..., 1:]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., 0:mid]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., y_true_channels[0]:y_true_channels[1]]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batchSize, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_136": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred[..., 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batchSize, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_137": {
                "variable": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "t * p",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_138": {
                "variable": {
                    "value": "tv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.reshape(y_true, shape=(batchSize, -1))",
                            "Call"
                        ],
                        [
                            "K.reshape(y_true, shape=(batchSize, -1))",
                            "Call"
                        ],
                        [
                            "K.reshape(y_true, shape=(batchSize, -1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_139": {
                "variable": {
                    "value": "pv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.reshape(y_pred, shape=(batchSize, -1))",
                            "Call"
                        ],
                        [
                            "K.reshape(y_pred, shape=(batchSize, -1))",
                            "Call"
                        ],
                        [
                            "K.reshape(y_pred, shape=(batchSize, -1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_9": {
                "x": {
                    "value": "y_pred - y_true",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_12": {
                "x": {
                    "value": "y_pred - y_true",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ssim_54": {
                "variable": {
                    "value": "SSIM",
                    "type": "variable",
                    "possible_values": []
                },
                "img1": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true[..., y_true_channels[0]:y_true_channels[1]]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., -1:]",
                            "Subscript"
                        ],
                        [
                            "K.cast(y_true[..., 0], 'int32')",
                            "Call"
                        ],
                        [
                            "K.one_hot(y_true, K.shape(y_pred)[-1])",
                            "Call"
                        ],
                        [
                            "y_true[..., 1:]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., 0:mid]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., y_true_channels[0]:y_true_channels[1]]",
                            "Subscript"
                        ]
                    ]
                },
                "img2": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred[..., 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "max_val": {
                    "value": "max_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "filter_size": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "11",
                            "Method Argument"
                        ]
                    ]
                },
                "filter_sigma": {
                    "value": "filter_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.5",
                            "Method Argument"
                        ]
                    ]
                },
                "k1": {
                    "value": "k1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                },
                "k2": {
                    "value": "k2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.03",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_141": {
                "variable": {
                    "value": "tv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.sum(t, -1)",
                            "Call"
                        ],
                        [
                            "K.mean(tv, 0, keepdims=True)",
                            "Call"
                        ],
                        [
                            "K.square(tv)",
                            "Call"
                        ],
                        [
                            "K.sum(t, -1)",
                            "Call"
                        ],
                        [
                            "K.mean(tv, 0, keepdims=True)",
                            "Call"
                        ],
                        [
                            "K.sum(y_true, spatial_dim_axes)",
                            "Call"
                        ],
                        [
                            "K.mean(tv, 0, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_142": {
                "variable": {
                    "value": "pv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "pv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.sum(p, -1)",
                            "Call"
                        ],
                        [
                            "K.mean(pv, 0, keepdims=True)",
                            "Call"
                        ],
                        [
                            "K.square(pv)",
                            "Call"
                        ],
                        [
                            "K.sum(p, -1)",
                            "Call"
                        ],
                        [
                            "K.mean(pv, 0, keepdims=True)",
                            "Call"
                        ],
                        [
                            "K.sum(y_true, spatial_dim_axes)",
                            "Call"
                        ],
                        [
                            "K.mean(pv, 0, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_144": {
                "variable": {
                    "value": "tv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.sum(t, -1)",
                            "Call"
                        ],
                        [
                            "K.mean(tv, 0, keepdims=True)",
                            "Call"
                        ],
                        [
                            "K.square(tv)",
                            "Call"
                        ],
                        [
                            "K.sum(t, -1)",
                            "Call"
                        ],
                        [
                            "K.mean(tv, 0, keepdims=True)",
                            "Call"
                        ],
                        [
                            "K.sum(y_true, spatial_dim_axes)",
                            "Call"
                        ],
                        [
                            "K.mean(tv, 0, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_145": {
                "variable": {
                    "value": "pv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.sum(p, -1)",
                            "Call"
                        ],
                        [
                            "K.mean(pv, 0, keepdims=True)",
                            "Call"
                        ],
                        [
                            "K.square(pv)",
                            "Call"
                        ],
                        [
                            "K.sum(p, -1)",
                            "Call"
                        ],
                        [
                            "K.mean(pv, 0, keepdims=True)",
                            "Call"
                        ],
                        [
                            "K.sum(y_true, spatial_dim_axes)",
                            "Call"
                        ],
                        [
                            "K.mean(pv, 0, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_160": {
                "variable": {
                    "value": "tshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true[..., y_true_channels[0]:y_true_channels[1]]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., -1:]",
                            "Subscript"
                        ],
                        [
                            "K.cast(y_true[..., 0], 'int32')",
                            "Call"
                        ],
                        [
                            "K.one_hot(y_true, K.shape(y_pred)[-1])",
                            "Call"
                        ],
                        [
                            "y_true[..., 1:]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., 0:mid]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., y_true_channels[0]:y_true_channels[1]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_162": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true[..., y_true_channels[0]:y_true_channels[1]]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., -1:]",
                            "Subscript"
                        ],
                        [
                            "K.cast(y_true[..., 0], 'int32')",
                            "Call"
                        ],
                        [
                            "K.one_hot(y_true, K.shape(y_pred)[-1])",
                            "Call"
                        ],
                        [
                            "y_true[..., 1:]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., 0:mid]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., y_true_channels[0]:y_true_channels[1]]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batchSize, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_163": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred[..., 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batchSize, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_166": {
                "variable": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "t * p",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_167": {
                "variable": {
                    "value": "tn",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tb * pb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_168": {
                "variable": {
                    "value": "tv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.reshape(y_true, shape=(batchSize, -1))",
                            "Call"
                        ],
                        [
                            "K.reshape(y_true, shape=(batchSize, -1))",
                            "Call"
                        ],
                        [
                            "K.reshape(y_true, shape=(batchSize, -1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_169": {
                "variable": {
                    "value": "pv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.reshape(y_pred, shape=(batchSize, -1))",
                            "Call"
                        ],
                        [
                            "K.reshape(y_pred, shape=(batchSize, -1))",
                            "Call"
                        ],
                        [
                            "K.reshape(y_pred, shape=(batchSize, -1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_170": {
                "variable": {
                    "value": "tbv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - t",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_171": {
                "variable": {
                    "value": "pbv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "pb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - p",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_183": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.math.is_inf(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "K.ones_like(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / K.square(tv)",
                            "BinOp"
                        ],
                        [
                            "1.0 / tv",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.is_inf(w), K.ones_like(w), w)",
                            "Call"
                        ],
                        [
                            "1.0 / K.square(tv)",
                            "BinOp"
                        ],
                        [
                            "1.0 / tv",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.is_inf(w), K.ones_like(w), w)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_184": {
                "variable": {
                    "value": "wb",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.math.is_inf(wb)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "K.ones_like(wb)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / K.square(tbv)",
                            "BinOp"
                        ],
                        [
                            "1.0 / tbv",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.is_inf(wb), K.ones_like(wb), wb)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_218": {
                "variable": {
                    "value": "inter",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "y_true * y_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "spatial_dim_axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_219": {
                "variable": {
                    "value": "tv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true[..., y_true_channels[0]:y_true_channels[1]]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., -1:]",
                            "Subscript"
                        ],
                        [
                            "K.cast(y_true[..., 0], 'int32')",
                            "Call"
                        ],
                        [
                            "K.one_hot(y_true, K.shape(y_pred)[-1])",
                            "Call"
                        ],
                        [
                            "y_true[..., 1:]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., 0:mid]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., y_true_channels[0]:y_true_channels[1]]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "spatial_dim_axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_220": {
                "variable": {
                    "value": "pv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true[..., y_true_channels[0]:y_true_channels[1]]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., -1:]",
                            "Subscript"
                        ],
                        [
                            "K.cast(y_true[..., 0], 'int32')",
                            "Call"
                        ],
                        [
                            "K.one_hot(y_true, K.shape(y_pred)[-1])",
                            "Call"
                        ],
                        [
                            "y_true[..., 1:]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., 0:mid]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., y_true_channels[0]:y_true_channels[1]]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "spatial_dim_axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_228": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.math.is_inf(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "K.ones_like(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / K.square(tv)",
                            "BinOp"
                        ],
                        [
                            "1.0 / tv",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.is_inf(w), K.ones_like(w), w)",
                            "Call"
                        ],
                        [
                            "1.0 / K.square(tv)",
                            "BinOp"
                        ],
                        [
                            "1.0 / tv",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.is_inf(w), K.ones_like(w), w)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_255": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true[..., y_true_channels[0]:y_true_channels[1]]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., -1:]",
                            "Subscript"
                        ],
                        [
                            "K.cast(y_true[..., 0], 'int32')",
                            "Call"
                        ],
                        [
                            "K.one_hot(y_true, K.shape(y_pred)[-1])",
                            "Call"
                        ],
                        [
                            "y_true[..., 1:]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., 0:mid]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., y_true_channels[0]:y_true_channels[1]]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batchSize, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_256": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred[..., 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batchSize, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_258": {
                "variable": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "t * p",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_259": {
                "variable": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "(1 - t) * p",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_260": {
                "variable": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "t * (1 - p)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_300": {
                "variable": {
                    "value": "bl",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "levelset * y_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_73": {
                "variable": {
                    "value": "class_selectors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_75": {
                "variable": {
                    "value": "class_selectors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_110": {
                "variable": {
                    "value": "(y_true, weightMap)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true[..., y_true_channels[0]:y_true_channels[1]]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., -1:]",
                            "Subscript"
                        ],
                        [
                            "K.cast(y_true[..., 0], 'int32')",
                            "Call"
                        ],
                        [
                            "K.one_hot(y_true, K.shape(y_pred)[-1])",
                            "Call"
                        ],
                        [
                            "y_true[..., 1:]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., 0:mid]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., y_true_channels[0]:y_true_channels[1]]",
                            "Subscript"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_134": {
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true[..., y_true_channels[0]:y_true_channels[1]]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., -1:]",
                            "Subscript"
                        ],
                        [
                            "K.cast(y_true[..., 0], 'int32')",
                            "Call"
                        ],
                        [
                            "K.one_hot(y_true, K.shape(y_pred)[-1])",
                            "Call"
                        ],
                        [
                            "y_true[..., 1:]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., 0:mid]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., y_true_channels[0]:y_true_channels[1]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_173": {
                "variable": {
                    "value": "tv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.sum(t, -1)",
                            "Call"
                        ],
                        [
                            "K.mean(tv, 0, keepdims=True)",
                            "Call"
                        ],
                        [
                            "K.square(tv)",
                            "Call"
                        ],
                        [
                            "K.sum(t, -1)",
                            "Call"
                        ],
                        [
                            "K.mean(tv, 0, keepdims=True)",
                            "Call"
                        ],
                        [
                            "K.sum(y_true, spatial_dim_axes)",
                            "Call"
                        ],
                        [
                            "K.mean(tv, 0, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_174": {
                "variable": {
                    "value": "pv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "pv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.sum(p, -1)",
                            "Call"
                        ],
                        [
                            "K.mean(pv, 0, keepdims=True)",
                            "Call"
                        ],
                        [
                            "K.square(pv)",
                            "Call"
                        ],
                        [
                            "K.sum(p, -1)",
                            "Call"
                        ],
                        [
                            "K.mean(pv, 0, keepdims=True)",
                            "Call"
                        ],
                        [
                            "K.sum(y_true, spatial_dim_axes)",
                            "Call"
                        ],
                        [
                            "K.mean(pv, 0, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_175": {
                "variable": {
                    "value": "tbv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tbv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.sum(tb, -1)",
                            "Call"
                        ],
                        [
                            "K.mean(tbv, 0, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_176": {
                "variable": {
                    "value": "pbv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "pbv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.sum(pb, -1)",
                            "Call"
                        ],
                        [
                            "K.mean(pbv, 0, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_213": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_true[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_214": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true[..., y_true_channels[0]:y_true_channels[1]]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., -1:]",
                            "Subscript"
                        ],
                        [
                            "K.cast(y_true[..., 0], 'int32')",
                            "Call"
                        ],
                        [
                            "K.one_hot(y_true, K.shape(y_pred)[-1])",
                            "Call"
                        ],
                        [
                            "y_true[..., 1:]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., 0:mid]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., y_true_channels[0]:y_true_channels[1]]",
                            "Subscript"
                        ]
                    ]
                },
                "depth": {
                    "value": "K.shape(y_pred)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_222": {
                "variable": {
                    "value": "tv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.sum(t, -1)",
                            "Call"
                        ],
                        [
                            "K.mean(tv, 0, keepdims=True)",
                            "Call"
                        ],
                        [
                            "K.square(tv)",
                            "Call"
                        ],
                        [
                            "K.sum(t, -1)",
                            "Call"
                        ],
                        [
                            "K.mean(tv, 0, keepdims=True)",
                            "Call"
                        ],
                        [
                            "K.sum(y_true, spatial_dim_axes)",
                            "Call"
                        ],
                        [
                            "K.mean(tv, 0, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_223": {
                "variable": {
                    "value": "pv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "pv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.sum(p, -1)",
                            "Call"
                        ],
                        [
                            "K.mean(pv, 0, keepdims=True)",
                            "Call"
                        ],
                        [
                            "K.square(pv)",
                            "Call"
                        ],
                        [
                            "K.sum(p, -1)",
                            "Call"
                        ],
                        [
                            "K.mean(pv, 0, keepdims=True)",
                            "Call"
                        ],
                        [
                            "K.sum(y_true, spatial_dim_axes)",
                            "Call"
                        ],
                        [
                            "K.mean(pv, 0, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_262": {
                "variable": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.sum((1 - t) * p, -1)",
                            "Call"
                        ],
                        [
                            "K.mean(fp, 0, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_263": {
                "variable": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.sum(t * (1 - p), -1)",
                            "Call"
                        ],
                        [
                            "K.mean(fn, 0, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_264": {
                "variable": {
                    "value": "tpm",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.sum(t * p, -1)",
                            "Call"
                        ],
                        [
                            "K.sum(t * p, -1)",
                            "Call"
                        ],
                        [
                            "K.sum(t * p, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_316": {
                "variable": {
                    "value": "yt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.argmax(yt, -1)",
                            "Call"
                        ],
                        [
                            "K.squeeze(yt, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_318": {
                "variable": {
                    "value": "yt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.argmax(yt, -1)",
                            "Call"
                        ],
                        [
                            "K.squeeze(yt, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_16": {
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true[..., y_true_channels[0]:y_true_channels[1]]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., -1:]",
                            "Subscript"
                        ],
                        [
                            "K.cast(y_true[..., 0], 'int32')",
                            "Call"
                        ],
                        [
                            "K.one_hot(y_true, K.shape(y_pred)[-1])",
                            "Call"
                        ],
                        [
                            "y_true[..., 1:]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., 0:mid]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., y_true_channels[0]:y_true_channels[1]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "abs_21": {
                "x": {
                    "value": "(mu - y_true) / sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_21": {
                "x": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred[..., n_chan:]",
                            "Subscript"
                        ],
                        [
                            "sigma + epsilon",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_26": {
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true[..., y_true_channels[0]:y_true_channels[1]]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., -1:]",
                            "Subscript"
                        ],
                        [
                            "K.cast(y_true[..., 0], 'int32')",
                            "Call"
                        ],
                        [
                            "K.one_hot(y_true, K.shape(y_pred)[-1])",
                            "Call"
                        ],
                        [
                            "y_true[..., 1:]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., 0:mid]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., y_true_channels[0]:y_true_channels[1]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_65": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "original_loss_func(true, pred)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "losses[i](y_true, y_pred) * weights[i]",
                            "BinOp"
                        ],
                        [
                            "K.reshape(loss, reshape_axis_list[i])",
                            "Call"
                        ],
                        [
                            "original_loss_func(true, pred)",
                            "Call"
                        ],
                        [
                            "loss * weight_multiplier",
                            "BinOp"
                        ],
                        [
                            "original_loss_func(y_true, y_pred)",
                            "Call"
                        ],
                        [
                            "K.reshape(loss, reshape_axis)",
                            "Call"
                        ],
                        [
                            "loss * weightMap",
                            "BinOp"
                        ],
                        [
                            "original_loss_func(y_true, y_pred)",
                            "Call"
                        ],
                        [
                            "K.reshape(loss, reshape_axis)",
                            "Call"
                        ],
                        [
                            "loss * weightMap",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "reshape_axis_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_79": {
                "x": {
                    "value": "float(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "class_selectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.squeeze(true, axis=axis)",
                            "Call"
                        ],
                        [
                            "K.argmax(true, axis=axis)",
                            "Call"
                        ],
                        [
                            "[K.equal(float(i), class_selectors) for i in range(len(weights_list))]",
                            "ListComp"
                        ],
                        [
                            "[K.cast(x, K.floatx()) for x in class_selectors]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "cast_84": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "K.floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_113": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "original_loss_func(true, pred)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "losses[i](y_true, y_pred) * weights[i]",
                            "BinOp"
                        ],
                        [
                            "K.reshape(loss, reshape_axis_list[i])",
                            "Call"
                        ],
                        [
                            "original_loss_func(true, pred)",
                            "Call"
                        ],
                        [
                            "loss * weight_multiplier",
                            "BinOp"
                        ],
                        [
                            "original_loss_func(y_true, y_pred)",
                            "Call"
                        ],
                        [
                            "K.reshape(loss, reshape_axis)",
                            "Call"
                        ],
                        [
                            "loss * weightMap",
                            "BinOp"
                        ],
                        [
                            "original_loss_func(y_true, y_pred)",
                            "Call"
                        ],
                        [
                            "K.reshape(loss, reshape_axis)",
                            "Call"
                        ],
                        [
                            "loss * weightMap",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "reshape_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_125": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "original_loss_func(true, pred)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "losses[i](y_true, y_pred) * weights[i]",
                            "BinOp"
                        ],
                        [
                            "K.reshape(loss, reshape_axis_list[i])",
                            "Call"
                        ],
                        [
                            "original_loss_func(true, pred)",
                            "Call"
                        ],
                        [
                            "loss * weight_multiplier",
                            "BinOp"
                        ],
                        [
                            "original_loss_func(y_true, y_pred)",
                            "Call"
                        ],
                        [
                            "K.reshape(loss, reshape_axis)",
                            "Call"
                        ],
                        [
                            "loss * weightMap",
                            "BinOp"
                        ],
                        [
                            "original_loss_func(y_true, y_pred)",
                            "Call"
                        ],
                        [
                            "K.reshape(loss, reshape_axis)",
                            "Call"
                        ],
                        [
                            "loss * weightMap",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "reshape_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_inf_183": {
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / K.square(tv)",
                            "BinOp"
                        ],
                        [
                            "1.0 / tv",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.is_inf(w), K.ones_like(w), w)",
                            "Call"
                        ],
                        [
                            "1.0 / K.square(tv)",
                            "BinOp"
                        ],
                        [
                            "1.0 / tv",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.is_inf(w), K.ones_like(w), w)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_183": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / K.square(tv)",
                            "BinOp"
                        ],
                        [
                            "1.0 / tv",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.is_inf(w), K.ones_like(w), w)",
                            "Call"
                        ],
                        [
                            "1.0 / K.square(tv)",
                            "BinOp"
                        ],
                        [
                            "1.0 / tv",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.is_inf(w), K.ones_like(w), w)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_inf_184": {
                "x": {
                    "value": "wb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / K.square(tbv)",
                            "BinOp"
                        ],
                        [
                            "1.0 / tbv",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.is_inf(wb), K.ones_like(wb), wb)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_184": {
                "input": {
                    "value": "wb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / K.square(tbv)",
                            "BinOp"
                        ],
                        [
                            "1.0 / tbv",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.is_inf(wb), K.ones_like(wb), wb)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_inf_228": {
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / K.square(tv)",
                            "BinOp"
                        ],
                        [
                            "1.0 / tv",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.is_inf(w), K.ones_like(w), w)",
                            "Call"
                        ],
                        [
                            "1.0 / K.square(tv)",
                            "BinOp"
                        ],
                        [
                            "1.0 / tv",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.is_inf(w), K.ones_like(w), w)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_228": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / K.square(tv)",
                            "BinOp"
                        ],
                        [
                            "1.0 / tv",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.is_inf(w), K.ones_like(w), w)",
                            "Call"
                        ],
                        [
                            "1.0 / K.square(tv)",
                            "BinOp"
                        ],
                        [
                            "1.0 / tv",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.is_inf(w), K.ones_like(w), w)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_254": {
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true[..., y_true_channels[0]:y_true_channels[1]]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., -1:]",
                            "Subscript"
                        ],
                        [
                            "K.cast(y_true[..., 0], 'int32')",
                            "Call"
                        ],
                        [
                            "K.one_hot(y_true, K.shape(y_pred)[-1])",
                            "Call"
                        ],
                        [
                            "y_true[..., 1:]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., 0:mid]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., y_true_channels[0]:y_true_channels[1]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_31": {
                "x": {
                    "value": "sigma2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred[..., n_chan:]",
                            "Subscript"
                        ],
                        [
                            "sigma2 + epsilon",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floatx_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_116": {
                "a": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "original_loss_func(true, pred)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "losses[i](y_true, y_pred) * weights[i]",
                            "BinOp"
                        ],
                        [
                            "K.reshape(loss, reshape_axis_list[i])",
                            "Call"
                        ],
                        [
                            "original_loss_func(true, pred)",
                            "Call"
                        ],
                        [
                            "loss * weight_multiplier",
                            "BinOp"
                        ],
                        [
                            "original_loss_func(y_true, y_pred)",
                            "Call"
                        ],
                        [
                            "K.reshape(loss, reshape_axis)",
                            "Call"
                        ],
                        [
                            "loss * weightMap",
                            "BinOp"
                        ],
                        [
                            "original_loss_func(y_true, y_pred)",
                            "Call"
                        ],
                        [
                            "K.reshape(loss, reshape_axis)",
                            "Call"
                        ],
                        [
                            "loss * weightMap",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_128": {
                "a": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "original_loss_func(true, pred)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "losses[i](y_true, y_pred) * weights[i]",
                            "BinOp"
                        ],
                        [
                            "K.reshape(loss, reshape_axis_list[i])",
                            "Call"
                        ],
                        [
                            "original_loss_func(true, pred)",
                            "Call"
                        ],
                        [
                            "loss * weight_multiplier",
                            "BinOp"
                        ],
                        [
                            "original_loss_func(y_true, y_pred)",
                            "Call"
                        ],
                        [
                            "K.reshape(loss, reshape_axis)",
                            "Call"
                        ],
                        [
                            "loss * weightMap",
                            "BinOp"
                        ],
                        [
                            "original_loss_func(y_true, y_pred)",
                            "Call"
                        ],
                        [
                            "K.reshape(loss, reshape_axis)",
                            "Call"
                        ],
                        [
                            "loss * weightMap",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_178": {
                "x": {
                    "value": "tv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.sum(t, -1)",
                            "Call"
                        ],
                        [
                            "K.mean(tv, 0, keepdims=True)",
                            "Call"
                        ],
                        [
                            "K.square(tv)",
                            "Call"
                        ],
                        [
                            "K.sum(t, -1)",
                            "Call"
                        ],
                        [
                            "K.mean(tv, 0, keepdims=True)",
                            "Call"
                        ],
                        [
                            "K.sum(y_true, spatial_dim_axes)",
                            "Call"
                        ],
                        [
                            "K.mean(tv, 0, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_179": {
                "x": {
                    "value": "tbv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.sum(tb, -1)",
                            "Call"
                        ],
                        [
                            "K.mean(tbv, 0, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_225": {
                "x": {
                    "value": "tv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.sum(t, -1)",
                            "Call"
                        ],
                        [
                            "K.mean(tv, 0, keepdims=True)",
                            "Call"
                        ],
                        [
                            "K.square(tv)",
                            "Call"
                        ],
                        [
                            "K.sum(t, -1)",
                            "Call"
                        ],
                        [
                            "K.mean(tv, 0, keepdims=True)",
                            "Call"
                        ],
                        [
                            "K.sum(y_true, spatial_dim_axes)",
                            "Call"
                        ],
                        [
                            "K.mean(tv, 0, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_291": {
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true[..., y_true_channels[0]:y_true_channels[1]]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., -1:]",
                            "Subscript"
                        ],
                        [
                            "K.cast(y_true[..., 0], 'int32')",
                            "Call"
                        ],
                        [
                            "K.one_hot(y_true, K.shape(y_pred)[-1])",
                            "Call"
                        ],
                        [
                            "y_true[..., 1:]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., 0:mid]",
                            "Subscript"
                        ],
                        [
                            "y_true[..., y_true_channels[0]:y_true_channels[1]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "square_31": {
                "x": {
                    "value": "mu - y_true",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_214": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred[..., 1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_229": {
                "a": {
                    "value": "w * 0.5 * (tv + pv)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "distnet/utils/lovasz_losses_tf.py": {
        "tensorflow": {
            "reduce_sum_20": {
                "variable": {
                    "value": "gts",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "gt_sorted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(labelsf, perm)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_24": {
                "variable": {
                    "value": "jaccard",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(jaccard[0:1], jaccard[1:] - jaccard[:-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_71": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(tf.shape(logits)[0], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.reduce_sum(logits) * 0.0",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "compute_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_85": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(scores, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, (-1,))",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "not_equal_89": {
                "variable": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, (-1,))",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "ignore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "boolean_mask_90": {
                "variable": {
                    "value": "vscores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(scores, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.not_equal(labels, ignore)",
                            "Call"
                        ],
                        [
                            "tf.not_equal(labels, ignore)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "valid_scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "boolean_mask_91": {
                "variable": {
                    "value": "vlabels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, (-1,))",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.not_equal(labels, ignore)",
                            "Call"
                        ],
                        [
                            "tf.not_equal(labels, ignore)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "valid_labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_152": {
                "variable": {
                    "value": "losses_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(treat_image, (logits, labels), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(treat_image, (probas, labels), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_156": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(losses)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(losses_tensor, present)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_172": {
                "variable": {
                    "value": "probas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "probas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(probas, (0, 2, 3, 1), name='BCHW_to_BHWC')",
                            "Call"
                        ],
                        [
                            "tf.reshape(probas, (-1, C))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, C)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_173": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, (-1,))",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "not_equal_176": {
                "variable": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, (-1,))",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "ignore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "boolean_mask_177": {
                "variable": {
                    "value": "vprobas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "probas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(probas, (0, 2, 3, 1), name='BCHW_to_BHWC')",
                            "Call"
                        ],
                        [
                            "tf.reshape(probas, (-1, C))",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.not_equal(labels, ignore)",
                            "Call"
                        ],
                        [
                            "tf.not_equal(labels, ignore)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "valid_probas",
                    "type": "str",
                    "possible_values": []
                }
            },
            "boolean_mask_178": {
                "variable": {
                    "value": "vlabels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, (-1,))",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.not_equal(labels, ignore)",
                            "Call"
                        ],
                        [
                            "tf.not_equal(labels, ignore)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "valid_labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "map_fn_45": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "treat_image",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "(logits, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_46": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(treat_image, (logits, labels), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(treat_image, (probas, labels), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_61": {
                "variable": {
                    "value": "labelsf",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, (-1,))",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "top_k_64": {
                "variable": {
                    "value": "(errors_sorted, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "errors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - logits * tf.stop_gradient(signs)",
                            "BinOp"
                        ],
                        [
                            "tf.abs(fg - class_pred)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "tf.shape(errors)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "descending_sort",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_65": {
                "variable": {
                    "value": "gt_sorted",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "labelsf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, logits.dtype)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensordot_67": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.relu(errors_sorted)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.stop_gradient(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "axes": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_non_void",
                    "type": "str",
                    "possible_values": []
                }
            },
            "map_fn_115": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "treat_image",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "(probas, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_116": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(treat_image, (logits, labels), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(treat_image, (probas, labels), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_134": {
                "variable": {
                    "value": "fg",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(labels, c)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "probas.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_143": {
                "variable": {
                    "value": "errors",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fg - class_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "top_k_144": {
                "variable": {
                    "value": "(errors_sorted, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "errors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - logits * tf.stop_gradient(signs)",
                            "BinOp"
                        ],
                        [
                            "tf.abs(fg - class_pred)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "tf.shape(errors)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "'descending_sort_{}'.format(c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_145": {
                "variable": {
                    "value": "fg_sorted",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "fg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.equal(labels, c), probas.dtype)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_154": {
                "variable": {
                    "value": "present",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "present",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(present)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_155": {
                "variable": {
                    "value": "losses_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "losses_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(losses)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(losses_tensor, present)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "present",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(present)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_167": {
                "variable": {
                    "value": "probas",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "probas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(probas, (0, 2, 3, 1), name='BCHW_to_BHWC')",
                            "Call"
                        ],
                        [
                            "tf.reshape(probas, (-1, C))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "BCHW_to_BHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cumsum_21": {
                "x": {
                    "value": "gt_sorted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(labelsf, perm)",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_22": {
                "x": {
                    "value": "1.0 - gt_sorted",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_71": {
                "x": {
                    "value": "tf.shape(logits)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_67": {
                "features": {
                    "value": "errors_sorted",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_67": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lovasz_grad(gt_sorted)",
                            "Call"
                        ],
                        [
                            "lovasz_grad(fg_sorted)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_134": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, (-1,))",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_to_sum",
                            "variable"
                        ]
                    ]
                }
            },
            "tensordot_148": {
                "a": {
                    "value": "errors_sorted",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.stop_gradient(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "axes": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "'loss_class_{}'.format(c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_165": {
                "input": {
                    "value": "probas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(probas, (0, 2, 3, 1), name='BCHW_to_BHWC')",
                            "Call"
                        ],
                        [
                            "tf.reshape(probas, (-1, C))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_42": {
                "input": {
                    "value": "lab",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_63": {
                "input": {
                    "value": "signs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0 * labelsf - 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_71": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_72": {
                "input_tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_112": {
                "input": {
                    "value": "lab",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_148": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lovasz_grad(gt_sorted)",
                            "Call"
                        ],
                        [
                            "lovasz_grad(fg_sorted)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_64": {
                "input": {
                    "value": "errors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - logits * tf.stop_gradient(signs)",
                            "BinOp"
                        ],
                        [
                            "tf.abs(fg - class_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_136": {
                "input_tensor": {
                    "value": "fg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.equal(labels, c), probas.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_144": {
                "input": {
                    "value": "errors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - logits * tf.stop_gradient(signs)",
                            "BinOp"
                        ],
                        [
                            "tf.abs(fg - class_pred)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}