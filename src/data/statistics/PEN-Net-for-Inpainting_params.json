{
    "core/dataset.py": {
        "torch": {
            "DataLoader_89": {
                "variable": {
                    "value": "sample_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "core/inception.py": {
        "torch": {
            "ModuleList_51": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_114": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_59": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "*args": {
                    "value": "*block0",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_68": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "*args": {
                    "value": "*block1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "*args": {
                    "value": "*block2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_92": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "*args": {
                    "value": "*block3",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "core/loss.py": {
        "torch": {
            "Tensor_19": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_20": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "L1Loss_104": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_125": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_47": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(x + 1) / 2",
                            "BinOp"
                        ],
                        [
                            "(x - self.mean.view(1, 3, 1, 1)) / self.std.view(1, 3, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(x, size=(256, 256), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(layer)(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BCELoss_73": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_69": {
                "data": {
                    "value": "target_real_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_70": {
                "data": {
                    "value": "target_fake_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MSELoss_75": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "core/metric.py": {
        "torch": {
            "from_numpy_83": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images[start:end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_93": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(pred, output_size=(1, 1))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "core/spectral_norm.py": {
        "torch": {
            "dot_85": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "normalize(torch.mv(weight_mat, v), dim=0, eps=self.eps, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "normalize(weight.new_empty(h).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ],
                        [
                            "state_dict[prefix + fn.name + '_u']",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.mv(weight_mat, v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "chain_matmul_105": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "*matrices": {
                    "value": "weight_mat.t().mm(weight_mat).pinverse()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "weight_mat.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_105": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_123": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.new_empty(h).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "fn.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_124": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.new_empty(w).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "fn.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mv_85": {
                "input": {
                    "value": "weight_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight",
                            "Name"
                        ],
                        [
                            "weight_mat.permute(self.dim, *[d for d in range(weight_mat.dim()) if d != self.dim])",
                            "Call"
                        ],
                        [
                            "self.reshape_weight_to_matrix(weight)",
                            "Call"
                        ],
                        [
                            "fn.reshape_weight_to_matrix(weight)",
                            "Call"
                        ],
                        [
                            "fn.reshape_weight_to_matrix(weight_orig)",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_v')",
                            "Call"
                        ],
                        [
                            "normalize(torch.mv(weight_mat.t(), u), dim=0, eps=self.eps, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "torch.chain_matmul(weight_mat.t().mm(weight_mat).pinverse(), weight_mat.t(), u.unsqueeze(1)).squeeze(1)",
                            "Call"
                        ],
                        [
                            "normalize(weight.new_empty(w).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_96": {
                "data": {
                    "value": "weight.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_78": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mv(weight_mat.t(), u)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_v')",
                            "Call"
                        ],
                        [
                            "normalize(torch.mv(weight_mat.t(), u), dim=0, eps=self.eps, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "torch.chain_matmul(weight_mat.t().mm(weight_mat).pinverse(), weight_mat.t(), u.unsqueeze(1)).squeeze(1)",
                            "Call"
                        ],
                        [
                            "normalize(weight.new_empty(w).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_79": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mv(weight_mat, v)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "normalize(torch.mv(weight_mat, v), dim=0, eps=self.eps, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "normalize(weight.new_empty(h).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ],
                        [
                            "state_dict[prefix + fn.name + '_u']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "dot_106": {
                "input": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "normalize(torch.mv(weight_mat, v), dim=0, eps=self.eps, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "normalize(weight.new_empty(h).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ],
                        [
                            "state_dict[prefix + fn.name + '_u']",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.mv(weight_mat, v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mv_106": {
                "input": {
                    "value": "weight_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight",
                            "Name"
                        ],
                        [
                            "weight_mat.permute(self.dim, *[d for d in range(weight_mat.dim()) if d != self.dim])",
                            "Call"
                        ],
                        [
                            "self.reshape_weight_to_matrix(weight)",
                            "Call"
                        ],
                        [
                            "fn.reshape_weight_to_matrix(weight)",
                            "Call"
                        ],
                        [
                            "fn.reshape_weight_to_matrix(weight_orig)",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_v')",
                            "Call"
                        ],
                        [
                            "normalize(torch.mv(weight_mat.t(), u), dim=0, eps=self.eps, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "torch.chain_matmul(weight_mat.t().mm(weight_mat).pinverse(), weight_mat.t(), u.unsqueeze(1)).squeeze(1)",
                            "Call"
                        ],
                        [
                            "normalize(weight.new_empty(w).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "mv_78": {
                "input": {
                    "value": "weight_mat.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "normalize(torch.mv(weight_mat, v), dim=0, eps=self.eps, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "normalize(weight.new_empty(h).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ],
                        [
                            "state_dict[prefix + fn.name + '_u']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mv_79": {
                "input": {
                    "value": "weight_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight",
                            "Name"
                        ],
                        [
                            "weight_mat.permute(self.dim, *[d for d in range(weight_mat.dim()) if d != self.dim])",
                            "Call"
                        ],
                        [
                            "self.reshape_weight_to_matrix(weight)",
                            "Call"
                        ],
                        [
                            "fn.reshape_weight_to_matrix(weight)",
                            "Call"
                        ],
                        [
                            "fn.reshape_weight_to_matrix(weight_orig)",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_v')",
                            "Call"
                        ],
                        [
                            "normalize(torch.mv(weight_mat.t(), u), dim=0, eps=self.eps, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "torch.chain_matmul(weight_mat.t().mm(weight_mat).pinverse(), weight_mat.t(), u.unsqueeze(1)).squeeze(1)",
                            "Call"
                        ],
                        [
                            "normalize(weight.new_empty(w).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "core/trainer.py": {
        "torch": {
            "DataLoader_46": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config['trainer']['batch_size'] // config['world_size']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "self.train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config['trainer']['num_workers']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "self.train_sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "partial(set_seed, base=config['seed'])",
                            "Call"
                        ]
                    ]
                }
            },
            "L1Loss_53": {
                "variable": {
                    "value": "self.l1_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_65": {
                "variable": {
                    "value": "self.optimG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config['trainer']['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "betas": {
                    "value": "(self.config['trainer']['beta1'], self.config['trainer']['beta2'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_67": {
                "variable": {
                    "value": "self.optimD",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config['trainer']['lr'] * config['trainer']['d2glr']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "betas": {
                    "value": "(self.config['trainer']['beta1'], self.config['trainer']['beta2'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DistributedSampler_44": {
                "variable": {
                    "value": "self.train_sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_replicas": {
                    "value": "config['world_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "rank": {
                    "value": "config['global_rank']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_107": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "gen_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_path, 'gen_{}.pth'.format(str(latest_epoch).zfill(5)))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config['save_dir'], 'gen_{}.pth'.format(str(it).zfill(5)))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: set_device(storage)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_109": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "dis_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_path, 'dis_{}.pth'.format(str(latest_epoch).zfill(5)))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config['save_dir'], 'dis_{}.pth'.format(str(it).zfill(5)))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: set_device(storage)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_111": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_path, 'opt_{}.pth'.format(str(latest_epoch).zfill(5)))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config['save_dir'], 'opt_{}.pth'.format(str(it).zfill(5)))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: set_device(storage)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(images_masked, masks)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_131": {
                "obj": {
                    "value": "{'netG': netG.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "gen_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_path, 'gen_{}.pth'.format(str(latest_epoch).zfill(5)))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config['save_dir'], 'gen_{}.pth'.format(str(it).zfill(5)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_132": {
                "obj": {
                    "value": "{'netD': netD.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "dis_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_path, 'dis_{}.pth'.format(str(latest_epoch).zfill(5)))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config['save_dir'], 'dis_{}.pth'.format(str(it).zfill(5)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_133": {
                "obj": {
                    "value": "{'epoch': self.epoch, 'iteration': self.iteration, 'optimG': self.optimG.state_dict(), 'optimD': self.optimD.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "opt_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_path, 'opt_{}.pth'.format(str(latest_epoch).zfill(5)))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config['save_dir'], 'opt_{}.pth'.format(str(it).zfill(5)))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_183": {
                "input": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_186": {
                "input": {
                    "value": "1 - masks",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "interpolate_192": {
                "input": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "f.size()[2:4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_202": {
                "input": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_202": {
                "input": {
                    "value": "images - pred_img",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "core/utils.py": {
        "torch": {
            "manual_seed_23": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "seed + base",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_all_24": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "seed + base",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/pennet.py": {
        "torch": {
            "Tensor_362": {
                "variable": {
                    "value": "bt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_363": {
                "variable": {
                    "value": "ft",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.dw_conv01",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(4, cnum, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.dw_conv02",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(cnum, cnum * 2, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.dw_conv03",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(cnum * 2, cnum * 4, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.dw_conv04",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(cnum * 4, cnum * 8, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.dw_conv05",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(cnum * 8, cnum * 16, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.dw_conv06",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(cnum * 16, cnum * 16, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "self.up_conv05",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(cnum * 16, cnum * 16, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "variable": {
                    "value": "self.up_conv04",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(cnum * 32, cnum * 8, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.up_conv03",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(cnum * 16, cnum * 4, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.up_conv02",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(cnum * 8, cnum * 2, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "variable": {
                    "value": "self.up_conv01",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(cnum * 4, cnum, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_113": {
                "variable": {
                    "value": "self.torgb5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(cnum * 32, 3, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "self.torgb4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(cnum * 16, 3, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "self.torgb3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(cnum * 8, 3, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.torgb2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(cnum * 4, 3, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "variable": {
                    "value": "self.torgb1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(cnum * 2, 3, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(cnum * 2, cnum, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_177": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "use_spectral_norm(nn.Conv2d(in_channels=in_channels, out_channels=cnum, kernel_size=5, stride=2, padding=1, bias=False), use_sn=use_sn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_195": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "cnum * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_260": {
                "variable": {
                    "value": "raw_w_groups",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "raw_w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "extract_patches(x1, kernel=kernel, stride=self.rate * self.stride)",
                            "Call"
                        ],
                        [
                            "raw_w.contiguous().view(x1s[0], -1, x1s[1], kernel, kernel)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_263": {
                "variable": {
                    "value": "f_groups",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dw_conv02(x1)",
                            "Call"
                        ],
                        [
                            "self.at_conv02(x2, x3, mask)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_267": {
                "variable": {
                    "value": "w_groups",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "extract_patches(x2, kernel=self.ksize, stride=self.stride)",
                            "Call"
                        ],
                        [
                            "w.contiguous().view(x2s[0], -1, x2s[1], self.ksize, self.ksize)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_281": {
                "variable": {
                    "value": "mm_groups",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m.eq(0.0).float()",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_314": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "yt.cpu().data.numpy().transpose([0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(tmp, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_204": {
                "variable": {
                    "value": "label_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(label_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_271": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.interpolate(mask, size=x2s[2:4], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.zeros([1, 1, x2s[2], x2s[3]])",
                            "Call"
                        ],
                        [
                            "mask.cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size": {
                    "value": "x2s[2:4]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "list(x2.size())",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_273": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, x2s[2], x2s[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_301": {
                "variable": {
                    "value": "yi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xi",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "wi_normed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "wi / torch.max(torch.sqrt((wi * wi).sum([1, 2, 3], keepdim=True)), escape_NaN)",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0 if self.ksize == 1 else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "softmax_306": {
                "variable": {
                    "value": "yi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yi * scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_321": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cnum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_71": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "cnum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "cnum * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_74": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "cnum * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cnum * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_77": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "cnum * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cnum * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_80": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "in_channels": {
                    "value": "cnum * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cnum * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_83": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "in_channels": {
                    "value": "cnum * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cnum * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "cnum * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cnum * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "in_channels": {
                    "value": "cnum * 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cnum * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_101": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "in_channels": {
                    "value": "cnum * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cnum * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "in_channels": {
                    "value": "cnum * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cnum * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_107": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "in_channels": {
                    "value": "cnum * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cnum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_110": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "in_channels": {
                    "value": "cnum * 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "in_channels": {
                    "value": "cnum * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "cnum * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "cnum * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "cnum * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "in_channels": {
                    "value": "cnum * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cnum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_132": {
                "in_channels": {
                    "value": "cnum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_155": {
                "input": {
                    "value": "x6",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dw_conv06(x5)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_156": {
                "input": {
                    "value": "torch.cat([upx5, x5], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_157": {
                "input": {
                    "value": "torch.cat([upx4, x4], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_158": {
                "input": {
                    "value": "torch.cat([upx3, x3], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_159": {
                "input": {
                    "value": "torch.cat([upx2, x2], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_161": {
                "tensors": {
                    "value": "[upx5, x5]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_162": {
                "tensors": {
                    "value": "[upx4, x4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_163": {
                "tensors": {
                    "value": "[upx3, x3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_164": {
                "tensors": {
                    "value": "[upx2, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_165": {
                "tensors": {
                    "value": "[upx1, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_167": {
                "input": {
                    "value": "torch.cat([upx1, x1], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_180": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_184": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_188": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_192": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ZeroPad2d_328": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_156": {
                "tensors": {
                    "value": "[upx5, x5]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_157": {
                "tensors": {
                    "value": "[upx4, x4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_158": {
                "tensors": {
                    "value": "[upx3, x3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_159": {
                "tensors": {
                    "value": "[upx2, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_167": {
                "tensors": {
                    "value": "[upx1, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_178": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cnum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_182": {
                "in_channels": {
                    "value": "cnum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "cnum * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_186": {
                "in_channels": {
                    "value": "cnum * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cnum * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_190": {
                "in_channels": {
                    "value": "cnum * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cnum * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_300": {
                "input": {
                    "value": "torch.sqrt((wi * wi).sum([1, 2, 3], keepdim=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv_transpose2d_312": {
                "input": {
                    "value": "yi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.conv2d(xi, wi_normed, stride=1, padding=padding)",
                            "Call"
                        ],
                        [
                            "yi.contiguous().view(1, x2s[2] // self.stride * x2s[3] // self.stride, x2s[2], x2s[3])",
                            "Call"
                        ],
                        [
                            "yi * mi",
                            "BinOp"
                        ],
                        [
                            "F.softmax(yi * scale, dim=1)",
                            "Call"
                        ],
                        [
                            "yi * mi",
                            "BinOp"
                        ],
                        [
                            "yi.clamp(min=1e-08)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(yi, wi_center, stride=self.rate, padding=1) / 4.0",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "wi_center",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "raw_wi[0]",
                            "Subscript"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_229": {
                "*args": {
                    "value": "nn.Conv2d(input_channels, output_channels // groups, kernel_size=3, dilation=rates[i], padding=rates[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_300": {
                "input": {
                    "value": "(wi * wi).sum([1, 2, 3], keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_230": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_channels // groups",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "rates[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "rates[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_231": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "load_59": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(config['save_dir'], 'gen_{}.pth'.format(latest_epoch))",
                            "Call"
                        ],
                        [
                            "os.path.join(config['save_dir'], 'results_{}_level_{}'.format(str(latest_epoch).zfill(5), str(args.level).zfill(2)))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: set_device(storage)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_67": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Dataset(config['data_loader'], debug=False, split='test', level=args.level)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config['trainer']['num_workers']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "json.load(open(args.config))",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_93": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_105": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_51": {
                "device": {
                    "value": "gpu",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_78": {
                "tensors": {
                    "value": "(images_masked, masks)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_count_64": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_29": {
                "device": {
                    "value": "int(config['local_rank'])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}