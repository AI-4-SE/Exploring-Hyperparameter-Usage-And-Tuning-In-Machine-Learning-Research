{
    "gamesrl/generative/_tf_scores.py": {
        "sklearn": {
            "gen_batches_73": {
                "n": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(inps)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "ConfigProto_32": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "input_images_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_41": {
                "variable": {
                    "value": "images_",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_images_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 3, None, None])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_bilinear_43": {
                "variable": {
                    "value": "images_",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "images_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input_images_, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(images_, [size_, size_])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[size_, size_]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_44": {
                "variable": {
                    "value": "generated_images_list_",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "images_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input_images_, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(images_, [size_, size_])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_57": {
                "variable": {
                    "value": "logits_",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "array_ops.unstack(logits_)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_58": {
                "variable": {
                    "value": "activations_",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "array_ops.unstack(activations_)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "variable": {
                    "value": "activations1_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "activations1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "activations2_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "activations2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reset_default_graph_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "map_fn_48": {
                "variable": {
                    "value": "(logits_, activations_)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fn": {
                    "value": "_run_inception",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "array_ops.stack(generated_images_list_)",
                    "type": "Call",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "(tf.float32, tf.float32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "RunClassifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_46": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_57": {
                "value": {
                    "value": "logits_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.concat(array_ops.unstack(logits_), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_58": {
                "value": {
                    "value": "activations_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.concat(array_ops.unstack(activations_), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_67": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_80": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_50": {
                "values": {
                    "value": "generated_images_list_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.split(images_, num_or_size_splits=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gamesrl/numpy/games.py": {
        "sklearn": {
            "check_random_state_77": {
                "variable": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "check_random_state_98": {
                "variable": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "check_random_state_22": {
                "variable": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(seed)",
                            "Call"
                        ],
                        [
                            "check_random_state(seed)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "gamesrl/numpy/schedulers.py": {
        "sklearn": {
            "check_random_state_14": {
                "variable": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_random_state_43": {
                "variable": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_random_state_57": {
                "variable": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "gamesrl/schedulers.py": {
        "sklearn": {
            "check_random_state_14": {
                "variable": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_random_state_37": {
                "variable": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_random_state_51": {
                "variable": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "gamesrl/schedulers_numpy.py": {
        "sklearn": {
            "check_random_state_14": {
                "variable": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_random_state_43": {
                "variable": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_random_state_57": {
                "variable": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "gamesrl/train.py": {
        "sklearn": {
            "check_random_state_116": {
                "variable": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "SGD_46": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "player.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ],
                        [
                            "0.01",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_85": {
                "variable": {
                    "value": "strategy",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "player()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_144": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "strategy.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ],
                        [
                            "0.01",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grad_87": {
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "objective(player())",
                            "Call"
                        ],
                        [
                            "objective(strategy)",
                            "Call"
                        ],
                        [
                            "game(strategies, index=i)[0].item()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(strategy,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_88": {
                "input": {
                    "value": "grad * strategy",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_88": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "autograd.grad(loss, (strategy,))[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/gan_grid.py": {
        "sklearn": {
            "ParameterGrid_27": {
                "variable": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "{'lr': [0.0005, 0.0008], 'G_lr_factor': [0.1], 'sampling': ['all', 'alternated'], 'seed': [1100, 1200, 1300, 1400]}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/matrix_games.py": {
        "sklearn": {
            "check_random_state_146": {
                "variable": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "training_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/matrix_games_grid.py": {
        "sklearn": {
            "ParameterGrid_110": {
                "param_grid": {
                    "value": "{'sampling': ['all', 'alternated', 1, 5, 25], 'step_size': np.logspace(-6, 1, 16), 'skewness': [0.95, 1], 'variance_reduction': [True, False], 'gaussian_noise': [0.0, 1.0, 10.0, 100.0], 'l1_penalty': [0.0], 'seed': seeds, 'n_players': [50]}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/old/gan_train_grid.py": {
        "sklearn": {
            "ParameterGrid_27": {
                "variable": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "{'lr': [0.001, 0.0008, 0.0005], 'G_lr_factor': [0.1], 'variance_reduction': [True, False]}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/old/gan_train_grid_new.py": {
        "sklearn": {
            "ParameterGrid_27": {
                "variable": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "{'lr': [0.0005, 0.0008], 'G_lr_factor': [0.1], 'sampling': ['alternated', 'one', 'half_alternated', 'all']}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/old/stoch_vi.py": {
        "sklearn": {
            "check_random_state_182": {
                "variable": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_random_state_315": {
                "variable": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_random_state_424": {
                "variable": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "gamesrl/extrapolation.py": {
        "torch": {
            "grad_10": {
                "outputs": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "(p,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "create_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "gamesrl/games.py": {
        "torch": {
            "cat_54": {
                "variable": {
                    "value": "stack_strategies",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[strategy[None, :] for strategy in strategies]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_57": {
                "variable": {
                    "value": "prods",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ikjl,jl->ikj",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "masked_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.matrix[players]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "einsum_60": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ik,ikj->i",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "masked_strategies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stack_strategies[players]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, -1], [-1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 3, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, -1.0, 1], [1, 0, -1], [-1, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c0 * c1, c0 * d1, d0 * c1, d0 * d1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_10": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-F.softplus(x)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "sum_63": {
                "input": {
                    "value": "masked_strategies * eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_105": {
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_106": {
                "input": {
                    "value": "p[:, None] * torch.solve(self.payoff[:, players], P)[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_like_62": {
                "input": {
                    "value": "masked_strategies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stack_strategies[players]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_113": {
                "data": {
                    "value": "[[-1, -3, 0.0, -2], [-1, 0, -3, -2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_113": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "data": {
                    "value": "[[-1, 1, 1.0, -1], [1, -1, -1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_120": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "solve_106": {
                "input": {
                    "value": "self.payoff[:, players]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "A": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((c0 * c1, c0 * d1, d0 * c1, d0 * d1), dim=1)",
                            "Call"
                        ],
                        [
                            "P[1:]",
                            "Subscript"
                        ],
                        [
                            "torch.eye(4) - self.discount * P",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "gamesrl/generative/dcgan.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(in_features, n_filters * 8, 4, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(in_features, n_filters * 8, 4, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(in_features, n_filters * 4, 4, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(in_features, n_filters * 4, 4, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, n_filters, 4, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, n_filters, 4, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_161": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, n_filters, 4, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_177": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, n_filters, 4, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_12": {
                "in_channels": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "num_features": {
                    "value": "n_filters * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_16": {
                "in_channels": {
                    "value": "n_filters * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "n_filters * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_20": {
                "in_channels": {
                    "value": "n_filters * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_24": {
                "in_channels": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "num_features": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_28": {
                "in_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_35": {
                "in_channels": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_38": {
                "in_channels": {
                    "value": "n_filters * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_41": {
                "in_channels": {
                    "value": "n_filters * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_44": {
                "in_channels": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_47": {
                "in_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_67": {
                "in_channels": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "num_features": {
                    "value": "n_filters * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_71": {
                "in_channels": {
                    "value": "n_filters * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "num_features": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_75": {
                "in_channels": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "num_features": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_79": {
                "in_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_86": {
                "in_channels": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_87": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_89": {
                "in_channels": {
                    "value": "n_filters * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_92": {
                "in_channels": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_95": {
                "in_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_115": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "in_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_118": {
                "num_features": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_119": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_121": {
                "in_channels": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_122": {
                "num_features": {
                    "value": "n_filters * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_123": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "in_channels": {
                    "value": "n_filters * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_126": {
                "num_features": {
                    "value": "n_filters * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_127": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "in_channels": {
                    "value": "n_filters * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_134": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_135": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_137": {
                "in_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_138": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_140": {
                "in_channels": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_141": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_143": {
                "in_channels": {
                    "value": "n_filters * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_144": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_146": {
                "in_channels": {
                    "value": "n_filters * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_163": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_164": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_166": {
                "in_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_167": {
                "num_features": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_168": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_170": {
                "in_channels": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_171": {
                "num_features": {
                    "value": "n_filters * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_172": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_174": {
                "in_channels": {
                    "value": "n_filters * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_179": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_180": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_182": {
                "in_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_183": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_185": {
                "in_channels": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_186": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_188": {
                "in_channels": {
                    "value": "n_filters * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "gamesrl/generative/losses.py": {
        "torch": {
            "Parameter_78": {
                "variable": {
                    "value": "line_data",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "line_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_data * (1 - epsilon) + fake_data * (1 - epsilon)",
                            "BinOp"
                        ],
                        [
                            "Parameter(line_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_80": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "line_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_D(line_data).sum()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "line_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_data * (1 - epsilon) + fake_data * (1 - epsilon)",
                            "BinOp"
                        ],
                        [
                            "Parameter(line_data)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_82": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(grad ** 2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_82": {
                "input": {
                    "value": "grad ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsigmoid_40": {
                "input": {
                    "value": "true_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_48": {
                "input": {
                    "value": "fake_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "logsigmoid_34": {
                "input": {
                    "value": "fake_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_36": {
                "input": {
                    "value": "fake_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gamesrl/generative/models.py": {
        "torch": {
            "max_pool2d_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(pool3)",
                            "Call"
                        ],
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "self.inception3a(x)",
                            "Call"
                        ],
                        [
                            "self.inception3b(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool3(x)",
                            "Call"
                        ],
                        [
                            "self.inception4a(x)",
                            "Call"
                        ],
                        [
                            "self.inception4b(x)",
                            "Call"
                        ],
                        [
                            "self.inception4c(x)",
                            "Call"
                        ],
                        [
                            "self.inception4d(x)",
                            "Call"
                        ],
                        [
                            "self.inception4e(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool4(x)",
                            "Call"
                        ],
                        [
                            "self.inception5a(x)",
                            "Call"
                        ],
                        [
                            "self.inception5b(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(pool3)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (4, 4))",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, 0.7, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_66": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(pool3)",
                            "Call"
                        ],
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "self.inception3a(x)",
                            "Call"
                        ],
                        [
                            "self.inception3b(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool3(x)",
                            "Call"
                        ],
                        [
                            "self.inception4a(x)",
                            "Call"
                        ],
                        [
                            "self.inception4b(x)",
                            "Call"
                        ],
                        [
                            "self.inception4c(x)",
                            "Call"
                        ],
                        [
                            "self.inception4d(x)",
                            "Call"
                        ],
                        [
                            "self.inception4e(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool4(x)",
                            "Call"
                        ],
                        [
                            "self.inception5a(x)",
                            "Call"
                        ],
                        [
                            "self.inception5b(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(pool3)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (4, 4))",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, 0.7, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_94": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(pool3)",
                            "Call"
                        ],
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "self.inception3a(x)",
                            "Call"
                        ],
                        [
                            "self.inception3b(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool3(x)",
                            "Call"
                        ],
                        [
                            "self.inception4a(x)",
                            "Call"
                        ],
                        [
                            "self.inception4b(x)",
                            "Call"
                        ],
                        [
                            "self.inception4c(x)",
                            "Call"
                        ],
                        [
                            "self.inception4d(x)",
                            "Call"
                        ],
                        [
                            "self.inception4e(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool4(x)",
                            "Call"
                        ],
                        [
                            "self.inception5a(x)",
                            "Call"
                        ],
                        [
                            "self.inception5b(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(pool3)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (4, 4))",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, 0.7, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "dropout_96": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(pool3)",
                            "Call"
                        ],
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "self.inception3a(x)",
                            "Call"
                        ],
                        [
                            "self.inception3b(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool3(x)",
                            "Call"
                        ],
                        [
                            "self.inception4a(x)",
                            "Call"
                        ],
                        [
                            "self.inception4b(x)",
                            "Call"
                        ],
                        [
                            "self.inception4c(x)",
                            "Call"
                        ],
                        [
                            "self.inception4d(x)",
                            "Call"
                        ],
                        [
                            "self.inception4e(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool4(x)",
                            "Call"
                        ],
                        [
                            "self.inception5a(x)",
                            "Call"
                        ],
                        [
                            "self.inception5b(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(pool3)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (4, 4))",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, 0.7, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MaxPool2d_150": {
                "variable": {
                    "value": "self.maxpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_153": {
                "variable": {
                    "value": "self.maxpool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_157": {
                "variable": {
                    "value": "self.maxpool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_164": {
                "variable": {
                    "value": "self.maxpool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_173": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_174": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_175": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_260": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(in_channels, ch3x3red, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_265": {
                "variable": {
                    "value": "self.branch3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(in_channels, ch5x5red, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_270": {
                "variable": {
                    "value": "self.branch4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(kernel_size=3, stride=1, padding=1, ceil_mode=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_291": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_292": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "adaptive_avg_pool2d_296": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(pool3)",
                            "Call"
                        ],
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "self.inception3a(x)",
                            "Call"
                        ],
                        [
                            "self.inception3b(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool3(x)",
                            "Call"
                        ],
                        [
                            "self.inception4a(x)",
                            "Call"
                        ],
                        [
                            "self.inception4b(x)",
                            "Call"
                        ],
                        [
                            "self.inception4c(x)",
                            "Call"
                        ],
                        [
                            "self.inception4d(x)",
                            "Call"
                        ],
                        [
                            "self.inception4e(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool4(x)",
                            "Call"
                        ],
                        [
                            "self.inception5a(x)",
                            "Call"
                        ],
                        [
                            "self.inception5b(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(pool3)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (4, 4))",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, 0.7, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_302": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_304": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(pool3)",
                            "Call"
                        ],
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "self.inception3a(x)",
                            "Call"
                        ],
                        [
                            "self.inception3b(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool3(x)",
                            "Call"
                        ],
                        [
                            "self.inception4a(x)",
                            "Call"
                        ],
                        [
                            "self.inception4b(x)",
                            "Call"
                        ],
                        [
                            "self.inception4c(x)",
                            "Call"
                        ],
                        [
                            "self.inception4d(x)",
                            "Call"
                        ],
                        [
                            "self.inception4e(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool4(x)",
                            "Call"
                        ],
                        [
                            "self.inception5a(x)",
                            "Call"
                        ],
                        [
                            "self.inception5b(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(pool3)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (4, 4))",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, 0.7, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.7",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_316": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_317": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_ch0, x_ch1, x_ch2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_198": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_ch0, x_ch1, x_ch2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_282": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1, branch2, branch3, branch4]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_322": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(pool3)",
                            "Call"
                        ],
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "self.inception3a(x)",
                            "Call"
                        ],
                        [
                            "self.inception3b(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool3(x)",
                            "Call"
                        ],
                        [
                            "self.inception4a(x)",
                            "Call"
                        ],
                        [
                            "self.inception4b(x)",
                            "Call"
                        ],
                        [
                            "self.inception4c(x)",
                            "Call"
                        ],
                        [
                            "self.inception4d(x)",
                            "Call"
                        ],
                        [
                            "self.inception4e(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool4(x)",
                            "Call"
                        ],
                        [
                            "self.inception5a(x)",
                            "Call"
                        ],
                        [
                            "self.inception5b(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(pool3)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (4, 4))",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, 0.7, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "as_tensor_185": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X.rvs(m.weight.numel())",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "m.weight.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MaxPool2d_271": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_49": {
                "input": {
                    "value": "x[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_50": {
                "input": {
                    "value": "x[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_51": {
                "input": {
                    "value": "x[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_195": {
                "input": {
                    "value": "x[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_196": {
                "input": {
                    "value": "x[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_197": {
                "input": {
                    "value": "x[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gamesrl/generative/resnet.py": {
        "torch": {
            "Sequential_57": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * 4 * num_filters",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.network",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "self.block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(n_in, num_filters, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.shortcut1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResBlock(num_filters, resample='down', batchnorm=batchnorm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_36": {
                "variable": {
                    "value": "self.conv_shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "self.conv_shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "in_channels": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_34": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_76": {
                "num_features": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "num_features": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gamesrl/generative/validation.py": {
        "torch": {
            "zeros_40": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2048, 2048)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_42": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples, 1000)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_72": {
                "variable": {
                    "value": "is_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(preds * log_terms) / n_samples",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_32": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(noise)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "n_jobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TensorDataset_35": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_36": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(noise)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_57": {
                "variable": {
                    "value": "preds[start:end]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "these_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_58": {
                "input": {
                    "value": "these_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_59": {
                "input": {
                    "value": "these_features.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "these_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_69": {
                "input": {
                    "value": "mean_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds.mean(dim=0)",
                            "Call"
                        ],
                        [
                            "mean_pred[mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_71": {
                "input": {
                    "value": "preds * log_terms",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_75": {
                "input": {
                    "value": "mu[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "mu[None, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gamesrl/optimizers.py": {
        "torch": {}
    },
    "gamesrl/strategies.py": {
        "torch": {
            "Parameter_20": {
                "variable": {
                    "value": "self.strategy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(n_actions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.strategy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(2, 5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_9": {
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_20": {
                "*size": {
                    "value": "n_actions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_30": {
                "input": {
                    "value": "self.strategy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_36": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_46": {
                "input": {
                    "value": "self.strategy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gamesrl/tests/test_games.py": {
        "torch": {
            "tensor_8": {
                "data": {
                    "value": "[1, 1, 0.0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_9": {
                "data": {
                    "value": "[1, 1, 1, 0.0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_17": {
                "data": {
                    "value": "[0, 0, 0.0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_18": {
                "data": {
                    "value": "[0, 0, 0, 0.0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "data": {
                    "value": "[1.0, 1.0, 1.0, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "data": {
                    "value": "[1.0, 1.0, 1.0, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "gamesrl/utils.py": {
        "torch": {
            "tensor_38": {
                "data": {
                    "value": "np.array(pic)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_38": {
                "input": {
                    "value": "(2, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/eval_gidel/gan_eval.py": {
        "torch": {}
    },
    "scripts/eval_gidel/models/dcgan.py": {
        "torch": {
            "Linear_38": {
                "variable": {
                    "value": "self.deconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_filters * 4 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_39": {
                "variable": {
                    "value": "self.deconv1_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n_filters * 4 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_40": {
                "variable": {
                    "value": "self.deconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_filters * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "variable": {
                    "value": "self.deconv2_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_42": {
                "variable": {
                    "value": "self.deconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "variable": {
                    "value": "self.deconv3_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_44": {
                "variable": {
                    "value": "self.deconv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_62": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "variable": {
                    "value": "self.conv2_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_78": {
                "variable": {
                    "value": "self.conv3_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n_filters * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_filters * 4 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/eval_gidel/models/discriminator.py": {
        "torch": {
            "rand_38": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(x_true),) + (1,) * (x_true.dim() - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_43": {
                "outputs": {
                    "value": "p_penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x_penalty)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(alpha * x_true + (1 - alpha) * x_gen, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones_like(p_penalty).cuda(x_true.get_device()) if x_true.is_cuda else torch.ones_like(p_penalty)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_like_43": {
                "input": {
                    "value": "p_penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x_penalty)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_44": {
                "input": {
                    "value": "p_penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x_penalty)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/eval_gidel/models/resnet.py": {
        "torch": {
            "Sequential_59": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * 4 * num_filters",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.network",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_93": {
                "variable": {
                    "value": "self.block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, num_filters, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "variable": {
                    "value": "self.shortcut1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResBlock(num_filters, resample='down', batchnorm=batchnorm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_38": {
                "variable": {
                    "value": "self.conv_shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "variable": {
                    "value": "self.conv_shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_36": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_78": {
                "num_features": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "num_features": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/gan_eval.py": {
        "torch": {
            "DataLoader_33": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root=expanduser('~/data/games_rl/cifar10'), download=True, transform=transforms.Compose([transforms.Resize(32), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "TensorDataset(noise)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_71": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "test_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50000",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0'",
                            "str"
                        ]
                    ]
                }
            },
            "TensorDataset_73": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_74": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root=expanduser('~/data/games_rl/cifar10'), download=True, transform=transforms.Compose([transforms.Resize(32), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "TensorDataset(noise)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                }
            },
            "load_45": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_50": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "{'avg_net_G': net_G.state_dict()}",
                            "Dict"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "expanduser(join('~/output/games_rl/gan_figure', 'model_baseline.pkl'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_65": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/gan_gather.py": {
        "torch": {
            "device_196": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_209": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_195": {
                "seed": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_205": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(list_of_files, key=os.path.getctime)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, location: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/gan_train.py": {
        "torch": {
            "TensorDataset_44": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_45": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(noise)",
                            "Call"
                        ],
                        [
                            "'lsun'",
                            "str"
                        ],
                        [
                            "dset.ImageFolder(root=root, transform=transforms.Compose([transforms.Resize(image_size), transforms.CenterCrop(image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "dset.LSUN(root=root, classes=['bedroom_train'], transform=transforms.Compose([transforms.Resize(image_size), transforms.CenterCrop(image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "dset.CIFAR10(root=root, download=True, transform=transforms.Compose([transforms.Resize(image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "dset.MNIST(root=root, download=True, transform=transforms.Compose([transforms.Resize(image_size), transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,))]))",
                            "Call"
                        ],
                        [
                            "dset.FakeData(image_size=(3, image_size, image_size), transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                }
            },
            "LambdaLR_352": {
                "variable": {
                    "value": "scheduler_D",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer_class(net_D.parameters(), **D_param_dict)",
                            "Call"
                        ],
                        [
                            "ExtraOptimizerVR(optimizer_D)",
                            "Call"
                        ],
                        [
                            "ExtraOptimizer(optimizer_D)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_schedule",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LambdaLR_353": {
                "variable": {
                    "value": "scheduler_G",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer_class(net_G.parameters(), **G_param_dict)",
                            "Call"
                        ],
                        [
                            "ExtraOptimizerVR(optimizer_G)",
                            "Call"
                        ],
                        [
                            "ExtraOptimizer(optimizer_G)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_schedule",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/matrix_games_pytorch.py": {
        "torch": {
            "from_numpy_46": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mem.cache(make_positive_matrices)(n_players, n_actions, 1, conditioning, skewness, 0, _seed)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(H).float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/old/repeated_games.py": {
        "torch": {
            "manual_seed_10": {
                "seed": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_70": {
                "tensors": {
                    "value": "rec",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_31": {
                "data": {
                    "value": "torch.empty(dim_strategy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_31": {
                "*size": {
                    "value": "dim_strategy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "game.dim_strategy",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Parameter_36": {
                "data": {
                    "value": "torch.empty(dim_strategy, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_36": {
                "*size": {
                    "value": "dim_strategy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "game.dim_strategy",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_49": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strategies",
                            "variable"
                        ],
                        [
                            "strategies",
                            "variable"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_62": {
                "input": {
                    "value": "l.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_64": {
                "input": {
                    "value": "l.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/old/simple_games.py": {
        "torch": {
            "manual_seed_45": {
                "seed": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_59": {
                "data": {
                    "value": "torch.randn(n_actions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_67": {
                "input": {
                    "value": "s.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "any_110": {
                "input": {
                    "value": "step_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(n_players).uniform_(0, 1) < p",
                            "Compare"
                        ]
                    ]
                }
            },
            "sum_117": {
                "variable": {
                    "value": "masked_players",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "extra_mask.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_152": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "gap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "gap + torch.sum(g * (s - u))",
                            "BinOp"
                        ],
                        [
                            "res['gap']",
                            "Subscript"
                        ],
                        [
                            "res['gap']",
                            "Subscript"
                        ]
                    ]
                },
                "inputs": {
                    "value": "log_us",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[Parameter(torch.log(s.detach())) for s in avg_strategies]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "cat_157": {
                "tensors": {
                    "value": "strategy_r",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_59": {
                "*size": {
                    "value": "n_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "game.n_actions",
                            "Attribute"
                        ],
                        [
                            "res['n_actions']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "empty_75": {
                "*size": {
                    "value": "n_players",
                    "type": "variable",
                    "possible_values": [
                        [
                            "game.n_players",
                            "Attribute"
                        ],
                        [
                            "res['n_players']",
                            "Subscript"
                        ],
                        [
                            "res['n_players']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "any_82": {
                "input": {
                    "value": "extra_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step_mask",
                            "variable"
                        ],
                        [
                            "torch.empty(n_players).uniform_(0, 1) < p",
                            "Compare"
                        ]
                    ]
                }
            },
            "sum_91": {
                "variable": {
                    "value": "masked_players",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "extra_mask.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_142": {
                "data": {
                    "value": "torch.log(s.detach())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_142": {
                "input": {
                    "value": "s.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_149": {
                "input": {
                    "value": "g * (s - u)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_81": {
                "*size": {
                    "value": "n_players",
                    "type": "variable",
                    "possible_values": [
                        [
                            "game.n_players",
                            "Attribute"
                        ],
                        [
                            "res['n_players']",
                            "Subscript"
                        ],
                        [
                            "res['n_players']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softmax_127": {
                "input": {
                    "value": "avg_s",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_128": {
                "input": {
                    "value": "s.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/old/simple_stochastic_game.py": {
        "torch": {
            "randn_114": {
                "variable": {
                    "value": "log_strategies",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "len(strategies)",
                            "Call"
                        ],
                        [
                            "len(strategies)",
                            "Call"
                        ],
                        [
                            "len(strategies)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "len(strategy)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_152": {
                "variable": {
                    "value": "strategies",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(log_strategies_list, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rewards_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_30": {
                "variable": {
                    "value": "cat_strategies",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "strategies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.exp(log_s) for log_s in log_strategies]",
                            "ListComp"
                        ],
                        [
                            "torch.softmax(torch.cat(log_strategies_list, dim=0), dim=2).numpy()",
                            "Call"
                        ],
                        [
                            "np.cumsum(strategies, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_113": {
                "seed": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "gs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g[None, :] for g in gs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_123": {
                "variable": {
                    "value": "rs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[r.item() for r in rs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ones_16": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "len(strategies)",
                            "Call"
                        ],
                        [
                            "len(strategies)",
                            "Call"
                        ],
                        [
                            "len(strategies)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_20": {
                "variable": {
                    "value": "payoffs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "payoffs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([A[None, :], -A[None, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat([A[None, :], -A[None, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.randn(N, *(d for i in range(N))) / math.sqrt(math.pow(N, N)) * 10",
                            "BinOp"
                        ],
                        [
                            "payoffs[mask]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(payoffs, strategies[i])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "strategies[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_28": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "len(strategies)",
                            "Call"
                        ],
                        [
                            "len(strategies)",
                            "Call"
                        ],
                        [
                            "len(strategies)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_51": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "len(strategies)",
                            "Call"
                        ],
                        [
                            "len(strategies)",
                            "Call"
                        ],
                        [
                            "len(strategies)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_67": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_players",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, -1.0, 1], [1, 0, -1], [-1, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "payoffs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[A[None, :], -A[None, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_107": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N * d",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "N * d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_108": {
                "variable": {
                    "value": "hessian",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, -1.0, 1], [1, 0, -1], [-1, 1, 0]])",
                            "Call"
                        ],
                        [
                            "torch.randn(N * d, N * d)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1, -1.0], [-1, 1]])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "gs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g[None, :] for g in gs_e]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_37": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(this_hessian, cat_strategies) * strategy",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "enable_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_69": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_players",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_92": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, -1.0], [-1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "payoffs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[A[None, :], -A[None, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_103": {
                "seed": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_119": {
                "input": {
                    "value": "log_s",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "gs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g[None, :] for g in gs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "logsumexp_150": {
                "input": {
                    "value": "log_strategies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(N, d)",
                            "Call"
                        ],
                        [
                            "log_strategies - torch.logsumexp(log_strategies, dim=1)[:, None]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_57": {
                "variable": {
                    "value": "strategies[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "strategies[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "grad_60": {
                "outputs": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "(s,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_players",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_152": {
                "tensors": {
                    "value": "log_strategies_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_39": {
                "input": {
                    "value": "torch.matmul(this_hessian[:, offset:offset + d], strategy) * strategy",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logsumexp_131": {
                "input": {
                    "value": "log_strategies_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_strategies.clone()",
                            "Call"
                        ],
                        [
                            "log_strategies_e - torch.logsumexp(log_strategies_e, dim=1)[:, None]",
                            "BinOp"
                        ],
                        [
                            "log_strategies.clone()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_133": {
                "input": {
                    "value": "log_s",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "logsumexp_142": {
                "input": {
                    "value": "log_strategies_e[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_144": {
                "input": {
                    "value": "log_s",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_37": {
                "input": {
                    "value": "this_hessian",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hessian[offset:offset + d]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "cat_strategies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(strategies)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_39": {
                "input": {
                    "value": "this_hessian[:, offset:offset + d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "strategy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_75": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "len(strategies)",
                            "Call"
                        ],
                        [
                            "len(strategies)",
                            "Call"
                        ],
                        [
                            "len(strategies)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_99": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "len(strategies)",
                            "Call"
                        ],
                        [
                            "len(strategies)",
                            "Call"
                        ],
                        [
                            "len(strategies)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "*(d for i in range(N))",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/old/toy_extragrad_many.py": {
        "torch": {
            "from_numpy_21": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "make_positive_matrix(n_players, n_actions, skewness=0.95).squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_15": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "sum_26": {
                "input": {
                    "value": "xs[i] * sum(blocks[i])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_96": {
                "data": {
                    "value": "torch.randn(n_actions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_96": {
                "*size": {
                    "value": "n_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "SGD_107": {
                "params": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "SGD_101": {
                "params": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "SGD_104": {
                "params": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/toy.py": {
        "torch": {
            "from_numpy_58": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "make_positive_matrix(n_players=2, n_actions=1, skewness=0.999)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_54": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2000",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([x])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_126": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_127": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_33": {
                "data": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_128": {
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_131": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X[i, [j]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_132": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "Y[i, [j]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "grad_134": {
                "outputs": {
                    "value": "lx",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "(x,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_135": {
                "outputs": {
                    "value": "ly",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "(y,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    }
}