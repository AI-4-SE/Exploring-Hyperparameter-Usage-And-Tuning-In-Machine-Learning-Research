{
    "examples/mnist.py": {
        "torch": {
            "batch_norm_30": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.batch_norm(o, running_mean=stats['bn.running_mean'], running_var=stats['bn.running_var'], weight=params['bn.weight'], bias=params['bn.bias'], training=mode)",
                            "Call"
                        ],
                        [
                            "F.conv2d(o, params['conv1.weight'], params['conv1.bias'])",
                            "Call"
                        ],
                        [
                            "F.relu(o)",
                            "Call"
                        ],
                        [
                            "o.view(o.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(o, params['linear2.weight'], params['linear2.bias'])",
                            "Call"
                        ],
                        [
                            "F.relu(o)",
                            "Call"
                        ],
                        [
                            "F.linear(o, params['linear3.weight'], params['linear3.bias'])",
                            "Call"
                        ],
                        [
                            "f(inputs, params, stats, sample[2])",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "stats['bn.running_mean']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'bn.running_mean': torch.zeros(K).cuda(), 'bn.running_var': torch.ones(K).cuda()}",
                            "Dict"
                        ]
                    ]
                },
                "running_var": {
                    "value": "stats['bn.running_var']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'bn.running_mean': torch.zeros(K).cuda(), 'bn.running_var': torch.ones(K).cuda()}",
                            "Dict"
                        ]
                    ]
                },
                "weight": {
                    "value": "params['bn.weight']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'conv1.weight': conv_init(K, 64, 1), 'conv1.bias': torch.zeros(64), 'bn.weight': torch.Tensor(K).uniform_(), 'bn.bias': torch.zeros(K), 'linear2.weight': linear_init(64 * 7 * 7, 512), 'linear2.bias': torch.zeros(512), 'linear3.weight': linear_init(512, 10), 'linear3.bias': torch.zeros(10)}",
                            "Dict"
                        ]
                    ]
                },
                "bias": {
                    "value": "params['bn.bias']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'conv1.weight': conv_init(K, 64, 1), 'conv1.bias': torch.zeros(64), 'bn.weight': torch.Tensor(K).uniform_(), 'bn.bias': torch.zeros(K), 'linear2.weight': linear_init(64 * 7 * 7, 512), 'linear2.bias': torch.zeros(512), 'linear3.weight': linear_init(512, 10), 'linear3.bias': torch.zeros(10)}",
                            "Dict"
                        ]
                    ]
                },
                "training": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_34": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.batch_norm(o, running_mean=stats['bn.running_mean'], running_var=stats['bn.running_var'], weight=params['bn.weight'], bias=params['bn.bias'], training=mode)",
                            "Call"
                        ],
                        [
                            "F.conv2d(o, params['conv1.weight'], params['conv1.bias'])",
                            "Call"
                        ],
                        [
                            "F.relu(o)",
                            "Call"
                        ],
                        [
                            "o.view(o.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(o, params['linear2.weight'], params['linear2.bias'])",
                            "Call"
                        ],
                        [
                            "F.relu(o)",
                            "Call"
                        ],
                        [
                            "F.linear(o, params['linear3.weight'], params['linear3.bias'])",
                            "Call"
                        ],
                        [
                            "f(inputs, params, stats, sample[2])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "params['conv1.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "params['conv1.bias']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.batch_norm(o, running_mean=stats['bn.running_mean'], running_var=stats['bn.running_var'], weight=params['bn.weight'], bias=params['bn.bias'], training=mode)",
                            "Call"
                        ],
                        [
                            "F.conv2d(o, params['conv1.weight'], params['conv1.bias'])",
                            "Call"
                        ],
                        [
                            "F.relu(o)",
                            "Call"
                        ],
                        [
                            "o.view(o.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(o, params['linear2.weight'], params['linear2.bias'])",
                            "Call"
                        ],
                        [
                            "F.relu(o)",
                            "Call"
                        ],
                        [
                            "F.linear(o, params['linear3.weight'], params['linear3.bias'])",
                            "Call"
                        ],
                        [
                            "f(inputs, params, stats, sample[2])",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_37": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.batch_norm(o, running_mean=stats['bn.running_mean'], running_var=stats['bn.running_var'], weight=params['bn.weight'], bias=params['bn.bias'], training=mode)",
                            "Call"
                        ],
                        [
                            "F.conv2d(o, params['conv1.weight'], params['conv1.bias'])",
                            "Call"
                        ],
                        [
                            "F.relu(o)",
                            "Call"
                        ],
                        [
                            "o.view(o.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(o, params['linear2.weight'], params['linear2.bias'])",
                            "Call"
                        ],
                        [
                            "F.relu(o)",
                            "Call"
                        ],
                        [
                            "F.linear(o, params['linear3.weight'], params['linear3.bias'])",
                            "Call"
                        ],
                        [
                            "f(inputs, params, stats, sample[2])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "params['linear2.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "params['linear2.bias']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_38": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.batch_norm(o, running_mean=stats['bn.running_mean'], running_var=stats['bn.running_var'], weight=params['bn.weight'], bias=params['bn.bias'], training=mode)",
                            "Call"
                        ],
                        [
                            "F.conv2d(o, params['conv1.weight'], params['conv1.bias'])",
                            "Call"
                        ],
                        [
                            "F.relu(o)",
                            "Call"
                        ],
                        [
                            "o.view(o.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(o, params['linear2.weight'], params['linear2.bias'])",
                            "Call"
                        ],
                        [
                            "F.relu(o)",
                            "Call"
                        ],
                        [
                            "F.linear(o, params['linear3.weight'], params['linear3.bias'])",
                            "Call"
                        ],
                        [
                            "f(inputs, params, stats, sample[2])",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_39": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.batch_norm(o, running_mean=stats['bn.running_mean'], running_var=stats['bn.running_var'], weight=params['bn.weight'], bias=params['bn.bias'], training=mode)",
                            "Call"
                        ],
                        [
                            "F.conv2d(o, params['conv1.weight'], params['conv1.bias'])",
                            "Call"
                        ],
                        [
                            "F.relu(o)",
                            "Call"
                        ],
                        [
                            "o.view(o.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(o, params['linear2.weight'], params['linear2.bias'])",
                            "Call"
                        ],
                        [
                            "F.relu(o)",
                            "Call"
                        ],
                        [
                            "F.linear(o, params['linear3.weight'], params['linear3.bias'])",
                            "Call"
                        ],
                        [
                            "f(inputs, params, stats, sample[2])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "params['linear3.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "params['linear3.bias']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SGD_99": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(params.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "*size": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "*size": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "81",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_61": {
                "*size": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "*size": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "81",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_67": {
                "*size": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "81",
                            "Constant"
                        ]
                    ]
                }
            },
            "cross_entropy_77": {
                "input": {
                    "value": "o",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.batch_norm(o, running_mean=stats['bn.running_mean'], running_var=stats['bn.running_var'], weight=params['bn.weight'], bias=params['bn.bias'], training=mode)",
                            "Call"
                        ],
                        [
                            "F.conv2d(o, params['conv1.weight'], params['conv1.bias'])",
                            "Call"
                        ],
                        [
                            "F.relu(o)",
                            "Call"
                        ],
                        [
                            "o.view(o.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(o, params['linear2.weight'], params['linear2.bias'])",
                            "Call"
                        ],
                        [
                            "F.relu(o)",
                            "Call"
                        ],
                        [
                            "F.linear(o, params['linear3.weight'], params['linear3.bias'])",
                            "Call"
                        ],
                        [
                            "f(inputs, params, stats, sample[2])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(torch.LongTensor(sample[1]).cuda())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/reconstruction_exp.py": {
        "torch": {}
    },
    "scatwave/FFT.py": {
        "torch": {}
    },
    "scatwave/differentiable.py": {
        "torch": {
            "pad_25": {
                "variable": {
                    "value": "out_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(2 ** J,) * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_25": {
                "variable": {
                    "value": "out_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.dim()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_26": {
                "tensors": {
                    "value": "[out_, Variable(input.data.new(out_.size()).zero_())]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_56": {
                "tensors": {
                    "value": "[norm, Variable(norm.data.new(norm.size()).zero_())]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_tensor_18": {
                "obj": {
                    "value": "item2",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "scatwave/filters_bank.py": {
        "torch": {}
    },
    "scatwave/scattering.py": {
        "torch": {
            "is_tensor_88": {
                "obj": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_47": {
                "obj": {
                    "value": "item2",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "scatwave/utils.py": {
        "torch": {
            "current_blas_handle_279": {
                "variable": {
                    "value": "handle",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_123": {
                "tensors": {
                    "value": "[norm, norm.new(norm.size()).zero_()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "current_stream_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_201": {
                "ndarray": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input.new(input.size(0), input.size(1), input.size(2) // k, input.size(3) // k, 2)",
                            "Call"
                        ],
                        [
                            "y.mean(4).squeeze(4).mean(2).squeeze(2)",
                            "Call"
                        ],
                        [
                            "input.new(input.size())",
                            "Call"
                        ],
                        [
                            "np.real(np.fft.ifft2(input_np)).astype(out_type) * input.size(-2) * input.size(-3)",
                            "BinOp"
                        ],
                        [
                            "f(np.fft.ifft2(input_np)).astype(out_type) * input.size(-2) * input.size(-3)",
                            "BinOp"
                        ],
                        [
                            "f(np.fft.fft2(input_np)).astype(out_type)",
                            "Call"
                        ],
                        [
                            "f(np.fft.ifft2(input_np)).astype(out_type) * input.size(-2) * input.size(-3)",
                            "BinOp"
                        ],
                        [
                            "f(np.fft.fft2(input_np)).astype(out_type)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_215": {
                "ndarray": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input.new(input.size(0), input.size(1), input.size(2) // k, input.size(3) // k, 2)",
                            "Call"
                        ],
                        [
                            "y.mean(4).squeeze(4).mean(2).squeeze(2)",
                            "Call"
                        ],
                        [
                            "input.new(input.size())",
                            "Call"
                        ],
                        [
                            "np.real(np.fft.ifft2(input_np)).astype(out_type) * input.size(-2) * input.size(-3)",
                            "BinOp"
                        ],
                        [
                            "f(np.fft.ifft2(input_np)).astype(out_type) * input.size(-2) * input.size(-3)",
                            "BinOp"
                        ],
                        [
                            "f(np.fft.fft2(input_np)).astype(out_type)",
                            "Call"
                        ],
                        [
                            "f(np.fft.ifft2(input_np)).astype(out_type) * input.size(-2) * input.size(-3)",
                            "BinOp"
                        ],
                        [
                            "f(np.fft.fft2(input_np)).astype(out_type)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_208": {
                "ndarray": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input.new(input.size(0), input.size(1), input.size(2) // k, input.size(3) // k, 2)",
                            "Call"
                        ],
                        [
                            "y.mean(4).squeeze(4).mean(2).squeeze(2)",
                            "Call"
                        ],
                        [
                            "input.new(input.size())",
                            "Call"
                        ],
                        [
                            "np.real(np.fft.ifft2(input_np)).astype(out_type) * input.size(-2) * input.size(-3)",
                            "BinOp"
                        ],
                        [
                            "f(np.fft.ifft2(input_np)).astype(out_type) * input.size(-2) * input.size(-3)",
                            "BinOp"
                        ],
                        [
                            "f(np.fft.fft2(input_np)).astype(out_type)",
                            "Call"
                        ],
                        [
                            "f(np.fft.ifft2(input_np)).astype(out_type) * input.size(-2) * input.size(-3)",
                            "BinOp"
                        ],
                        [
                            "f(np.fft.fft2(input_np)).astype(out_type)",
                            "Call"
                        ]
                    ]
                }
            },
            "current_stream_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/test_scattering.py": {
        "torch": {
            "load_112": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "test/test_data.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_67": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(torch.sum(x * x, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_75": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_98": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_99": {
                "variable": {
                    "value": "filter",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_101": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_102": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_65": {
                "*size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_67": {
                "input": {
                    "value": "torch.sum(x * x, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_67": {
                "input": {
                    "value": "x * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}