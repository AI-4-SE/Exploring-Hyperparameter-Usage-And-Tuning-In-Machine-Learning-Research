{
    "preprocess.py": {
        "sklearn": {
            "MultiLabelBinarizer_127": {
                "variable": {
                    "value": "mlb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shuffle_107": {
                "variable": {
                    "value": "(X, masks, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed in enumerate(SEEDS)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "pad_sequence_130": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "list_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "list_ac_inputs + list_op_inputs",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "tokenizer.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_131": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "list_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "list_ac_masks + list_op_masks",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "variable": {
                    "value": "inputs_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tokenizer.encode(text)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_60": {
                "input": {
                    "value": "inputs_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(tokenizer.encode(text))",
                            "Call"
                        ],
                        [
                            "inputs_ids[:max_len]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "sklearn": {
            "ndcg_score_101": {
                "y_true": {
                    "value": "y_true.detach().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "torch.sigmoid(logits).detach().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ndcg_score_102": {
                "y_true": {
                    "value": "y_true.detach().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "torch.sigmoid(logits).detach().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ndcg_score_103": {
                "y_true": {
                    "value": "y_true.detach().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "torch.sigmoid(logits).detach().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ndcg_score_104": {
                "y_true": {
                    "value": "y_true.detach().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "torch.sigmoid(logits).detach().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "sigmoid_89": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_99": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_100": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "nonzero_36": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_labels",
                            "variable"
                        ],
                        [
                            "pred_labels",
                            "variable"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_37": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probs",
                            "Method Argument"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_49": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probs",
                            "Method Argument"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_101": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_102": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_103": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_104": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "evaluate.py": {
        "torch": {
            "device_38": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_66": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.models_path, lang, 'model_{}.pt'.format(split_idx))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device(args.device)",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "load.py": {
        "torch": {
            "from_numpy_15": {
                "variable": {
                    "value": "train_X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(os.path.join(data_path, directory, 'split_{}'.format(i), 'train_X.npy'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_16": {
                "variable": {
                    "value": "train_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(os.path.join(data_path, directory, 'split_{}'.format(i), 'train_mask.npy'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_17": {
                "variable": {
                    "value": "train_y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(os.path.join(data_path, directory, 'split_{}'.format(i), 'train_y.npy'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_21": {
                "variable": {
                    "value": "dev_X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(os.path.join(data_path, directory, 'split_{}'.format(i), 'dev_X.npy'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_22": {
                "variable": {
                    "value": "dev_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(os.path.join(data_path, directory, 'split_{}'.format(i), 'dev_mask.npy'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_23": {
                "variable": {
                    "value": "dev_y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(os.path.join(data_path, directory, 'split_{}'.format(i), 'dev_y.npy'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_27": {
                "variable": {
                    "value": "test_X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(os.path.join(data_path, directory, 'split_{}'.format(i), 'test_X.npy'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_28": {
                "variable": {
                    "value": "test_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(os.path.join(data_path, directory, 'split_{}'.format(i), 'test_mask.npy'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_29": {
                "variable": {
                    "value": "test_y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(os.path.join(data_path, directory, 'split_{}'.format(i), 'test_y.npy'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_33": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "train_X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_34": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(train_X, train_mask, train_y)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(dev_X, dev_mask, dev_y)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(test_X, test_mask, test_y)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_36": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "dev_X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_37": {
                "variable": {
                    "value": "dev_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(train_X, train_mask, train_y)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(dev_X, dev_mask, dev_y)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(test_X, test_mask, test_y)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_39": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "test_X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_40": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(train_X, train_mask, train_y)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(dev_X, dev_mask, dev_y)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(test_X, test_mask, test_y)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pyeurovoc/__init__.py": {
        "torch": {
            "device_48": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_152": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(input_ids.to(self.device), torch.ones_like(input_ids).to(self.device))['logits'][0].detach().cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_153": {
                "variable": {
                    "value": "(probs_sorted, idx_sort)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_158": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(input_ids.to(self.device), torch.ones_like(input_ids).to(self.device))['logits'][0].detach().cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_148": {
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tokenizer.encode(document_text, return_attention_mask=True, truncation=True, max_length=512, return_tensors='pt').reshape(1, -1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "server.py": {
        "torch": {
            "device_60": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_72": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_102": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__34": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_62": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LangModelWithDense(lang_model, num_classes).to(device)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.save_path, lang, 'model_{}.pt'.format(split_idx))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}