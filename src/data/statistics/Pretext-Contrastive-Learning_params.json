{
    "retrieve_clips.py": {
        "sklearn": {
            "cosine_distances_170": {
                "variable": {
                    "value": "distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X_test",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.load(os.path.join(args.feature_dir, 'test_feature.npy'))",
                            "Call"
                        ],
                        [
                            "np.mean(X_test, 1)",
                            "Call"
                        ],
                        [
                            "X_test.reshape((-1, X_test.shape[-1]))",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "X_train",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.load(os.path.join(args.feature_dir, 'train_feature.npy'))",
                            "Call"
                        ],
                        [
                            "np.mean(X_train, 1)",
                            "Call"
                        ],
                        [
                            "X_train.reshape((-1, X_train.shape[-1]))",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "load_32": {
                "variable": {
                    "value": "pretrained_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_44": {
                "variable": {
                    "value": "pretrained_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "roll_51": {
                "variable": {
                    "value": "shift_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shifts": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_61": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_93": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "UCF101ClipRetrievalDataset('data', 16, 10, True, train_transforms)",
                            "Call"
                        ],
                        [
                            "HMDB51ClipRetrievalDataset('data', 16, 10, True, train_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_127": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "UCF101ClipRetrievalDataset('data', 16, 10, False, test_transforms)",
                            "Call"
                        ],
                        [
                            "HMDB51ClipRetrievalDataset('data', 16, 10, False, test_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_grad_enabled_78": {
                "mode": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_75": {
                "variable": {
                    "value": "pretrained_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "datasets/hmdb51.py": {
        "torch": {
            "stack_151": {
                "variable": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "trans_clip",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "permute_151": {
                "variable": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_153": {
                "variable": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "clip",
                    "type": "Call",
                    "possible_values": [
                        [
                            "load_one_clip(framefolder, framenames, clip_start, self.clip_len)",
                            "Call"
                        ],
                        [
                            "torch.tensor(clip)",
                            "Call"
                        ],
                        [
                            "load_one_clip(framefolder, framenames, clip_start, self.clip_len)",
                            "Call"
                        ],
                        [
                            "torch.stack(trans_clip).permute([1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "torch.tensor(clip)",
                            "Call"
                        ],
                        [
                            "torch.stack(trans_clip).permute([1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "load_one_clip(framefolder, framenames, clip_start, self.clip_len)",
                            "Call"
                        ],
                        [
                            "torch.tensor(clip)",
                            "Call"
                        ],
                        [
                            "torch.stack(trans_clip).permute([1, 0, 2, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_266": {
                "variable": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "trans_clip",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "permute_266": {
                "variable": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_268": {
                "variable": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "clip",
                    "type": "Call",
                    "possible_values": [
                        [
                            "load_one_clip(framefolder, framenames, clip_start, self.clip_len)",
                            "Call"
                        ],
                        [
                            "torch.tensor(clip)",
                            "Call"
                        ],
                        [
                            "load_one_clip(framefolder, framenames, clip_start, self.clip_len)",
                            "Call"
                        ],
                        [
                            "torch.stack(trans_clip).permute([1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "torch.tensor(clip)",
                            "Call"
                        ],
                        [
                            "torch.stack(trans_clip).permute([1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "load_one_clip(framefolder, framenames, clip_start, self.clip_len)",
                            "Call"
                        ],
                        [
                            "torch.tensor(clip)",
                            "Call"
                        ],
                        [
                            "torch.stack(trans_clip).permute([1, 0, 2, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_272": {
                "tensors": {
                    "value": "all_idx",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_155": {
                "data": {
                    "value": "int(class_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_174": {
                "variable": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "trans_clip",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "permute_174": {
                "variable": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_176": {
                "variable": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "clip",
                    "type": "Call",
                    "possible_values": [
                        [
                            "load_one_clip(framefolder, framenames, clip_start, self.clip_len)",
                            "Call"
                        ],
                        [
                            "torch.tensor(clip)",
                            "Call"
                        ],
                        [
                            "load_one_clip(framefolder, framenames, clip_start, self.clip_len)",
                            "Call"
                        ],
                        [
                            "torch.stack(trans_clip).permute([1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "torch.tensor(clip)",
                            "Call"
                        ],
                        [
                            "torch.stack(trans_clip).permute([1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "load_one_clip(framefolder, framenames, clip_start, self.clip_len)",
                            "Call"
                        ],
                        [
                            "torch.tensor(clip)",
                            "Call"
                        ],
                        [
                            "torch.stack(trans_clip).permute([1, 0, 2, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_180": {
                "tensors": {
                    "value": "all_clips",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_180": {
                "data": {
                    "value": "int(class_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_270": {
                "data": {
                    "value": "int(class_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_178": {
                "data": {
                    "value": "int(class_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/ucf101.py": {
        "torch": {
            "stack_173": {
                "variable": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "trans_clip",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(trans_clip).permute([1, 0, 2, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_173": {
                "variable": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_175": {
                "variable": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "clip",
                    "type": "Call",
                    "possible_values": [
                        [
                            "load_one_clip(framefolder, framenames, clip_start, self.clip_len)",
                            "Call"
                        ],
                        [
                            "torch.tensor(clip)",
                            "Call"
                        ],
                        [
                            "load_one_clip(framefolder, framenames, clip_start, self.clip_len)",
                            "Call"
                        ],
                        [
                            "torch.stack(trans_clip).permute([1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "torch.tensor(clip)",
                            "Call"
                        ],
                        [
                            "torch.stack(trans_clip).permute([1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "load_one_clip(framefolder, framenames, clip_start, self.clip_len)",
                            "Call"
                        ],
                        [
                            "torch.tensor(clip)",
                            "Call"
                        ],
                        [
                            "torch.stack(trans_clip).permute([1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tuple_clip[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_288": {
                "variable": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "trans_clip",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(trans_clip).permute([1, 0, 2, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_288": {
                "variable": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_290": {
                "variable": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "clip",
                    "type": "Call",
                    "possible_values": [
                        [
                            "load_one_clip(framefolder, framenames, clip_start, self.clip_len)",
                            "Call"
                        ],
                        [
                            "torch.tensor(clip)",
                            "Call"
                        ],
                        [
                            "load_one_clip(framefolder, framenames, clip_start, self.clip_len)",
                            "Call"
                        ],
                        [
                            "torch.stack(trans_clip).permute([1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "torch.tensor(clip)",
                            "Call"
                        ],
                        [
                            "torch.stack(trans_clip).permute([1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "load_one_clip(framefolder, framenames, clip_start, self.clip_len)",
                            "Call"
                        ],
                        [
                            "torch.tensor(clip)",
                            "Call"
                        ],
                        [
                            "torch.stack(trans_clip).permute([1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tuple_clip[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_294": {
                "tensors": {
                    "value": "all_idx",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_383": {
                "variable": {
                    "value": "trans_clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "trans_clip",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(trans_clip).permute([1, 0, 2, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_383": {
                "variable": {
                    "value": "trans_clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_390": {
                "tensors": {
                    "value": "tuple_clip",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.tensor(clip) for clip in tuple_clip]",
                            "ListComp"
                        ],
                        [
                            "trans_tuple",
                            "Name"
                        ]
                    ]
                }
            },
            "tensor_390": {
                "data": {
                    "value": "label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "random.randint(0, 4)",
                            "Call"
                        ],
                        [
                            "random.randint(0, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_177": {
                "data": {
                    "value": "int(class_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_196": {
                "variable": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "trans_clip",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(trans_clip).permute([1, 0, 2, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_196": {
                "variable": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_198": {
                "variable": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "clip",
                    "type": "Call",
                    "possible_values": [
                        [
                            "load_one_clip(framefolder, framenames, clip_start, self.clip_len)",
                            "Call"
                        ],
                        [
                            "torch.tensor(clip)",
                            "Call"
                        ],
                        [
                            "load_one_clip(framefolder, framenames, clip_start, self.clip_len)",
                            "Call"
                        ],
                        [
                            "torch.stack(trans_clip).permute([1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "torch.tensor(clip)",
                            "Call"
                        ],
                        [
                            "torch.stack(trans_clip).permute([1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "load_one_clip(framefolder, framenames, clip_start, self.clip_len)",
                            "Call"
                        ],
                        [
                            "torch.tensor(clip)",
                            "Call"
                        ],
                        [
                            "torch.stack(trans_clip).permute([1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tuple_clip[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_202": {
                "tensors": {
                    "value": "all_clips",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_202": {
                "data": {
                    "value": "int(class_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_292": {
                "data": {
                    "value": "int(class_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_388": {
                "data": {
                    "value": "clip",
                    "type": "Call",
                    "possible_values": [
                        [
                            "load_one_clip(framefolder, framenames, clip_start, self.clip_len)",
                            "Call"
                        ],
                        [
                            "torch.tensor(clip)",
                            "Call"
                        ],
                        [
                            "load_one_clip(framefolder, framenames, clip_start, self.clip_len)",
                            "Call"
                        ],
                        [
                            "torch.stack(trans_clip).permute([1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "torch.tensor(clip)",
                            "Call"
                        ],
                        [
                            "torch.stack(trans_clip).permute([1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "load_one_clip(framefolder, framenames, clip_start, self.clip_len)",
                            "Call"
                        ],
                        [
                            "torch.tensor(clip)",
                            "Call"
                        ],
                        [
                            "torch.stack(trans_clip).permute([1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tuple_clip[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_200": {
                "data": {
                    "value": "int(class_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "ft_classify.py": {
        "torch": {
            "load_26": {
                "variable": {
                    "value": "pretrained_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "roll_36": {
                "variable": {
                    "value": "shift_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shifts": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_180": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_230": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "UCF101Dataset('data', args.cl, args.split, True, False, train_transforms)",
                            "Call"
                        ],
                        [
                            "HMDB51Dataset('data', args.cl, args.split, True, False, train_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_232": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_236": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_237": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': [param for (name, param) in model.named_parameters() if 'linear' not in name and 'conv5' not in name and ('conv4' not in name)]}, {'params': [param for (name, param) in model.named_parameters() if 'linear' in name or 'conv5' in name or 'conv4' in name], 'lr': args.ft_lr}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_241": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.SGD([{'params': [param for (name, param) in model.named_parameters() if 'linear' not in name and 'conv5' not in name and ('conv4' not in name)]}, {'params': [param for (name, param) in model.named_parameters() if 'linear' in name or 'conv5' in name or 'conv4' in name], 'lr': args.ft_lr}], lr=args.lr, momentum=args.momentum, weight_decay=args.wd)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "Constant",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "patience": {
                    "value": "30",
                    "type": "Constant",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_277": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "UCF101Dataset('data/', args.cl, args.split, False, False, test_transforms, 10)",
                            "Call"
                        ],
                        [
                            "HMDB51Dataset('data/', args.cl, args.split, False, False, test_transforms, 10)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_280": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_42": {
                "mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_65": {
                "variable": {
                    "value": "pts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(diff(inputs))",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "model(diff(inputs))",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_grad_enabled_84": {
                "mode": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_103": {
                "variable": {
                    "value": "pts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(diff(inputs))",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "model(diff(inputs))",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_grad_enabled_115": {
                "mode": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_137": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(diff(inputs))",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "model(diff(inputs))",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_141": {
                "variable": {
                    "value": "pts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(diff(inputs))",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "model(diff(inputs))",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_188": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_189": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_190": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sum_66": {
                "input": {
                    "value": "targets == pts",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_104": {
                "input": {
                    "value": "targets == pts",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "mean_135": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(diff(inputs))",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "torch.mean(o, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_142": {
                "input": {
                    "value": "targets == pts",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "load_266": {
                "f": {
                    "value": "prev_best_model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "model_path",
                            "Name"
                        ]
                    ]
                }
            },
            "is_available_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_255": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(log_dir, 'model_{}.pt'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_259": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(log_dir, 'best_model_{}.pt'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/LinearAverage.py": {
        "torch": {
            "mm_13": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "memory.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_31": {
                "variable": {
                    "value": "gradInput",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gradOutput.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "memory",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mul_37": {
                "input": {
                    "value": "x.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - momentum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "data": {
                    "value": "[T, momentum]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_53": {
                "*size": {
                    "value": "outputSize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "inputSize",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/NCEAverage.py": {
        "torch": {
            "ones_15": {
                "variable": {
                    "value": "self.unigrams",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.nLem",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_43": {
                "variable": {
                    "value": "weight_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.memory_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_45": {
                "variable": {
                    "value": "out_ab",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_l",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.index_select(self.memory_l, 0, idx.view(-1)).detach()",
                            "Call"
                        ],
                        [
                            "weight_l.view(batchSize, K + 1, inputSize)",
                            "Call"
                        ],
                        [
                            "torch.index_select(self.memory_l, 0, idx.view(-1)).detach()",
                            "Call"
                        ],
                        [
                            "weight_l.view(batchSize, K + 1, inputSize)",
                            "Call"
                        ],
                        [
                            "torch.cat((weight_l, weight_neg), 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(self.memory_l, 0, idx.view(-1)).detach()",
                            "Call"
                        ],
                        [
                            "weight_l.view(batchSize, K + 1, inputSize)",
                            "Call"
                        ],
                        [
                            "torch.cat((weight_l, weight_l_hardneg), 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "ab.view(batchSize, inputSize, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_47": {
                "variable": {
                    "value": "weight_ab",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.memory_ab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_49": {
                "variable": {
                    "value": "out_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_ab",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.index_select(self.memory_ab, 0, idx.view(-1)).detach()",
                            "Call"
                        ],
                        [
                            "weight_ab.view(batchSize, K + 1, inputSize)",
                            "Call"
                        ],
                        [
                            "torch.index_select(self.memory_ab, 0, idx.view(-1)).detach()",
                            "Call"
                        ],
                        [
                            "weight_ab.view(batchSize, K + 1, inputSize)",
                            "Call"
                        ],
                        [
                            "torch.cat((weight_ab, weight_neg), 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(self.memory_ab, 0, idx.view(-1)).detach()",
                            "Call"
                        ],
                        [
                            "weight_ab.view(batchSize, K + 1, inputSize)",
                            "Call"
                        ],
                        [
                            "torch.cat((weight_ab, weight_ab_hardneg), 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "l.view(batchSize, inputSize, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_98": {
                "variable": {
                    "value": "self.unigrams",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.nLem",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_127": {
                "variable": {
                    "value": "weight_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.memory_neg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_132": {
                "variable": {
                    "value": "weight_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.memory_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "weight_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(weight_l, weight_neg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_135": {
                "variable": {
                    "value": "out_ab",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_l",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.index_select(self.memory_l, 0, idx.view(-1)).detach()",
                            "Call"
                        ],
                        [
                            "weight_l.view(batchSize, K + 1, inputSize)",
                            "Call"
                        ],
                        [
                            "torch.index_select(self.memory_l, 0, idx.view(-1)).detach()",
                            "Call"
                        ],
                        [
                            "weight_l.view(batchSize, K + 1, inputSize)",
                            "Call"
                        ],
                        [
                            "torch.cat((weight_l, weight_neg), 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(self.memory_l, 0, idx.view(-1)).detach()",
                            "Call"
                        ],
                        [
                            "weight_l.view(batchSize, K + 1, inputSize)",
                            "Call"
                        ],
                        [
                            "torch.cat((weight_l, weight_l_hardneg), 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "ab.view(batchSize, inputSize, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_137": {
                "variable": {
                    "value": "weight_ab",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.memory_ab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "weight_ab",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(weight_ab, weight_neg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_140": {
                "variable": {
                    "value": "out_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_ab",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.index_select(self.memory_ab, 0, idx.view(-1)).detach()",
                            "Call"
                        ],
                        [
                            "weight_ab.view(batchSize, K + 1, inputSize)",
                            "Call"
                        ],
                        [
                            "torch.index_select(self.memory_ab, 0, idx.view(-1)).detach()",
                            "Call"
                        ],
                        [
                            "weight_ab.view(batchSize, K + 1, inputSize)",
                            "Call"
                        ],
                        [
                            "torch.cat((weight_ab, weight_neg), 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(self.memory_ab, 0, idx.view(-1)).detach()",
                            "Call"
                        ],
                        [
                            "weight_ab.view(batchSize, K + 1, inputSize)",
                            "Call"
                        ],
                        [
                            "torch.cat((weight_ab, weight_ab_hardneg), 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "l.view(batchSize, inputSize, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_197": {
                "variable": {
                    "value": "self.unigrams",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.nLem",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_224": {
                "variable": {
                    "value": "weight_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.memory_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_232": {
                "variable": {
                    "value": "weight_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(weight_l, weight_l_hardneg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_234": {
                "variable": {
                    "value": "out_ab",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_l",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.index_select(self.memory_l, 0, idx.view(-1)).detach()",
                            "Call"
                        ],
                        [
                            "weight_l.view(batchSize, K + 1, inputSize)",
                            "Call"
                        ],
                        [
                            "torch.index_select(self.memory_l, 0, idx.view(-1)).detach()",
                            "Call"
                        ],
                        [
                            "weight_l.view(batchSize, K + 1, inputSize)",
                            "Call"
                        ],
                        [
                            "torch.cat((weight_l, weight_neg), 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(self.memory_l, 0, idx.view(-1)).detach()",
                            "Call"
                        ],
                        [
                            "weight_l.view(batchSize, K + 1, inputSize)",
                            "Call"
                        ],
                        [
                            "torch.cat((weight_l, weight_l_hardneg), 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "ab.view(batchSize, inputSize, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_236": {
                "variable": {
                    "value": "weight_ab",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.memory_ab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "weight_ab",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(weight_ab, weight_ab_hardneg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_246": {
                "variable": {
                    "value": "out_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_ab",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.index_select(self.memory_ab, 0, idx.view(-1)).detach()",
                            "Call"
                        ],
                        [
                            "weight_ab.view(batchSize, K + 1, inputSize)",
                            "Call"
                        ],
                        [
                            "torch.index_select(self.memory_ab, 0, idx.view(-1)).detach()",
                            "Call"
                        ],
                        [
                            "weight_ab.view(batchSize, K + 1, inputSize)",
                            "Call"
                        ],
                        [
                            "torch.cat((weight_ab, weight_neg), 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(self.memory_ab, 0, idx.view(-1)).detach()",
                            "Call"
                        ],
                        [
                            "weight_ab.view(batchSize, K + 1, inputSize)",
                            "Call"
                        ],
                        [
                            "torch.cat((weight_ab, weight_ab_hardneg), 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "l.view(batchSize, inputSize, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_298": {
                "variable": {
                    "value": "self.unigrams",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.nLem",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_324": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_326": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.index_select(self.memory, 0, idx.view(-1))",
                            "Call"
                        ],
                        [
                            "weight.view(batchSize, K + 1, inputSize)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x.view(batchSize, inputSize, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_375": {
                "variable": {
                    "value": "l_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q.view(batchSize, 1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "k.view(batchSize, -1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_379": {
                "variable": {
                    "value": "l_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "queue.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "q.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_382": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(l_pos, l_neg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_433": {
                "variable": {
                    "value": "l_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q.view(batchSize, 1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "k.view(batchSize, -1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_439": {
                "variable": {
                    "value": "matrix_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(queue.detach(), queue_neg.detach(), k_neg.detach())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_441": {
                "variable": {
                    "value": "l_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix_neg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((queue.detach(), queue_neg.detach(), k_neg.detach()), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "q.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_444": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(l_pos, l_neg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "div_52": {
                "variable": {
                    "value": "out_ab",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_ab",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight_l, ab.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, T)",
                            "Call"
                        ],
                        [
                            "out_ab.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_ab, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, Z_ab).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_l, ab.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, T)",
                            "Call"
                        ],
                        [
                            "out_ab.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_ab, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, Z_ab).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_l, ab.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, T)",
                            "Call"
                        ],
                        [
                            "out_ab.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_ab, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, Z_ab).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "T",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "div_53": {
                "variable": {
                    "value": "out_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_l",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight_ab, l.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, T)",
                            "Call"
                        ],
                        [
                            "out_l.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_l, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, Z_l).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_ab, l.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, T)",
                            "Call"
                        ],
                        [
                            "out_l.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_l, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, Z_l).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_ab, l.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, T)",
                            "Call"
                        ],
                        [
                            "out_l.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_l, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, Z_l).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "T",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_57": {
                "variable": {
                    "value": "out_ab",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(out_ab, T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_58": {
                "variable": {
                    "value": "out_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(out_l, T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_70": {
                "variable": {
                    "value": "out_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_l",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight_ab, l.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, T)",
                            "Call"
                        ],
                        [
                            "out_l.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_l, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, Z_l).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_ab, l.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, T)",
                            "Call"
                        ],
                        [
                            "out_l.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_l, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, Z_l).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_ab, l.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, T)",
                            "Call"
                        ],
                        [
                            "out_l.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_l, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, Z_l).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Z_l",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.params[2].item()",
                            "Call"
                        ],
                        [
                            "self.params[2].clone().detach().item()",
                            "Call"
                        ],
                        [
                            "self.params[2].item()",
                            "Call"
                        ],
                        [
                            "self.params[2].clone().detach().item()",
                            "Call"
                        ],
                        [
                            "self.params[2].item()",
                            "Call"
                        ],
                        [
                            "self.params[2].clone().detach().item()",
                            "Call"
                        ]
                    ]
                }
            },
            "div_71": {
                "variable": {
                    "value": "out_ab",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_ab",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight_l, ab.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, T)",
                            "Call"
                        ],
                        [
                            "out_ab.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_ab, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, Z_ab).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_l, ab.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, T)",
                            "Call"
                        ],
                        [
                            "out_ab.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_ab, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, Z_ab).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_l, ab.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, T)",
                            "Call"
                        ],
                        [
                            "out_ab.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_ab, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, Z_ab).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Z_ab",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.params[3].item()",
                            "Call"
                        ],
                        [
                            "self.params[3].clone().detach().item()",
                            "Call"
                        ],
                        [
                            "self.params[3].item()",
                            "Call"
                        ],
                        [
                            "self.params[3].clone().detach().item()",
                            "Call"
                        ],
                        [
                            "self.params[3].item()",
                            "Call"
                        ],
                        [
                            "self.params[3].clone().detach().item()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_75": {
                "variable": {
                    "value": "l_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.memory_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_82": {
                "variable": {
                    "value": "ab_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.memory_ab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_143": {
                "variable": {
                    "value": "out_ab",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_ab",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight_l, ab.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, T)",
                            "Call"
                        ],
                        [
                            "out_ab.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_ab, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, Z_ab).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_l, ab.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, T)",
                            "Call"
                        ],
                        [
                            "out_ab.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_ab, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, Z_ab).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_l, ab.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, T)",
                            "Call"
                        ],
                        [
                            "out_ab.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_ab, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, Z_ab).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "T",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "div_144": {
                "variable": {
                    "value": "out_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_l",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight_ab, l.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, T)",
                            "Call"
                        ],
                        [
                            "out_l.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_l, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, Z_l).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_ab, l.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, T)",
                            "Call"
                        ],
                        [
                            "out_l.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_l, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, Z_l).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_ab, l.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, T)",
                            "Call"
                        ],
                        [
                            "out_l.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_l, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, Z_l).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "T",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_148": {
                "variable": {
                    "value": "out_ab",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(out_ab, T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_149": {
                "variable": {
                    "value": "out_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(out_l, T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_161": {
                "variable": {
                    "value": "out_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_l",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight_ab, l.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, T)",
                            "Call"
                        ],
                        [
                            "out_l.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_l, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, Z_l).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_ab, l.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, T)",
                            "Call"
                        ],
                        [
                            "out_l.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_l, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, Z_l).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_ab, l.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, T)",
                            "Call"
                        ],
                        [
                            "out_l.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_l, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, Z_l).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Z_l",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.params[2].item()",
                            "Call"
                        ],
                        [
                            "self.params[2].clone().detach().item()",
                            "Call"
                        ],
                        [
                            "self.params[2].item()",
                            "Call"
                        ],
                        [
                            "self.params[2].clone().detach().item()",
                            "Call"
                        ],
                        [
                            "self.params[2].item()",
                            "Call"
                        ],
                        [
                            "self.params[2].clone().detach().item()",
                            "Call"
                        ]
                    ]
                }
            },
            "div_162": {
                "variable": {
                    "value": "out_ab",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_ab",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight_l, ab.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, T)",
                            "Call"
                        ],
                        [
                            "out_ab.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_ab, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, Z_ab).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_l, ab.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, T)",
                            "Call"
                        ],
                        [
                            "out_ab.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_ab, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, Z_ab).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_l, ab.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, T)",
                            "Call"
                        ],
                        [
                            "out_ab.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_ab, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, Z_ab).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Z_ab",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.params[3].item()",
                            "Call"
                        ],
                        [
                            "self.params[3].clone().detach().item()",
                            "Call"
                        ],
                        [
                            "self.params[3].item()",
                            "Call"
                        ],
                        [
                            "self.params[3].clone().detach().item()",
                            "Call"
                        ],
                        [
                            "self.params[3].item()",
                            "Call"
                        ],
                        [
                            "self.params[3].clone().detach().item()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_166": {
                "variable": {
                    "value": "l_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.memory_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_173": {
                "variable": {
                    "value": "ab_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.memory_ab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_180": {
                "variable": {
                    "value": "neg_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.memory_neg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_249": {
                "variable": {
                    "value": "out_ab",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_ab",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight_l, ab.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, T)",
                            "Call"
                        ],
                        [
                            "out_ab.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_ab, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, Z_ab).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_l, ab.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, T)",
                            "Call"
                        ],
                        [
                            "out_ab.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_ab, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, Z_ab).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_l, ab.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, T)",
                            "Call"
                        ],
                        [
                            "out_ab.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_ab, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, Z_ab).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "T",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "div_250": {
                "variable": {
                    "value": "out_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_l",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight_ab, l.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, T)",
                            "Call"
                        ],
                        [
                            "out_l.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_l, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, Z_l).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_ab, l.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, T)",
                            "Call"
                        ],
                        [
                            "out_l.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_l, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, Z_l).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_ab, l.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, T)",
                            "Call"
                        ],
                        [
                            "out_l.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_l, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, Z_l).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "T",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_254": {
                "variable": {
                    "value": "out_ab",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(out_ab, T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_255": {
                "variable": {
                    "value": "out_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(out_l, T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_267": {
                "variable": {
                    "value": "out_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_l",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight_ab, l.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, T)",
                            "Call"
                        ],
                        [
                            "out_l.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_l, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, Z_l).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_ab, l.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, T)",
                            "Call"
                        ],
                        [
                            "out_l.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_l, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, Z_l).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_ab, l.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, T)",
                            "Call"
                        ],
                        [
                            "out_l.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_l, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, Z_l).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Z_l",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.params[2].item()",
                            "Call"
                        ],
                        [
                            "self.params[2].clone().detach().item()",
                            "Call"
                        ],
                        [
                            "self.params[2].item()",
                            "Call"
                        ],
                        [
                            "self.params[2].clone().detach().item()",
                            "Call"
                        ],
                        [
                            "self.params[2].item()",
                            "Call"
                        ],
                        [
                            "self.params[2].clone().detach().item()",
                            "Call"
                        ]
                    ]
                }
            },
            "div_268": {
                "variable": {
                    "value": "out_ab",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_ab",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight_l, ab.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, T)",
                            "Call"
                        ],
                        [
                            "out_ab.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_ab, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, Z_ab).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_l, ab.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, T)",
                            "Call"
                        ],
                        [
                            "out_ab.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_ab, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, Z_ab).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_l, ab.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, T)",
                            "Call"
                        ],
                        [
                            "out_ab.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_ab, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, Z_ab).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Z_ab",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.params[3].item()",
                            "Call"
                        ],
                        [
                            "self.params[3].clone().detach().item()",
                            "Call"
                        ],
                        [
                            "self.params[3].item()",
                            "Call"
                        ],
                        [
                            "self.params[3].clone().detach().item()",
                            "Call"
                        ],
                        [
                            "self.params[3].item()",
                            "Call"
                        ],
                        [
                            "self.params[3].clone().detach().item()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_272": {
                "variable": {
                    "value": "l_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.memory_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_279": {
                "variable": {
                    "value": "ab_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.memory_ab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_329": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight, x.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out, T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat((l_pos, l_neg), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, self.T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, self.T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat((l_pos, l_neg), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, self.T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, self.T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "T",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_332": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(out, T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_338": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight, x.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out, T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat((l_pos, l_neg), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, self.T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, self.T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat((l_pos, l_neg), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, self.T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, self.T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.params[2].item()",
                            "Call"
                        ],
                        [
                            "self.params[2].clone().detach().item()",
                            "Call"
                        ],
                        [
                            "self.params[0].item()",
                            "Call"
                        ],
                        [
                            "self.params[0].clone().detach().item()",
                            "Call"
                        ],
                        [
                            "self.params[0].item()",
                            "Call"
                        ],
                        [
                            "self.params[0].clone().detach().item()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_338": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "index_select_342": {
                "variable": {
                    "value": "weight_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_385": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight, x.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out, T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat((l_pos, l_neg), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, self.T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, self.T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat((l_pos, l_neg), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, self.T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, self.T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_388": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(out, self.T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_394": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight, x.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out, T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat((l_pos, l_neg), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, self.T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, self.T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat((l_pos, l_neg), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, self.T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, self.T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.params[2].item()",
                            "Call"
                        ],
                        [
                            "self.params[2].clone().detach().item()",
                            "Call"
                        ],
                        [
                            "self.params[0].item()",
                            "Call"
                        ],
                        [
                            "self.params[0].clone().detach().item()",
                            "Call"
                        ],
                        [
                            "self.params[0].item()",
                            "Call"
                        ],
                        [
                            "self.params[0].clone().detach().item()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_394": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_398": {
                "variable": {
                    "value": "out_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batchSize",
                    "type": "Call",
                    "possible_values": [
                        [
                            "l.size(0)",
                            "Call"
                        ],
                        [
                            "l.size(0)",
                            "Call"
                        ],
                        [
                            "l.size(0)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "q.shape[0]",
                            "Subscript"
                        ],
                        [
                            "q.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "fmod_400": {
                "variable": {
                    "value": "out_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_ids",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.arange(batchSize).cuda()",
                            "Call"
                        ],
                        [
                            "out_ids + self.index",
                            "BinOp"
                        ],
                        [
                            "torch.fmod(out_ids, self.queueSize)",
                            "Call"
                        ],
                        [
                            "out_ids.long()",
                            "Call"
                        ],
                        [
                            "torch.arange(batchSize).cuda()",
                            "Call"
                        ],
                        [
                            "torch.fmod(out_ids, self.queueSize)",
                            "Call"
                        ],
                        [
                            "out_ids.long()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.queueSize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_447": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight, x.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out, T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat((l_pos, l_neg), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, self.T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, self.T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat((l_pos, l_neg), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, self.T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, self.T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_450": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(out, self.T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_456": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight, x.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out, T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat((l_pos, l_neg), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, self.T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, self.T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat((l_pos, l_neg), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, self.T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, self.T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.params[2].item()",
                            "Call"
                        ],
                        [
                            "self.params[2].clone().detach().item()",
                            "Call"
                        ],
                        [
                            "self.params[0].item()",
                            "Call"
                        ],
                        [
                            "self.params[0].clone().detach().item()",
                            "Call"
                        ],
                        [
                            "self.params[0].item()",
                            "Call"
                        ],
                        [
                            "self.params[0].clone().detach().item()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_456": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_460": {
                "variable": {
                    "value": "out_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batchSize",
                    "type": "Call",
                    "possible_values": [
                        [
                            "l.size(0)",
                            "Call"
                        ],
                        [
                            "l.size(0)",
                            "Call"
                        ],
                        [
                            "l.size(0)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "q.shape[0]",
                            "Subscript"
                        ],
                        [
                            "q.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "fmod_462": {
                "variable": {
                    "value": "out_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_ids",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.arange(batchSize).cuda()",
                            "Call"
                        ],
                        [
                            "out_ids + self.index",
                            "BinOp"
                        ],
                        [
                            "torch.fmod(out_ids, self.queueSize)",
                            "Call"
                        ],
                        [
                            "out_ids.long()",
                            "Call"
                        ],
                        [
                            "torch.arange(batchSize).cuda()",
                            "Call"
                        ],
                        [
                            "torch.fmod(out_ids, self.queueSize)",
                            "Call"
                        ],
                        [
                            "out_ids.long()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.queueSize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_21": {
                "data": {
                    "value": "[K, T, -1, -1, momentum]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_23": {
                "*size": {
                    "value": "outputSize",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.memory_l.size(0)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(0)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(0)",
                            "Call"
                        ],
                        [
                            "self.memory.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "inputSize",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_24": {
                "*size": {
                    "value": "outputSize",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.memory_l.size(0)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(0)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(0)",
                            "Call"
                        ],
                        [
                            "self.memory.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "inputSize",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_104": {
                "data": {
                    "value": "[K, T, -1, -1, momentum]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_106": {
                "*size": {
                    "value": "outputSize",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.memory_l.size(0)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(0)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(0)",
                            "Call"
                        ],
                        [
                            "self.memory.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "inputSize",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_107": {
                "*size": {
                    "value": "outputSize",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.memory_l.size(0)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(0)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(0)",
                            "Call"
                        ],
                        [
                            "self.memory.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "inputSize",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_108": {
                "*size": {
                    "value": "outputSize",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.memory_l.size(0)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(0)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(0)",
                            "Call"
                        ],
                        [
                            "self.memory.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "inputSize",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_203": {
                "data": {
                    "value": "[K, T, -1, -1, momentum]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_205": {
                "*size": {
                    "value": "outputSize",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.memory_l.size(0)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(0)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(0)",
                            "Call"
                        ],
                        [
                            "self.memory.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "inputSize",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_206": {
                "*size": {
                    "value": "outputSize",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.memory_l.size(0)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(0)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(0)",
                            "Call"
                        ],
                        [
                            "self.memory.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "inputSize",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_304": {
                "data": {
                    "value": "[K, T, -1, momentum]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_306": {
                "*size": {
                    "value": "outputSize",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.memory_l.size(0)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(0)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(0)",
                            "Call"
                        ],
                        [
                            "self.memory.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "inputSize",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_341": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_363": {
                "data": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_365": {
                "*size": {
                    "value": "self.queueSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "inputSize",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_397": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_420": {
                "data": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_422": {
                "*size": {
                    "value": "self.queueSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "inputSize",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_423": {
                "*size": {
                    "value": "self.queueSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "inputSize",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_459": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "div_57": {
                "input": {
                    "value": "out_ab",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight_l, ab.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, T)",
                            "Call"
                        ],
                        [
                            "out_ab.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_ab, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, Z_ab).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_l, ab.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, T)",
                            "Call"
                        ],
                        [
                            "out_ab.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_ab, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, Z_ab).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_l, ab.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, T)",
                            "Call"
                        ],
                        [
                            "out_ab.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_ab, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, Z_ab).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "T",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "div_58": {
                "input": {
                    "value": "out_l",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight_ab, l.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, T)",
                            "Call"
                        ],
                        [
                            "out_l.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_l, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, Z_l).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_ab, l.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, T)",
                            "Call"
                        ],
                        [
                            "out_l.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_l, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, Z_l).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_ab, l.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, T)",
                            "Call"
                        ],
                        [
                            "out_l.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_l, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, Z_l).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "T",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mul_77": {
                "input": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - momentum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_84": {
                "input": {
                    "value": "ab",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - momentum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "div_148": {
                "input": {
                    "value": "out_ab",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight_l, ab.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, T)",
                            "Call"
                        ],
                        [
                            "out_ab.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_ab, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, Z_ab).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_l, ab.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, T)",
                            "Call"
                        ],
                        [
                            "out_ab.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_ab, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, Z_ab).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_l, ab.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, T)",
                            "Call"
                        ],
                        [
                            "out_ab.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_ab, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, Z_ab).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "T",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "div_149": {
                "input": {
                    "value": "out_l",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight_ab, l.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, T)",
                            "Call"
                        ],
                        [
                            "out_l.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_l, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, Z_l).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_ab, l.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, T)",
                            "Call"
                        ],
                        [
                            "out_l.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_l, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, Z_l).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_ab, l.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, T)",
                            "Call"
                        ],
                        [
                            "out_l.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_l, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, Z_l).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "T",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mul_168": {
                "input": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - momentum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_175": {
                "input": {
                    "value": "ab",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - momentum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_182": {
                "input": {
                    "value": "neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - momentum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "div_254": {
                "input": {
                    "value": "out_ab",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight_l, ab.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, T)",
                            "Call"
                        ],
                        [
                            "out_ab.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_ab, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, Z_ab).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_l, ab.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, T)",
                            "Call"
                        ],
                        [
                            "out_ab.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_ab, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, Z_ab).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_l, ab.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, T)",
                            "Call"
                        ],
                        [
                            "out_ab.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_ab, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, Z_ab).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "T",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "div_255": {
                "input": {
                    "value": "out_l",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight_ab, l.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, T)",
                            "Call"
                        ],
                        [
                            "out_l.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_l, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, Z_l).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_ab, l.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, T)",
                            "Call"
                        ],
                        [
                            "out_l.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_l, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, Z_l).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight_ab, l.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, T)",
                            "Call"
                        ],
                        [
                            "out_l.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_l, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, Z_l).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "T",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mul_274": {
                "input": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - momentum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_281": {
                "input": {
                    "value": "ab",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - momentum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "div_332": {
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight, x.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out, T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat((l_pos, l_neg), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, self.T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, self.T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat((l_pos, l_neg), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, self.T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, self.T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "T",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mul_344": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - momentum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "div_388": {
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight, x.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out, T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat((l_pos, l_neg), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, self.T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, self.T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat((l_pos, l_neg), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, self.T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, self.T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_450": {
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight, x.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out, T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat((l_pos, l_neg), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, self.T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, self.T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat((l_pos, l_neg), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, self.T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, self.T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/NCECriterion.py": {
        "torch": {
            "div_24": {
                "variable": {
                    "value": "log_D1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P_pos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.select(1, 0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "P_pos.add(m * Pn + eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_28": {
                "variable": {
                    "value": "log_D0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P_neg.clone().fill_(m * Pn)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "P_neg.add(m * Pn + eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_39": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[bsz]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "lib/alias_multinomial.py": {
        "torch": {
            "zeros_13": {
                "variable": {
                    "value": "self.prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(probs)",
                            "Call"
                        ],
                        [
                            "self.alias.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_55": {
                "variable": {
                    "value": "kk",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.prob.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_59": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.prob.index_select(0, kk)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/custom_transforms.py": {
        "torch": {
            "from_numpy_27": {
                "ndarray": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.transpose((2, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/normalize.py": {
        "torch": {}
    },
    "lib/utils.py": {
        "torch": {
            "no_grad_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/c3d.py": {
        "torch": {
            "Conv3d_18": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_19": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool3d_21": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_23": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_24": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool3d_26": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_28": {
                "variable": {
                    "value": "self.conv3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_29": {
                "variable": {
                    "value": "self.bn3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.relu3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_31": {
                "variable": {
                    "value": "self.conv3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_32": {
                "variable": {
                    "value": "self.bn3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "variable": {
                    "value": "self.relu3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool3d_34": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_36": {
                "variable": {
                    "value": "self.conv4a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_37": {
                "variable": {
                    "value": "self.bn4a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "variable": {
                    "value": "self.relu4a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_39": {
                "variable": {
                    "value": "self.conv4b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_40": {
                "variable": {
                    "value": "self.bn4b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "variable": {
                    "value": "self.relu4b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool3d_42": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_44": {
                "variable": {
                    "value": "self.conv5a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_45": {
                "variable": {
                    "value": "self.bn5a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "variable": {
                    "value": "self.relu5a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_47": {
                "variable": {
                    "value": "self.conv5b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_48": {
                "variable": {
                    "value": "self.bn5b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "variable": {
                    "value": "self.relu5b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_55": {
                "variable": {
                    "value": "self.pool5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool3d_52": {
                "variable": {
                    "value": "self.feature_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/network.py": {
        "torch": {
            "roll_12": {
                "variable": {
                    "value": "shift_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.mlp(x)",
                            "Call"
                        ],
                        [
                            "self.l2norm(x)",
                            "Call"
                        ],
                        [
                            "self.base_network(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 512)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.base_network(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 512)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.base_network(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_channels, hid_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self.fc_seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feature_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_seq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.fc_speed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feature_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_speed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_118": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(f1, f2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "variable": {
                    "value": "self.base_network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(model.children())[:-1]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_151": {
                "variable": {
                    "value": "self.base_network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(model.children())[:-1]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.base_network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(model.children())[:-1]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_137": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "101",
                            "MethodArgument"
                        ],
                        [
                            "101",
                            "MethodArgument"
                        ],
                        [
                            "101",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_154": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "101",
                            "MethodArgument"
                        ],
                        [
                            "101",
                            "MethodArgument"
                        ],
                        [
                            "101",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_169": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "101",
                            "MethodArgument"
                        ],
                        [
                            "101",
                            "MethodArgument"
                        ],
                        [
                            "101",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_50": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "in_features": {
                    "value": "hid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/pcl_net.py": {
        "torch": {
            "Sequential_43": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_channels, hid_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feature_size * tuple_len",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.class_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "roll_87": {
                "variable": {
                    "value": "shift_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.mlp(x)",
                            "Call"
                        ],
                        [
                            "self.l2norm(x)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(f1, f2, f3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_44": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "hid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/r21d.py": {
        "torch": {
            "Conv3d_51": {
                "variable": {
                    "value": "self.spatial_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "intermed_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(math.floor(kernel_size[0] * kernel_size[1] * kernel_size[2] * in_channels * out_channels / (kernel_size[1] * kernel_size[2] * in_channels + kernel_size[0] * out_channels)))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "spatial_kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1, kernel_size[1], kernel_size[2])",
                            "Tuple"
                        ]
                    ]
                },
                "stride": {
                    "value": "spatial_stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1, stride[1], stride[2])",
                            "Tuple"
                        ]
                    ]
                },
                "padding": {
                    "value": "spatial_padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(0, padding[1], padding[2])",
                            "Tuple"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_53": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "intermed_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(math.floor(kernel_size[0] * kernel_size[1] * kernel_size[2] * in_channels * out_channels / (kernel_size[1] * kernel_size[2] * in_channels + kernel_size[0] * out_channels)))",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_54": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_61": {
                "variable": {
                    "value": "self.temporal_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "intermed_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(math.floor(kernel_size[0] * kernel_size[1] * kernel_size[2] * in_channels * out_channels / (kernel_size[1] * kernel_size[2] * in_channels + kernel_size[0] * out_channels)))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "temporal_kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(kernel_size[0], 1, 1)",
                            "Tuple"
                        ]
                    ]
                },
                "stride": {
                    "value": "temporal_stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(stride[0], 1, 1)",
                            "Tuple"
                        ]
                    ]
                },
                "padding": {
                    "value": "temporal_padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(padding[0], 0, 0)",
                            "Tuple"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_103": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm3d_108": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_109": {
                "variable": {
                    "value": "self.outrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_142": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm3d_172": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_173": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_187": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_96": {
                "variable": {
                    "value": "self.downsamplebn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MaxPool3d_183": {
                "variable": {
                    "value": "self.feature_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_190": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/r3d.py": {
        "torch": {
            "Conv3d_33": {
                "variable": {
                    "value": "self.temporal_spatial_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_triple(kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_triple(stride)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_triple(padding)",
                            "Call"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_74": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm3d_79": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "variable": {
                    "value": "self.outrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_113": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm3d_143": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_144": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_158": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_67": {
                "variable": {
                    "value": "self.downsamplebn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MaxPool3d_154": {
                "variable": {
                    "value": "self.feature_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_161": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_vcp_contrast.py": {
        "torch": {
            "chunk_49": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.filter(ImageFilter.GaussianBlur(radius=sigma))",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "x_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tmp[order[0]], tmp[order[1]], tmp[order[2]], tmp[order[3]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_71": {
                "tensors": {
                    "value": "(slices[order[2]], slices[order[3]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_257": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "stack_96": {
                "tensors": {
                    "value": "new_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "set_grad_enabled_101": {
                "mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_grad_enabled_163": {
                "mode": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_181": {
                "variable": {
                    "value": "pts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_grad_enabled_193": {
                "mode": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_211": {
                "variable": {
                    "value": "pts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_265": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_266": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_267": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_339": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "UCF101PCLDataset('data/', args.cl, args.it, args.tl, True, train_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_341": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "UCF101PCLDataset('data/', args.cl, args.it, args.tl, False, train_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_351": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_352": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pcl_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_353": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.SGD(pcl_net.parameters(), lr=args.lr, momentum=args.momentum, weight_decay=args.wd)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "Constant",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "patience": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_182": {
                "input": {
                    "value": "targets == pts",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_212": {
                "input": {
                    "value": "targets == pts",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "DataLoader_383": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "UCF101PCLDataset('data/', args.cl, args.it, args.tl, False, test_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_386": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rot90_88": {
                "variable": {
                    "value": "one_sample[1, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "one_sample[1, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "random.randint(0, 2) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dims": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_279": {
                "variable": {
                    "value": "base",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(torchmodel.children())[:-1]",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_290": {
                "f": {
                    "value": "args.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_365": {
                "obj": {
                    "value": "pcl_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(log_dir, 'model_{}.pt'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_369": {
                "obj": {
                    "value": "pcl_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(log_dir, 'best_model_{}.pt'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_376": {
                "f": {
                    "value": "args.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "mean_67": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.nn.Softmax(dim=1)(outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "topk_68": {
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mean(torch.nn.Softmax(dim=1)(outputs), 0)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_67": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}