{
    "examples/diffai_comparison.py": {
        "tensorflow": {
            "placeholder_205": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "eps",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_206": {
                "variable": {
                    "value": "adversary_eps",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "adversary_eps",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_208": {
                "variable": {
                    "value": "lam",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "lam",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_212": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_216": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "training_iterator.get_next()",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[batch_size, *input_shape])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, *input_shape]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_229": {
                "variable": {
                    "value": "trainable_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_n_230": {
                "variable": {
                    "value": "regularisation_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.compat.v1.nn.l2_loss(v) for v in trainable_vars]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "name": {
                    "value": "regularization_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_247": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, *x_test.shape[1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_249": {
                "variable": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, *y_test.shape[1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_255": {
                "variable": {
                    "value": "y_pred_int",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_pred_, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_256": {
                "variable": {
                    "value": "y_test_int",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.placeholder(tf.float32, shape=[None, *y_test.shape[1:]], name='y_t')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_258": {
                "variable": {
                    "value": "compare_op_test",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(y_pred_int, y_test_int)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_259": {
                "variable": {
                    "value": "test_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_mean(compare_op_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "test_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_261": {
                "variable": {
                    "value": "x_t_elem",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, *x_test.shape[1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x_t_elem",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_263": {
                "variable": {
                    "value": "y_t_elem",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, *y_test.shape[1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "y_t_elem",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_265": {
                "variable": {
                    "value": "y_t_elem_int",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_t_elem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.placeholder(tf.float32, shape=(1, *y_test.shape[1:]), name='y_t_elem')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_274": {
                "variable": {
                    "value": "y_test_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.one_hot(y_t_elem_int, num_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_279": {
                "variable": {
                    "value": "y_verify_adversary_int",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_verify_adversary, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_299": {
                "variable": {
                    "value": "y_pgd_adversary_int",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_pgd_adversary_, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shuffle_644": {
                "variable": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": []
                },
                "buffer_size": {
                    "value": "args.buffer_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_644": {
                "variable": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "drop_remainder": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "make_initializable_iterator_648": {
                "variable": {
                    "value": "iterator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.data.Dataset.from_tensor_slices((x_train, y_train)).shuffle(buffer_size=args.buffer_size).batch(batch_size, drop_remainder=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_164": {
                "input_tensor": {
                    "value": "tf.keras.losses.sparse_categorical_crossentropy(y_true, y_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_data_583": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "layers": {
                    "value": "[tf.keras.layers.Flatten(input_shape=input_shape), tf.keras.layers.Dense(100, activation='relu'), tf.keras.layers.Dense(100, activation='relu'), tf.keras.layers.Dense(100, activation='relu'), tf.keras.layers.Dense(100, activation='relu'), tf.keras.layers.Dense(100, activation='relu'), tf.keras.layers.Dense(num_classes, activation='softmax', name='y_pred')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_categorical_crossentropy_165": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "training_iterator.get_next()",
                            "Call"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_255": {
                "input": {
                    "value": "y_pred_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_t)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_258": {
                "x": {
                    "value": "y_pred_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(y_pred_, axis=1), tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y_test_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_t, tf.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_259": {
                "input_tensor": {
                    "value": "compare_op_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.equal(y_pred_int, y_test_int), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_274": {
                "indices": {
                    "value": "y_t_elem_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_t_elem, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(set(list(y_train) + list(y_test)))",
                            "Call"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_280": {
                "input": {
                    "value": "y_verify_adversary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred_box_center - y_pred_box_error * (y_test_one_hot * 2 - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_282": {
                "input_tensor": {
                    "value": "tf.cast(tf.equal(y_verify_adversary_int, y_t_elem_int), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "verify_adversary_test_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_300": {
                "input": {
                    "value": "y_pgd_adversary_",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_302": {
                "input_tensor": {
                    "value": "tf.cast(tf.equal(y_pgd_adversary_int, y_t_elem_int), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "pgd_adversary_test_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_409": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_data_588": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "layers": {
                    "value": "[tf.keras.layers.Conv2D(16, kernel_size=(4, 4), strides=2, activation='relu', input_shape=input_shape), tf.keras.layers.Conv2D(32, (4, 4), strides=2, activation='relu'), tf.keras.layers.Flatten(), tf.keras.layers.Dense(100), tf.keras.layers.Dense(num_classes, activation='softmax', name='y_pred')]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "ConvSmall",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_231": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_global_step_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_282": {
                "x": {
                    "value": "tf.equal(y_verify_adversary_int, y_t_elem_int)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_303": {
                "x": {
                    "value": "tf.equal(y_pgd_adversary_int, y_t_elem_int)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_373": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_483": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_51": {
                "input_shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_train.shape[1], x_train.shape[2], x_train.shape[3]]",
                            "List"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dense_52": {
                "units": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_53": {
                "units": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_54": {
                "units": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_55": {
                "units": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_56": {
                "units": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_57": {
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(set(list(y_train) + list(y_test)))",
                            "Call"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "y_pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "layers": {
                    "value": "[tf.keras.layers.Conv2D(16, kernel_size=(4, 4), strides=2, activation='relu', padding='same', input_shape=input_shape), tf.keras.layers.Conv2D(32, (4, 4), strides=2, padding='same', activation='relu'), tf.keras.layers.Flatten(), tf.keras.layers.Dense(100), tf.keras.layers.Dense(num_classes, activation='softmax', name='y_pred')]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "ConvMed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_282": {
                "x": {
                    "value": "y_verify_adversary_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(y_verify_adversary, axis=1), tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y_t_elem_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_t_elem, tf.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_303": {
                "x": {
                    "value": "y_pgd_adversary_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(y_pgd_adversary_, axis=1), tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y_t_elem_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_t_elem, tf.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_374": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_482": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_62": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_train.shape[1], x_train.shape[2], x_train.shape[3]]",
                            "List"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_66": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_68": {
                "units": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_69": {
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(set(list(y_train) + list(y_test)))",
                            "Call"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "y_pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "layers": {
                    "value": "[tf.keras.layers.Conv2D(32, kernel_size=(3, 3), strides=1, activation='relu', padding='same', input_shape=input_shape), tf.keras.layers.Conv2D(32, (4, 4), strides=2, padding='same', activation='relu'), tf.keras.layers.Conv2D(64, (3, 3), strides=1, padding='same', activation='relu'), tf.keras.layers.Conv2D(64, (4, 4), strides=2, padding='same', activation='relu'), tf.keras.layers.Flatten(), tf.keras.layers.Dense(512, activation='relu'), tf.keras.layers.Dense(512), tf.keras.layers.Dense(num_classes, activation='softmax', name='y_pred')]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "ConvBig",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_226": {
                "x": {
                    "value": "tf.one_hot(y_true, depth=num_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_75": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_train.shape[1], x_train.shape[2], x_train.shape[3]]",
                            "List"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_79": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_82": {
                "units": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_83": {
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(set(list(y_train) + list(y_test)))",
                            "Call"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "y_pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "layers": {
                    "value": "[tf.keras.layers.Conv2D(32, kernel_size=(3, 3), strides=1, activation='relu', padding='valid', input_shape=input_shape), tf.keras.layers.Conv2D(32, (4, 4), strides=1, padding='valid', activation='relu'), tf.keras.layers.Conv2D(64, (3, 3), strides=1, padding='valid', activation='relu'), tf.keras.layers.Conv2D(64, (4, 4), strides=1, padding='valid', activation='relu'), tf.keras.layers.Flatten(), tf.keras.layers.Dense(512, activation='relu'), tf.keras.layers.Dense(512), tf.keras.layers.Dense(num_classes, activation='softmax', name='y_pred')]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "ConvSuper",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_126": {
                "variable": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_train.shape[1], x_train.shape[2], x_train.shape[3]]",
                            "List"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "m1",
                    "type": "variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.Conv2D(16, kernel_size=(3, 3), strides=1, activation='relu', padding='valid', input_shape=input_shape), tf.keras.layers.Conv2D(16, (3, 3), strides=1, padding='valid', activation='relu'), tf.keras.layers.Conv2D(32, (3, 3), strides=1, padding='valid', activation='relu'), tf.keras.layers.Flatten(), tf.keras.layers.Dense(200)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "variable": {
                    "value": "m2",
                    "type": "variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.Conv2D(32, kernel_size=(4, 4), strides=1, activation='relu', padding='valid', input_shape=input_shape), tf.keras.layers.Conv2D(32, (4, 4), strides=1, padding='valid', activation='relu'), tf.keras.layers.Flatten(), tf.keras.layers.Dense(200)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concatenate_151": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "[o1, o2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_226": {
                "indices": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "training_iterator.get_next()",
                            "Call"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(set(list(y_train) + list(y_test)))",
                            "Call"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_89": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_train.shape[1], x_train.shape[2], x_train.shape[3]]",
                            "List"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_93": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_95": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_97": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_100": {
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_101": {
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_102": {
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(set(list(y_train) + list(y_test)))",
                            "Call"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "y_pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_157": {
                "inputs": {
                    "value": "[input_]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.ReLU()(merged)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dense(200, activation='relu')(output)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dense(num_classes, activation='softmax')(output)",
                            "Call"
                        ],
                        [
                            "sess.run([ops['verify_adversary_test'], ops['pgd_adversary_test'], ops['y_verify_adversary_int'], ops['y_pgd_adversary_int'], ops['y_t_elem_int']], feed_dict=sub_adv_vars)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "y_pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_108": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_train.shape[1], x_train.shape[2], x_train.shape[3]]",
                            "List"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_112": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_114": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_116": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_119": {
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_120": {
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_121": {
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(set(list(y_train) + list(y_test)))",
                            "Call"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "y_pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReLU_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_154": {
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_155": {
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(set(list(y_train) + list(y_test)))",
                            "Call"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_128": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_train.shape[1], x_train.shape[2], x_train.shape[3]]",
                            "List"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_132": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_134": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_137": {
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2D_140": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_train.shape[1], x_train.shape[2], x_train.shape[3]]",
                            "List"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_144": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_147": {
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/train_simple_example.py": {
        "tensorflow": {
            "load_data_35": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shuffle_46": {
                "variable": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": []
                },
                "buffer_size": {
                    "value": "5000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_46": {
                "variable": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "make_initializable_iterator_48": {
                "variable": {
                    "value": "iterator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.data.Dataset.from_tensor_slices((x_train, y_train)).shuffle(buffer_size=5000).batch(32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.Flatten(input_shape=input_shape), tf.keras.layers.Dense(100, activation='relu'), tf.keras.layers.Dense(100, activation='relu'), tf.keras.layers.Dense(100, activation='relu'), tf.keras.layers.Dense(100, activation='relu'), tf.keras.layers.Dense(100, activation='relu'), tf.keras.layers.Dense(num_classes, activation='softmax')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_74": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Saver_93": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_29": {
                "input_tensor": {
                    "value": "tf.keras.losses.sparse_categorical_crossentropy(y_true, y_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sparse_categorical_crossentropy_30": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iterator.get_next()",
                            "Call"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Flatten_53": {
                "input_shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[28, 28, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "Dense_54": {
                "units": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_55": {
                "units": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_56": {
                "units": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_57": {
                "units": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_58": {
                "units": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_59": {
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "parot/domains/box.py": {
        "tensorflow": {
            "identity_31": {
                "variable": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_center()",
                            "Call"
                        ],
                        [
                            "self.get_center_errors()",
                            "Call"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'box_{}_c'.format(self.id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_32": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'box_{}_b'.format(self.id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_190": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(beta, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_331": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_center()",
                            "Call"
                        ],
                        [
                            "self.get_center_errors()",
                            "Call"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_336": {
                "variable": {
                    "value": "llshape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[rest, [channels, channels - 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_338": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[channels, channels]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_diag_339": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill([channels, channels], True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(mask, tf.fill([channels], False))",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, [-1])",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "tf.fill([channels], False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_340": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill([channels, channels], True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(mask, tf.fill([channels], False))",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_342": {
                "variable": {
                    "value": "ll",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(tf.boolean_mask(tf.tile(lo, multiples), mask, axis=rank - 1), llshape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_344": {
                "variable": {
                    "value": "uu",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(tf.boolean_mask(tf.tile(up, multiples), mask, axis=rank - 1), llshape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_347": {
                "variable": {
                    "value": "smu",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "up - ll",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_348": {
                "variable": {
                    "value": "sml",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lo - uu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "fill_339": {
                "dims": {
                    "value": "[channels]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_342": {
                "tensor": {
                    "value": "tf.boolean_mask(tf.tile(lo, multiples), mask, axis=rank - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "llshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([rest, [channels, channels - 1]], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_344": {
                "tensor": {
                    "value": "tf.boolean_mask(tf.tile(up, multiples), mask, axis=rank - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "llshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([rest, [channels, channels - 1]], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_177": {
                "x": {
                    "value": "tf.one_hot(y_true, depth=n_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_283": {
                "t": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "boolean_mask_342": {
                "tensor": {
                    "value": "tf.tile(lo, multiples)",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill([channels, channels], True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(mask, tf.fill([channels], False))",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, [-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "rank - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "boolean_mask_344": {
                "tensor": {
                    "value": "tf.tile(up, multiples)",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill([channels, channels], True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(mask, tf.fill([channels], False))",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, [-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "rank - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "one_hot_177": {
                "indices": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tile_343": {
                "input": {
                    "value": "lo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f(self.c - self.b)",
                            "Call"
                        ],
                        [
                            "c - s",
                            "BinOp"
                        ]
                    ]
                },
                "multiples": {
                    "value": "multiples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1 for i in range(0, rank - 1)] + [channels]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tile_345": {
                "input": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f(self.c + self.b)",
                            "Call"
                        ],
                        [
                            "c + s",
                            "BinOp"
                        ]
                    ]
                },
                "multiples": {
                    "value": "multiples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1 for i in range(0, rank - 1)] + [channels]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "parot/domains/domain.py": {
        "tensorflow": {
            "sign_69": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "c - y_true",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_all_83": {
                "input_tensor": {
                    "value": "abs(x - c) <= e",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "parot/domains/hz.py": {
        "tensorflow": {
            "identity_50": {
                "variable": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_center()",
                            "Call"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "(sigma(up) + eps_mx + (sigma(lo) - eps_mn)) / 2",
                            "BinOp"
                        ],
                        [
                            "(up + lo) / 2",
                            "BinOp"
                        ],
                        [
                            "self.get_center()",
                            "Call"
                        ],
                        [
                            "(tf.math.reciprocal(up) + tf.math.reciprocal(lo) - epsilon) / 2",
                            "BinOp"
                        ],
                        [
                            "self.get_center_errors()",
                            "Call"
                        ],
                        [
                            "(f(up) + f(lo) - epsilon) / 2",
                            "BinOp"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.get_center_errors()",
                            "Call"
                        ],
                        [
                            "self.to_box().softmax().get_center_errors()",
                            "Call"
                        ],
                        [
                            "(up + lo) / 2",
                            "BinOp"
                        ],
                        [
                            "tf.concat([self.c, other.c], axis=axis)",
                            "Call"
                        ],
                        [
                            "x.c @ w",
                            "BinOp"
                        ],
                        [
                            "a.maximum(b)",
                            "Call"
                        ],
                        [
                            "a.minimum(b)",
                            "Call"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "domain.get_center_errors()",
                            "Call"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'hz_{}_c'.format(self.id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_51": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_batch_dim()",
                            "Call"
                        ],
                        [
                            "tf.div_no_nan(1.0, meu + 0.01) / 2 - 1",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(b, 1.0)",
                            "Call"
                        ],
                        [
                            "self.b * meu + epsilon",
                            "BinOp"
                        ],
                        [
                            "self.b * abs(meu) + abs(epsilon)",
                            "BinOp"
                        ],
                        [
                            "self.b * meu + abs(epsilon) / 2.0",
                            "BinOp"
                        ],
                        [
                            "self.to_box().softmax().get_center_errors()",
                            "Call"
                        ],
                        [
                            "meux * x.b + meuy * y.b + epsilon",
                            "BinOp"
                        ],
                        [
                            "tf.concat([self.b, other.b], axis=axis)",
                            "Call"
                        ],
                        [
                            "x.b",
                            "Attribute"
                        ],
                        [
                            "tf.einsum('...ij,jk->...ijk', b, w)",
                            "Call"
                        ],
                        [
                            "tf.transpose(b, perm=perm)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [-1, *w.shape[1:]])",
                            "Call"
                        ],
                        [
                            "self.b",
                            "Attribute"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'hz_{}_b'.format(self.id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_52": {
                "variable": {
                    "value": "self.E",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_E_unflattened()",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened()",
                            "Call"
                        ],
                        [
                            "E * e",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(E, axis=0)",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "meux * Ex + meuy * Ey",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(x.E))",
                            "Call"
                        ],
                        [
                            "tf.concat([EE1, EE2], axis=axis + 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z.E, [e, -1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(E, axis=1)",
                            "Call"
                        ],
                        [
                            "x.E @ w",
                            "BinOp"
                        ],
                        [
                            "tf.concat([E, b], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [-1, HWC])",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(E)",
                            "Call"
                        ],
                        [
                            "tf.transpose(E, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [-1, *Cs])",
                            "Call"
                        ],
                        [
                            "tf.concat([self.E, E], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.constant(cols)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, multiples=[1, B, *[1 for _ in S]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [len(cols) * B, *S])",
                            "Call"
                        ],
                        [
                            "E",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'hz_{}_E'.format(self.id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_153": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(beta, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_154": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(e, -1, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(e, [p, b] + [1 for r in rest])",
                            "Call"
                        ],
                        [
                            "z.get_error_dim()",
                            "Call"
                        ],
                        [
                            "domain.get_center_errors()",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_155": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(e, -1, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(e, [p, b] + [1 for r in rest])",
                            "Call"
                        ],
                        [
                            "z.get_error_dim()",
                            "Call"
                        ],
                        [
                            "domain.get_center_errors()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[p, b] + [1 for r in rest]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_157": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_E_unflattened()",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened()",
                            "Call"
                        ],
                        [
                            "E * e",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(E, axis=0)",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "meux * Ex + meuy * Ey",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(x.E))",
                            "Call"
                        ],
                        [
                            "tf.concat([EE1, EE2], axis=axis + 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z.E, [e, -1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(E, axis=1)",
                            "Call"
                        ],
                        [
                            "x.E @ w",
                            "BinOp"
                        ],
                        [
                            "tf.concat([E, b], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [-1, HWC])",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(E)",
                            "Call"
                        ],
                        [
                            "tf.transpose(E, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [-1, *Cs])",
                            "Call"
                        ],
                        [
                            "tf.concat([self.E, E], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.constant(cols)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, multiples=[1, B, *[1 for _ in S]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [len(cols) * B, *S])",
                            "Call"
                        ],
                        [
                            "E",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_214": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_batch_dim()",
                            "Call"
                        ],
                        [
                            "tf.div_no_nan(1.0, meu + 0.01) / 2 - 1",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(b, 1.0)",
                            "Call"
                        ],
                        [
                            "self.b * meu + epsilon",
                            "BinOp"
                        ],
                        [
                            "self.b * abs(meu) + abs(epsilon)",
                            "BinOp"
                        ],
                        [
                            "self.b * meu + abs(epsilon) / 2.0",
                            "BinOp"
                        ],
                        [
                            "self.to_box().softmax().get_center_errors()",
                            "Call"
                        ],
                        [
                            "meux * x.b + meuy * y.b + epsilon",
                            "BinOp"
                        ],
                        [
                            "tf.concat([self.b, other.b], axis=axis)",
                            "Call"
                        ],
                        [
                            "x.b",
                            "Attribute"
                        ],
                        [
                            "tf.einsum('...ij,jk->...ijk', b, w)",
                            "Call"
                        ],
                        [
                            "tf.transpose(b, perm=perm)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [-1, *w.shape[1:]])",
                            "Call"
                        ],
                        [
                            "self.b",
                            "Attribute"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_215": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "b * b - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_219": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.is_finite(x1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.log(b + delta)",
                            "UnaryOp"
                        ],
                        [
                            "tf.where(tf.is_finite(x1), x1, tf.zeros_like(x1))",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.minimum(x1, up), lo)",
                            "Call"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(x1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_221": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.is_finite(x2)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.log(b - delta)",
                            "UnaryOp"
                        ],
                        [
                            "tf.where(tf.is_finite(x2), x2, tf.zeros_like(x2))",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.minimum(x2, up), lo)",
                            "Call"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(x2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_222": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.minimum(x1, up)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "lo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c - s",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_min(bds, axis=-1)",
                            "Call"
                        ],
                        [
                            "(xc - xs) / (yc + ys)",
                            "BinOp"
                        ],
                        [
                            "c - s",
                            "BinOp"
                        ],
                        [
                            "c - s",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(x.c - xs, y.c - ys)",
                            "Call"
                        ],
                        [
                            "tf.maximum(lx, ly)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_223": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.minimum(x2, up)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "lo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c - s",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_min(bds, axis=-1)",
                            "Call"
                        ],
                        [
                            "(xc - xs) / (yc + ys)",
                            "BinOp"
                        ],
                        [
                            "c - s",
                            "BinOp"
                        ],
                        [
                            "c - s",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(x.c - xs, y.c - ys)",
                            "Call"
                        ],
                        [
                            "tf.maximum(lx, ly)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_232": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_E_unflattened()",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened()",
                            "Call"
                        ],
                        [
                            "E * e",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(E, axis=0)",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "meux * Ex + meuy * Ey",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(x.E))",
                            "Call"
                        ],
                        [
                            "tf.concat([EE1, EE2], axis=axis + 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z.E, [e, -1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(E, axis=1)",
                            "Call"
                        ],
                        [
                            "x.E @ w",
                            "BinOp"
                        ],
                        [
                            "tf.concat([E, b], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [-1, HWC])",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(E)",
                            "Call"
                        ],
                        [
                            "tf.transpose(E, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [-1, *Cs])",
                            "Call"
                        ],
                        [
                            "tf.concat([self.E, E], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.constant(cols)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, multiples=[1, B, *[1 for _ in S]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [len(cols) * B, *S])",
                            "Call"
                        ],
                        [
                            "E",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(self.E)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_368": {
                "variable": {
                    "value": "bds",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[xu * yu, xl * yu, xu * yl, xl * yl]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_max_369": {
                "variable": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "bds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([xu * yu, xl * yu, xu * yl, xl * yl], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_min_370": {
                "variable": {
                    "value": "lo",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "bds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([xu * yu, xl * yu, xu * yl, xl * yl], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_420": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_E_unflattened()",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened()",
                            "Call"
                        ],
                        [
                            "E * e",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(E, axis=0)",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "meux * Ex + meuy * Ey",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(x.E))",
                            "Call"
                        ],
                        [
                            "tf.concat([EE1, EE2], axis=axis + 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z.E, [e, -1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(E, axis=1)",
                            "Call"
                        ],
                        [
                            "x.E @ w",
                            "BinOp"
                        ],
                        [
                            "tf.concat([E, b], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [-1, HWC])",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(E)",
                            "Call"
                        ],
                        [
                            "tf.transpose(E, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [-1, *Cs])",
                            "Call"
                        ],
                        [
                            "tf.concat([self.E, E], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.constant(cols)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, multiples=[1, B, *[1 for _ in S]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [len(cols) * B, *S])",
                            "Call"
                        ],
                        [
                            "E",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(self.E)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_444": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "tf.rsqrt(-meu) * tf.sign(c)",
                            "BinOp"
                        ],
                        [
                            "extremum_fn(meu)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, lo, up)",
                            "Call"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "x[:, :, ::2, :].max_same_error(x[:, :, 1::2, :])",
                            "Call"
                        ],
                        [
                            "x[:, ::2, :, :].max_same_error(x[:, 1::2, :, :])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "lo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c - s",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_min(bds, axis=-1)",
                            "Call"
                        ],
                        [
                            "(xc - xs) / (yc + ys)",
                            "BinOp"
                        ],
                        [
                            "c - s",
                            "BinOp"
                        ],
                        [
                            "c - s",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(x.c - xs, y.c - ys)",
                            "Call"
                        ],
                        [
                            "tf.maximum(lx, ly)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c + s",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(bds, axis=-1)",
                            "Call"
                        ],
                        [
                            "(xc + xs) / relu(yc - ys)",
                            "BinOp"
                        ],
                        [
                            "c + s",
                            "BinOp"
                        ],
                        [
                            "c + s",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(x.c + xs, y.c + ys)",
                            "Call"
                        ],
                        [
                            "tf.maximum(ux, uy)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_450": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_E_unflattened()",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened()",
                            "Call"
                        ],
                        [
                            "E * e",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(E, axis=0)",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "meux * Ex + meuy * Ey",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(x.E))",
                            "Call"
                        ],
                        [
                            "tf.concat([EE1, EE2], axis=axis + 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z.E, [e, -1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(E, axis=1)",
                            "Call"
                        ],
                        [
                            "x.E @ w",
                            "BinOp"
                        ],
                        [
                            "tf.concat([E, b], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [-1, HWC])",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(E)",
                            "Call"
                        ],
                        [
                            "tf.transpose(E, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [-1, *Cs])",
                            "Call"
                        ],
                        [
                            "tf.concat([self.E, E], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.constant(cols)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, multiples=[1, B, *[1 for _ in S]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [len(cols) * B, *S])",
                            "Call"
                        ],
                        [
                            "E",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(self.E)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_521": {
                "variable": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x.c + xs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "y.c + ys",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_522": {
                "variable": {
                    "value": "lo",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x.c - xs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "y.c - ys",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_592": {
                "variable": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ux",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.c + sx",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "uy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.c + sy",
                            "BinOp"
                        ]
                    ]
                }
            },
            "maximum_593": {
                "variable": {
                    "value": "lo",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.c - sx",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "ly",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.c - sy",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_602": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_E_unflattened()",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened()",
                            "Call"
                        ],
                        [
                            "E * e",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(E, axis=0)",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "meux * Ex + meuy * Ey",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(x.E))",
                            "Call"
                        ],
                        [
                            "tf.concat([EE1, EE2], axis=axis + 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z.E, [e, -1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(E, axis=1)",
                            "Call"
                        ],
                        [
                            "x.E @ w",
                            "BinOp"
                        ],
                        [
                            "tf.concat([E, b], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [-1, HWC])",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(E)",
                            "Call"
                        ],
                        [
                            "tf.transpose(E, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [-1, *Cs])",
                            "Call"
                        ],
                        [
                            "tf.concat([self.E, E], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.constant(cols)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, multiples=[1, B, *[1 for _ in S]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [len(cols) * B, *S])",
                            "Call"
                        ],
                        [
                            "E",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(x.E)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_895": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_batch_dim()",
                            "Call"
                        ],
                        [
                            "tf.div_no_nan(1.0, meu + 0.01) / 2 - 1",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(b, 1.0)",
                            "Call"
                        ],
                        [
                            "self.b * meu + epsilon",
                            "BinOp"
                        ],
                        [
                            "self.b * abs(meu) + abs(epsilon)",
                            "BinOp"
                        ],
                        [
                            "self.b * meu + abs(epsilon) / 2.0",
                            "BinOp"
                        ],
                        [
                            "self.to_box().softmax().get_center_errors()",
                            "Call"
                        ],
                        [
                            "meux * x.b + meuy * y.b + epsilon",
                            "BinOp"
                        ],
                        [
                            "tf.concat([self.b, other.b], axis=axis)",
                            "Call"
                        ],
                        [
                            "x.b",
                            "Attribute"
                        ],
                        [
                            "tf.einsum('...ij,jk->...ijk', b, w)",
                            "Call"
                        ],
                        [
                            "tf.transpose(b, perm=perm)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [-1, *w.shape[1:]])",
                            "Call"
                        ],
                        [
                            "self.b",
                            "Attribute"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, HWC]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "diag_896": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_E_unflattened()",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened()",
                            "Call"
                        ],
                        [
                            "E * e",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(E, axis=0)",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "meux * Ex + meuy * Ey",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(x.E))",
                            "Call"
                        ],
                        [
                            "tf.concat([EE1, EE2], axis=axis + 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z.E, [e, -1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(E, axis=1)",
                            "Call"
                        ],
                        [
                            "x.E @ w",
                            "BinOp"
                        ],
                        [
                            "tf.concat([E, b], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [-1, HWC])",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(E)",
                            "Call"
                        ],
                        [
                            "tf.transpose(E, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [-1, *Cs])",
                            "Call"
                        ],
                        [
                            "tf.concat([self.E, E], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.constant(cols)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, multiples=[1, B, *[1 for _ in S]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [len(cols) * B, *S])",
                            "Call"
                        ],
                        [
                            "E",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_897": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_E_unflattened()",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened()",
                            "Call"
                        ],
                        [
                            "E * e",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(E, axis=0)",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "meux * Ex + meuy * Ey",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(x.E))",
                            "Call"
                        ],
                        [
                            "tf.concat([EE1, EE2], axis=axis + 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z.E, [e, -1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(E, axis=1)",
                            "Call"
                        ],
                        [
                            "x.E @ w",
                            "BinOp"
                        ],
                        [
                            "tf.concat([E, b], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [-1, HWC])",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(E)",
                            "Call"
                        ],
                        [
                            "tf.transpose(E, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [-1, *Cs])",
                            "Call"
                        ],
                        [
                            "tf.concat([self.E, E], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.constant(cols)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, multiples=[1, B, *[1 for _ in S]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [len(cols) * B, *S])",
                            "Call"
                        ],
                        [
                            "E",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_898": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_E_unflattened()",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened()",
                            "Call"
                        ],
                        [
                            "E * e",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(E, axis=0)",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "meux * Ex + meuy * Ey",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(x.E))",
                            "Call"
                        ],
                        [
                            "tf.concat([EE1, EE2], axis=axis + 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z.E, [e, -1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(E, axis=1)",
                            "Call"
                        ],
                        [
                            "x.E @ w",
                            "BinOp"
                        ],
                        [
                            "tf.concat([E, b], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [-1, HWC])",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(E)",
                            "Call"
                        ],
                        [
                            "tf.transpose(E, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [-1, *Cs])",
                            "Call"
                        ],
                        [
                            "tf.concat([self.E, E], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.constant(cols)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, multiples=[1, B, *[1 for _ in S]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [len(cols) * B, *S])",
                            "Call"
                        ],
                        [
                            "E",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, *Cs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_899": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.E, E]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_954": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "cols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cols",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_955": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_E_unflattened()",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened()",
                            "Call"
                        ],
                        [
                            "E * e",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(E, axis=0)",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "meux * Ex + meuy * Ey",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(x.E))",
                            "Call"
                        ],
                        [
                            "tf.concat([EE1, EE2], axis=axis + 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z.E, [e, -1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(E, axis=1)",
                            "Call"
                        ],
                        [
                            "x.E @ w",
                            "BinOp"
                        ],
                        [
                            "tf.concat([E, b], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [-1, HWC])",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(E)",
                            "Call"
                        ],
                        [
                            "tf.transpose(E, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [-1, *Cs])",
                            "Call"
                        ],
                        [
                            "tf.concat([self.E, E], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.constant(cols)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, multiples=[1, B, *[1 for _ in S]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [len(cols) * B, *S])",
                            "Call"
                        ],
                        [
                            "E",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_956": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_E_unflattened()",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened()",
                            "Call"
                        ],
                        [
                            "E * e",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(E, axis=0)",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "meux * Ex + meuy * Ey",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(x.E))",
                            "Call"
                        ],
                        [
                            "tf.concat([EE1, EE2], axis=axis + 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z.E, [e, -1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(E, axis=1)",
                            "Call"
                        ],
                        [
                            "x.E @ w",
                            "BinOp"
                        ],
                        [
                            "tf.concat([E, b], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [-1, HWC])",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(E)",
                            "Call"
                        ],
                        [
                            "tf.transpose(E, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [-1, *Cs])",
                            "Call"
                        ],
                        [
                            "tf.concat([self.E, E], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.constant(cols)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, multiples=[1, B, *[1 for _ in S]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [len(cols) * B, *S])",
                            "Call"
                        ],
                        [
                            "E",
                            "Method Argument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, B, *[1 for _ in S]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_957": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_E_unflattened()",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened()",
                            "Call"
                        ],
                        [
                            "E * e",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(E, axis=0)",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "meux * Ex + meuy * Ey",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(x.E))",
                            "Call"
                        ],
                        [
                            "tf.concat([EE1, EE2], axis=axis + 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z.E, [e, -1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(E, axis=1)",
                            "Call"
                        ],
                        [
                            "x.E @ w",
                            "BinOp"
                        ],
                        [
                            "tf.concat([E, b], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [-1, HWC])",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(E)",
                            "Call"
                        ],
                        [
                            "tf.transpose(E, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [-1, *Cs])",
                            "Call"
                        ],
                        [
                            "tf.concat([self.E, E], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.constant(cols)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, multiples=[1, B, *[1 for _ in S]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [len(cols) * B, *S])",
                            "Call"
                        ],
                        [
                            "E",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[len(cols) * B, *S]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_100": {
                "tensor": {
                    "value": "self.E",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, *self.c.shape]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_all_173": {
                "input_tensor": {
                    "value": "self.get_errors() >= abs(x - self.c)",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "concat_680": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.c, other.c]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "axis",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_681": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.b, other.b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "axis",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_686": {
                "variable": {
                    "value": "EE1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[E1, tf.zeros_like(E2)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_687": {
                "variable": {
                    "value": "EE2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros_like(E1), E2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_688": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[EE1, EE2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_691": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_E_unflattened()",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened()",
                            "Call"
                        ],
                        [
                            "E * e",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(E, axis=0)",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "meux * Ex + meuy * Ey",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(x.E))",
                            "Call"
                        ],
                        [
                            "tf.concat([EE1, EE2], axis=axis + 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z.E, [e, -1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(E, axis=1)",
                            "Call"
                        ],
                        [
                            "x.E @ w",
                            "BinOp"
                        ],
                        [
                            "tf.concat([E, b], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [-1, HWC])",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(E)",
                            "Call"
                        ],
                        [
                            "tf.transpose(E, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [-1, *Cs])",
                            "Call"
                        ],
                        [
                            "tf.concat([self.E, E], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.constant(cols)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, multiples=[1, B, *[1 for _ in S]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [len(cols) * B, *S])",
                            "Call"
                        ],
                        [
                            "E",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[(e1 + e2) * batch_size, *cshape]",
                            "List"
                        ]
                    ]
                }
            },
            "einsum_794": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "...ij,jk->...ijk",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_batch_dim()",
                            "Call"
                        ],
                        [
                            "tf.div_no_nan(1.0, meu + 0.01) / 2 - 1",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(b, 1.0)",
                            "Call"
                        ],
                        [
                            "self.b * meu + epsilon",
                            "BinOp"
                        ],
                        [
                            "self.b * abs(meu) + abs(epsilon)",
                            "BinOp"
                        ],
                        [
                            "self.b * meu + abs(epsilon) / 2.0",
                            "BinOp"
                        ],
                        [
                            "self.to_box().softmax().get_center_errors()",
                            "Call"
                        ],
                        [
                            "meux * x.b + meuy * y.b + epsilon",
                            "BinOp"
                        ],
                        [
                            "tf.concat([self.b, other.b], axis=axis)",
                            "Call"
                        ],
                        [
                            "x.b",
                            "Attribute"
                        ],
                        [
                            "tf.einsum('...ij,jk->...ijk', b, w)",
                            "Call"
                        ],
                        [
                            "tf.transpose(b, perm=perm)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [-1, *w.shape[1:]])",
                            "Call"
                        ],
                        [
                            "self.b",
                            "Attribute"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_799": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_batch_dim()",
                            "Call"
                        ],
                        [
                            "tf.div_no_nan(1.0, meu + 0.01) / 2 - 1",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(b, 1.0)",
                            "Call"
                        ],
                        [
                            "self.b * meu + epsilon",
                            "BinOp"
                        ],
                        [
                            "self.b * abs(meu) + abs(epsilon)",
                            "BinOp"
                        ],
                        [
                            "self.b * meu + abs(epsilon) / 2.0",
                            "BinOp"
                        ],
                        [
                            "self.to_box().softmax().get_center_errors()",
                            "Call"
                        ],
                        [
                            "meux * x.b + meuy * y.b + epsilon",
                            "BinOp"
                        ],
                        [
                            "tf.concat([self.b, other.b], axis=axis)",
                            "Call"
                        ],
                        [
                            "x.b",
                            "Attribute"
                        ],
                        [
                            "tf.einsum('...ij,jk->...ijk', b, w)",
                            "Call"
                        ],
                        [
                            "tf.transpose(b, perm=perm)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [-1, *w.shape[1:]])",
                            "Call"
                        ],
                        [
                            "self.b",
                            "Attribute"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[*(i + 1 for i in range(len(HW))), 0, *(len(HW) + 1 + i for i in range(len(w.shape) - 1))]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_800": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_batch_dim()",
                            "Call"
                        ],
                        [
                            "tf.div_no_nan(1.0, meu + 0.01) / 2 - 1",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(b, 1.0)",
                            "Call"
                        ],
                        [
                            "self.b * meu + epsilon",
                            "BinOp"
                        ],
                        [
                            "self.b * abs(meu) + abs(epsilon)",
                            "BinOp"
                        ],
                        [
                            "self.b * meu + abs(epsilon) / 2.0",
                            "BinOp"
                        ],
                        [
                            "self.to_box().softmax().get_center_errors()",
                            "Call"
                        ],
                        [
                            "meux * x.b + meuy * y.b + epsilon",
                            "BinOp"
                        ],
                        [
                            "tf.concat([self.b, other.b], axis=axis)",
                            "Call"
                        ],
                        [
                            "x.b",
                            "Attribute"
                        ],
                        [
                            "tf.einsum('...ij,jk->...ijk', b, w)",
                            "Call"
                        ],
                        [
                            "tf.transpose(b, perm=perm)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [-1, *w.shape[1:]])",
                            "Call"
                        ],
                        [
                            "self.b",
                            "Attribute"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, *w.shape[1:]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_803": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[E, b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_110": {
                "input_tensor": {
                    "value": "abs(E)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_197": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "tf.rsqrt(-meu) * tf.sign(c)",
                            "BinOp"
                        ],
                        [
                            "extremum_fn(meu)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, lo, up)",
                            "Call"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "x[:, :, ::2, :].max_same_error(x[:, :, 1::2, :])",
                            "Call"
                        ],
                        [
                            "x[:, ::2, :, :].max_same_error(x[:, 1::2, :, :])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_218": {
                "x": {
                    "value": "b + delta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_finite_219": {
                "x": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.log(b + delta)",
                            "UnaryOp"
                        ],
                        [
                            "tf.where(tf.is_finite(x1), x1, tf.zeros_like(x1))",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.minimum(x1, up), lo)",
                            "Call"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_219": {
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.log(b + delta)",
                            "UnaryOp"
                        ],
                        [
                            "tf.where(tf.is_finite(x1), x1, tf.zeros_like(x1))",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.minimum(x1, up), lo)",
                            "Call"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_220": {
                "x": {
                    "value": "b - delta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_finite_221": {
                "x": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.log(b - delta)",
                            "UnaryOp"
                        ],
                        [
                            "tf.where(tf.is_finite(x2), x2, tf.zeros_like(x2))",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.minimum(x2, up), lo)",
                            "Call"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_221": {
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.log(b - delta)",
                            "UnaryOp"
                        ],
                        [
                            "tf.where(tf.is_finite(x2), x2, tf.zeros_like(x2))",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.minimum(x2, up), lo)",
                            "Call"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "minimum_222": {
                "x": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.log(b + delta)",
                            "UnaryOp"
                        ],
                        [
                            "tf.where(tf.is_finite(x1), x1, tf.zeros_like(x1))",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.minimum(x1, up), lo)",
                            "Call"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c + s",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(bds, axis=-1)",
                            "Call"
                        ],
                        [
                            "(xc + xs) / relu(yc - ys)",
                            "BinOp"
                        ],
                        [
                            "c + s",
                            "BinOp"
                        ],
                        [
                            "c + s",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(x.c + xs, y.c + ys)",
                            "Call"
                        ],
                        [
                            "tf.maximum(ux, uy)",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_223": {
                "x": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.log(b - delta)",
                            "UnaryOp"
                        ],
                        [
                            "tf.where(tf.is_finite(x2), x2, tf.zeros_like(x2))",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.minimum(x2, up), lo)",
                            "Call"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c + s",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(bds, axis=-1)",
                            "Call"
                        ],
                        [
                            "(xc + xs) / relu(yc - ys)",
                            "BinOp"
                        ],
                        [
                            "c + s",
                            "BinOp"
                        ],
                        [
                            "c + s",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(x.c + xs, y.c + ys)",
                            "Call"
                        ],
                        [
                            "tf.maximum(ux, uy)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_226": {
                "x": {
                    "value": "eps1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigma(x1) - sigma(lo) - meu * (x1 - lo)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "eps2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigma(x2) - sigma(lo) - meu * (x2 - lo)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "maximum_227": {
                "x": {
                    "value": "-eps1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "-eps2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_232": {
                "input": {
                    "value": "self.E",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_372": {
                "input": {
                    "value": "x.E",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rsqrt_411": {
                "x": {
                    "value": "-meu",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sign_411": {
                "x": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_center()",
                            "Call"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "(sigma(up) + eps_mx + (sigma(lo) - eps_mn)) / 2",
                            "BinOp"
                        ],
                        [
                            "(up + lo) / 2",
                            "BinOp"
                        ],
                        [
                            "self.get_center()",
                            "Call"
                        ],
                        [
                            "(tf.math.reciprocal(up) + tf.math.reciprocal(lo) - epsilon) / 2",
                            "BinOp"
                        ],
                        [
                            "self.get_center_errors()",
                            "Call"
                        ],
                        [
                            "(f(up) + f(lo) - epsilon) / 2",
                            "BinOp"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.get_center_errors()",
                            "Call"
                        ],
                        [
                            "self.to_box().softmax().get_center_errors()",
                            "Call"
                        ],
                        [
                            "(up + lo) / 2",
                            "BinOp"
                        ],
                        [
                            "tf.concat([self.c, other.c], axis=axis)",
                            "Call"
                        ],
                        [
                            "x.c @ w",
                            "BinOp"
                        ],
                        [
                            "a.maximum(b)",
                            "Call"
                        ],
                        [
                            "a.minimum(b)",
                            "Call"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "domain.get_center_errors()",
                            "Call"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reciprocal_415": {
                "x": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c + s",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(bds, axis=-1)",
                            "Call"
                        ],
                        [
                            "(xc + xs) / relu(yc - ys)",
                            "BinOp"
                        ],
                        [
                            "c + s",
                            "BinOp"
                        ],
                        [
                            "c + s",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(x.c + xs, y.c + ys)",
                            "Call"
                        ],
                        [
                            "tf.maximum(ux, uy)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_420": {
                "input": {
                    "value": "self.E",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_450": {
                "input": {
                    "value": "self.E",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_564": {
                "input": {
                    "value": "self.E",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_586": {
                "input_tensor": {
                    "value": "abs(Ex)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_587": {
                "input_tensor": {
                    "value": "abs(Ey)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_602": {
                "input": {
                    "value": "x.E",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_773": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z.E",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[e, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_900": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_center()",
                            "Call"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "(sigma(up) + eps_mx + (sigma(lo) - eps_mn)) / 2",
                            "BinOp"
                        ],
                        [
                            "(up + lo) / 2",
                            "BinOp"
                        ],
                        [
                            "self.get_center()",
                            "Call"
                        ],
                        [
                            "(tf.math.reciprocal(up) + tf.math.reciprocal(lo) - epsilon) / 2",
                            "BinOp"
                        ],
                        [
                            "self.get_center_errors()",
                            "Call"
                        ],
                        [
                            "(f(up) + f(lo) - epsilon) / 2",
                            "BinOp"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.get_center_errors()",
                            "Call"
                        ],
                        [
                            "self.to_box().softmax().get_center_errors()",
                            "Call"
                        ],
                        [
                            "(up + lo) / 2",
                            "BinOp"
                        ],
                        [
                            "tf.concat([self.c, other.c], axis=axis)",
                            "Call"
                        ],
                        [
                            "x.c @ w",
                            "BinOp"
                        ],
                        [
                            "a.maximum(b)",
                            "Call"
                        ],
                        [
                            "a.minimum(b)",
                            "Call"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "domain.get_center_errors()",
                            "Call"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_939": {
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.log(b - delta)",
                            "UnaryOp"
                        ],
                        [
                            "tf.where(tf.is_finite(x2), x2, tf.zeros_like(x2))",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.minimum(x2, up), lo)",
                            "Call"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_958": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "tf.rsqrt(-meu) * tf.sign(c)",
                            "BinOp"
                        ],
                        [
                            "extremum_fn(meu)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, lo, up)",
                            "Call"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "self",
                            "variable"
                        ],
                        [
                            "x[:, :, ::2, :].max_same_error(x[:, :, 1::2, :])",
                            "Call"
                        ],
                        [
                            "x[:, ::2, :, :].max_same_error(x[:, 1::2, :, :])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_138": {
                "x": {
                    "value": "tf.one_hot(y_true, depth=n_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_394": {
                "input": {
                    "value": "x.E",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reciprocal_409": {
                "x": {
                    "value": "lo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c - s",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_min(bds, axis=-1)",
                            "Call"
                        ],
                        [
                            "(xc - xs) / (yc + ys)",
                            "BinOp"
                        ],
                        [
                            "c - s",
                            "BinOp"
                        ],
                        [
                            "c - s",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(x.c - xs, y.c - ys)",
                            "Call"
                        ],
                        [
                            "tf.maximum(lx, ly)",
                            "Call"
                        ]
                    ]
                }
            },
            "reciprocal_414": {
                "x": {
                    "value": "lo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c - s",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_min(bds, axis=-1)",
                            "Call"
                        ],
                        [
                            "(xc - xs) / (yc + ys)",
                            "BinOp"
                        ],
                        [
                            "c - s",
                            "BinOp"
                        ],
                        [
                            "c - s",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(x.c - xs, y.c - ys)",
                            "Call"
                        ],
                        [
                            "tf.maximum(lx, ly)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_775": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_E_unflattened()",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened()",
                            "Call"
                        ],
                        [
                            "E * e",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(E, axis=0)",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "meux * Ex + meuy * Ey",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(x.E))",
                            "Call"
                        ],
                        [
                            "tf.concat([EE1, EE2], axis=axis + 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z.E, [e, -1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(E, axis=1)",
                            "Call"
                        ],
                        [
                            "x.E @ w",
                            "BinOp"
                        ],
                        [
                            "tf.concat([E, b], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [-1, HWC])",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(E)",
                            "Call"
                        ],
                        [
                            "tf.transpose(E, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [-1, *Cs])",
                            "Call"
                        ],
                        [
                            "tf.concat([self.E, E], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.constant(cols)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, multiples=[1, B, *[1 for _ in S]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [len(cols) * B, *S])",
                            "Call"
                        ],
                        [
                            "E",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_138": {
                "indices": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reciprocal_417": {
                "x": {
                    "value": "lo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c - s",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_min(bds, axis=-1)",
                            "Call"
                        ],
                        [
                            "(xc - xs) / (yc + ys)",
                            "BinOp"
                        ],
                        [
                            "c - s",
                            "BinOp"
                        ],
                        [
                            "c - s",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(x.c - xs, y.c - ys)",
                            "Call"
                        ],
                        [
                            "tf.maximum(lx, ly)",
                            "Call"
                        ]
                    ]
                }
            },
            "reciprocal_478": {
                "x": {
                    "value": "meu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div_no_nan(sigma(up) - sigma(lo), s) / 2",
                            "BinOp"
                        ],
                        [
                            "tf.div_no_nan(tf.math.reciprocal(up) - tf.math.reciprocal(lo), 2.0 * s)",
                            "Call"
                        ],
                        [
                            "tf.div_no_nan(f(up) - f(lo), 2.0 * s)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_595": {
                "x": {
                    "value": "lx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.c - sx",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "uy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.c + sy",
                            "BinOp"
                        ]
                    ]
                }
            },
            "maximum_596": {
                "x": {
                    "value": "ly",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.c - sy",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "ux",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.c + sx",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_686": {
                "input": {
                    "value": "E2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other.get_E_unflattened()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_687": {
                "input": {
                    "value": "E1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_E_unflattened()",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_695": {
                "values": {
                    "value": "[self.c, other]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "axis",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_696": {
                "values": {
                    "value": "[self.b, tf.zeros_like(other)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "axis",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_697": {
                "values": {
                    "value": "[self.E, tf.zeros_like(other)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "axis",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_777": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_E_unflattened()",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened()",
                            "Call"
                        ],
                        [
                            "E * e",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(E, axis=0)",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "self.get_E_unflattened() * meu",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(self.E))",
                            "Call"
                        ],
                        [
                            "meux * Ex + meuy * Ey",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(E, tf.shape(x.E))",
                            "Call"
                        ],
                        [
                            "tf.concat([EE1, EE2], axis=axis + 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z.E, [e, -1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(E, axis=1)",
                            "Call"
                        ],
                        [
                            "x.E @ w",
                            "BinOp"
                        ],
                        [
                            "tf.concat([E, b], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [-1, HWC])",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(E)",
                            "Call"
                        ],
                        [
                            "tf.transpose(E, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [-1, *Cs])",
                            "Call"
                        ],
                        [
                            "tf.concat([self.E, E], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.constant(cols)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, multiples=[1, B, *[1 for _ in S]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [len(cols) * B, *S])",
                            "Call"
                        ],
                        [
                            "E",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_804": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_center()",
                            "Call"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "(sigma(up) + eps_mx + (sigma(lo) - eps_mn)) / 2",
                            "BinOp"
                        ],
                        [
                            "(up + lo) / 2",
                            "BinOp"
                        ],
                        [
                            "self.get_center()",
                            "Call"
                        ],
                        [
                            "(tf.math.reciprocal(up) + tf.math.reciprocal(lo) - epsilon) / 2",
                            "BinOp"
                        ],
                        [
                            "self.get_center_errors()",
                            "Call"
                        ],
                        [
                            "(f(up) + f(lo) - epsilon) / 2",
                            "BinOp"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.get_center_errors()",
                            "Call"
                        ],
                        [
                            "self.to_box().softmax().get_center_errors()",
                            "Call"
                        ],
                        [
                            "(up + lo) / 2",
                            "BinOp"
                        ],
                        [
                            "tf.concat([self.c, other.c], axis=axis)",
                            "Call"
                        ],
                        [
                            "x.c @ w",
                            "BinOp"
                        ],
                        [
                            "a.maximum(b)",
                            "Call"
                        ],
                        [
                            "a.minimum(b)",
                            "Call"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "domain.get_center_errors()",
                            "Call"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_741": {
                "tensor": {
                    "value": "input.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, *Cs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_742": {
                "tensor": {
                    "value": "input.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, *Cs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_743": {
                "tensor": {
                    "value": "input.E",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, *Cs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_696": {
                "input": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_697": {
                "input": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "parot/properties/ball.py": {
        "tensorflow": {
            "zeros_55": {
                "shape": {
                    "value": "[0, *Cs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_28": {
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_54": {
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "parot/properties/image.py": {
        "tensorflow": {
            "tile_56": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_tensor[..., :1]) * self.epsilon",
                            "BinOp"
                        ],
                        [
                            "tf.tile(E, multiples)",
                            "Call"
                        ],
                        [
                            "tf.constant(terms)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, [1, 1, 1, C])",
                            "Call"
                        ],
                        [
                            "tf.matrix_diag(E)",
                            "Call"
                        ],
                        [
                            "tf.transpose(E, [4, 0, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [C * P, 1, H, W, C])",
                            "Call"
                        ],
                        [
                            "tf.tile(E, [1, B, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [C * P * B, H, W, C])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, [1, B, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [P * B, H, W, C])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "multiples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1 for i in range(0, len(input_tensor.shape) - 1)] + [C]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_104": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "terms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "expand_dims_105": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_tensor[..., :1]) * self.epsilon",
                            "BinOp"
                        ],
                        [
                            "tf.tile(E, multiples)",
                            "Call"
                        ],
                        [
                            "tf.constant(terms)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, [1, 1, 1, C])",
                            "Call"
                        ],
                        [
                            "tf.matrix_diag(E)",
                            "Call"
                        ],
                        [
                            "tf.transpose(E, [4, 0, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [C * P, 1, H, W, C])",
                            "Call"
                        ],
                        [
                            "tf.tile(E, [1, B, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [C * P * B, H, W, C])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, [1, B, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [P * B, H, W, C])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_106": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_tensor[..., :1]) * self.epsilon",
                            "BinOp"
                        ],
                        [
                            "tf.tile(E, multiples)",
                            "Call"
                        ],
                        [
                            "tf.constant(terms)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, [1, 1, 1, C])",
                            "Call"
                        ],
                        [
                            "tf.matrix_diag(E)",
                            "Call"
                        ],
                        [
                            "tf.transpose(E, [4, 0, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [C * P, 1, H, W, C])",
                            "Call"
                        ],
                        [
                            "tf.tile(E, [1, B, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [C * P * B, H, W, C])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, [1, B, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [P * B, H, W, C])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_109": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_tensor[..., :1]) * self.epsilon",
                            "BinOp"
                        ],
                        [
                            "tf.tile(E, multiples)",
                            "Call"
                        ],
                        [
                            "tf.constant(terms)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, [1, 1, 1, C])",
                            "Call"
                        ],
                        [
                            "tf.matrix_diag(E)",
                            "Call"
                        ],
                        [
                            "tf.transpose(E, [4, 0, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [C * P, 1, H, W, C])",
                            "Call"
                        ],
                        [
                            "tf.tile(E, [1, B, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [C * P * B, H, W, C])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, [1, B, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [P * B, H, W, C])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[4, 0, 1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_110": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_tensor[..., :1]) * self.epsilon",
                            "BinOp"
                        ],
                        [
                            "tf.tile(E, multiples)",
                            "Call"
                        ],
                        [
                            "tf.constant(terms)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, [1, 1, 1, C])",
                            "Call"
                        ],
                        [
                            "tf.matrix_diag(E)",
                            "Call"
                        ],
                        [
                            "tf.transpose(E, [4, 0, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [C * P, 1, H, W, C])",
                            "Call"
                        ],
                        [
                            "tf.tile(E, [1, B, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [C * P * B, H, W, C])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, [1, B, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [P * B, H, W, C])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[C * P, 1, H, W, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_111": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_tensor[..., :1]) * self.epsilon",
                            "BinOp"
                        ],
                        [
                            "tf.tile(E, multiples)",
                            "Call"
                        ],
                        [
                            "tf.constant(terms)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, [1, 1, 1, C])",
                            "Call"
                        ],
                        [
                            "tf.matrix_diag(E)",
                            "Call"
                        ],
                        [
                            "tf.transpose(E, [4, 0, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [C * P, 1, H, W, C])",
                            "Call"
                        ],
                        [
                            "tf.tile(E, [1, B, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [C * P * B, H, W, C])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, [1, B, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [P * B, H, W, C])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, B, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_tensor[..., :1]) * self.epsilon",
                            "BinOp"
                        ],
                        [
                            "tf.tile(E, multiples)",
                            "Call"
                        ],
                        [
                            "tf.constant(terms)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, [1, 1, 1, C])",
                            "Call"
                        ],
                        [
                            "tf.matrix_diag(E)",
                            "Call"
                        ],
                        [
                            "tf.transpose(E, [4, 0, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [C * P, 1, H, W, C])",
                            "Call"
                        ],
                        [
                            "tf.tile(E, [1, B, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [C * P * B, H, W, C])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, [1, B, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [P * B, H, W, C])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[C * P * B, H, W, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_114": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_tensor[..., :1]) * self.epsilon",
                            "BinOp"
                        ],
                        [
                            "tf.tile(E, multiples)",
                            "Call"
                        ],
                        [
                            "tf.constant(terms)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, [1, 1, 1, C])",
                            "Call"
                        ],
                        [
                            "tf.matrix_diag(E)",
                            "Call"
                        ],
                        [
                            "tf.transpose(E, [4, 0, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [C * P, 1, H, W, C])",
                            "Call"
                        ],
                        [
                            "tf.tile(E, [1, B, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [C * P * B, H, W, C])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, [1, B, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [P * B, H, W, C])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_115": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_tensor[..., :1]) * self.epsilon",
                            "BinOp"
                        ],
                        [
                            "tf.tile(E, multiples)",
                            "Call"
                        ],
                        [
                            "tf.constant(terms)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, [1, 1, 1, C])",
                            "Call"
                        ],
                        [
                            "tf.matrix_diag(E)",
                            "Call"
                        ],
                        [
                            "tf.transpose(E, [4, 0, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [C * P, 1, H, W, C])",
                            "Call"
                        ],
                        [
                            "tf.tile(E, [1, B, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [C * P * B, H, W, C])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, [1, B, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [P * B, H, W, C])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, B, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_tensor[..., :1]) * self.epsilon",
                            "BinOp"
                        ],
                        [
                            "tf.tile(E, multiples)",
                            "Call"
                        ],
                        [
                            "tf.constant(terms)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, [1, 1, 1, C])",
                            "Call"
                        ],
                        [
                            "tf.matrix_diag(E)",
                            "Call"
                        ],
                        [
                            "tf.transpose(E, [4, 0, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [C * P, 1, H, W, C])",
                            "Call"
                        ],
                        [
                            "tf.tile(E, [1, B, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [C * P * B, H, W, C])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(E, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(E, [1, B, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(E, [P * B, H, W, C])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[P * B, H, W, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_33": {
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_54": {
                "input": {
                    "value": "input_tensor[..., :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_57": {
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_119": {
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_34": {
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "parot/utils/graph.py": {
        "tensorflow": {
            "Operation_116": {
                "variable": {
                    "value": "cloned_op",
                    "type": "variable",
                    "possible_values": []
                },
                "node_def": {
                    "value": "nd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deepcopy(op.node_def)",
                            "Call"
                        ]
                    ]
                },
                "g": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "G or tf.compat.v1.get_default_graph()",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "original_op": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.op",
                            "Attribute"
                        ],
                        [
                            "y.op",
                            "Attribute"
                        ],
                        [
                            "ops",
                            "variable"
                        ],
                        [
                            "op",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_default_graph_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "parot/utils/testing.py": {
        "tensorflow": {
            "GradientDescentOptimizer_34": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_82": {
                "variable": {
                    "value": "counter",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "counter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_domain.evaluate([tf.convert_to_tensor(Delta) for Delta in Delta_s])",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(x, domain_min)",
                            "Call"
                        ],
                        [
                            "tf.math.minimum(x, domain_max)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "domain_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "minimum_61": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_domain.evaluate([tf.convert_to_tensor(Delta) for Delta in Delta_s])",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(x, domain_min)",
                            "Call"
                        ],
                        [
                            "tf.math.minimum(x, domain_max)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "domain_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "while_loop_85": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i: i < step_count",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[counter]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "PGDInitilization",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_64": {
                "initial_value": {
                    "value": "tf.zeros(sh)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "assign_67": {
                "ref": {
                    "value": "Delta",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.random.uniform(tf.shape(Delta)) * 2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_84": {
                "control_inputs": {
                    "value": "init_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.compat.v1.assign(Delta, tf.random.uniform(tf.shape(Delta)) * 2 - 1) for Delta in Delta_s]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "control_dependencies_88": {
                "control_inputs": {
                    "value": "[z]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_75": {
                "control_inputs": {
                    "value": "[train_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_79": {
                "control_inputs": {
                    "value": "assign_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.compat.v1.assign(Delta, tf.clip_by_value(Delta, -1, 1)) for Delta in Delta_s]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "convert_to_tensor_56": {
                "value": {
                    "value": "Delta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "shape": {
                    "value": "sh",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "assign_77": {
                "ref": {
                    "value": "Delta",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.clip_by_value(Delta, -1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "uniform_67": {
                "shape": {
                    "value": "tf.shape(Delta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_77": {
                "t": {
                    "value": "Delta",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_68": {
                "input": {
                    "value": "Delta",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "parot/utils/util.py": {
        "tensorflow": {
            "where_48": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.is_nan(image)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "lower * tf.ones_like(image)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(image) / math.log(10)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(image), lower * tf.ones_like(image), image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, lower, upper)",
                            "Call"
                        ],
                        [
                            "linterp(lower, upper, 0, 255, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0, 255)",
                            "Call"
                        ],
                        [
                            "tf.gather(cmap, image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(buf.getvalue(), channels=4)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_49": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(image) / math.log(10)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(image), lower * tf.ones_like(image), image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, lower, upper)",
                            "Call"
                        ],
                        [
                            "linterp(lower, upper, 0, 255, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0, 255)",
                            "Call"
                        ],
                        [
                            "tf.gather(cmap, image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(buf.getvalue(), channels=4)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-10",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_51": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(image) / math.log(10)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(image), lower * tf.ones_like(image), image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, lower, upper)",
                            "Call"
                        ],
                        [
                            "linterp(lower, upper, 0, 255, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0, 255)",
                            "Call"
                        ],
                        [
                            "tf.gather(cmap, image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(buf.getvalue(), channels=4)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_52": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(image) / math.log(10)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(image), lower * tf.ones_like(image), image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, lower, upper)",
                            "Call"
                        ],
                        [
                            "linterp(lower, upper, 0, 255, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0, 255)",
                            "Call"
                        ],
                        [
                            "tf.gather(cmap, image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(buf.getvalue(), channels=4)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_57": {
                "variable": {
                    "value": "cmap",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "cmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cm.get_cmap(cm_name)",
                            "Call"
                        ],
                        [
                            "[cmap(i)[:3] for i in range(0, 256)]",
                            "ListComp"
                        ],
                        [
                            "tf.constant(cmap, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_58": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cm.get_cmap(cm_name)",
                            "Call"
                        ],
                        [
                            "[cmap(i)[:3] for i in range(0, 256)]",
                            "ListComp"
                        ],
                        [
                            "tf.constant(cmap, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(image) / math.log(10)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(image), lower * tf.ones_like(image), image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, lower, upper)",
                            "Call"
                        ],
                        [
                            "linterp(lower, upper, 0, 255, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0, 255)",
                            "Call"
                        ],
                        [
                            "tf.gather(cmap, image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(buf.getvalue(), channels=4)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_82": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input, axis=-1)",
                            "Call"
                        ],
                        [
                            "input[0, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "input[0, :, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "gridify(input)",
                            "Call"
                        ],
                        [
                            "to_log_heatmap(input)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, axis=-1)",
                            "Call"
                        ],
                        [
                            "input[0, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(input, axis=0)",
                            "Call"
                        ],
                        [
                            "gridify(input)",
                            "Call"
                        ],
                        [
                            "to_log_heatmap(input)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, axis=-1)",
                            "Call"
                        ],
                        [
                            "input[0, :]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(input, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, axis=0)",
                            "Call"
                        ],
                        [
                            "to_log_heatmap(input)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, axis=-1)",
                            "Call"
                        ],
                        [
                            "gridify(input, pad=0)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "tf.constant([[pad, pad], [pad, pad], [0, 0], [0, 0]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_92": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input, tf.constant([[pad, pad], [pad, pad], [0, 0], [0, 0]]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 1, 3))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (J, I * H, W, CO))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1, 3))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, J * W, I * H, CO))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(2, 0, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input, tf.constant([[pad, pad], [pad, pad], [0, 0], [0, 0]]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 1, 3))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (J, I * H, W, CO))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1, 3))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, J * W, I * H, CO))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(J, I * H, W, CO)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_94": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input, tf.constant([[pad, pad], [pad, pad], [0, 0], [0, 0]]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 1, 3))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (J, I * H, W, CO))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1, 3))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, J * W, I * H, CO))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_95": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input, tf.constant([[pad, pad], [pad, pad], [0, 0], [0, 0]]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 1, 3))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (J, I * H, W, CO))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1, 3))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, J * W, I * H, CO))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, J * W, I * H, CO)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_96": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input, tf.constant([[pad, pad], [pad, pad], [0, 0], [0, 0]]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 1, 3))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (J, I * H, W, CO))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1, 3))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, J * W, I * H, CO))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 1, 3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "decode_png_176": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "buf.getvalue()",
                    "type": "Call",
                    "possible_values": []
                },
                "channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_178": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(image) / math.log(10)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(image), lower * tf.ones_like(image), image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, lower, upper)",
                            "Call"
                        ],
                        [
                            "linterp(lower, upper, 0, 255, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0, 255)",
                            "Call"
                        ],
                        [
                            "tf.gather(cmap, image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(buf.getvalue(), channels=4)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_81": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input, axis=-1)",
                            "Call"
                        ],
                        [
                            "input[0, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "input[0, :, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "gridify(input)",
                            "Call"
                        ],
                        [
                            "to_log_heatmap(input)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, axis=-1)",
                            "Call"
                        ],
                        [
                            "input[0, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(input, axis=0)",
                            "Call"
                        ],
                        [
                            "gridify(input)",
                            "Call"
                        ],
                        [
                            "to_log_heatmap(input)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, axis=-1)",
                            "Call"
                        ],
                        [
                            "input[0, :]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(input, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, axis=0)",
                            "Call"
                        ],
                        [
                            "to_log_heatmap(input)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, axis=-1)",
                            "Call"
                        ],
                        [
                            "gridify(input, pad=0)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_47": {
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(image) / math.log(10)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(image), lower * tf.ones_like(image), image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, lower, upper)",
                            "Call"
                        ],
                        [
                            "linterp(lower, upper, 0, 255, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0, 255)",
                            "Call"
                        ],
                        [
                            "tf.gather(cmap, image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(buf.getvalue(), channels=4)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_nan_48": {
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(image) / math.log(10)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(image), lower * tf.ones_like(image), image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, lower, upper)",
                            "Call"
                        ],
                        [
                            "linterp(lower, upper, 0, 255, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0, 255)",
                            "Call"
                        ],
                        [
                            "tf.gather(cmap, image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(buf.getvalue(), channels=4)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_82": {
                "value": {
                    "value": "[[pad, pad], [pad, pad], [0, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_48": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(image) / math.log(10)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_nan(image), lower * tf.ones_like(image), image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, lower, upper)",
                            "Call"
                        ],
                        [
                            "linterp(lower, upper, 0, 255, image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0, 255)",
                            "Call"
                        ],
                        [
                            "tf.gather(cmap, image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(buf.getvalue(), channels=4)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_123": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input, axis=-1)",
                            "Call"
                        ],
                        [
                            "input[0, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "input[0, :, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "gridify(input)",
                            "Call"
                        ],
                        [
                            "to_log_heatmap(input)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, axis=-1)",
                            "Call"
                        ],
                        [
                            "input[0, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(input, axis=0)",
                            "Call"
                        ],
                        [
                            "gridify(input)",
                            "Call"
                        ],
                        [
                            "to_log_heatmap(input)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, axis=-1)",
                            "Call"
                        ],
                        [
                            "input[0, :]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(input, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, axis=0)",
                            "Call"
                        ],
                        [
                            "to_log_heatmap(input)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, axis=-1)",
                            "Call"
                        ],
                        [
                            "gridify(input, pad=0)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_135": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input, axis=-1)",
                            "Call"
                        ],
                        [
                            "input[0, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "input[0, :, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "gridify(input)",
                            "Call"
                        ],
                        [
                            "to_log_heatmap(input)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, axis=-1)",
                            "Call"
                        ],
                        [
                            "input[0, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(input, axis=0)",
                            "Call"
                        ],
                        [
                            "gridify(input)",
                            "Call"
                        ],
                        [
                            "to_log_heatmap(input)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, axis=-1)",
                            "Call"
                        ],
                        [
                            "input[0, :]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(input, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, axis=0)",
                            "Call"
                        ],
                        [
                            "to_log_heatmap(input)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, axis=-1)",
                            "Call"
                        ],
                        [
                            "gridify(input, pad=0)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_139": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input, axis=-1)",
                            "Call"
                        ],
                        [
                            "input[0, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "input[0, :, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "gridify(input)",
                            "Call"
                        ],
                        [
                            "to_log_heatmap(input)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, axis=-1)",
                            "Call"
                        ],
                        [
                            "input[0, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(input, axis=0)",
                            "Call"
                        ],
                        [
                            "gridify(input)",
                            "Call"
                        ],
                        [
                            "to_log_heatmap(input)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, axis=-1)",
                            "Call"
                        ],
                        [
                            "input[0, :]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(input, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, axis=0)",
                            "Call"
                        ],
                        [
                            "to_log_heatmap(input)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, axis=-1)",
                            "Call"
                        ],
                        [
                            "gridify(input, pad=0)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_144": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input, axis=-1)",
                            "Call"
                        ],
                        [
                            "input[0, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "input[0, :, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "gridify(input)",
                            "Call"
                        ],
                        [
                            "to_log_heatmap(input)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, axis=-1)",
                            "Call"
                        ],
                        [
                            "input[0, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(input, axis=0)",
                            "Call"
                        ],
                        [
                            "gridify(input)",
                            "Call"
                        ],
                        [
                            "to_log_heatmap(input)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, axis=-1)",
                            "Call"
                        ],
                        [
                            "input[0, :]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(input, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, axis=0)",
                            "Call"
                        ],
                        [
                            "to_log_heatmap(input)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, axis=-1)",
                            "Call"
                        ],
                        [
                            "gridify(input, pad=0)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_145": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input, axis=-1)",
                            "Call"
                        ],
                        [
                            "input[0, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "input[0, :, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "gridify(input)",
                            "Call"
                        ],
                        [
                            "to_log_heatmap(input)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, axis=-1)",
                            "Call"
                        ],
                        [
                            "input[0, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(input, axis=0)",
                            "Call"
                        ],
                        [
                            "gridify(input)",
                            "Call"
                        ],
                        [
                            "to_log_heatmap(input)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, axis=-1)",
                            "Call"
                        ],
                        [
                            "input[0, :]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(input, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, axis=0)",
                            "Call"
                        ],
                        [
                            "to_log_heatmap(input)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, axis=-1)",
                            "Call"
                        ],
                        [
                            "gridify(input, pad=0)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_149": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input, axis=-1)",
                            "Call"
                        ],
                        [
                            "input[0, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "input[0, :, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "gridify(input)",
                            "Call"
                        ],
                        [
                            "to_log_heatmap(input)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, axis=-1)",
                            "Call"
                        ],
                        [
                            "input[0, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(input, axis=0)",
                            "Call"
                        ],
                        [
                            "gridify(input)",
                            "Call"
                        ],
                        [
                            "to_log_heatmap(input)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, axis=-1)",
                            "Call"
                        ],
                        [
                            "input[0, :]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(input, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, axis=0)",
                            "Call"
                        ],
                        [
                            "to_log_heatmap(input)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, axis=-1)",
                            "Call"
                        ],
                        [
                            "gridify(input, pad=0)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}