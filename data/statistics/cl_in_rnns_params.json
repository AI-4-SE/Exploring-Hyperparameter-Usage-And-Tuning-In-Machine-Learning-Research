{
    "data/dataset.py": {
        "sklearn": {
            "OneHotEncoder_977": {
                "variable": {
                    "value": "self._one_hot_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "categories": {
                    "value": "[range(self.num_classes)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_772": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_789": {
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "data/timeseries/audioset_data.py": {
        "sklearn": {
            "train_test_split_125": {
                "variable": {
                    "value": "(train_ind, val_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "train_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "validation_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "rstate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.RandomState(rseed)",
                            "Call"
                        ],
                        [
                            "np.random",
                            "Attribute"
                        ]
                    ]
                },
                "stratify": {
                    "value": "y_data[train_ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "data/timeseries/seq_smnist.py": {
        "sklearn": {
            "OneHotEncoder_290": {
                "variable": {
                    "value": "one_hot_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "categories": {
                    "value": "[range(n_classes)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "data/timeseries/split_audioset.py": {
        "sklearn": {
            "train_test_split_194": {
                "variable": {
                    "value": "(train_inds, val_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "np.arange(train_outs.shape[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "test_size": {
                    "value": "validation_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "rseed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "stratify": {
                    "value": "train_labels[train_mask]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._to_one_hot(train_outs, reverse=True)",
                            "Call"
                        ],
                        [
                            "train_outs",
                            "variable"
                        ],
                        [
                            "train_labels[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "sequential/ht_analyses/pca_utils.py": {
        "sklearn": {
            "PCA_61": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_pcs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_pcs_considered[1:]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "KernelPCA_99": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cosine'",
                            "Method Argument"
                        ]
                    ]
                },
                "n_components": {
                    "value": "n_pcs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_pcs_considered[1:]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "fit_inverse_transform": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "randperm_264": {
                "variable": {
                    "value": "order",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_53": {
                "variable": {
                    "value": "order",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_91": {
                "variable": {
                    "value": "order",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_346": {
                "n": {
                    "value": "acts.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "sequential/pos_tagging/train_utils_pos.py": {
        "sklearn": {
            "f1_score_319": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "labels": {
                    "value": "range(17)",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "average",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'weighted'",
                            "Method Argument"
                        ]
                    ]
                },
                "zero_division": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "zeros_109": {
                "variable": {
                    "value": "tsf",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "T.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "T.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "data/timeseries/preprocess_audioset.py": {
        "tensorflow": {
            "TFRecordDataset_138": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "fpaths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "enable_eager_execution_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_sequence_example_119": {
                "variable": {
                    "value": "(context_parsed, sequence_parsed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "serialized_example",
                            "Method Argument"
                        ]
                    ]
                },
                "sequence_features": {
                    "value": "sequence_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'audio_embedding': tf.FixedLenSequenceFeature([], tf.string)}",
                            "Dict"
                        ]
                    ]
                },
                "context_features": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'start_time_seconds': tf.FixedLenFeature([], tf.float32), 'labels': tf.VarLenFeature(dtype=tf.int64)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "decode_raw_124": {
                "variable": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "sequence_parsed['audio_embedding']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_125": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "context_parsed['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_111": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_115": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_116": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_dense_146": {
                "sp_input": {
                    "value": "tf.sparse.reorder(d[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reorder_146": {
                "sp_input": {
                    "value": "d[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "data/sequential_dataset.py": {
        "torch": {
            "from_numpy_201": {
                "ndarray": {
                    "value": "out_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._flatten_array(x, ts_dim_first=True, reverse=True, feature_shape=self.in_shape)",
                            "Call"
                        ],
                        [
                            "self._flatten_array(y, ts_dim_first=True, reverse=True, feature_shape=self.out_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_228": {
                "ndarray": {
                    "value": "out_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._flatten_array(x, ts_dim_first=True, reverse=True, feature_shape=self.in_shape)",
                            "Call"
                        ],
                        [
                            "self._flatten_array(y, ts_dim_first=True, reverse=True, feature_shape=self.out_shape)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/timeseries/copy_data.py": {
        "torch": {
            "zeros_like_522": {
                "variable": {
                    "value": "y_pattern_perm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pattern",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[input_len + 1:, :, :]",
                            "Subscript"
                        ],
                        [
                            "y[input_len + 1:, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.logical_xor(y_pattern_perm.bool(), y_pattern.bool())",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_xor_544": {
                "variable": {
                    "value": "y_pattern",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pattern_perm.bool()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "y_pattern.bool()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_560": {
                "variable": {
                    "value": "y_pattern_perm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pattern",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[input_len + 1:, :, :]",
                            "Subscript"
                        ],
                        [
                            "y[input_len + 1:, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.logical_xor(y_pattern_perm.bool(), y_pattern.bool())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/timeseries/mud_data.py": {
        "torch": {
            "from_numpy_225": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "out_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._flatten_array(x, ts_dim_first=True, reverse=True, feature_shape=self.in_shape)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/timeseries/rnd_rec_teacher.py": {
        "torch": {
            "eye_428": {
                "variable": {
                    "value": "net.internal_params[0].data[n_in_start:n_in_start + n_in, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "n": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dhandlers[0].in_shape[0]",
                            "Subscript"
                        ],
                        [
                            "dh.in_shape[0]",
                            "Subscript"
                        ],
                        [
                            "7",
                            "Method Argument"
                        ],
                        [
                            "n_in",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_430": {
                "variable": {
                    "value": "net.internal_params[2].data[n_in_start:n_in_start + n_in, n_in_start:n_in_start + n_in]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dh.mat_A",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_432": {
                "variable": {
                    "value": "net.internal_params[4].data[n_in_start:n_in_start + n_in, n_in_start:n_in_start + n_in]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dh.mat_B",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_435": {
                "variable": {
                    "value": "net.internal_params[6].data[n_out_start:n_out_start + n_out, n_in_start:n_in_start + n_in]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dh.mat_C",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "hnets/chunked_deconv_hnet.py": {
        "torch": {
            "ReLU_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "hnets/chunked_hyper_model.py": {
        "torch": {
            "ReLU_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_132": {
                "variable": {
                    "value": "self._embs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self._num_chunks, ce_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_229": {
                "variable": {
                    "value": "chunk_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[chunk_embs, eps]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_167": {
                "tensor": {
                    "value": "self._embs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_222": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, self._noise_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_224": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, self._noise_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "hnets/chunked_mlp_hnet.py": {
        "torch": {
            "ParameterList_167": {
                "variable": {
                    "value": "self._layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self._hnet._layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ParameterList_169": {
                "variable": {
                    "value": "self._layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self._hnet._layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_148": {
                "variable": {
                    "value": "self._internal_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self._hnet._internal_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_171": {
                "variable": {
                    "value": "self._batchnorm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self._hnet._batchnorm_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_174": {
                "variable": {
                    "value": "self._context_mod_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self._hnet._context_mod_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_340": {
                "variable": {
                    "value": "cond_chunk_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cond_chunk_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "weights['chunk_embs']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(cond_chunk_embs, dim=0)",
                            "Call"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_387": {
                "variable": {
                    "value": "uncond_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[uncond_input, chunk_embs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_339": {
                "variable": {
                    "value": "cond_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cond_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._preprocess_forward_args(_input_required=_input_required, _parse_cond_id_fct=_parse_cond_id_fct, uncond_input=uncond_input, cond_input=cond_input, cond_id=cond_id, weights=weights, distilled_params=distilled_params, condition=condition, ret_format=ret_format, ext_inputs=ext_inputs, task_emb=task_emb, task_id=task_id, theta=theta, dTheta=dTheta)",
                            "Call"
                        ],
                        [
                            "[] if self._cond_in_size > 0 else None",
                            "IfExp"
                        ],
                        [
                            "torch.stack(cond_input, dim=0)",
                            "Call"
                        ],
                        [
                            "cond_input.reshape(batch_size, 1, -1)",
                            "Call"
                        ],
                        [
                            "cond_input.expand(batch_size, self.num_chunks, self._cond_in_size)",
                            "Call"
                        ],
                        [
                            "cond_input.reshape(batch_size * self.num_chunks, -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_198": {
                "data": {
                    "value": "torch.Tensor(*self._cemb_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "hnets/deconv_hnet.py": {
        "torch": {
            "ReLU_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "hnets/hnet_container.py": {
        "torch": {
            "ParameterList_232": {
                "variable": {
                    "value": "self._layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_233": {
                "variable": {
                    "value": "self._layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_596": {
                "tensors": {
                    "value": "flat_ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] * batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ParameterList_257": {
                "variable": {
                    "value": "self._internal_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_312": {
                "parameters": {
                    "value": "hnet._layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ParameterList_314": {
                "parameters": {
                    "value": "hnet._layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_317": {
                "variable": {
                    "value": "self._batchnorm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_322": {
                "variable": {
                    "value": "self._context_mod_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_340": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_594": {
                "variable": {
                    "value": "flat_ret[bind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[flat_ret[bind], tensor.flatten()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ParameterList_260": {
                "parameters": {
                    "value": "hnet._internal_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_319": {
                "modules": {
                    "value": "hnet._batchnorm_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_324": {
                "modules": {
                    "value": "hnet._context_mod_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_358": {
                "data": {
                    "value": "torch.Tensor(*s)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_389": {
                "data": {
                    "value": "torch.Tensor(*s)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "hnets/hnet_interface.py": {
        "torch": {
            "stack_922": {
                "variable": {
                    "value": "cond_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cond_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "kwargs['cond_input']",
                            "Subscript"
                        ],
                        [
                            "_parse_cond_id_fct(self, cond_ids, cond_weights)",
                            "Call"
                        ],
                        [
                            "cond_input.expand(batch_size, *cond_input.shape[1:])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(cond_input, dim=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_979": {
                "variable": {
                    "value": "W_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W_b in enumerate(torch.split(W, 1, dim=0))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(W_b, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_978": {
                "tensor": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_out[:, ind:ind + num]",
                            "Subscript"
                        ],
                        [
                            "W.view(batch_size, *s)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "hnets/hyper_model.py": {
        "torch": {
            "ParameterList_305": {
                "variable": {
                    "value": "self._theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_196": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ParameterList_202": {
                "variable": {
                    "value": "self._task_embs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_379": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[task_emb, ext_inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_391": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, eps]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_399": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([task_emb, ext_inputs], dim=1)",
                            "Call"
                        ],
                        [
                            "task_emb.expand(batch_size, self._te_dim)",
                            "Call"
                        ],
                        [
                            "F.linear(h, weights[i], bias=b)",
                            "Call"
                        ],
                        [
                            "torch.cat([h, eps], dim=1)",
                            "Call"
                        ],
                        [
                            "self._act_fn(h)",
                            "Call"
                        ],
                        [
                            "self._dropout(h)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weights[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "weights[i + 1]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "weights[i + 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "linear_412": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([task_emb, ext_inputs], dim=1)",
                            "Call"
                        ],
                        [
                            "task_emb.expand(batch_size, self._te_dim)",
                            "Call"
                        ],
                        [
                            "F.linear(h, weights[i], bias=b)",
                            "Call"
                        ],
                        [
                            "torch.cat([h, eps], dim=1)",
                            "Call"
                        ],
                        [
                            "self._act_fn(h)",
                            "Call"
                        ],
                        [
                            "self._dropout(h)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weights[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "weights[i + 1]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "weights[i + 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randn_386": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self._noise_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_388": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self._noise_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "squeeze_415": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(h, weights[i], bias=b)",
                            "Call"
                        ],
                        [
                            "W.view(batch_size, *self.target_shapes[j])",
                            "Call"
                        ],
                        [
                            "torch.squeeze(W, dim=0)",
                            "Call"
                        ],
                        [
                            "W + self._shifts[j]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_246": {
                "*size": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[target_net_out_dim] + k",
                            "BinOp"
                        ],
                        [
                            "dims in enumerate(self.target_shapes)",
                            "Call"
                        ],
                        [
                            "dims in enumerate(self._hidden_dims + self._out_dims)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_307": {
                "data": {
                    "value": "torch.Tensor(*dims)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_204": {
                "data": {
                    "value": "torch.Tensor(te_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_like_362": {
                "input": {
                    "value": "task_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._task_embs[task_id]",
                            "Subscript"
                        ],
                        [
                            "task_emb.expand(batch_size, self._te_dim)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "hnets/mlp_hnet.py": {
        "torch": {
            "ParameterList_161": {
                "variable": {
                    "value": "self._layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_162": {
                "variable": {
                    "value": "self._layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_167": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_269": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[uncond_input, cond_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_302": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "uncond_input",
                            "variable"
                        ],
                        [
                            "cond_input",
                            "variable"
                        ],
                        [
                            "torch.cat([uncond_input, cond_input], dim=1)",
                            "Call"
                        ],
                        [
                            "F.linear(h, fc_weights[i], bias=fc_biases[i])",
                            "Call"
                        ],
                        [
                            "self.batchnorm_layers[i].forward(h, running_mean=None, running_var=None, weight=bn_scales[i], bias=bn_shifts[i], stats_id=condition)",
                            "Call"
                        ],
                        [
                            "self._dropout(h)",
                            "Call"
                        ],
                        [
                            "self._act_fn(h)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "fc_weights[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "fc_biases[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[None] * len(fc_weights)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ParameterList_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_173": {
                "data": {
                    "value": "torch.Tensor(cond_in_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "hnets/structured_mlp_hnet.py": {
        "torch": {
            "ParameterList_343": {
                "variable": {
                    "value": "self._layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_344": {
                "variable": {
                    "value": "self._layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_808": {
                "tensors": {
                    "value": "flat_ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] * batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_654": {
                "variable": {
                    "value": "cond_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cond_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._preprocess_forward_args(_input_required=_input_required, _parse_cond_id_fct=_parse_cond_id_fct, uncond_input=uncond_input, cond_input=cond_input, cond_id=cond_id, weights=weights, distilled_params=distilled_params, condition=condition, ret_format=ret_format)",
                            "Call"
                        ],
                        [
                            "[] if self._cond_in_size > 0 else None",
                            "IfExp"
                        ],
                        [
                            "torch.stack(cond_input, dim=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_657": {
                "variable": {
                    "value": "cond_chunk_embs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cond_chunk_embs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ParameterList_358": {
                "variable": {
                    "value": "self._internal_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_410": {
                "parameters": {
                    "value": "hnet._layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ParameterList_412": {
                "parameters": {
                    "value": "hnet._layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_415": {
                "variable": {
                    "value": "self._batchnorm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_420": {
                "variable": {
                    "value": "self._context_mod_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_728": {
                "variable": {
                    "value": "hnet_uncond_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hnet_uncond_input, curr_chunk_embs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_806": {
                "variable": {
                    "value": "flat_ret[bind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[flat_ret[bind], tensor.flatten()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ParameterList_361": {
                "parameters": {
                    "value": "hnet._internal_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_417": {
                "modules": {
                    "value": "hnet._batchnorm_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_422": {
                "modules": {
                    "value": "hnet._context_mod_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_480": {
                "data": {
                    "value": "torch.Tensor(*shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mnets/bi_rnn.py": {
        "torch": {
            "ParameterList_199": {
                "variable": {
                    "value": "self._layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_200": {
                "variable": {
                    "value": "self._layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_543": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_f, h_b]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_510": {
                "variable": {
                    "value": "inp_back",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ParameterList_220": {
                "variable": {
                    "value": "self._internal_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_262": {
                "parameters": {
                    "value": "net._layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ParameterList_264": {
                "parameters": {
                    "value": "net._layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_267": {
                "variable": {
                    "value": "self._batchnorm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_272": {
                "variable": {
                    "value": "self._context_mod_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flip_508": {
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_513": {
                "variable": {
                    "value": "inp_back[:int(seq_lengths[ii]), ii, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "inp[:int(seq_lengths[ii]), ii, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ParameterList_223": {
                "parameters": {
                    "value": "net._internal_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_269": {
                "modules": {
                    "value": "net._batchnorm_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_274": {
                "modules": {
                    "value": "net._context_mod_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mnets/classifier_interface.py": {
        "torch": {
            "softmax_123": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_logits / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_86": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t.argmax(dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(target_logits / T, dim=1)",
                            "Call"
                        ],
                        [
                            "new_targets",
                            "variable"
                        ],
                        [
                            "t.argmax(dim=1, keepdim=False)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mean'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_132": {
                "variable": {
                    "value": "new_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_164": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_146": {
                "input": {
                    "value": "logits / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mnets/mlp.py": {
        "torch": {
            "ParameterList_417": {
                "variable": {
                    "value": "self._layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_418": {
                "variable": {
                    "value": "self._layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_243": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ParameterList_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_302": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_437": {
                "data": {
                    "value": "torch.Tensor(*dims)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "linear_680": {
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(hidden, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(hidden, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._spec_norm(F.linear(hidden, W, bias=b))",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(hidden, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ],
                        [
                            "self._batchnorm_layers[bn_ind].forward(hidden, running_mean=running_means[bn_ind], running_var=running_vars[bn_ind], weight=bn_weights[2 * bn_ind], bias=bn_weights[2 * bn_ind + 1], stats_id=bn_cond)",
                            "Call"
                        ],
                        [
                            "self._dropout(hidden)",
                            "Call"
                        ],
                        [
                            "self._a_fun(hidden)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_ind].forward(hidden, weights=cm_weights[2 * cm_ind:2 * cm_ind + 2], ckpt_id=cmod_cond)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_weights[l]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b_weights[l]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            }
        }
    },
    "mnets/mnet_interface.py": {
        "torch": {
            "ones_718": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*self.param_shapes[oweights_ind]",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_721": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*self.param_shapes[oweights_ind]",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_873": {
                "variable": {
                    "value": "self._batchnorm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_951": {
                "variable": {
                    "value": "self._layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_953": {
                "variable": {
                    "value": "self._layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_706": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*self.param_shapes[obias_ind]",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_709": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*self.param_shapes[obias_ind]",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_970": {
                "data": {
                    "value": "torch.Tensor(*s)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mnets/simple_rnn.py": {
        "torch": {
            "ParameterList_239": {
                "variable": {
                    "value": "self._layer_weight_tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_240": {
                "variable": {
                    "value": "self._layer_bias_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_1291": {
                "variable": {
                    "value": "i_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gates[:, :HS]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(i_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_1292": {
                "variable": {
                    "value": "f_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gates[:, HS:HS * 2]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(f_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_1293": {
                "variable": {
                    "value": "g_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gates[:, HS * 2:HS * 3]",
                            "Subscript"
                        ],
                        [
                            "torch.tanh(g_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_1294": {
                "variable": {
                    "value": "o_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gates[:, HS * 3:]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(o_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tanh_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linear_955": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._context_mod_layers[0].forward(h, weights=cm_inputs_weights, ckpt_id=cmod_cond, bs_dim=1)",
                            "Call"
                        ],
                        [
                            "self.compute_fc_outputs(h, fc_pre_w_weights, fc_pre_b_weights, len(self._fc_layers_pre), cm_fc_pre_layer_weights, cm_offset, cmod_cond, False, ret_hidden)",
                            "Call"
                        ],
                        [
                            "self.compute_fc_outputs(h, fc_w_weights, fc_b_weights, self._num_fc_cm_layers, cm_fc_layer_weights, cm_offset, cmod_cond, True, ret_hidden)",
                            "Call"
                        ],
                        [
                            "self.compute_hidden_states(h, d, rec_weights[d], cm_rec_layer_weights[d], cmod_cond)",
                            "Call"
                        ],
                        [
                            "self.compute_hidden_states(h, d, rec_weights[d], None, None)",
                            "Call"
                        ],
                        [
                            "F.linear(h, fc_w_weights[d], bias=fc_b_weights[d])",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_offset + d].forward(h, weights=cm_fc_layer_weights[d], ckpt_id=cmod_cond, bs_dim=1)",
                            "Call"
                        ],
                        [
                            "self._a_fun(h)",
                            "Call"
                        ],
                        [
                            "self._context_mod_layers[cm_offset + d].forward(h, weights=cm_fc_layer_weights[d], ckpt_id=cmod_cond, bs_dim=1)",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "fc_w_weights[d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "fc_b_weights[d]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[None] * len(fc_w_weights)",
                            "BinOp"
                        ],
                        [
                            "self.split_internal_weights(int_weights)",
                            "Call"
                        ],
                        [
                            "fc_b_weights",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_1024": {
                "variable": {
                    "value": "h_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._rnn_layers[layer_ind]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1026": {
                "variable": {
                    "value": "c_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._rnn_layers[layer_ind]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ParameterList_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_1070": {
                "tensors": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "chunk_627": {
                "variable": {
                    "value": "cm_w_chunked[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "cm_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cm_w in enumerate(cm_rnn_weights)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "num_ts_cm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "cm_rnn_weights[j].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_450": {
                "data": {
                    "value": "torch.Tensor(*s)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_387": {
                "data": {
                    "value": "torch.Tensor(*s)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "sequential/audioset/train_utils_audioset.py": {
        "torch": {
            "zeros_136": {
                "variable": {
                    "value": "ts_factors",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "targets.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sequential/copy/train_utils_copy.py": {
        "torch": {
            "zeros_252": {
                "variable": {
                    "value": "tsf",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "T.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "T.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_367": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y_logits / T",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_368": {
                "variable": {
                    "value": "T_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T_soft_logits / T",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eq_316": {
                "input": {
                    "value": "predictions[ps:pe, i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "targets[ps:pe, i, :].byte()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_316": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eq_323": {
                "input": {
                    "value": "predictions[ps:pe, i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "targets[ps:pe, i, :].byte()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_323": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eq_408": {
                "input": {
                    "value": "predictions[ps:pe, i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "targets[ps:pe, i, :].byte()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_408": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_444": {
                "tensors": {
                    "value": "all_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_378": {
                "input": {
                    "value": "Y[ps:pe, i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "T_soft[ps:pe, i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "sequential/embedding_utils.py": {
        "torch": {
            "Embedding_81": {
                "variable": {
                    "value": "self._embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_83": {
                "variable": {
                    "value": "self._embeddings.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "initial_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_embeddings",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_108": {
                "variable": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embeddings(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(embedded, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sequential/ht_analyses/state_space_analysis.py": {
        "torch": {
            "tensor_225": {
                "variable": {
                    "value": "all_activations",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_227": {
                "variable": {
                    "value": "all_activations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(all_activations, act)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_like_120": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p in enumerate(mnet.internal_params)",
                            "Call"
                        ],
                        [
                            "p in enumerate(regged_tnet_meta)",
                            "Call"
                        ],
                        [
                            "results[out_dir]['complexity_measure']",
                            "Subscript"
                        ],
                        [
                            "seed_groups.keys()",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_121": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p in enumerate(mnet.internal_params)",
                            "Call"
                        ],
                        [
                            "p in enumerate(regged_tnet_meta)",
                            "Call"
                        ],
                        [
                            "results[out_dir]['complexity_measure']",
                            "Subscript"
                        ],
                        [
                            "seed_groups.keys()",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_164": {
                "input": {
                    "value": "importance_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(mnet, buff_f_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "sequential/ht_analyses/supervised_dimred_utils.py": {
        "torch": {
            "tensor_366": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_233": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_386": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(U, u_n)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_258": {
                "input": {
                    "value": "u_n_ortho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_n.clone()",
                            "Call"
                        ],
                        [
                            "u_n_ortho + -coeff * u_i",
                            "BinOp"
                        ],
                        [
                            "u_n_ortho / torch.norm(u_n_ortho)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_375": {
                "variable": {
                    "value": "u_n",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_hidden, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_379": {
                "variable": {
                    "value": "u_n",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_hidden, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "dot_253": {
                "input": {
                    "value": "u_i.t().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "u_n.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dot_254": {
                "input": {
                    "value": "u_i.t().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "u_i.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_487": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_380": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_431": {
                "variable": {
                    "value": "h_stop",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H[stop_timestep, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.mm(U, U.t())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_443": {
                "variable": {
                    "value": "H_approx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(H[:stop_timestep, :, :], torch.unsqueeze(h_stop, 0), H_subs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_448": {
                "variable": {
                    "value": "H_approx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden[-1]",
                            "Subscript"
                        ],
                        [
                            "hidden_int[0]",
                            "Subscript"
                        ],
                        [
                            "hidden[-1]",
                            "Subscript"
                        ],
                        [
                            "hidden_int[0]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.mm(U, U.t())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_460": {
                "input": {
                    "value": "torch.mm(U.t(), U) - torch.eye(U.shape[1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_517": {
                "variable": {
                    "value": "h_stop",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H[stop_timestep, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.mm(U, U.t())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_521": {
                "variable": {
                    "value": "H_approx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(H[:stop_timestep, :, :], torch.unsqueeze(h_stop, 0), H_subs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_524": {
                "variable": {
                    "value": "H_approx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden[-1]",
                            "Subscript"
                        ],
                        [
                            "hidden_int[0]",
                            "Subscript"
                        ],
                        [
                            "hidden[-1]",
                            "Subscript"
                        ],
                        [
                            "hidden_int[0]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.mm(U, U.t())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_539": {
                "input": {
                    "value": "torch.mm(U.t(), U) - torch.eye(U.shape[1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_432": {
                "input": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(())",
                            "Call"
                        ],
                        [
                            "torch.cat((U, u_n), 1)",
                            "Call"
                        ],
                        [
                            "U.detach()",
                            "Call"
                        ],
                        [
                            "U",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "U.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_448": {
                "input": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(())",
                            "Call"
                        ],
                        [
                            "torch.cat((U, u_n), 1)",
                            "Call"
                        ],
                        [
                            "U.detach()",
                            "Call"
                        ],
                        [
                            "U",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "U.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_460": {
                "input": {
                    "value": "U.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(())",
                            "Call"
                        ],
                        [
                            "torch.cat((U, u_n), 1)",
                            "Call"
                        ],
                        [
                            "U.detach()",
                            "Call"
                        ],
                        [
                            "U",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_461": {
                "n": {
                    "value": "U.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mm_518": {
                "input": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(())",
                            "Call"
                        ],
                        [
                            "torch.cat((U, u_n), 1)",
                            "Call"
                        ],
                        [
                            "U.detach()",
                            "Call"
                        ],
                        [
                            "U",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "U.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_524": {
                "input": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(())",
                            "Call"
                        ],
                        [
                            "torch.cat((U, u_n), 1)",
                            "Call"
                        ],
                        [
                            "U.detach()",
                            "Call"
                        ],
                        [
                            "U",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "U.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_539": {
                "input": {
                    "value": "U.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(())",
                            "Call"
                        ],
                        [
                            "torch.cat((U, u_n), 1)",
                            "Call"
                        ],
                        [
                            "U.detach()",
                            "Call"
                        ],
                        [
                            "U",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_540": {
                "n": {
                    "value": "U.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_444": {
                "input": {
                    "value": "h_stop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(H[stop_timestep, :, :], torch.mm(U, U.t()))",
                            "Call"
                        ],
                        [
                            "torch.matmul(H[stop_timestep, :, :], torch.mm(U, U.t()))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_522": {
                "input": {
                    "value": "h_stop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(H[stop_timestep, :, :], torch.mm(U, U.t()))",
                            "Call"
                        ],
                        [
                            "torch.matmul(H[stop_timestep, :, :], torch.mm(U, U.t()))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sequential/replay_utils.py": {
        "torch": {
            "mse_loss_383": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_logits",
                            "Method Argument"
                        ],
                        [
                            "in_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "out_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_logits",
                            "Method Argument"
                        ],
                        [
                            "out_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_406": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_logits",
                            "Method Argument"
                        ],
                        [
                            "out_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "in_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_logits",
                            "Method Argument"
                        ],
                        [
                            "in_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_473": {
                "variable": {
                    "value": "z_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * z_logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Normal_493": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "z_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_out[:, :, -(2 * config.latent_dim):-config.latent_dim]",
                            "Subscript"
                        ]
                    ]
                },
                "scale": {
                    "value": "z_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * z_logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_332": {
                "variable": {
                    "value": "Y_logits_new",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*Y_logits.shape[:2]",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "len(allowed_outputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_229": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[inp.detach() for inp in inputs]",
                            "ListComp"
                        ],
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "dnet.forward(z, weights=dnet_weights)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(inputs, dim=1)",
                            "Call"
                        ],
                        [
                            "[torch.sigmoid(inp) for inp in inputs]",
                            "ListComp"
                        ],
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_240": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(z, dim=1)",
                            "Call"
                        ],
                        [
                            "Normal(z_mean, z_std).rsample()",
                            "Call"
                        ],
                        [
                            "F.pad(z, (0, config.num_tasks), mode='constant', value=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_267": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[inp.detach() for inp in inputs]",
                            "ListComp"
                        ],
                        [
                            "inputs.detach()",
                            "Call"
                        ],
                        [
                            "dnet.forward(z, weights=dnet_weights)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(inputs, dim=1)",
                            "Call"
                        ],
                        [
                            "[torch.sigmoid(inp) for inp in inputs]",
                            "ListComp"
                        ],
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_483": {
                "input": {
                    "value": "-1 + (z_logvar.exp() + (0 - z_mean).pow(2)) / prior_var + prior_logvar - z_logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_503": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(z, dim=1)",
                            "Call"
                        ],
                        [
                            "Normal(z_mean, z_std).rsample()",
                            "Call"
                        ],
                        [
                            "F.pad(z, (0, config.num_tasks), mode='constant', value=0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, config.num_tasks)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_204": {
                "mean": {
                    "value": "torch.zeros(num_ts, bs, config.latent_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "config.latent_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_235": {
                "variable": {
                    "value": "z[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "z[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, config.num_tasks)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_265": {
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_204": {
                "*size": {
                    "value": "num_ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_ts in enumerate(max_num_ts)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_per_id[i]",
                            "Subscript"
                        ],
                        [
                            "num_per_id[i]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "config.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "sequential/rnn_chunking.py": {
        "torch": {
            "cat_204": {
                "tensors": {
                    "value": "[c[j] for c in chunks]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sequential/seq_smnist/train_utils_seq_smnist.py": {
        "torch": {
            "zeros_143": {
                "variable": {
                    "value": "ts_factors",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "T.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "T.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_163": {
                "variable": {
                    "value": "dc_factors",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_num_ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "sequential/smnist/train_utils_smnist.py": {
        "torch": {
            "zeros_143": {
                "variable": {
                    "value": "ts_factors",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "T.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "T.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_366": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "smp.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_281": {
                "variable": {
                    "value": "T_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T_soft_logits / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_284": {
                "variable": {
                    "value": "T_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T_soft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(T_soft_logits / T, dim=2)",
                            "Call"
                        ],
                        [
                            "F.pad(T_soft, (0, data.num_classes), mode='constant', value=0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, data.num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_397": {
                "tensors": {
                    "value": "all_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_163": {
                "variable": {
                    "value": "dc_factors",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_num_ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_softmax_289": {
                "input": {
                    "value": "Y_logits / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sequential/student_teacher/hidden_dim_ideal_student.py": {
        "torch": {
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_129": {
                "input": {
                    "value": "(T - Y_logits) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "sequential/student_teacher/train_utils_st.py": {
        "torch": {
            "mse_loss_138": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "T_soft_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T_soft_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "sequential/train_sequential.py": {
        "torch": {
            "cat_1735": {
                "variable": {
                    "value": "curr_tnet_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p.detach().flatten().cpu() for p in target_net.get_non_cm_weights()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "no_grad_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_302": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_1301": {
                "variable": {
                    "value": "weights_hh",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w.flatten() for w in weights_hh]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "norm_1302": {
                "variable": {
                    "value": "weights_hh_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stu.extract_hh_weights(target_net, hnet_out=ext_tnet_weights)",
                            "Call"
                        ],
                        [
                            "torch.cat([w.flatten() for w in weights_hh])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_1740": {
                "variable": {
                    "value": "edist_first",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((curr_tnet_weights - shared.tnet_weights[0]) ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_1745": {
                "variable": {
                    "value": "edist_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((curr_tnet_weights - shared.tnet_weights[curr_task_id - 1]) ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1766": {
                "variable": {
                    "value": "diag_fisher",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p.detach().flatten().cpu() for p in diag_fisher]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_1768": {
                "variable": {
                    "value": "diag_fisher_hh",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p.detach().flatten().cpu() for p in diag_fisher_hh]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_1795": {
                "variable": {
                    "value": "omega",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p.detach().flatten().cpu() for p in omega]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_1847": {
                "variable": {
                    "value": "gains",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p.detach().flatten().cpu() for p in gains]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_1848": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p.detach().flatten().cpu() for p in shifts]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_201": {
                "variable": {
                    "value": "all_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_202": {
                "variable": {
                    "value": "all_hidden_int",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clip_grad_norm__1138": {
                "parameters": {
                    "value": "optimizer.param_groups[0]['params']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1310": {
                "variable": {
                    "value": "tnet_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g.grad.flatten() for g in target_net.get_non_cm_weights() if g.grad is not None]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "norm_1313": {
                "variable": {
                    "value": "tnet_grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tnet_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([g.grad.flatten() for g in target_net.get_non_cm_weights() if g.grad is not None])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1318": {
                "variable": {
                    "value": "cm_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g.grad.flatten() for g in target_net.get_cm_weights()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "norm_1320": {
                "variable": {
                    "value": "cm_grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cm_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([g.grad.flatten() for g in target_net.get_cm_weights()])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1331": {
                "variable": {
                    "value": "hnet_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hnet_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(hnet_grad)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(hnet_grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_1332": {
                "variable": {
                    "value": "hnet_grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hnet_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(hnet_grad)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(hnet_grad)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1337": {
                "variable": {
                    "value": "dnet_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g.grad.flatten() for g in dnet.parameters()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "norm_1339": {
                "variable": {
                    "value": "dnet_grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dnet_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([g.grad.flatten() for g in dnet.parameters()])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1811": {
                "variable": {
                    "value": "curr_hnet_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p.detach().flatten().cpu() for p in stu.hnet_forward(config, hnet, curr_task_id)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sqrt_1818": {
                "variable": {
                    "value": "edist_tt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((curr_hnet_out_tt - shared.hnet_out[tt]) ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_204": {
                "variable": {
                    "value": "all_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(all_hidden, h.cpu())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_205": {
                "variable": {
                    "value": "all_hidden_int",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(all_hidden_int, h_int.cpu())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1482": {
                "variable": {
                    "value": "hnet_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hnet_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(hnet_grad)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(hnet_grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_1483": {
                "variable": {
                    "value": "hnet_grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hnet_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(hnet_grad)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(hnet_grad)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_1740": {
                "input": {
                    "value": "(curr_tnet_weights - shared.tnet_weights[0]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_1745": {
                "input": {
                    "value": "(curr_tnet_weights - shared.tnet_weights[curr_task_id - 1]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_1771": {
                "input": {
                    "value": "diag_fisher",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat([p.detach().flatten().cpu() for p in diag_fisher])",
                            "Call"
                        ]
                    ]
                }
            },
            "max_1773": {
                "input": {
                    "value": "diag_fisher",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat([p.detach().flatten().cpu() for p in diag_fisher])",
                            "Call"
                        ]
                    ]
                }
            },
            "min_1797": {
                "input": {
                    "value": "omega",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat([p.detach().flatten().cpu() for p in omega])",
                            "Call"
                        ]
                    ]
                }
            },
            "max_1798": {
                "input": {
                    "value": "omega",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat([p.detach().flatten().cpu() for p in omega])",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_1810": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_1816": {
                "variable": {
                    "value": "curr_hnet_out_tt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p.detach().flatten().cpu() for p in stu.hnet_forward(config, hnet, tt)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "softmax_1406": {
                "input": {
                    "value": "Y_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_net.forward(X, weights=ext_tnet_weights, return_hidden=True, return_hidden_int=True, **tnet_kwargs)",
                            "Call"
                        ],
                        [
                            "Y_logits[:, :, allowed_outputs]",
                            "Subscript"
                        ],
                        [
                            "target_net.forward(X, weights=ext_tnet_weights, **tnet_kwargs)",
                            "Call"
                        ],
                        [
                            "mnet.forward(X, weights=ext_tnet_weights, **mnet_kwargs)",
                            "Call"
                        ],
                        [
                            "Y_logits[:, :, allowed_outputs]",
                            "Subscript"
                        ],
                        [
                            "target_net.forward(X, weights=ext_tnet_weights, **tnet_kwargs)",
                            "Call"
                        ],
                        [
                            "Y_logits[:, :, allowed_outputs]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_1779": {
                "input": {
                    "value": "diag_fisher",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat([p.detach().flatten().cpu() for p in diag_fisher])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_1782": {
                "input": {
                    "value": "diag_fisher_hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat([p.detach().flatten().cpu() for p in diag_fisher_hh])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_1801": {
                "input": {
                    "value": "omega",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat([p.detach().flatten().cpu() for p in omega])",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_1815": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_1818": {
                "input": {
                    "value": "(curr_hnet_out_tt - shared.hnet_out[tt]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_1828": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_935": {
                "input": {
                    "value": "gain.abs() + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_935": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_1380": {
                "input": {
                    "value": "dnet_logits[ii]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "sequential/train_utils_sequential.py": {
        "torch": {
            "nll_loss_939": {
                "variable": {
                    "value": "nll",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_sm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(Y, dim=2)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(Y * beta, dim=2)",
                            "Call"
                        ],
                        [
                            "log_sm.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T",
                            "variable"
                        ],
                        [
                            "torch.argmax(T, 2)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ModuleList_1233": {
                "variable": {
                    "value": "tmp_wembs",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "wembs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_1286": {
                "variable": {
                    "value": "tmp_wembs",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "wembs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_1477": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(targets, (num_prev, num_total - (num_prev + num_outs)), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "targets + label_offset",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(num_prev, num_total - (num_prev + num_outs))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_1517": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shared.word_emb_lookups[task_id].forward(inputs)",
                            "Call"
                        ],
                        [
                            "F.pad(inputs, (0, config.num_tasks), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, config.num_tasks)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1604": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weights_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights_shape in enumerate(target_net.param_shapes)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_930": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T",
                            "Method Argument"
                        ],
                        [
                            "T",
                            "Method Argument"
                        ],
                        [
                            "T",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_933": {
                "variable": {
                    "value": "log_sm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_935": {
                "variable": {
                    "value": "log_sm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y * beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_962": {
                "variable": {
                    "value": "nll",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T",
                            "Method Argument"
                        ],
                        [
                            "T",
                            "Method Argument"
                        ],
                        [
                            "T",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_964": {
                "variable": {
                    "value": "nll",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beta * Y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T",
                            "Method Argument"
                        ],
                        [
                            "T",
                            "Method Argument"
                        ],
                        [
                            "T",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_1035": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cm_layer._num_features[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_1606": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weights_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights_shape in enumerate(target_net.param_shapes)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_1131": {
                "input": {
                    "value": "torch.matmul(W, W.transpose(0, 1)) - torch.eye(W.shape[0], device=W.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_1608": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weights_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights_shape in enumerate(target_net.param_shapes)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_1045": {
                "*size": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cm_layer._num_features[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_1131": {
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights",
                            "variable"
                        ]
                    ]
                },
                "other": {
                    "value": "W.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_1132": {
                "n": {
                    "value": "W.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "W.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/batchnorm_layer.py": {
        "torch": {
            "ParameterList_202": {
                "variable": {
                    "value": "self._weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_200": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_norm_431": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "running_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rm",
                            "variable"
                        ],
                        [
                            "getattr(self, mname)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "running_var": {
                    "value": "running_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rv",
                            "variable"
                        ],
                        [
                            "getattr(self, vname)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scale",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._momentum",
                            "Attribute"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "batch_norm_439": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "running_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rm",
                            "variable"
                        ],
                        [
                            "getattr(self, mname)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "running_var": {
                    "value": "running_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rv",
                            "variable"
                        ],
                        [
                            "getattr(self, vname)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scale",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "batch_norm_460": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "running_var": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scale",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._momentum",
                            "Attribute"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_488": {
                "*size": {
                    "value": "self._num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self, mname_old).device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_490": {
                "*size": {
                    "value": "self._num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self, mname_old).device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_207": {
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_210": {
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/context_mod_layer.py": {
        "torch": {
            "ParameterList_195": {
                "variable": {
                    "value": "self._weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_579": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(self.gain.numel(), dtype=bool)",
                            "Call"
                        ],
                        [
                            "inds.reshape(-1)",
                            "Call"
                        ],
                        [
                            "inds.reshape(*self.gain.shape)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inds).to(self.gain.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_192": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_407": {
                "input": {
                    "value": "gain * self._sps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_like_450": {
                "input": {
                    "value": "self.gain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gain.device",
                            "Attribute"
                        ],
                        [
                            "self.shift.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_like_462": {
                "input": {
                    "value": "self.shift",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gain.device",
                            "Attribute"
                        ],
                        [
                            "self.shift.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_198": {
                "data": {
                    "value": "torch.Tensor(*num_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_209": {
                "data": {
                    "value": "torch.Tensor(*num_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/ewc_regularizer.py": {
        "torch": {
            "backward_433": {
                "tensors": {
                    "value": "nll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "custom_nll(Y, T, data, allowed_outputs, empirical_fisher, batch[2])",
                            "Call"
                        ],
                        [
                            "custom_nll(Y, T, data, allowed_outputs, empirical_fisher)",
                            "Call"
                        ],
                        [
                            "0.5 * (Y - T).pow(2).sum()",
                            "BinOp"
                        ],
                        [
                            "F.nll_loss(F.log_softmax(Y, dim=1), torch.tensor([T]).to(device))",
                            "Call"
                        ],
                        [
                            "F.nll_loss(ll, T, reduction='none')",
                            "Call"
                        ],
                        [
                            "nll.mean(dim=1).sum()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_322": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "variable"
                        ],
                        [
                            "p in enumerate(params)",
                            "Call"
                        ],
                        [
                            "p in enumerate(params)",
                            "Call"
                        ],
                        [
                            "p in enumerate(params)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_436": {
                "input": {
                    "value": "p.grad.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_402": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.output_to_torch_tensor(batch[1], device, mode='inference')",
                            "Call"
                        ],
                        [
                            "torch.argmax(T)",
                            "Call"
                        ],
                        [
                            "torch.argmax(T, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_406": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.output_to_torch_tensor(batch[1], device, mode='inference')",
                            "Call"
                        ],
                        [
                            "torch.argmax(T)",
                            "Call"
                        ],
                        [
                            "torch.argmax(T, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_413": {
                "variable": {
                    "value": "nll",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(Y, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.tensor([T]).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_416": {
                "variable": {
                    "value": "ll",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mnet.forward(X, weights=params)",
                            "Call"
                        ],
                        [
                            "mnet.forward(X, weights=weights)",
                            "Call"
                        ],
                        [
                            "custom_forward(mnet, params, X, data, batch[2])",
                            "Call"
                        ],
                        [
                            "custom_forward(mnet, params, X)",
                            "Call"
                        ],
                        [
                            "custom_forward(mnet, hnet, task_id, params, X, data, batch[2])",
                            "Call"
                        ],
                        [
                            "custom_forward(mnet, hnet, task_id, params, X)",
                            "Call"
                        ],
                        [
                            "Y[:, allowed_outputs]",
                            "Subscript"
                        ],
                        [
                            "Y[:, :, allowed_outputs]",
                            "Subscript"
                        ],
                        [
                            "mnet.forward(X, weights=weights)",
                            "Call"
                        ],
                        [
                            "mnet.forward(X, weights=weights)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_420": {
                "variable": {
                    "value": "nll",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(Y, dim=2)",
                            "Call"
                        ],
                        [
                            "ll.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.output_to_torch_tensor(batch[1], device, mode='inference')",
                            "Call"
                        ],
                        [
                            "torch.argmax(T)",
                            "Call"
                        ],
                        [
                            "torch.argmax(T, 2)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_softmax_413": {
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mnet.forward(X, weights=params)",
                            "Call"
                        ],
                        [
                            "mnet.forward(X, weights=weights)",
                            "Call"
                        ],
                        [
                            "custom_forward(mnet, params, X, data, batch[2])",
                            "Call"
                        ],
                        [
                            "custom_forward(mnet, params, X)",
                            "Call"
                        ],
                        [
                            "custom_forward(mnet, hnet, task_id, params, X, data, batch[2])",
                            "Call"
                        ],
                        [
                            "custom_forward(mnet, hnet, task_id, params, X)",
                            "Call"
                        ],
                        [
                            "Y[:, allowed_outputs]",
                            "Subscript"
                        ],
                        [
                            "Y[:, :, allowed_outputs]",
                            "Subscript"
                        ],
                        [
                            "mnet.forward(X, weights=weights)",
                            "Call"
                        ],
                        [
                            "mnet.forward(X, weights=weights)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_414": {
                "data": {
                    "value": "[T]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "utils/hnet_regularizer.py": {
        "torch": {
            "cat_135": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w.view(-1) for w in hnet.forward(task_id=i)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_202": {
                "variable": {
                    "value": "W_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w.view(-1) for w in hnet.forward(task_id=i)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_203": {
                "variable": {
                    "value": "W_new",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w.view(-1) for w in hnet.forward(task_id=i, dTheta=dTheta)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_400": {
                "variable": {
                    "value": "W_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w.view(-1) for w in target]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_401": {
                "variable": {
                    "value": "W_predicted",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w.view(-1) for w in weights_predicted]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_469": {
                "tensors": {
                    "value": "new_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_494": {
                "tensors": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[[p.detach() for p in W_tid] for W_tid in W]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_556": {
                "variable": {
                    "value": "W_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w.view(-1) for w in target]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_557": {
                "variable": {
                    "value": "W_predicted",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w.view(-1) for w in weights_predicted]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_561": {
                "variable": {
                    "value": "FI",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w.view(-1) for w in fisher_estimates[i]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "pow_169": {
                "input": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tmp + torch.mul(partial, dTheta[tind]).sum()",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_410": {
                "variable": {
                    "value": "FI",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w.view(-1) for w in fisher_estimates[i]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mul_163": {
                "input": {
                    "value": "partial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.grad(w, t, grad_outputs=None, retain_graph=True, create_graph=True, only_inputs=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "dTheta[tind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_384": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_539": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_154": {
                "outputs": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w in enumerate(W)",
                            "Call"
                        ],
                        [
                            "w in enumerate(weights)",
                            "Call"
                        ],
                        [
                            "w in enumerate(weights)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t in enumerate(hnet.theta)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/init_utils.py": {
        "torch": {}
    },
    "utils/misc.py": {
        "torch": {
            "Sigmoid_134": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_136": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_138": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_140": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/optim_step.py": {
        "torch": {
            "zeros_like_268": {
                "variable": {
                    "value": "orig_state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_270": {
                "variable": {
                    "value": "orig_state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_365": {
                "variable": {
                    "value": "orig_state[square_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clone_203": {
                "variable": {
                    "value": "buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.detach().clone()",
                            "Call"
                        ],
                        [
                            "p.grad.clone()",
                            "Call"
                        ],
                        [
                            "d_p.add(momentum, buf)",
                            "Call"
                        ],
                        [
                            "buf",
                            "variable"
                        ]
                    ]
                }
            },
            "zeros_like_273": {
                "variable": {
                    "value": "orig_state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_303": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_367": {
                "variable": {
                    "value": "orig_state[momentum_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_369": {
                "variable": {
                    "value": "orig_state[grad_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/self_attention_layer.py": {
        "torch": {
            "Conv2d_55": {
                "variable": {
                    "value": "self.query_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.value_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_65": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_78": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_102": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query_conv(x).view(m_batchsize, -1, width * height).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weights[0], bias=weights[1]).view(m_batchsize, -1, width * height).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weights[2], bias=weights[3]).view(m_batchsize, -1, width * height)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_112": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.value_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weights[4], bias=weights[5]).view(m_batchsize, -1, width * height)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attention.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_169": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ParameterList_189": {
                "variable": {
                    "value": "self._weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_265": {
                "variable": {
                    "value": "proj_query",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weights[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "weights[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "weights",
                            "Call"
                        ],
                        [
                            "self.weights",
                            "Attribute"
                        ],
                        [
                            "new_weights",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "permute_265": {
                "variable": {
                    "value": "proj_query",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_268": {
                "variable": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weights[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "weights[3]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "weights",
                            "Call"
                        ],
                        [
                            "self.weights",
                            "Attribute"
                        ],
                        [
                            "new_weights",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_270": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query_conv(x).view(m_batchsize, -1, width * height).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weights[0], bias=weights[1]).view(m_batchsize, -1, width * height).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weights[2], bias=weights[3]).view(m_batchsize, -1, width * height)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_275": {
                "variable": {
                    "value": "proj_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weights[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "weights[5]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "weights",
                            "Call"
                        ],
                        [
                            "self.weights",
                            "Attribute"
                        ],
                        [
                            "new_weights",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_281": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.value_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weights[4], bias=weights[5]).view(m_batchsize, -1, width * height)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attention.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_74": {
                "variable": {
                    "value": "self.query_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.query_conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "spectral_norm_75": {
                "variable": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "spectral_norm_76": {
                "variable": {
                    "value": "self.value_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.value_conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_192": {
                "data": {
                    "value": "torch.Tensor(*dims)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/si_regularizer.py": {
        "torch": {
            "zeros_like_204": {
                "variable": {
                    "value": "omega",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p in enumerate(params)",
                            "Call"
                        ],
                        [
                            "p in enumerate(params)",
                            "Call"
                        ],
                        [
                            "p in enumerate(params)",
                            "Call"
                        ],
                        [
                            "p in enumerate(params)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_213": {
                "input": {
                    "value": "omega_current",
                    "type": "variable",
                    "possible_values": [
                        [
                            "running_omega / (total_change ** 2 + epsilon)",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_151": {
                "variable": {
                    "value": "omega",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p in enumerate(params)",
                            "Call"
                        ],
                        [
                            "p in enumerate(params)",
                            "Call"
                        ],
                        [
                            "p in enumerate(params)",
                            "Call"
                        ],
                        [
                            "p in enumerate(params)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/sim_utils.py": {
        "torch": {
            "device_155": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_132": {
                "seed": {
                    "value": "config.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_133": {
                "seed": {
                    "value": "config.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/torch_ckpts.py": {
        "torch": {
            "load_129": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ckpt_fns",
                            "variable"
                        ],
                        [
                            "kept_ckpts[i][0]",
                            "Subscript"
                        ],
                        [
                            "ckpt_fns",
                            "variable"
                        ],
                        [
                            "ckpt_fns",
                            "variable"
                        ]
                    ]
                }
            },
            "save_202": {
                "obj": {
                    "value": "ckpt_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ckpt_dict",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "file_path + '_%d' % train_iter",
                            "BinOp"
                        ],
                        [
                            "file_path",
                            "Method Argument"
                        ],
                        [
                            "file_path",
                            "Method Argument"
                        ],
                        [
                            "file_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_225": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ckpt_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_228": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ckpt_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_265": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ckpt_fns",
                            "variable"
                        ],
                        [
                            "ckpt_fns",
                            "variable"
                        ]
                    ]
                }
            },
            "load_307": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ckpt_fns",
                            "variable"
                        ],
                        [
                            "ckpt_fns",
                            "variable"
                        ]
                    ]
                }
            },
            "load_181": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_tup[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_183": {
                "obj": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(fn)",
                            "Call"
                        ],
                        [
                            "torch.load(ckpt_tup[0])",
                            "Call"
                        ],
                        [
                            "torch.load(ckpt_path)",
                            "Call"
                        ],
                        [
                            "torch.load(ckpt_path, map_location=lambda storage, loc: storage)",
                            "Call"
                        ],
                        [
                            "torch.load(fpath)",
                            "Call"
                        ],
                        [
                            "torch.load(fpath)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "ckpt_tup[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utils/torch_utils.py": {
        "torch": {
            "Adam_76": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "[adam_beta1, 0.999]",
                    "type": "List",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_188": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((h, w), np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.expand_as(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "RMSprop_79": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adadelta_83": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adagrad_86": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SGD_89": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}