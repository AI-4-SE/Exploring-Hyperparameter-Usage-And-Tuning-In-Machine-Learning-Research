{
    "rl_experiments/models/T5ForMC.py": {
        "torch": {
            "Embedding_25": {
                "variable": {
                    "value": "self.shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_201": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-100",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_206": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loss_fct(shift_logits.permute(0, 2, 1), shift_labels)",
                            "Call"
                        ],
                        [
                            "loss.sum(dim=-1, keepdim=True) / real_label_lengths",
                            "BinOp"
                        ],
                        [
                            "loss_fct(shift_logits.view(-1, shift_logits.size(-1)), shift_labels.view(-1))",
                            "Call"
                        ],
                        [
                            "loss_fct(shift_logits.view(-1, shift_logits.size(-1)), shift_labels.view(-1))",
                            "Call"
                        ],
                        [
                            "loss.reshape(batch_size, num_choices, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_101": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-100",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_106": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-100",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "rl_experiments/t5_rl.py": {
        "torch": {
            "exp_129": {
                "variable": {
                    "value": "choices_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-choices_loss",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_132": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_203": {
                "variable": {
                    "value": "sim_qa_choice_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "task_qa_output.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_977": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_31": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "finetuned_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "stack_160": {
                "variable": {
                    "value": "correct_contexts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[exp_input.context_ids[i, choice_labels[i], :] for i in range(exp_input.context_ids.size(0))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_245": {
                "variable": {
                    "value": "softmax_func",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_247": {
                "variable": {
                    "value": "reward",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "choices_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "softmax_func(-sim_qa_output.choices_loss.detach() / args.temperature)",
                            "Call"
                        ],
                        [
                            "more_confident * yx_choices_prob + (torch.ones_like(more_confident) - more_confident) * ye_choices_prob",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "sim_qa_input.choice_labels.detach().view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_258": {
                "variable": {
                    "value": "softmax_func",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gt_261": {
                "variable": {
                    "value": "more_confident",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(yx_choices_prob, dim=1)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.max(ye_choices_prob, dim=1)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_265": {
                "variable": {
                    "value": "reward",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "choices_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "softmax_func(-sim_qa_output.choices_loss.detach() / args.temperature)",
                            "Call"
                        ],
                        [
                            "more_confident * yx_choices_prob + (torch.ones_like(more_confident) - more_confident) * ye_choices_prob",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "sim_qa_yx_input.choice_labels.detach().view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_414": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if args.gpu == -1 else torch.device(f'cuda:{args.gpu}')",
                            "IfExp"
                        ],
                        [
                            "torch.device(f'cuda:{args.gpu}')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_991": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_130": {
                "input": {
                    "value": "choices_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(-choices_loss)",
                            "Call"
                        ],
                        [
                            "choices_probs / torch.sum(choices_probs, dim=-1).unsqueeze(-1).expand_as(choices_probs)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_130": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_984": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.gpu}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "device_987": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_all_993": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__438": {
                "parameters": {
                    "value": "task_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__444": {
                "parameters": {
                    "value": "sim_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_592": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_826": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_980": {
                "type": {
                    "value": "f'cuda:{args.gpu}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "set_device_985": {
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if args.gpu == -1 else torch.device(f'cuda:{args.gpu}')",
                            "IfExp"
                        ],
                        [
                            "torch.device(f'cuda:{args.gpu}')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_1096": {
                "obj": {
                    "value": "task_model_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(task_model_file, f'epoch{e}')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_1097": {
                "obj": {
                    "value": "sim_model_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(sim_model_file, f'epoch{e}')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_264": {
                "input": {
                    "value": "more_confident",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.gt(torch.max(yx_choices_prob, dim=1)[0], torch.max(ye_choices_prob, dim=1)[0]).float().view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_618": {
                "data": {
                    "value": "task_qa_output_e_only.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if args.gpu == -1 else torch.device(f'cuda:{args.gpu}')",
                            "IfExp"
                        ],
                        [
                            "torch.device(f'cuda:{args.gpu}')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_686": {
                "data": {
                    "value": "sim_qa_ye_output.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if args.gpu == -1 else torch.device(f'cuda:{args.gpu}')",
                            "IfExp"
                        ],
                        [
                            "torch.device(f'cuda:{args.gpu}')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_987": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_1100": {
                "obj": {
                    "value": "task_model_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "task_model_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save_dir, f'{args.model_name}_task.hdf5')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_1101": {
                "obj": {
                    "value": "sim_model_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "sim_model_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save_dir, f'{args.model_name}_sim.hdf5')",
                            "Call"
                        ]
                    ]
                }
            },
            "max_261": {
                "input": {
                    "value": "yx_choices_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "softmax_func(-sim_qa_yx_output.choices_loss.detach() / args.temperature)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_262": {
                "input": {
                    "value": "ye_choices_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "softmax_func(-sim_qa_ye_output.choices_loss.detach() / args.temperature)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_not_699": {
                "input": {
                    "value": "task_leaked_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(task_qa_output_e_only.predictions, device=device) == task_qa_choices_input_e_only.choice_labels",
                            "Compare"
                        ]
                    ]
                }
            },
            "logical_not_707": {
                "input": {
                    "value": "sim_leaked_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(sim_qa_ye_output.predictions, device=device) == sim_qa_ye_choices_input.choice_labels",
                            "Compare"
                        ]
                    ]
                }
            }
        }
    },
    "rl_experiments/t5_utils.py": {
        "torch": {
            "TensorDataset_64": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*train_tensors",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data) if not sequential else SequentialSampler(train_data)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_70": {
                "variable": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*eval_tensors",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "SequentialSampler_71": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_72": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_165": {
                "variable": {
                    "value": "qa_choice_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "qa_choice_label_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[int(example.input_dict['t5_prediction']) for example in examples]",
                            "ListComp"
                        ],
                        [
                            "[example.statement_label for example in examples]",
                            "ListComp"
                        ],
                        [
                            "[int(example.input_dict['t5_prediction']) for example in examples]",
                            "ListComp"
                        ],
                        [
                            "[example.label for example in examples]",
                            "ListComp"
                        ],
                        [
                            "[int(example.input_dict['t5_prediction']) for example in examples]",
                            "ListComp"
                        ],
                        [
                            "[example.label for example in examples]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_261": {
                "variable": {
                    "value": "qa_encoder_x_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "qa_encoder_x_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(qa_encoder_x_masks, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_262": {
                "variable": {
                    "value": "qa_encoder_e_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "qa_encoder_e_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(qa_encoder_e_masks, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_284": {
                "variable": {
                    "value": "qa_choice_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "qa_choice_label_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[int(example.input_dict['t5_prediction']) for example in examples]",
                            "ListComp"
                        ],
                        [
                            "[example.statement_label for example in examples]",
                            "ListComp"
                        ],
                        [
                            "[int(example.input_dict['t5_prediction']) for example in examples]",
                            "ListComp"
                        ],
                        [
                            "[example.label for example in examples]",
                            "ListComp"
                        ],
                        [
                            "[int(example.input_dict['t5_prediction']) for example in examples]",
                            "ListComp"
                        ],
                        [
                            "[example.label for example in examples]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_379": {
                "variable": {
                    "value": "qa_choice_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "qa_choice_label_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[int(example.input_dict['t5_prediction']) for example in examples]",
                            "ListComp"
                        ],
                        [
                            "[example.statement_label for example in examples]",
                            "ListComp"
                        ],
                        [
                            "[int(example.input_dict['t5_prediction']) for example in examples]",
                            "ListComp"
                        ],
                        [
                            "[example.label for example in examples]",
                            "ListComp"
                        ],
                        [
                            "[int(example.input_dict['t5_prediction']) for example in examples]",
                            "ListComp"
                        ],
                        [
                            "[example.label for example in examples]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_421": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_610": {
                "variable": {
                    "value": "finished",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "context_ids.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "num_choices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "context_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_81": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*test_tensors",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "SequentialSampler_82": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_83": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(*test_tensors)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSampler(test_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_550": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "context_ids.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "num_choices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "context_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "context_ids.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(tokenizer)",
                            "Call"
                        ],
                        [
                            "len(tokenizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_628": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros((batch_size, num_choices, 1), dtype=torch.long).to(device), pred[..., :-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_630": {
                "variable": {
                    "value": "new_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones((batch_size, num_choices, 1), dtype=torch.int32).to(device), decoder_masks[..., :-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomSampler_65": {
                "data_source": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_65": {
                "data_source": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_580": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "logits.view(batch_size, num_choices, seq_len, vocab_size)",
                            "Call"
                        ],
                        [
                            "logits * mask",
                            "BinOp"
                        ],
                        [
                            "torch.sum(logits, dim=2)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "logits.view(batch_size, num_choices, seq_len, vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_624": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "logits.view(batch_size, num_choices, seq_len, vocab_size)",
                            "Call"
                        ],
                        [
                            "logits * mask",
                            "BinOp"
                        ],
                        [
                            "torch.sum(logits, dim=2)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "logits.view(batch_size, num_choices, seq_len, vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_560": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_583": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "logits.view(batch_size, num_choices, seq_len, vocab_size)",
                            "Call"
                        ],
                        [
                            "logits * mask",
                            "BinOp"
                        ],
                        [
                            "torch.sum(logits, dim=2)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "logits.view(batch_size, num_choices, seq_len, vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_585": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.squeeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_586": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(logits.squeeze(1), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_615": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_626": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "logits.view(batch_size, num_choices, seq_len, vocab_size)",
                            "Call"
                        ],
                        [
                            "logits * mask",
                            "BinOp"
                        ],
                        [
                            "torch.sum(logits, dim=2)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "logits.view(batch_size, num_choices, seq_len, vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_627": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(logits, dim=-1).view(-1, vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_628": {
                "*size": {
                    "value": "(batch_size, num_choices, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_630": {
                "*size": {
                    "value": "(batch_size, num_choices, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_632": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "context_ids.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "num_choices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "context_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "sim_experiments/NLI_data_utils.py": {
        "torch": {
            "tensor_174": {
                "variable": {
                    "value": "task_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "task_input_ids if len(task_input_ids_list) < 1 else task_input_ids_list",
                    "type": "IfExp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_176": {
                "variable": {
                    "value": "task_choice_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "choice_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "example.label",
                            "Attribute"
                        ],
                        [
                            "example.label",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_177": {
                "variable": {
                    "value": "explanation_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "explanation_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(explanation_context_ids) + len(explanation_only_ids)",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(explanation_len).long()",
                            "Call"
                        ],
                        [
                            "len([e for e in explanation_context_ids if e != input_padding_id]) + len([e for e in explanation_only_ids if e != input_padding_id])",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(explanation_len).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_334": {
                "variable": {
                    "value": "task_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "task_input_ids if len(task_input_ids_list) < 1 else task_input_ids_list",
                    "type": "IfExp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_336": {
                "variable": {
                    "value": "task_answer_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "task_answer_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_task_answer_ids + ids_padding",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(task_answer_ids, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_338": {
                "variable": {
                    "value": "task_answer_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "task_answer_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_task_answer_ids + labels_padding",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(task_answer_labels, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_339": {
                "variable": {
                    "value": "task_output_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "task_output_ids_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_341": {
                "variable": {
                    "value": "task_output_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "task_output_labels_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_342": {
                "variable": {
                    "value": "explanation_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "explanation_input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "explanation_prefix_ids + _input_ids",
                            "BinOp"
                        ],
                        [
                            "explanation_input_ids + padding",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(explanation_input_ids, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_344": {
                "variable": {
                    "value": "explanation_output_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "explanation_output_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_explanation_output_ids + ids_padding",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(explanation_output_ids, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_346": {
                "variable": {
                    "value": "explanation_output_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "explanation_output_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_explanation_output_ids + labels_padding",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(explanation_output_labels, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_347": {
                "variable": {
                    "value": "explanation_context_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "explanation_context_ids_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_348": {
                "variable": {
                    "value": "task_choice_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "choice_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "example.label",
                            "Attribute"
                        ],
                        [
                            "example.label",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_349": {
                "variable": {
                    "value": "explanation_only_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "explanation_only_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tokenizer.encode(example.explanation, add_special_tokens=False)",
                            "Call"
                        ],
                        [
                            "tokenizer.encode(example.explanation, add_special_tokens=False)",
                            "Call"
                        ],
                        [
                            "explanation_only_ids + padding",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(explanation_only_ids, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_350": {
                "variable": {
                    "value": "explanation_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "explanation_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(explanation_context_ids) + len(explanation_only_ids)",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(explanation_len).long()",
                            "Call"
                        ],
                        [
                            "len([e for e in explanation_context_ids if e != input_padding_id]) + len([e for e in explanation_only_ids if e != input_padding_id])",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(explanation_len).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_185": {
                "tensors": {
                    "value": "[data_point[j] for data_point in return_data]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_364": {
                "tensors": {
                    "value": "[data_point[j] for data_point in return_data]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sim_experiments/QA_data_utils.py": {
        "torch": {
            "tensor_290": {
                "variable": {
                    "value": "task_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "task_input_ids if len(task_input_ids_list) < 1 else task_input_ids_list",
                    "type": "IfExp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_292": {
                "variable": {
                    "value": "task_answer_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "task_answer_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_task_answer_ids + ids_padding",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(task_answer_ids, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_294": {
                "variable": {
                    "value": "task_answer_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "task_answer_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_task_answer_ids + labels_padding",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(task_answer_labels, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_295": {
                "variable": {
                    "value": "task_output_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "task_output_ids_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_297": {
                "variable": {
                    "value": "task_output_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "task_output_labels_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_298": {
                "variable": {
                    "value": "explanation_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "explanation_input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "explanation_prefix_ids + _input_ids",
                            "BinOp"
                        ],
                        [
                            "explanation_input_ids + padding",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(explanation_input_ids, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_300": {
                "variable": {
                    "value": "explanation_output_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "explanation_output_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_explanation_output_ids + ids_padding",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(explanation_output_ids, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_302": {
                "variable": {
                    "value": "explanation_output_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "explanation_output_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_explanation_output_ids + labels_padding",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(explanation_output_labels, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_303": {
                "variable": {
                    "value": "explanation_context_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "explanation_context_ids_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_304": {
                "variable": {
                    "value": "task_choice_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "choice_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "example.label",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_305": {
                "variable": {
                    "value": "explanation_only_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "explanation_only_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tokenizer.encode(example.explanation, add_special_tokens=False)",
                            "Call"
                        ],
                        [
                            "explanation_only_ids + padding",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(explanation_only_ids, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_306": {
                "variable": {
                    "value": "explanation_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "explanation_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len([e for e in explanation_context_ids if e != input_padding_id]) + len([e for e in explanation_only_ids if e != input_padding_id])",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(explanation_len).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_318": {
                "tensors": {
                    "value": "[data_point[j] for data_point in return_data]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sim_experiments/T5-2-agent_main.py": {
        "torch": {
            "DataLoader_76": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(*train_tensors)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True if not all_sequential_samplers else False",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_85": {
                "variable": {
                    "value": "dev_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(*dev_tensors)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_94": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(*test_tensors)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_728": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_117": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "finetuned_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "device_735": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.gpu}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "manual_seed_738": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_880": {
                "variable": {
                    "value": "task_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "task_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_model(args, device, tokenizer, multi_gpu=multi_gpu, role='task', finetuned_path=task_prefinetuned_path)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(task_model, device_ids=range(n_gpu))",
                            "Call"
                        ],
                        [
                            "load_model(args, device, tokenizer, multi_gpu=multi_gpu, role='task', finetuned_path=task_model_path)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(task_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_881": {
                "variable": {
                    "value": "sim_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "sim_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_model(args, device, tokenizer, multi_gpu=multi_gpu, role='sim', finetuned_path=sim_prefinetuned_path)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(sim_model, device_ids=range(n_gpu))",
                            "Call"
                        ],
                        [
                            "load_model(args, device, tokenizer, multi_gpu=multi_gpu, role='sim', finetuned_path=sim_model_path)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(sim_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_76": {
                "*tensors": {
                    "value": "*train_tensors",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "TensorDataset_85": {
                "*tensors": {
                    "value": "*dev_tensors",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "TensorDataset_94": {
                "*tensors": {
                    "value": "*test_tensors",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "tensor_191": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "argmin_244": {
                "variable": {
                    "value": "task_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "choice_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "choice_losses.detach().cpu()",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "choice_losses.detach().cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "set_device_736": {
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if args.gpu == -1 else torch.device(f'cuda:{args.gpu}')",
                            "IfExp"
                        ],
                        [
                            "torch.device(f'cuda:{args.gpu}')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_all_740": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_801": {
                "variable": {
                    "value": "task_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "task_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_model(args, device, tokenizer, multi_gpu=multi_gpu, role='task', finetuned_path=task_prefinetuned_path)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(task_model, device_ids=range(n_gpu))",
                            "Call"
                        ],
                        [
                            "load_model(args, device, tokenizer, multi_gpu=multi_gpu, role='task', finetuned_path=task_model_path)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(task_model)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(n_gpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_802": {
                "variable": {
                    "value": "sim_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "sim_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_model(args, device, tokenizer, multi_gpu=multi_gpu, role='sim', finetuned_path=sim_prefinetuned_path)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(sim_model, device_ids=range(n_gpu))",
                            "Call"
                        ],
                        [
                            "load_model(args, device, tokenizer, multi_gpu=multi_gpu, role='sim', finetuned_path=sim_model_path)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(sim_model)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(n_gpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_318": {
                "variable": {
                    "value": "sim_decoder_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[task_output_ids[i, task_preds[i]] for i in range(batch_size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_319": {
                "variable": {
                    "value": "sim_decoder_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[task_output_labels[i, task_preds[i]] for i in range(batch_size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_340": {
                "variable": {
                    "value": "explanation_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "explanation_lens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[2]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(explanation_lens)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmin_483": {
                "variable": {
                    "value": "sim_X_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_choice_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "X_choice_losses.detach().cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_731": {
                "type": {
                    "value": "f'cuda:{args.gpu}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "stack_287": {
                "variable": {
                    "value": "use_contexts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[explanation_context_ids[i, task_preds[i], :] for i in range(batch_size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmin_424": {
                "variable": {
                    "value": "sim_XE_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "choice_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "choice_losses.detach().cpu()",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "choice_losses.detach().cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmin_453": {
                "variable": {
                    "value": "sim_E_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "E_choice_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "E_choice_losses.detach().cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_467": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_408": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_437": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__510": {
                "parameters": {
                    "value": "amp.master_params(sim_model_optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__515": {
                "parameters": {
                    "value": "sim_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_859": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "task_model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save_dir, task_name + '.hdf5')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save_dir, task_name + '.hdf5')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_861": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "sim_model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save_dir, sim_name + '.hdf5')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save_dir, sim_name + '.hdf5')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__380": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__382": {
                "parameters": {
                    "value": "task_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "sim_experiments/main.py": {
        "torch": {
            "DataLoader_83": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(*train_tensors)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.train_batch_size if args.do_train else args.dev_batch_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_85": {
                "variable": {
                    "value": "sequential_train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(*train_tensors)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.dev_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_94": {
                "variable": {
                    "value": "dev_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(*dev_tensors)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.train_batch_size if args.do_train else args.dev_batch_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_103": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(*test_tensors)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.train_batch_size if args.do_train else args.dev_batch_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_599": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_32": {
                "input": {
                    "value": "-torch.log(pred_probs)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_127": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "finetuned_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "device_606": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.gpu}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "manual_seed_609": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_755": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_model(args, device, tokenizer, multi_gpu=multi_gpu, finetuned_path=prefinetuned_path)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=range(n_gpu))",
                            "Call"
                        ],
                        [
                            "load_model(args, device, tokenizer, multi_gpu=multi_gpu, finetuned_path=model_path)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "RobertaForSequenceClassification.from_pretrained(args.task_pretrained_name, config=config, cache_dir=args.cache_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.task_pretrained_name, project_to_small=False, cache_dir=args.cache_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_83": {
                "*tensors": {
                    "value": "*train_tensors",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "TensorDataset_85": {
                "*tensors": {
                    "value": "*train_tensors",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "TensorDataset_94": {
                "*tensors": {
                    "value": "*dev_tensors",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "TensorDataset_103": {
                "*tensors": {
                    "value": "*test_tensors",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "tensor_175": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "set_device_607": {
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if args.gpu == -1 else torch.device(f'cuda:{args.gpu}')",
                            "IfExp"
                        ],
                        [
                            "torch.device(f'cuda:{args.gpu}')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_all_611": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_687": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_model(args, device, tokenizer, multi_gpu=multi_gpu, finetuned_path=prefinetuned_path)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=range(n_gpu))",
                            "Call"
                        ],
                        [
                            "load_model(args, device, tokenizer, multi_gpu=multi_gpu, finetuned_path=model_path)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "RobertaForSequenceClassification.from_pretrained(args.task_pretrained_name, config=config, cache_dir=args.cache_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.task_pretrained_name, project_to_small=False, cache_dir=args.cache_dir)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(n_gpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_32": {
                "input": {
                    "value": "pred_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "probabilities.gather(-1, labels.unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "enable_grad_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_310": {
                "variable": {
                    "value": "choice_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-choice_losses.detach()",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_602": {
                "type": {
                    "value": "f'cuda:{args.gpu}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "stack_351": {
                "variable": {
                    "value": "use_contexts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[explanation_context_ids[i, preds[i], :] for i in range(batch_size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_351": {
                "variable": {
                    "value": "use_contexts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_736": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save_dir, save_name + '.hdf5')",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_291": {
                "variable": {
                    "value": "choice_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-choice_losses",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_355": {
                "variable": {
                    "value": "use_contexts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[explanation_context_ids[i, task_choice_labels[i], :] for i in range(batch_size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_355": {
                "variable": {
                    "value": "use_contexts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__339": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__341": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "sim_experiments/models/T5ForMC.py": {
        "torch": {
            "Embedding_25": {
                "variable": {
                    "value": "self.shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.project_to_small",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_116": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-100",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_123": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loss_fct(shift_logits.view(-1, shift_logits.size(-1)), shift_labels.view(-1))",
                            "Call"
                        ],
                        [
                            "loss.view(batch_shape)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss, dim=-1)",
                            "Call"
                        ],
                        [
                            "loss.mean()",
                            "Call"
                        ],
                        [
                            "loss * loss_weights",
                            "BinOp"
                        ],
                        [
                            "loss_fct(shift_logits.view(-1, shift_logits.size(-1)), shift_labels.view(-1))",
                            "Call"
                        ],
                        [
                            "loss.reshape(batch_size, num_choices, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_209": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-100",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_213": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loss_fct(shift_logits.view(-1, shift_logits.size(-1)), shift_labels.view(-1))",
                            "Call"
                        ],
                        [
                            "loss.view(batch_shape)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss, dim=-1)",
                            "Call"
                        ],
                        [
                            "loss.mean()",
                            "Call"
                        ],
                        [
                            "loss * loss_weights",
                            "BinOp"
                        ],
                        [
                            "loss_fct(shift_logits.view(-1, shift_logits.size(-1)), shift_labels.view(-1))",
                            "Call"
                        ],
                        [
                            "loss.reshape(batch_size, num_choices, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "sim_experiments/utils.py": {
        "torch": {
            "Softmax_124": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gumbel_softmax_368": {
                "variable": {
                    "value": "gumbel_softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "torch.stack([logits[i, last_idx, :] for (i, last_idx) in enumerate(where_last_tokens)])",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "logits.view(batch_size, seq_len, vocab_size)",
                            "Call"
                        ],
                        [
                            "logits * logits_mask",
                            "BinOp"
                        ],
                        [
                            "torch.sum(logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "tau": {
                    "value": "temperature",
                    "type": "Variable",
                    "possible_values": []
                },
                "hard": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_372": {
                "variable": {
                    "value": "y_hard",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_soft",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gumbel_softmax(logits, temperature)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits / temperature, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_376": {
                "variable": {
                    "value": "y_hard",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_hard",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(y_soft).view(-1, shape[-1])",
                            "Call"
                        ],
                        [
                            "y_hard.view(*y_soft.shape)",
                            "Call"
                        ],
                        [
                            "(y_hard - y_soft).detach() + y_soft",
                            "BinOp"
                        ],
                        [
                            "torch.argmax(y_hard, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(y_soft).view(-1, shape[-1])",
                            "Call"
                        ],
                        [
                            "y_hard.view(*y_soft.shape)",
                            "Call"
                        ],
                        [
                            "(y_hard - y_soft).detach() + y_soft",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_384": {
                "variable": {
                    "value": "y_soft",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_387": {
                "variable": {
                    "value": "y_hard",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_soft",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gumbel_softmax(logits, temperature)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits / temperature, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_22": {
                "input": {
                    "value": "-torch.log(pred_probs)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "running_contexts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(running_contexts, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_134": {
                "variable": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pad_token_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tokenizer.pad_token_id if tokenizer.pad_token_id is not None else 0",
                            "IfExp"
                        ],
                        [
                            "tokenizer.pad_token_id if tokenizer.pad_token_id is not None else 0",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_136": {
                "variable": {
                    "value": "return_running_contexts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(running_contexts, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "variable": {
                    "value": "listener_context_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tokenizer.encode(listener_context)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "variable": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pad_token_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tokenizer.pad_token_id if tokenizer.pad_token_id is not None else 0",
                            "IfExp"
                        ],
                        [
                            "tokenizer.pad_token_id if tokenizer.pad_token_id is not None else 0",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_158": {
                "variable": {
                    "value": "listener_context_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(listener_context_ids, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_181": {
                "variable": {
                    "value": "logits_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoder_input_ids.size(0)",
                            "Call"
                        ],
                        [
                            "context_ids.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "seq_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoder_input_ids.size(-1)",
                            "Call"
                        ],
                        [
                            "max_sample_len + context_len",
                            "BinOp"
                        ],
                        [
                            "context_ids.size(1)",
                            "Call"
                        ],
                        [
                            "return_running_contexts.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(tokenizer)",
                            "Call"
                        ],
                        [
                            "_speaker_model.lm_head.out_features",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sum_202": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "torch.stack([logits[i, last_idx, :] for (i, last_idx) in enumerate(where_last_tokens)])",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "logits.view(batch_size, seq_len, vocab_size)",
                            "Call"
                        ],
                        [
                            "logits * logits_mask",
                            "BinOp"
                        ],
                        [
                            "torch.sum(logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_203": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "torch.stack([logits[i, last_idx, :] for (i, last_idx) in enumerate(where_last_tokens)])",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "logits.view(batch_size, seq_len, vocab_size)",
                            "Call"
                        ],
                        [
                            "logits * logits_mask",
                            "BinOp"
                        ],
                        [
                            "torch.sum(logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_73": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[logits[i, last_idx, :] for (i, last_idx) in enumerate(where_last_tokens)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "argmax_74": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "torch.stack([logits[i, last_idx, :] for (i, last_idx) in enumerate(where_last_tokens)])",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "logits.view(batch_size, seq_len, vocab_size)",
                            "Call"
                        ],
                        [
                            "logits * logits_mask",
                            "BinOp"
                        ],
                        [
                            "torch.sum(logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_127": {
                "data": {
                    "value": "[pad_token_id]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mm_208": {
                "variable": {
                    "value": "pred_speaker_embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds_onehot",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "differentiable_argmax(logits, temperature=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "_speaker_model.shared.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_209": {
                "variable": {
                    "value": "pred_listener_embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds_onehot",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "differentiable_argmax(logits, temperature=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "_listener_model.shared.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_216": {
                "variable": {
                    "value": "averaged_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "_speaker_model.shared.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_22": {
                "input": {
                    "value": "pred_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "probabilities.gather(-1, labels.unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_50": {
                "*size": {
                    "value": "extension_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[batch_size, extend_by]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}