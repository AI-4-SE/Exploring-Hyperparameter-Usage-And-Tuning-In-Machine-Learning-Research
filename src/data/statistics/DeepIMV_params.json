{
    "helper.py": {
        "sklearn": {
            "roc_auc_score_24": {
                "variable": {
                    "value": "auroc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_y_[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "pred_y_[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "average_precision_score_25": {
                "variable": {
                    "value": "auprc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_y_[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "pred_y_[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "sklearn": {
            "train_test_split_64": {
                "variable": {
                    "value": "(tr_Y_onehot, te_Y_onehot, tr_M, te_M)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "Y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Mask",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "train_test_split_65": {
                "variable": {
                    "value": "(tr_Y_onehot, va_Y_onehot, tr_M, va_M)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "tr_Y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "tr_M",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "train_test_split_61": {
                "variable": {
                    "value": "(tr_X_set[m], te_X_set[m])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_set[m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "train_test_split_62": {
                "variable": {
                    "value": "(tr_X_set[m], va_X_set[m])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "tr_X_set[m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "GPUOptions_122": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_124": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_128": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_124": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    ".ipynb_checkpoints/class_DeepIMV_AISTATS-checkpoint.py": {
        "tensorflow": {
            "div_10": {
                "x": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_ + _EPSILON",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_13": {
                "x": {
                    "value": "x_ + _EPSILON",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_82": {
                "variable": {
                    "value": "tmp_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(y_true_ - y_pred_) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_17": {
                "x": {
                    "value": "dim_ / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_50": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_",
                            "Name"
                        ],
                        [
                            "FC_Net(inputs=net, num_outputs=h_dim_, activation_fn=activation_fn, weights_regularizer=w_reg_, scope='layer_' + str(tmp_layer))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, keep_prob=keep_prob_)",
                            "Call"
                        ],
                        [
                            "x_",
                            "Name"
                        ],
                        [
                            "FC_Net(inputs=net, num_outputs=h_dim_, activation_fn=activation_fn, weights_regularizer=w_reg_, scope='layer_' + str(tmp_layer))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, keep_prob=keep_prob_)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_prob_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_74": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_",
                            "Name"
                        ],
                        [
                            "FC_Net(inputs=net, num_outputs=h_dim_, activation_fn=activation_fn, weights_regularizer=w_reg_, scope='layer_' + str(tmp_layer))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, keep_prob=keep_prob_)",
                            "Call"
                        ],
                        [
                            "x_",
                            "Name"
                        ],
                        [
                            "FC_Net(inputs=net, num_outputs=h_dim_, activation_fn=activation_fn, weights_regularizer=w_reg_, scope='layer_' + str(tmp_layer))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, keep_prob=keep_prob_)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_prob_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_158": {
                "variable": {
                    "value": "self.mb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_159": {
                "variable": {
                    "value": "self.lr_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_160": {
                "variable": {
                    "value": "self.k_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_probability",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_167": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.M]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_168": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.y_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_171": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "coef_alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_172": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "coef_beta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_243": {
                "variable": {
                    "value": "global_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_244": {
                "variable": {
                    "value": "enc_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name + '/encoder'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_245": {
                "variable": {
                    "value": "pred_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name + '/predictor'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_257": {
                "variable": {
                    "value": "self.LOSS_KL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(ds.kl_divergence(qz, prior_z), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_260": {
                "variable": {
                    "value": "self.LOSS_P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_y(self.y, self.y_hat, self.y_type)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_274": {
                "variable": {
                    "value": "self.LOSS_Ps_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "self.LOSS_Ps_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_275": {
                "variable": {
                    "value": "self.LOSS_KLs_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "self.LOSS_KLs_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_277": {
                "variable": {
                    "value": "self.LOSS_Ps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.LOSS_Ps_all",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_278": {
                "variable": {
                    "value": "self.LOSS_KLs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.LOSS_KLs_all",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_288": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exponential_decay_289": {
                "variable": {
                    "value": "self.lr_rate_decayed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "2 * self.steps_per_batch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.97",
                    "type": "float",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_293": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_rate_decayed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_296": {
                "variable": {
                    "value": "ma",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                },
                "zero_debias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "tensor": {
                    "value": "mask_[:, m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_165": {
                "variable": {
                    "value": "self.x_set[m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.x_dim_set[m]]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'input_{}'.format(m)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_268": {
                "variable": {
                    "value": "tmp_kl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ds.kl_divergence(qz_set[m], prior_z_set[m])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_84": {
                "input_tensor": {
                    "value": "y_true_ * log(y_pred_)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_96": {
                "x": {
                    "value": "logvar_set_[m]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_102": {
                "tensor": {
                    "value": "mask_[:, m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_203": {
                "x": {
                    "value": "tf.exp(self.logvar_z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_216": {
                "name_or_scope": {
                    "value": "predictor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_224": {
                "name_or_scope": {
                    "value": "predictor",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_258": {
                "input_tensor": {
                    "value": "ds.kl_divergence(qz, prior_z)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_regularization_loss_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_86": {
                "input_tensor": {
                    "value": "y_true_ * log(y_pred_) + (1.0 - y_true_) * log(1.0 - y_pred_)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_102": {
                "x": {
                    "value": "logvar_set_[m]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "'encoder{}'.format(m + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_203": {
                "x": {
                    "value": "self.logvar_z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_210": {
                "x": {
                    "value": "tf.exp(self.logvar_z_set[m])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_234": {
                "name_or_scope": {
                    "value": "'predictor_set{}'.format(m)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_210": {
                "x": {
                    "value": "self.logvar_z_set[m]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_252": {
                "input_tensor": {
                    "value": "ds.kl_divergence(qz, qz_set[m])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_253": {
                "input_tensor": {
                    "value": "self.mask[:, m]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_270": {
                "input_tensor": {
                    "value": "self.mask[:, m]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_271": {
                "input_tensor": {
                    "value": "self.mask[:, m]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "class_DeepIMV_AISTATS.py": {
        "tensorflow": {
            "div_10": {
                "x": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_ + _EPSILON",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_13": {
                "x": {
                    "value": "x_ + _EPSILON",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_82": {
                "variable": {
                    "value": "tmp_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(y_true_ - y_pred_) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_17": {
                "x": {
                    "value": "dim_ / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_50": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_",
                            "Name"
                        ],
                        [
                            "FC_Net(inputs=net, num_outputs=h_dim_, activation_fn=activation_fn, weights_regularizer=w_reg_, scope='layer_' + str(tmp_layer))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, keep_prob=keep_prob_)",
                            "Call"
                        ],
                        [
                            "x_",
                            "Name"
                        ],
                        [
                            "FC_Net(inputs=net, num_outputs=h_dim_, activation_fn=activation_fn, weights_regularizer=w_reg_, scope='layer_' + str(tmp_layer))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, keep_prob=keep_prob_)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_prob_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_74": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_",
                            "Name"
                        ],
                        [
                            "FC_Net(inputs=net, num_outputs=h_dim_, activation_fn=activation_fn, weights_regularizer=w_reg_, scope='layer_' + str(tmp_layer))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, keep_prob=keep_prob_)",
                            "Call"
                        ],
                        [
                            "x_",
                            "Name"
                        ],
                        [
                            "FC_Net(inputs=net, num_outputs=h_dim_, activation_fn=activation_fn, weights_regularizer=w_reg_, scope='layer_' + str(tmp_layer))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, keep_prob=keep_prob_)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_prob_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_158": {
                "variable": {
                    "value": "self.mb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_159": {
                "variable": {
                    "value": "self.lr_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_160": {
                "variable": {
                    "value": "self.k_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_probability",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_167": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.M]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_168": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.y_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_171": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "coef_alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_172": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "coef_beta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_243": {
                "variable": {
                    "value": "global_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_244": {
                "variable": {
                    "value": "enc_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name + '/encoder'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_245": {
                "variable": {
                    "value": "pred_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name + '/predictor'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_257": {
                "variable": {
                    "value": "self.LOSS_KL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(ds.kl_divergence(qz, prior_z), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_260": {
                "variable": {
                    "value": "self.LOSS_P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_y(self.y, self.y_hat, self.y_type)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_274": {
                "variable": {
                    "value": "self.LOSS_Ps_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "self.LOSS_Ps_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_275": {
                "variable": {
                    "value": "self.LOSS_KLs_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "self.LOSS_KLs_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_277": {
                "variable": {
                    "value": "self.LOSS_Ps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.LOSS_Ps_all",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_278": {
                "variable": {
                    "value": "self.LOSS_KLs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.LOSS_KLs_all",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_288": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exponential_decay_289": {
                "variable": {
                    "value": "self.lr_rate_decayed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "2 * self.steps_per_batch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.97",
                    "type": "float",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_293": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_rate_decayed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_296": {
                "variable": {
                    "value": "ma",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                },
                "zero_debias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "tensor": {
                    "value": "mask_[:, m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_165": {
                "variable": {
                    "value": "self.x_set[m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.x_dim_set[m]]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'input_{}'.format(m)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_268": {
                "variable": {
                    "value": "tmp_kl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ds.kl_divergence(qz_set[m], prior_z_set[m])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_84": {
                "input_tensor": {
                    "value": "y_true_ * log(y_pred_)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_96": {
                "x": {
                    "value": "logvar_set_[m]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_102": {
                "tensor": {
                    "value": "mask_[:, m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_203": {
                "x": {
                    "value": "tf.exp(self.logvar_z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_216": {
                "name_or_scope": {
                    "value": "predictor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_224": {
                "name_or_scope": {
                    "value": "predictor",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_258": {
                "input_tensor": {
                    "value": "ds.kl_divergence(qz, prior_z)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_regularization_loss_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "model_variables_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_86": {
                "input_tensor": {
                    "value": "y_true_ * log(y_pred_) + (1.0 - y_true_) * log(1.0 - y_pred_)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_102": {
                "x": {
                    "value": "logvar_set_[m]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "'encoder{}'.format(m + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_203": {
                "x": {
                    "value": "self.logvar_z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_210": {
                "x": {
                    "value": "tf.exp(self.logvar_z_set[m])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_234": {
                "name_or_scope": {
                    "value": "'predictor_set{}'.format(m)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_210": {
                "x": {
                    "value": "self.logvar_z_set[m]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_252": {
                "input_tensor": {
                    "value": "ds.kl_divergence(qz, qz_set[m])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_253": {
                "input_tensor": {
                    "value": "self.mask[:, m]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_270": {
                "input_tensor": {
                    "value": "self.mask[:, m]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_271": {
                "input_tensor": {
                    "value": "self.mask[:, m]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}