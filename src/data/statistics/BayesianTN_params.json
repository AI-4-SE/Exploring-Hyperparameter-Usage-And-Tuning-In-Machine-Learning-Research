{
    "BasicFun.py": {
        "torch": {
            "zeros_983": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num, size_x1, size_y1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_986": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num, d, lx, ly)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_1055": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_loader[0][0].device",
                            "Attribute"
                        ],
                        [
                            "data_loader[0][0].device",
                            "Attribute"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tc.float32",
                            "Attribute"
                        ],
                        [
                            "tc.float32",
                            "Attribute"
                        ],
                        [
                            "data_loader[0][0].dtype",
                            "Attribute"
                        ],
                        [
                            "data_loader[0][0].dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_1056": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_loader[0][0].device",
                            "Attribute"
                        ],
                        [
                            "data_loader[0][0].device",
                            "Attribute"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "data_loader[0][1].dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1072": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(labels.numel(), channel)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "labels.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "labels.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1082": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(s[0], s[1], s[2] + 1, s[3] + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_20": {
                "type": {
                    "value": "cuda: + str(n) if tc.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "save_42": {
                "obj": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ],
                        [
                            "dict()",
                            "Call"
                        ],
                        [
                            "tc.load(path_file, map_location=device)",
                            "Call"
                        ],
                        [
                            "pickle.load(s)",
                            "Call"
                        ],
                        [
                            "samples.reshape(size[0], size[1] * size[2])",
                            "Call"
                        ],
                        [
                            "samples.reshape(size[0], 1, size[1], size[2])",
                            "Call"
                        ],
                        [
                            "samples[x, :, :].reshape(x.shape[0], samples.shape[1] * samples.shape[2])",
                            "Call"
                        ],
                        [
                            "samples.reshape(size[0], size[1], size[2] * size[3])",
                            "Call"
                        ],
                        [
                            "samples[x, :, :].reshape(x.shape[0], 1, samples.shape[1], samples.shape[2])",
                            "Call"
                        ],
                        [
                            "samples.reshape(size[0], 1, 1, size[1], size[2])",
                            "Call"
                        ],
                        [
                            "samples[x, :, :, :].reshape(x.shape[0], samples.shape[1], samples.shape[2] * samples.shape[3])",
                            "Call"
                        ],
                        [
                            "samples.reshape(size[0], size[1], 1, size[2], size[3])",
                            "Call"
                        ],
                        [
                            "samples",
                            "Name"
                        ],
                        [
                            "samples[x, :, :].reshape((x.shape[0], 1, 1) + samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples[x, :, :, :].reshape((x.shape[0], samples.shape[1], 1) + samples.shape[2:])",
                            "Call"
                        ],
                        [
                            "eval(exp)",
                            "Call"
                        ],
                        [
                            "tc.zeros((img.shape[0], size1[0] * size1[1]), device=device, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tc.zeros((img.shape[0], img.shape[1] * size[0] * size[1]), device=device, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "img.reshape((img.shape[0],) + size0)[:, x0:x0 + size[0], x1:x1 + size[1]]",
                            "Subscript"
                        ],
                        [
                            "tmp.reshape(-1, size[0] * size[1])",
                            "Call"
                        ],
                        [
                            "img[:, x0:x0 + size[0], x1:x1 + size[1]]",
                            "Subscript"
                        ],
                        [
                            "img[:, :, x0:x0 + size[0], x1:x1 + size[1]]",
                            "Subscript"
                        ],
                        [
                            "imgs[n, :, :, :].squeeze()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(path, file)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_312": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "selected_samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[None] * len(classes)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_313": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "selected_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[None] * len(classes)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randperm_339": {
                "variable": {
                    "value": "rand",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "labels.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_420": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(img.shape[0], img.shape[1] * size[0] * size[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_loader[0][0].device",
                            "Attribute"
                        ],
                        [
                            "data_loader[0][0].device",
                            "Attribute"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tc.float32",
                            "Attribute"
                        ],
                        [
                            "tc.float32",
                            "Attribute"
                        ],
                        [
                            "data_loader[0][0].dtype",
                            "Attribute"
                        ],
                        [
                            "data_loader[0][0].dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_456": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_493": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_524": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_550": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.size()[0], d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_588": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_590": {
                "variable": {
                    "value": "vecs[:, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x * theta_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_591": {
                "variable": {
                    "value": "vecs[:, 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - x * theta_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_613": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_615": {
                "variable": {
                    "value": "vecs[:, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_646": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_648": {
                "variable": {
                    "value": "vecs[:, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_671": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_675": {
                "variable": {
                    "value": "vecs[:, 2, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_708": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_712": {
                "variable": {
                    "value": "vecs[:, 2, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_713": {
                "variable": {
                    "value": "vecs[:, 3, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x * np.pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_749": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cos_753": {
                "variable": {
                    "value": "vecs[:, 2, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_786": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_819": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_852": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_855": {
                "variable": {
                    "value": "vecs[:, 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_885": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_887": {
                "variable": {
                    "value": "vecs[:, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_888": {
                "variable": {
                    "value": "vecs[:, 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_918": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_920": {
                "variable": {
                    "value": "vecs[:, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_921": {
                "variable": {
                    "value": "vecs[:, 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_956": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_958": {
                "variable": {
                    "value": "vecs[:, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_1058": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(samples, imgs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1059": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(labels, lbs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_59": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_62": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_loader[0][0].device",
                            "Attribute"
                        ],
                        [
                            "data_loader[0][0].device",
                            "Attribute"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_388": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(img.shape[0], size1[0] * size1[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_loader[0][0].device",
                            "Attribute"
                        ],
                        [
                            "data_loader[0][0].device",
                            "Attribute"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tc.float32",
                            "Attribute"
                        ],
                        [
                            "tc.float32",
                            "Attribute"
                        ],
                        [
                            "data_loader[0][0].dtype",
                            "Attribute"
                        ],
                        [
                            "data_loader[0][0].dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_426": {
                "variable": {
                    "value": "tmp[n, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img[n, :].reshape(size0).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "cv2.resize(_tmp, tuple(size1)).reshape(-1)",
                            "Call"
                        ],
                        [
                            "img[n, :, :].reshape(size0).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "cv2.resize(_tmp.transpose(1, 2, 0), tuple(size))",
                            "Call"
                        ],
                        [
                            "_tmp.transpose(2, 0, 1).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_461": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_498": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cos_527": {
                "variable": {
                    "value": "vecs[:, n, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x * n * np.pi / 2 * theta_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_529": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_557": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.size()[0], d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_593": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_595": {
                "variable": {
                    "value": "vecs[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x * theta_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_596": {
                "variable": {
                    "value": "vecs[:, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - x * theta_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_618": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abc,ac->abc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=1) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_620": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_622": {
                "variable": {
                    "value": "vecs[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_651": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_653": {
                "variable": {
                    "value": "vecs[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_677": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abc,ac->abc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=1) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_679": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_683": {
                "variable": {
                    "value": "vecs[:, 2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_715": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abc,ac->abc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=1) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_717": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_721": {
                "variable": {
                    "value": "vecs[:, 2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_722": {
                "variable": {
                    "value": "vecs[:, 3, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x * np.pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_755": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abc,ac->abc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=1) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_757": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cos_761": {
                "variable": {
                    "value": "vecs[:, 2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_791": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abc,ac->abc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=1) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_793": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "einsum_824": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abc,ac->abc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=1) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_826": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "einsum_857": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abc,ac->abc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=1) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_859": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_862": {
                "variable": {
                    "value": "vecs[:, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_890": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abc,ac->abc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=1) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_892": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_894": {
                "variable": {
                    "value": "vecs[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_895": {
                "variable": {
                    "value": "vecs[:, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_924": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abc,ac->abc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=1) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_926": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_928": {
                "variable": {
                    "value": "vecs[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_929": {
                "variable": {
                    "value": "vecs[:, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_961": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_963": {
                "variable": {
                    "value": "vecs[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "symeig_1107": {
                "input": {
                    "value": "rho",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_266": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "trainset.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_267": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(trainset.targets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_269": {
                "variable": {
                    "value": "samples_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "testset.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_270": {
                "variable": {
                    "value": "labels_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(testset.targets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_293": {
                "n": {
                    "value": "label.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_392": {
                "variable": {
                    "value": "tmp[n, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img[n, :].reshape(size0).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "cv2.resize(_tmp, tuple(size1)).reshape(-1)",
                            "Call"
                        ],
                        [
                            "img[n, :, :].reshape(size0).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "cv2.resize(_tmp.transpose(1, 2, 0), tuple(size))",
                            "Call"
                        ],
                        [
                            "_tmp.transpose(2, 0, 1).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_466": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:2] + (d,) + x.shape[2:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_471": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:3] + (d,) + x.shape[3:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_503": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:2] + (d,) + x.shape[2:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_508": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:3] + (d,) + x.shape[3:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cos_532": {
                "variable": {
                    "value": "vecs[:, n, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x * n * np.pi / 2 * theta_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_534": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:2] + (d,) + x.shape[2:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_539": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:3] + (d,) + x.shape[3:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_564": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:2] + (d,) + x.shape[2:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_571": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:3] + (d,) + x.shape[3:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_598": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:2] + (d,) + x.shape[2:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_600": {
                "variable": {
                    "value": "vecs[:, :, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x * theta_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_601": {
                "variable": {
                    "value": "vecs[:, :, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - x * theta_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_603": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:3] + (d,) + x.shape[3:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_605": {
                "variable": {
                    "value": "vecs[:, :, :, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x * theta_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_606": {
                "variable": {
                    "value": "vecs[:, :, :, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - x * theta_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_616": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_625": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abcd,acd->abcd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=1) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_627": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:2] + (d,) + x.shape[2:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_629": {
                "variable": {
                    "value": "vecs[:, :, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_634": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:3] + (d,) + x.shape[3:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_636": {
                "variable": {
                    "value": "vecs[:, :, :, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_656": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:2] + (d,) + x.shape[2:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_658": {
                "variable": {
                    "value": "vecs[:, :, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_661": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:3] + (d,) + x.shape[3:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_663": {
                "variable": {
                    "value": "vecs[:, :, :, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_674": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_685": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abcd,acd->abcd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=1) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_687": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:2] + (d,) + x.shape[2:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_691": {
                "variable": {
                    "value": "vecs[:, :, 2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_695": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:3] + (d,) + x.shape[3:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_699": {
                "variable": {
                    "value": "vecs[:, :, :, 2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_711": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_724": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abcd,acd->abcd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=1) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_726": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:2] + (d,) + x.shape[2:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_730": {
                "variable": {
                    "value": "vecs[:, :, 2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_731": {
                "variable": {
                    "value": "vecs[:, :, 3, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x * np.pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_735": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:3] + (d,) + x.shape[3:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_739": {
                "variable": {
                    "value": "vecs[:, :, :, 2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_740": {
                "variable": {
                    "value": "vecs[:, :, :, 3, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x * np.pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_752": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_763": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abcd,acd->abcd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=1) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_765": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:2] + (d,) + x.shape[2:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cos_769": {
                "variable": {
                    "value": "vecs[:, :, 2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_773": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:3] + (d,) + x.shape[3:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cos_777": {
                "variable": {
                    "value": "vecs[:, :, :, 2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_789": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_798": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abcd,acd->abcd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=1) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_800": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:2] + (d,) + x.shape[2:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_807": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:3] + (d,) + x.shape[3:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU6_822": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_831": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abcd,acd->abcd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=1) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_833": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:2] + (d,) + x.shape[2:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_840": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:3] + (d,) + x.shape[3:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "einsum_864": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abcd,acd->abcd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=1) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_866": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:2] + (d,) + x.shape[2:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_869": {
                "variable": {
                    "value": "vecs[:, :, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_873": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:3] + (d,) + x.shape[3:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_876": {
                "variable": {
                    "value": "vecs[:, :, :, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_897": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abcd,acd->abcd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=1) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_899": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:2] + (d,) + x.shape[2:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_901": {
                "variable": {
                    "value": "vecs[:, :, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_902": {
                "variable": {
                    "value": "vecs[:, :, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_906": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:3] + (d,) + x.shape[3:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_908": {
                "variable": {
                    "value": "vecs[:, :, :, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_909": {
                "variable": {
                    "value": "vecs[:, :, :, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_922": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_932": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abcd,acd->abcd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=1) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_934": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:2] + (d,) + x.shape[2:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_936": {
                "variable": {
                    "value": "vecs[:, :, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_937": {
                "variable": {
                    "value": "vecs[:, :, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_942": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:3] + (d,) + x.shape[3:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_944": {
                "variable": {
                    "value": "vecs[:, :, :, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_945": {
                "variable": {
                    "value": "vecs[:, :, :, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_966": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:2] + (d,) + x.shape[2:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_968": {
                "variable": {
                    "value": "vecs[:, :, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_971": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:3] + (d,) + x.shape[3:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "data_device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_973": {
                "variable": {
                    "value": "vecs[:, :, :, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[n * batch_size:min((n + 1) * batch_size, labels.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "x * alpha + beta",
                            "BinOp"
                        ],
                        [
                            "map_x_vector_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_h_reflect_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_shrink_taylor_from1(x, d, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos_sin(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_cos(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_vector_normalized_linear(x, d, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Relu6(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1Sigm(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelSigCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1RelCos(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_1MinusSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_TanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_RelTanSig(x, data_device, data_dtype, theta_max)",
                            "Call"
                        ],
                        [
                            "map_x_Vsigmoid(x, data_device, data_dtype)",
                            "Call"
                        ],
                        [
                            "fold_data_2d_order1(x, data_device, data_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_537": {
                "variable": {
                    "value": "vecs[:, :, n, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x * n * np.pi / 2 * theta_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_542": {
                "variable": {
                    "value": "vecs[:, :, :, n, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x * n * np.pi / 2 * theta_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_623": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_632": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abcde,abde->abcde",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=2) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_639": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abcdef,abcef->abcdef",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=3) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReLU_682": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_693": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abcde,abde->abcde",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=2) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_701": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abcdef,abcef->abcdef",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=3) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReLU_720": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_733": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abcde,abde->abcde",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=2) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_742": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abcdef,abcef->abcdef",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=3) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReLU_760": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_771": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abcde,abde->abcde",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=2) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_779": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abcdef,abcef->abcdef",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=3) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReLU_796": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_805": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abcde,abde->abcde",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=2) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_812": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abcdef,abcef->abcdef",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=3) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReLU6_829": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_838": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abcde,abde->abcde",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=2) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_845": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abcdef,abcef->abcdef",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=3) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_871": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abcde,abde->abcde",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=2) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_878": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abcdef,abcef->abcdef",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=3) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_904": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abcde,abde->abcde",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=2) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_911": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abcdef,abcef->abcdef",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=3) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReLU_930": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_940": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abcde,abde->abcde",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=2) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_948": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abcdef,abcef->abcdef",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vecs, 1 / (vecs.norm(dim=3) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sin_555": {
                "input": {
                    "value": "x * theta_max * np.pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_630": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_637": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_690": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_698": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_729": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_738": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_768": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_776": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_803": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_810": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU6_836": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU6_843": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_938": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_946": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cos_554": {
                "input": {
                    "value": "x * theta_max * np.pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_562": {
                "input": {
                    "value": "x * theta_max * np.pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_1110": {
                "input": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "open(os.path.join(path, file), 'wb')",
                            "Call"
                        ],
                        [
                            "open(path_file, 'rb')",
                            "Call"
                        ],
                        [
                            "data_loader[0][0].shape",
                            "Attribute"
                        ],
                        [
                            "data_loader[0][0].shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "tc.symeig(rho)[0]",
                            "Subscript"
                        ],
                        [
                            "s.reshape(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_561": {
                "input": {
                    "value": "x * theta_max * np.pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_569": {
                "input": {
                    "value": "x * theta_max * np.pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_576": {
                "input": {
                    "value": "x * theta_max * np.pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_568": {
                "input": {
                    "value": "x * theta_max * np.pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_575": {
                "input": {
                    "value": "x * theta_max * np.pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "BayesTN.py": {
        "torch": {}
    },
    "CollectedTNN.py": {
        "torch": {
            "tanh_76": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "tc.tanh(x)",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "tc.tanh(x)",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "nn.ReLU(inplace=True)(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "nn.Tanh()(x)",
                            "Call"
                        ],
                        [
                            "self.pre_process_data_dims(x)",
                            "Call"
                        ],
                        [
                            "self.layer0(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.pre_process_data_dims(x)",
                            "Call"
                        ],
                        [
                            "self.layer0(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "bf.pad_x_copy_one_line(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.layer5(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "nn.ReLU(inplace=True)(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "nn.Tanh()(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "nn.ReLU(inplace=True)(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "nn.Tanh()(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "nn.ReLU(inplace=True)(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "nn.Tanh()(x)",
                            "Call"
                        ],
                        [
                            "self.pre_process_data_dims(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.pre_process_data_dims(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "nn.ReLU(inplace=True)(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_145": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "tc.tanh(x)",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "tc.tanh(x)",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "nn.ReLU(inplace=True)(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "nn.Tanh()(x)",
                            "Call"
                        ],
                        [
                            "self.pre_process_data_dims(x)",
                            "Call"
                        ],
                        [
                            "self.layer0(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.pre_process_data_dims(x)",
                            "Call"
                        ],
                        [
                            "self.layer0(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "bf.pad_x_copy_one_line(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.layer5(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "nn.ReLU(inplace=True)(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "nn.Tanh()(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "nn.ReLU(inplace=True)(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "nn.Tanh()(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "nn.ReLU(inplace=True)(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "nn.Tanh()(x)",
                            "Call"
                        ],
                        [
                            "self.pre_process_data_dims(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.pre_process_data_dims(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "nn.ReLU(inplace=True)(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_208": {
                "variable": {
                    "value": "self.layer10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.channel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_268": {
                "variable": {
                    "value": "self.layer0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 16, kernel_size=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_273": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(16, 32, kernel_size=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_279": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, 64, kernel_size=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_284": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 128, kernel_size=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_290": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(128 * 4 * 4, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_355": {
                "variable": {
                    "value": "self.layer0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 5, kernel_size=2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_358": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(5, 20, kernel_size=2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_361": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(20, 100, kernel_size=2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_364": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(100, 200, kernel_size=2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_367": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(200, 400, kernel_size=2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_370": {
                "variable": {
                    "value": "self.layer5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(400, para_tn['channel'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_447": {
                "variable": {
                    "value": "self.layer10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.channel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_543": {
                "variable": {
                    "value": "self.layer10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.channel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_638": {
                "variable": {
                    "value": "self.layer10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.channel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_701": {
                "variable": {
                    "value": "self.layer0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 8, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_705": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(8, 16, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_709": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(16, 32, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_713": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, 64, kernel_size=2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_717": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 128, kernel_size=2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_721": {
                "variable": {
                    "value": "self.layer5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 256, kernel_size=2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_725": {
                "variable": {
                    "value": "self.layer6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256, 512, kernel_size=2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_729": {
                "variable": {
                    "value": "self.layer7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_775": {
                "variable": {
                    "value": "self.layer0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 8, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_779": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(8, 16, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_783": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(16, 32, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_814": {
                "variable": {
                    "value": "self.layer11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_234": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_269": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_270": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_271": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_274": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_275": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_276": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_277": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_280": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_281": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_282": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_285": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_286": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_287": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_288": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_291": {
                "in_features": {
                    "value": "128 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_292": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_293": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_294": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_295": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.channel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_356": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_359": {
                "in_channels": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_362": {
                "in_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_365": {
                "in_channels": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_368": {
                "in_channels": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_371": {
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "para_tn['channel']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tanh_372": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_477": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_480": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_572": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_575": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_667": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_670": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_702": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_703": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_706": {
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_707": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_710": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_711": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_714": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_715": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_718": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_719": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_722": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_723": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_726": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_727": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_730": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_731": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_732": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_733": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_734": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.channel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_735": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_776": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_777": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_780": {
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_781": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_784": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_815": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_816": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_817": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_818": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_819": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.channel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_820": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_853": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "MatrixProductState.py": {
        "torch": {
            "svd_442": {
                "variable": {
                    "value": "(tensor, lm, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tensor.reshape(s1[0] * s1[1], s1[2])",
                            "Call"
                        ],
                        [
                            "tensor[:, :dim].reshape(s1[0], s1[1], dim)",
                            "Call"
                        ],
                        [
                            "tensor.reshape(s1[0], s1[1] * s1[2])",
                            "Call"
                        ],
                        [
                            "tensor[:, :dim].transpose(1, 0).reshape(dim, s1[1], s1[2])",
                            "Call"
                        ],
                        [
                            "tensor[:, :, :chi]",
                            "Subscript"
                        ],
                        [
                            "tensor[:chi, :, :]",
                            "Subscript"
                        ],
                        [
                            "tensor[:, :, :chi]",
                            "Subscript"
                        ],
                        [
                            "tensor[:chi, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "einsum_443": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "a,ba->ba",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "lm[:dim]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "qr_446": {
                "variable": {
                    "value": "(tensor, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tensor.reshape(s1[0] * s1[1], s1[2])",
                            "Call"
                        ],
                        [
                            "tensor[:, :dim].reshape(s1[0], s1[1], dim)",
                            "Call"
                        ],
                        [
                            "tensor.reshape(s1[0], s1[1] * s1[2])",
                            "Call"
                        ],
                        [
                            "tensor[:, :dim].transpose(1, 0).reshape(dim, s1[1], s1[2])",
                            "Call"
                        ],
                        [
                            "tensor[:, :, :chi]",
                            "Subscript"
                        ],
                        [
                            "tensor[:chi, :, :]",
                            "Subscript"
                        ],
                        [
                            "tensor[:, :, :chi]",
                            "Subscript"
                        ],
                        [
                            "tensor[:chi, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_447": {
                "variable": {
                    "value": "lm",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "svd_459": {
                "variable": {
                    "value": "(tensor, lm, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_460": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "a,ba->ba",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "lm[:dim]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "qr_463": {
                "variable": {
                    "value": "(tensor, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_464": {
                "variable": {
                    "value": "lm",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_69": {
                "variable": {
                    "value": "self.tensors[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.tensors[n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_277": {
                "variable": {
                    "value": "self.tensors[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.tensors[n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_237": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_339": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_394": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_429": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_90": {
                "variable": {
                    "value": "self.tensors[n + 1].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "equation": {
                    "value": "aib,ax->xib",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.tensors[n + 1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_96": {
                "variable": {
                    "value": "self.tensors[n + 1].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "equation": {
                    "value": "aib,ax->xib",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.tensors[n + 1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_135": {
                "variable": {
                    "value": "self.tensors[n + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "aib,ax->xib",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.tensors[n + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_141": {
                "variable": {
                    "value": "self.tensors[n + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "aib,ax->xib",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.tensors[n + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_299": {
                "variable": {
                    "value": "self.tensors[n + 1].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "equation": {
                    "value": "aib,ax->xib",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.tensors[n + 1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_305": {
                "variable": {
                    "value": "self.tensors[n + 1].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "equation": {
                    "value": "aib,ax->xib",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.tensors[n + 1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_345": {
                "variable": {
                    "value": "self.tensors[n + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "aib,ax->xib",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.tensors[n + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_351": {
                "variable": {
                    "value": "self.tensors[n + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "aib,ax->xib",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.tensors[n + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_108": {
                "variable": {
                    "value": "self.tensors[n - 1].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "equation": {
                    "value": "aib,bx->aix",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.tensors[n - 1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_114": {
                "variable": {
                    "value": "self.tensors[n - 1].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "equation": {
                    "value": "aib,bx->aix",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.tensors[n - 1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_153": {
                "variable": {
                    "value": "self.tensors[n - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "aib,bx->aix",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.tensors[n - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_159": {
                "variable": {
                    "value": "self.tensors[n - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "aib,bx->aix",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.tensors[n - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_317": {
                "variable": {
                    "value": "self.tensors[n - 1].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "equation": {
                    "value": "aib,bx->aix",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.tensors[n - 1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_323": {
                "variable": {
                    "value": "self.tensors[n - 1].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "equation": {
                    "value": "aib,bx->aix",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.tensors[n - 1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_363": {
                "variable": {
                    "value": "self.tensors[n - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "aib,bx->aix",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.tensors[n - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_369": {
                "variable": {
                    "value": "self.tensors[n - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "aib,bx->aix",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.tensors[n - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_100": {
                "input": {
                    "value": "self.tensors[n + 1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_145": {
                "input": {
                    "value": "self.tensors[n + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_309": {
                "input": {
                    "value": "self.tensors[n + 1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_355": {
                "input": {
                    "value": "self.tensors[n + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_118": {
                "input": {
                    "value": "self.tensors[n - 1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_163": {
                "input": {
                    "value": "self.tensors[n - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_327": {
                "input": {
                    "value": "self.tensors[n - 1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_373": {
                "input": {
                    "value": "self.tensors[n - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "PlotFun.py": {
        "torch": {}
    },
    "TNNalgorithms.py": {
        "torch": {
            "rand_418": {
                "variable": {
                    "value": "imgs_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(para_g['num_samples'], 1) + (para['img_size'], round(para['img_size'][1] / 2))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "para_g['device']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "parameters_bayes_generator()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tc.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_421": {
                "variable": {
                    "value": "imgs_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "{imgs_var}",
                    "type": "Set",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_436": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tne.add_linear_gaussian_noise(imgs, para['linear_gauss_noise'])",
                            "Call"
                        ],
                        [
                            "test_loader[0][0][:para_g['num_samples'], :, 0, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_443": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tne.add_linear_gaussian_noise(imgs, para['linear_gauss_noise'])",
                            "Call"
                        ],
                        [
                            "test_loader[0][0][:para_g['num_samples'], :, 0, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_425": {
                "*size": {
                    "value": "(para_g['num_samples'],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "para_g['device']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "parameters_bayes_generator()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tc.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_435": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_280": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nc,c->nc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tn(imgs)",
                            "Call"
                        ],
                        [
                            "tc.einsum('nc,c->nc', y, 1 / (norm_t + 1e-12))",
                            "Call"
                        ],
                        [
                            "activate_func(y)",
                            "Call"
                        ],
                        [
                            "tc.sigmoid(imgs)",
                            "Call"
                        ],
                        [
                            "tn(y)",
                            "Call"
                        ],
                        [
                            "tc.sigmoid(imgs)",
                            "Call"
                        ],
                        [
                            "tn(y)",
                            "Call"
                        ],
                        [
                            "nn.LogSoftmax(dim=1)(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_439": {
                "input": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tne.add_linear_gaussian_noise(imgs, para['linear_gauss_noise'])",
                            "Call"
                        ],
                        [
                            "test_loader[0][0][:para_g['num_samples'], :, 0, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "LogSoftmax_448": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_449": {
                "input": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tne.add_linear_gaussian_noise(imgs, para['linear_gauss_noise'])",
                            "Call"
                        ],
                        [
                            "test_loader[0][0][:para_g['num_samples'], :, 0, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_454": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_284": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_313": {
                "variable": {
                    "value": "inner",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ac,ac->a",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[x.data.view(-1, s[-1]), x.grad.data.view(-1, s[-1])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_319": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ab,a->ab",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[grad, 1 / norm]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_324": {
                "variable": {
                    "value": "x.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "equation": {
                    "value": "ab,a->ab",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[x.data.view(-1, s[-1]), 1 / norm.view(-1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_315": {
                "equation": {
                    "value": "a,ab->ab",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[inner, x.data.view(-1, s[-1])]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "TensorNetworkExpasion.py": {
        "torch": {
            "einsum_2278": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abcde,a->abcde",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[x, (norm + 1e-12) ** (-1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MSELoss_2446": {
                "variable": {
                    "value": "loss_func",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_2447": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "mps.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "para['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ],
                        [
                            "dict()",
                            "Call"
                        ],
                        [
                            "dict()",
                            "Call"
                        ],
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_2480": {
                "variable": {
                    "value": "loss_func",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_2531": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "mps.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "para['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ],
                        [
                            "dict()",
                            "Call"
                        ],
                        [
                            "dict()",
                            "Call"
                        ],
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_2532": {
                "variable": {
                    "value": "loss_func",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_2536": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x0.numel(), para['l'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "dev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bf.choose_device()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tc.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Adam_2586": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "mps.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "para['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ],
                        [
                            "dict()",
                            "Call"
                        ],
                        [
                            "dict()",
                            "Call"
                        ],
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_2588": {
                "variable": {
                    "value": "loss_func",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_53": {
                "variable": {
                    "value": "self.tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.tensors.to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_59": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], self.d)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_180": {
                "variable": {
                    "value": "self.tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.tensors.type(self.para_mps['dtype']).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_200": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], self.d, self.length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_207": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.size()[0], self.d, self.length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_222": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], self.d, x.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_224": {
                "variable": {
                    "value": "vecs[:, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x * theta_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_225": {
                "variable": {
                    "value": "vecs[:, 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - x * theta_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_301": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ni,na,aib->nb",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "vecs[:, :, nt]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_448": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], self.d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.data_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.data_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_459": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], self.d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.data_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.data_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_471": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.size()[0], self.d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.data_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.data_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_492": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], self.d) + x.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.data_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.data_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_569": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ni,nca,caib->ncb",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "vecs[:, :, nt]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_751": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nca,caib,ni->ncb",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tc.exp(x)",
                            "Call"
                        ],
                        [
                            "y * norm",
                            "BinOp"
                        ],
                        [
                            "tn(imgs).squeeze()",
                            "Call"
                        ],
                        [
                            "tc.einsum('nc,c->nc', y, 1 / (norm_t + 1e-12))",
                            "Call"
                        ],
                        [
                            "activate_func(y)",
                            "Call"
                        ],
                        [
                            "mps(vecs)",
                            "Call"
                        ],
                        [
                            "mps(vecs, False, 'env', n)",
                            "Call"
                        ],
                        [
                            "mps(vecs, False, 'env', n)",
                            "Call"
                        ],
                        [
                            "mps(x=vecs, para=para_fw)",
                            "Call"
                        ],
                        [
                            "mps(para_fw, imgs)",
                            "Call"
                        ],
                        [
                            "para['activate_fun_final'](y)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((vecs.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', self.envl[nt], self.mps.tensors[nt], self.envr[nt], vecs)",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,na,aib->nb', vecs, y, self.mps.tensors[n])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,na,aib->nb', vecs[:, :, nt], y, self.mps.tensors[nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "y / norm",
                            "BinOp"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt] / (tc.norm(self.mps.tensors[nt]) + 1e-12), env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt], env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.calculate_y(x, env=env, feature_map=para['feature_map'], get_grad_way=para['get_grad_way'], activate=para['activate'], nt=n, normalize_center=para['normalize_center'])",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_by_env(nt, x, env, normalize_t=normalize_center)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((x.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,nca,caib->ncb', vecs[:, :, nt], y, self.mps.tensors[nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt] / (tc.norm(self.mps.tensors[nt]) + 1e-12), env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt], env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.calculate_y(x, env=env, feature_map=para['feature_map'], get_grad_way=para['get_grad_way'], activate=para['activate'], nt=n, normalize_center=para['normalize_center'])",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.mps.tensors[0].shape[1]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_by_env(nt, x, env, normalize_t=normalize_center)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.mps.tensors[0].shape[1]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('nca,caib,ni->ncb', y, self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_simple(nt, x, y, activate=activate, normalize=False)[0]",
                            "Subscript"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.ones((self.channel, self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('cad,caib,cdie->cbe', [y, self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]])",
                            "Call"
                        ],
                        [
                            "tc.einsum('cad,c->cad', y, 1 / norm)",
                            "Call"
                        ],
                        [
                            "[tc.ones((self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)]",
                            "List"
                        ],
                        [
                            "[tc.ones((self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)]",
                            "List"
                        ],
                        [
                            "tc.einsum('ncr,ncl->nc', [yl, yr])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ncr,ncl->nc', [yl, yr])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_764": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], self.channel, self.dims[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.data_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.data_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_796": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.channel, self.dims[0], self.dims[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.data_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.data_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_936": {
                "variable": {
                    "value": "self.tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.data_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_937": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.data_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_985": {
                "variable": {
                    "value": "self.tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "imgs - imgs1[n, :, :, :].repeat(s[0], 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "tc.cos(tmp * theta_m * np.pi / 2)",
                            "Call"
                        ],
                        [
                            "tc.log(tmp + 1e-10).sum() / s[0]",
                            "BinOp"
                        ],
                        [
                            "tensors[c, n, :dims[n], :, :dims[n + 1]]",
                            "Subscript"
                        ],
                        [
                            "tc.qr(tmp.reshape(-1, tmp.shape[2]))[0]",
                            "Subscript"
                        ],
                        [
                            "tensors[c, length - 1, :dims[length - 1], :, :dims[length]]",
                            "Subscript"
                        ],
                        [
                            "tc.einsum('na,ni,aib->nb', env['l'][n], vecs[:, :, n], self.mps.tensors[n])",
                            "Call"
                        ],
                        [
                            "tmp / tc.norm(tmp)",
                            "BinOp"
                        ],
                        [
                            "tc.einsum('na,ni,aib->nb', env['l'][n], vecs[:, :, n], self.mps.tensors[n])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ad,caib,cdie->be', [y[-1], self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ad,caib,cdie->be', [y[-1], tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]])",
                            "Call"
                        ],
                        [
                            "tc.zeros(shape_t, device=self.data_device, dtype=self.data_dtype) * 1e-08",
                            "BinOp"
                        ],
                        [
                            "tc.rand(shape_t, device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.randn(shape_t, device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.randn(shape_t, device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(self.state_dict()[x].data)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_1160": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num, self.c_out, self.dout, sx1, sy1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1232": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num, self.c_out, self.dout, sx1, sy1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1315": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num, self.c_out, self.dout, sx1, sy1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1385": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num, self.c_out, self.dout, sx1, sy1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1468": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num, self.c_out, self.dout, sx1, sy1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1548": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num, self.c_out, self.dout, sx1, sy1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_2190": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "step": {
                    "value": "2 / num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "dev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bf.choose_device()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tc.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "exp_2191": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tc.arange(-1, 1, 2 / num, device=dev, dtype=dtp)",
                            "Call"
                        ],
                        [
                            "x.cpu()",
                            "Call"
                        ],
                        [
                            "x.numpy()",
                            "Call"
                        ],
                        [
                            "eval('tn.' + tn.layers_group[n][m] + '.parameters()')",
                            "Call"
                        ],
                        [
                            "eval('tn.' + tn.layers_group[n][m] + '.parameters()')",
                            "Call"
                        ],
                        [
                            "tc.einsum('abcde,a->abcde', [x, (norm + 1e-12) ** (-1)])",
                            "Call"
                        ],
                        [
                            "tc.zeros((x0.numel(), para['l']), device=dev, dtype=dtp)",
                            "Call"
                        ],
                        [
                            "para0",
                            "Name"
                        ],
                        [
                            "self.map_x_vector_taylor(x)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_cos_sin(x)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_normalized_linear(x)",
                            "Call"
                        ],
                        [
                            "self.feature_map(x, f_map=feature_map)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_taylor(x)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_cos_sin(x)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_cos(x)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_normalized_linear(x)",
                            "Call"
                        ],
                        [
                            "self.feature_map(x, f_map=feature_map)",
                            "Call"
                        ],
                        [
                            "para0",
                            "Name"
                        ],
                        [
                            "para0",
                            "Name"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "bf.feature_map(x, self.d, self.f_map, self.data_device, self.data_dtype, self.theta_m)",
                            "Call"
                        ],
                        [
                            "x.view(s[0], s[1], s[2] * s[3], s[4], s[5])",
                            "Call"
                        ],
                        [
                            "x.view(s[0], s[1] * s[2], s[3], s[4])",
                            "Call"
                        ],
                        [
                            "layers_correspond",
                            "Name"
                        ],
                        [
                            "layers_correspond",
                            "Name"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "self.state_dict()",
                            "Call"
                        ],
                        [
                            "x.split('.')[0]",
                            "Subscript"
                        ],
                        [
                            "self.state_dict()",
                            "Call"
                        ],
                        [
                            "x.split('.')[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(s[0], s[1], 1, s[2], s[3])",
                            "Call"
                        ],
                        [
                            "x.view(s[0], s[1] * s[2], s[3], s[4])",
                            "Call"
                        ],
                        [
                            "self.state_dict()",
                            "Call"
                        ],
                        [
                            "self.state_dict()",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "tc.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "tc.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "tc.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "Vdim_to_norm(x, self.p)",
                            "Call"
                        ],
                        [
                            "tc.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "Vdim_to_norm(x, self.p)",
                            "Call"
                        ],
                        [
                            "tc.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_82": {
                "variable": {
                    "value": "self.envr[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_s, self.mps.tensors[-1].shape[2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_93": {
                "variable": {
                    "value": "self.envl[nt + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "na,ni,aib->nb",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.envl[nt]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_107": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(vecs.shape[0], self.mps.tensors[0].shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_172": {
                "variable": {
                    "value": "self.tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.length, self.chi, self.d, self.chi)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_249": {
                "variable": {
                    "value": "env[l][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(vecs.shape[0], self.mps.tensors[0].shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_260": {
                "variable": {
                    "value": "env[r][-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(vecs.shape[0], self.mps.tensors[-1].shape[2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_276": {
                "variable": {
                    "value": "env[nt + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "na,ni,aib->nb",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.envl[nt]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_315": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "na,aib,nb,ni->n",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "env['l'][nt]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_320": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "na,aib,nb,ni->n",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "env['l'][nt]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_343": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], self.mps.tensors[0].shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_358": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], self.mps.tensors[0].shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_430": {
                "variable": {
                    "value": "self.tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.tensors.type(self.data_dtype).to(self.data_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_434": {
                "variable": {
                    "value": "self.tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "tensors.to(self.data_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_495": {
                "variable": {
                    "value": "vecs[:, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x * theta_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_496": {
                "variable": {
                    "value": "vecs[:, 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - x * theta_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_498": {
                "variable": {
                    "value": "vecs[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x * theta_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_499": {
                "variable": {
                    "value": "vecs[:, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - x * theta_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_526": {
                "variable": {
                    "value": "env[l][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(vecs.shape[0], self.mps.tensors[0].shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.data_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.data_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_537": {
                "variable": {
                    "value": "env[r][-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(vecs.shape[0], self.mps.tensors[-1].shape[2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.data_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.data_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_554": {
                "variable": {
                    "value": "env[nt + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "na,ni,aib->nb",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.envl[nt]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_585": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "na,aib,nb,ni->n",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "env['l'][nt]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_590": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "na,aib,nb,ni->n",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "env['l'][nt]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_607": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], self.channel, self.mps.tensors[0].shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.data_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.data_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_623": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], self.channel, self.mps.tensors[0].shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.data_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.data_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_727": {
                "variable": {
                    "value": "self.tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.tensors.type(self.data_dtype).to(self.data_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_730": {
                "variable": {
                    "value": "self.tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.channel, self.length, self.chi, self.d, self.chi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.data_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.data_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_735": {
                "variable": {
                    "value": "self.tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.tensors.to(self.data_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_799": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "cad,caib,cdie->cbe",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[y, self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_989": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_1048": {
                "variable": {
                    "value": "yl",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ncd,cdr->ncr",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[x[:, :, :, 0, 0], self.tensors[:, 0, 0, :, :]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_1066": {
                "variable": {
                    "value": "yr",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ncd,cdl->ncl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[x[:, :, :, -1, -1], self.tensors[:, 0, :, :, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_1079": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ncr,ncl->nc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[yl, yr]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_1081": {
                "variable": {
                    "value": "yl",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ncd,chdr->nhr",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[x[:, :, :, 0, 0], self.tensors[:, :, 0, 0, :, :]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_1095": {
                "variable": {
                    "value": "yr",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ncd,chdl->nhl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[x[:, :, :, -1, -1], self.tensors[:, :, 0, :, :, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_1108": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ncr,ncl->nc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[yl, yr]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cos_2295": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp * theta_m * np.pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_2369": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_2400": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_2411": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_76": {
                "variable": {
                    "value": "env",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "na, ni,aib->nb",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.envl[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_77": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "env",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tc.einsum('na, ni,aib->nb', self.envl[-1], vecs, self.mps.tensors[n])",
                            "Call"
                        ],
                        [
                            "env / (norm + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "dict()",
                            "Call"
                        ],
                        [
                            "dict()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_85": {
                "variable": {
                    "value": "self.envr[n - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "nb,ni,aib->na",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.envr[n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_87": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.envr[n - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_99": {
                "variable": {
                    "value": "self.envr[nt - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "nb,ni,aib->na",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.envr[nt]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_110": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ni,na,aib->nb",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mps.map_x_vector_taylor(x)",
                            "Call"
                        ],
                        [
                            "mps.map_x_vector_taylor(x)",
                            "Call"
                        ],
                        [
                            "mps.feature_map(x, para['feature_map'])",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.d), dtype=self.dtype, device=self.device)",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.d, self.length), dtype=self.dtype, device=self.device)",
                            "Call"
                        ],
                        [
                            "tc.ones((x.size()[0], self.d, self.length), dtype=self.dtype, device=self.device)",
                            "Call"
                        ],
                        [
                            "tc.zeros((x.shape[0], self.d, x.shape[1]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "self.feature_map(imgs, f_map)",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.d) + x.shape[1:], dtype=self.data_dtype, device=self.data_device)",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.d) + x.shape[1:], dtype=self.data_dtype, device=self.data_device)",
                            "Call"
                        ],
                        [
                            "tc.ones((x.size()[0], self.d) + x.shape[1:], dtype=self.data_dtype, device=self.data_device)",
                            "Call"
                        ],
                        [
                            "tc.zeros((x.shape[0], self.d) + x.shape[1:], device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "self.feature_map(imgs, f_map)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_116": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "na,aib,nb,ni->n",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.envl[nt]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_123": {
                "input": {
                    "value": "y - y_true",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_175": {
                "variable": {
                    "value": "self.tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.length, self.chi, self.d, self.chi)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_252": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "na,ni,aib->nb",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "env['l'][n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_264": {
                "variable": {
                    "value": "env[r][n - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "nb,ni,aib->na",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "env['r'][n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_284": {
                "variable": {
                    "value": "env[nt - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "nb,ni,aib->na",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.envr[nt]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_308": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tc.exp(x)",
                            "Call"
                        ],
                        [
                            "y * norm",
                            "BinOp"
                        ],
                        [
                            "tn(imgs).squeeze()",
                            "Call"
                        ],
                        [
                            "tc.einsum('nc,c->nc', y, 1 / (norm_t + 1e-12))",
                            "Call"
                        ],
                        [
                            "activate_func(y)",
                            "Call"
                        ],
                        [
                            "mps(vecs)",
                            "Call"
                        ],
                        [
                            "mps(vecs, False, 'env', n)",
                            "Call"
                        ],
                        [
                            "mps(vecs, False, 'env', n)",
                            "Call"
                        ],
                        [
                            "mps(x=vecs, para=para_fw)",
                            "Call"
                        ],
                        [
                            "mps(para_fw, imgs)",
                            "Call"
                        ],
                        [
                            "para['activate_fun_final'](y)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((vecs.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', self.envl[nt], self.mps.tensors[nt], self.envr[nt], vecs)",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,na,aib->nb', vecs, y, self.mps.tensors[n])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,na,aib->nb', vecs[:, :, nt], y, self.mps.tensors[nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "y / norm",
                            "BinOp"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt] / (tc.norm(self.mps.tensors[nt]) + 1e-12), env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt], env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.calculate_y(x, env=env, feature_map=para['feature_map'], get_grad_way=para['get_grad_way'], activate=para['activate'], nt=n, normalize_center=para['normalize_center'])",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_by_env(nt, x, env, normalize_t=normalize_center)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((x.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,nca,caib->ncb', vecs[:, :, nt], y, self.mps.tensors[nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt] / (tc.norm(self.mps.tensors[nt]) + 1e-12), env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt], env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.calculate_y(x, env=env, feature_map=para['feature_map'], get_grad_way=para['get_grad_way'], activate=para['activate'], nt=n, normalize_center=para['normalize_center'])",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.mps.tensors[0].shape[1]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_by_env(nt, x, env, normalize_t=normalize_center)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.mps.tensors[0].shape[1]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('nca,caib,ni->ncb', y, self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_simple(nt, x, y, activate=activate, normalize=False)[0]",
                            "Subscript"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.ones((self.channel, self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('cad,caib,cdie->cbe', [y, self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]])",
                            "Call"
                        ],
                        [
                            "tc.einsum('cad,c->cad', y, 1 / norm)",
                            "Call"
                        ],
                        [
                            "[tc.ones((self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)]",
                            "List"
                        ],
                        [
                            "[tc.ones((self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)]",
                            "List"
                        ],
                        [
                            "tc.einsum('ncr,ncl->nc', [yl, yr])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ncr,ncl->nc', [yl, yr])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_308": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_328": {
                "input": {
                    "value": "(y.squeeze() - y_true.type(y.dtype)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_357": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_380": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_384": {
                "variable": {
                    "value": "y1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y1, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_423": {
                "variable": {
                    "value": "self.tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "tensor_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(self.channel, self.length, self.chi, self.d, self.chi)",
                            "Tuple"
                        ],
                        [
                            "(self.channel, self.length, self.chi, self.d, self.chi)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "cos_463": {
                "variable": {
                    "value": "vecs[:, n, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x * n * np.pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_466": {
                "variable": {
                    "value": "vecs[:, n, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x * n * np.pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_524": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_529": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "na,ni,aib->nb",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "env['l'][n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_541": {
                "variable": {
                    "value": "env[r][n - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "nb,ni,aib->na",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "env['r'][n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_553": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_563": {
                "variable": {
                    "value": "env[nt - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "nb,ni,aib->na",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.envr[nt]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_622": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_674": {
                "input": {
                    "value": "(y.squeeze() - y_true.type(y.dtype)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_679": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_713": {
                "variable": {
                    "value": "self.tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "tensor_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(self.channel, self.length, self.chi, self.d, self.chi)",
                            "Tuple"
                        ],
                        [
                            "(self.channel, self.length, self.chi, self.d, self.chi)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "no_grad_772": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_774": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], self.channel, self.dims[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.data_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.data_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_819": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_831": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.dims[self.length], self.dims[self.length])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.data_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.data_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_859": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.dims[self.length], self.dims[self.length])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.data_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.data_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_919": {
                "input": {
                    "value": "(y.squeeze() - y_true.type(y.dtype)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_950": {
                "variable": {
                    "value": "tmp[:, :, :, :, 1, 0, 0, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "tmp[:, :, :, :, 1, 0, 0, 0, :].shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.data_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.data_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_953": {
                "variable": {
                    "value": "tmp[:, :, :, :, 0, 1, 0, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "tmp[:, :, :, :, 1, 0, 0, 0, :].shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.data_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.data_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_956": {
                "variable": {
                    "value": "tmp[:, :, :, :, 0, 0, 1, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "tmp[:, :, :, :, 1, 0, 0, 0, :].shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.data_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.data_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_959": {
                "variable": {
                    "value": "tmp[:, :, :, :, 0, 0, 0, 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "tmp[:, :, :, :, 1, 0, 0, 0, :].shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.data_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.data_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_980": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.data_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.data_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_983": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.data_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.data_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_1001": {
                "variable": {
                    "value": "tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "exp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'tc.optim.' + which + '(' + model_name + \".parameters(), lr=para['lr'])\"",
                            "BinOp"
                        ],
                        [
                            "''",
                            "Constant"
                        ],
                        [
                            "exp + (',' + exp[:-1] + '->' + exp)",
                            "BinOp"
                        ],
                        [
                            "':, ' * self.state_dict()[x].ndimension()",
                            "BinOp"
                        ],
                        [
                            "exp[:-1]",
                            "Subscript"
                        ],
                        [
                            "'self.state_dict()[x].data[' + exp + '] = tensors.data'",
                            "BinOp"
                        ],
                        [
                            "''",
                            "Constant"
                        ],
                        [
                            "''",
                            "Constant"
                        ]
                    ]
                },
                "*operands": {
                    "value": "[self.tensors.abs(), 1 / (norm + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_1790": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_1962": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tc.arange(-1, 1, 2 / num, device=dev, dtype=dtp)",
                            "Call"
                        ],
                        [
                            "x.cpu()",
                            "Call"
                        ],
                        [
                            "x.numpy()",
                            "Call"
                        ],
                        [
                            "eval('tn.' + tn.layers_group[n][m] + '.parameters()')",
                            "Call"
                        ],
                        [
                            "eval('tn.' + tn.layers_group[n][m] + '.parameters()')",
                            "Call"
                        ],
                        [
                            "tc.einsum('abcde,a->abcde', [x, (norm + 1e-12) ** (-1)])",
                            "Call"
                        ],
                        [
                            "tc.zeros((x0.numel(), para['l']), device=dev, dtype=dtp)",
                            "Call"
                        ],
                        [
                            "para0",
                            "Name"
                        ],
                        [
                            "self.map_x_vector_taylor(x)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_cos_sin(x)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_normalized_linear(x)",
                            "Call"
                        ],
                        [
                            "self.feature_map(x, f_map=feature_map)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_taylor(x)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_cos_sin(x)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_cos(x)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_normalized_linear(x)",
                            "Call"
                        ],
                        [
                            "self.feature_map(x, f_map=feature_map)",
                            "Call"
                        ],
                        [
                            "para0",
                            "Name"
                        ],
                        [
                            "para0",
                            "Name"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "bf.feature_map(x, self.d, self.f_map, self.data_device, self.data_dtype, self.theta_m)",
                            "Call"
                        ],
                        [
                            "x.view(s[0], s[1], s[2] * s[3], s[4], s[5])",
                            "Call"
                        ],
                        [
                            "x.view(s[0], s[1] * s[2], s[3], s[4])",
                            "Call"
                        ],
                        [
                            "layers_correspond",
                            "Name"
                        ],
                        [
                            "layers_correspond",
                            "Name"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "self.state_dict()",
                            "Call"
                        ],
                        [
                            "x.split('.')[0]",
                            "Subscript"
                        ],
                        [
                            "self.state_dict()",
                            "Call"
                        ],
                        [
                            "x.split('.')[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(s[0], s[1], 1, s[2], s[3])",
                            "Call"
                        ],
                        [
                            "x.view(s[0], s[1] * s[2], s[3], s[4])",
                            "Call"
                        ],
                        [
                            "self.state_dict()",
                            "Call"
                        ],
                        [
                            "self.state_dict()",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "tc.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "tc.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "tc.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "Vdim_to_norm(x, self.p)",
                            "Call"
                        ],
                        [
                            "tc.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "Vdim_to_norm(x, self.p)",
                            "Call"
                        ],
                        [
                            "tc.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_2013": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tc.arange(-1, 1, 2 / num, device=dev, dtype=dtp)",
                            "Call"
                        ],
                        [
                            "x.cpu()",
                            "Call"
                        ],
                        [
                            "x.numpy()",
                            "Call"
                        ],
                        [
                            "eval('tn.' + tn.layers_group[n][m] + '.parameters()')",
                            "Call"
                        ],
                        [
                            "eval('tn.' + tn.layers_group[n][m] + '.parameters()')",
                            "Call"
                        ],
                        [
                            "tc.einsum('abcde,a->abcde', [x, (norm + 1e-12) ** (-1)])",
                            "Call"
                        ],
                        [
                            "tc.zeros((x0.numel(), para['l']), device=dev, dtype=dtp)",
                            "Call"
                        ],
                        [
                            "para0",
                            "Name"
                        ],
                        [
                            "self.map_x_vector_taylor(x)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_cos_sin(x)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_normalized_linear(x)",
                            "Call"
                        ],
                        [
                            "self.feature_map(x, f_map=feature_map)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_taylor(x)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_cos_sin(x)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_cos(x)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_normalized_linear(x)",
                            "Call"
                        ],
                        [
                            "self.feature_map(x, f_map=feature_map)",
                            "Call"
                        ],
                        [
                            "para0",
                            "Name"
                        ],
                        [
                            "para0",
                            "Name"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "bf.feature_map(x, self.d, self.f_map, self.data_device, self.data_dtype, self.theta_m)",
                            "Call"
                        ],
                        [
                            "x.view(s[0], s[1], s[2] * s[3], s[4], s[5])",
                            "Call"
                        ],
                        [
                            "x.view(s[0], s[1] * s[2], s[3], s[4])",
                            "Call"
                        ],
                        [
                            "layers_correspond",
                            "Name"
                        ],
                        [
                            "layers_correspond",
                            "Name"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "self.state_dict()",
                            "Call"
                        ],
                        [
                            "x.split('.')[0]",
                            "Subscript"
                        ],
                        [
                            "self.state_dict()",
                            "Call"
                        ],
                        [
                            "x.split('.')[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(s[0], s[1], 1, s[2], s[3])",
                            "Call"
                        ],
                        [
                            "x.view(s[0], s[1] * s[2], s[3], s[4])",
                            "Call"
                        ],
                        [
                            "self.state_dict()",
                            "Call"
                        ],
                        [
                            "self.state_dict()",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "tc.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "tc.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "tc.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "Vdim_to_norm(x, self.p)",
                            "Call"
                        ],
                        [
                            "tc.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "Vdim_to_norm(x, self.p)",
                            "Call"
                        ],
                        [
                            "tc.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_2064": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tc.arange(-1, 1, 2 / num, device=dev, dtype=dtp)",
                            "Call"
                        ],
                        [
                            "x.cpu()",
                            "Call"
                        ],
                        [
                            "x.numpy()",
                            "Call"
                        ],
                        [
                            "eval('tn.' + tn.layers_group[n][m] + '.parameters()')",
                            "Call"
                        ],
                        [
                            "eval('tn.' + tn.layers_group[n][m] + '.parameters()')",
                            "Call"
                        ],
                        [
                            "tc.einsum('abcde,a->abcde', [x, (norm + 1e-12) ** (-1)])",
                            "Call"
                        ],
                        [
                            "tc.zeros((x0.numel(), para['l']), device=dev, dtype=dtp)",
                            "Call"
                        ],
                        [
                            "para0",
                            "Name"
                        ],
                        [
                            "self.map_x_vector_taylor(x)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_cos_sin(x)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_normalized_linear(x)",
                            "Call"
                        ],
                        [
                            "self.feature_map(x, f_map=feature_map)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_taylor(x)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_cos_sin(x)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_cos(x)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_normalized_linear(x)",
                            "Call"
                        ],
                        [
                            "self.feature_map(x, f_map=feature_map)",
                            "Call"
                        ],
                        [
                            "para0",
                            "Name"
                        ],
                        [
                            "para0",
                            "Name"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "bf.feature_map(x, self.d, self.f_map, self.data_device, self.data_dtype, self.theta_m)",
                            "Call"
                        ],
                        [
                            "x.view(s[0], s[1], s[2] * s[3], s[4], s[5])",
                            "Call"
                        ],
                        [
                            "x.view(s[0], s[1] * s[2], s[3], s[4])",
                            "Call"
                        ],
                        [
                            "layers_correspond",
                            "Name"
                        ],
                        [
                            "layers_correspond",
                            "Name"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "self.state_dict()",
                            "Call"
                        ],
                        [
                            "x.split('.')[0]",
                            "Subscript"
                        ],
                        [
                            "self.state_dict()",
                            "Call"
                        ],
                        [
                            "x.split('.')[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(s[0], s[1], 1, s[2], s[3])",
                            "Call"
                        ],
                        [
                            "x.view(s[0], s[1] * s[2], s[3], s[4])",
                            "Call"
                        ],
                        [
                            "self.state_dict()",
                            "Call"
                        ],
                        [
                            "self.state_dict()",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "tc.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "tc.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "tc.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "Vdim_to_norm(x, self.p)",
                            "Call"
                        ],
                        [
                            "tc.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "Vdim_to_norm(x, self.p)",
                            "Call"
                        ],
                        [
                            "tc.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_2118": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tc.arange(-1, 1, 2 / num, device=dev, dtype=dtp)",
                            "Call"
                        ],
                        [
                            "x.cpu()",
                            "Call"
                        ],
                        [
                            "x.numpy()",
                            "Call"
                        ],
                        [
                            "eval('tn.' + tn.layers_group[n][m] + '.parameters()')",
                            "Call"
                        ],
                        [
                            "eval('tn.' + tn.layers_group[n][m] + '.parameters()')",
                            "Call"
                        ],
                        [
                            "tc.einsum('abcde,a->abcde', [x, (norm + 1e-12) ** (-1)])",
                            "Call"
                        ],
                        [
                            "tc.zeros((x0.numel(), para['l']), device=dev, dtype=dtp)",
                            "Call"
                        ],
                        [
                            "para0",
                            "Name"
                        ],
                        [
                            "self.map_x_vector_taylor(x)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_cos_sin(x)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_normalized_linear(x)",
                            "Call"
                        ],
                        [
                            "self.feature_map(x, f_map=feature_map)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_taylor(x)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_cos_sin(x)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_cos(x)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_normalized_linear(x)",
                            "Call"
                        ],
                        [
                            "self.feature_map(x, f_map=feature_map)",
                            "Call"
                        ],
                        [
                            "para0",
                            "Name"
                        ],
                        [
                            "para0",
                            "Name"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "bf.feature_map(x, self.d, self.f_map, self.data_device, self.data_dtype, self.theta_m)",
                            "Call"
                        ],
                        [
                            "x.view(s[0], s[1], s[2] * s[3], s[4], s[5])",
                            "Call"
                        ],
                        [
                            "x.view(s[0], s[1] * s[2], s[3], s[4])",
                            "Call"
                        ],
                        [
                            "layers_correspond",
                            "Name"
                        ],
                        [
                            "layers_correspond",
                            "Name"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "self.state_dict()",
                            "Call"
                        ],
                        [
                            "x.split('.')[0]",
                            "Subscript"
                        ],
                        [
                            "self.state_dict()",
                            "Call"
                        ],
                        [
                            "x.split('.')[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(s[0], s[1], 1, s[2], s[3])",
                            "Call"
                        ],
                        [
                            "x.view(s[0], s[1] * s[2], s[3], s[4])",
                            "Call"
                        ],
                        [
                            "self.state_dict()",
                            "Call"
                        ],
                        [
                            "self.state_dict()",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "tc.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "tc.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "tc.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "Vdim_to_norm(x, self.p)",
                            "Call"
                        ],
                        [
                            "tc.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "Vdim_to_norm(x, self.p)",
                            "Call"
                        ],
                        [
                            "tc.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_2182": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tc.arange(-1, 1, 2 / num, device=dev, dtype=dtp)",
                            "Call"
                        ],
                        [
                            "x.cpu()",
                            "Call"
                        ],
                        [
                            "x.numpy()",
                            "Call"
                        ],
                        [
                            "eval('tn.' + tn.layers_group[n][m] + '.parameters()')",
                            "Call"
                        ],
                        [
                            "eval('tn.' + tn.layers_group[n][m] + '.parameters()')",
                            "Call"
                        ],
                        [
                            "tc.einsum('abcde,a->abcde', [x, (norm + 1e-12) ** (-1)])",
                            "Call"
                        ],
                        [
                            "tc.zeros((x0.numel(), para['l']), device=dev, dtype=dtp)",
                            "Call"
                        ],
                        [
                            "para0",
                            "Name"
                        ],
                        [
                            "self.map_x_vector_taylor(x)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_cos_sin(x)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_normalized_linear(x)",
                            "Call"
                        ],
                        [
                            "self.feature_map(x, f_map=feature_map)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_taylor(x)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_cos_sin(x)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_cos(x)",
                            "Call"
                        ],
                        [
                            "self.map_x_vector_normalized_linear(x)",
                            "Call"
                        ],
                        [
                            "self.feature_map(x, f_map=feature_map)",
                            "Call"
                        ],
                        [
                            "para0",
                            "Name"
                        ],
                        [
                            "para0",
                            "Name"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel0, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "x.view(num, channel, 1, sx, sy)",
                            "Call"
                        ],
                        [
                            "bf.feature_map(x, self.d, self.f_map, self.data_device, self.data_dtype, self.theta_m)",
                            "Call"
                        ],
                        [
                            "x.view(s[0], s[1], s[2] * s[3], s[4], s[5])",
                            "Call"
                        ],
                        [
                            "x.view(s[0], s[1] * s[2], s[3], s[4])",
                            "Call"
                        ],
                        [
                            "layers_correspond",
                            "Name"
                        ],
                        [
                            "layers_correspond",
                            "Name"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "self.state_dict()",
                            "Call"
                        ],
                        [
                            "x.split('.')[0]",
                            "Subscript"
                        ],
                        [
                            "self.state_dict()",
                            "Call"
                        ],
                        [
                            "x.split('.')[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(s[0], s[1], 1, s[2], s[3])",
                            "Call"
                        ],
                        [
                            "x.view(s[0], s[1] * s[2], s[3], s[4])",
                            "Call"
                        ],
                        [
                            "self.state_dict()",
                            "Call"
                        ],
                        [
                            "self.state_dict()",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "tc.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "tc.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "tc.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "Vdim_to_norm(x, self.p)",
                            "Call"
                        ],
                        [
                            "tc.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "eval('self.layer' + str(n) + '(x)')",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "Vdim_to_norm(x, self.p)",
                            "Call"
                        ],
                        [
                            "tc.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_2192": {
                "*size": {
                    "value": "(num,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "dev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bf.choose_device()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tc.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "einsum_2375": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nc,c->nc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tc.exp(x)",
                            "Call"
                        ],
                        [
                            "y * norm",
                            "BinOp"
                        ],
                        [
                            "tn(imgs).squeeze()",
                            "Call"
                        ],
                        [
                            "tc.einsum('nc,c->nc', y, 1 / (norm_t + 1e-12))",
                            "Call"
                        ],
                        [
                            "activate_func(y)",
                            "Call"
                        ],
                        [
                            "mps(vecs)",
                            "Call"
                        ],
                        [
                            "mps(vecs, False, 'env', n)",
                            "Call"
                        ],
                        [
                            "mps(vecs, False, 'env', n)",
                            "Call"
                        ],
                        [
                            "mps(x=vecs, para=para_fw)",
                            "Call"
                        ],
                        [
                            "mps(para_fw, imgs)",
                            "Call"
                        ],
                        [
                            "para['activate_fun_final'](y)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((vecs.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', self.envl[nt], self.mps.tensors[nt], self.envr[nt], vecs)",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,na,aib->nb', vecs, y, self.mps.tensors[n])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,na,aib->nb', vecs[:, :, nt], y, self.mps.tensors[nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "y / norm",
                            "BinOp"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt] / (tc.norm(self.mps.tensors[nt]) + 1e-12), env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt], env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.calculate_y(x, env=env, feature_map=para['feature_map'], get_grad_way=para['get_grad_way'], activate=para['activate'], nt=n, normalize_center=para['normalize_center'])",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_by_env(nt, x, env, normalize_t=normalize_center)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((x.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,nca,caib->ncb', vecs[:, :, nt], y, self.mps.tensors[nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt] / (tc.norm(self.mps.tensors[nt]) + 1e-12), env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt], env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.calculate_y(x, env=env, feature_map=para['feature_map'], get_grad_way=para['get_grad_way'], activate=para['activate'], nt=n, normalize_center=para['normalize_center'])",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.mps.tensors[0].shape[1]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_by_env(nt, x, env, normalize_t=normalize_center)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.mps.tensors[0].shape[1]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('nca,caib,ni->ncb', y, self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_simple(nt, x, y, activate=activate, normalize=False)[0]",
                            "Subscript"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.ones((self.channel, self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('cad,caib,cdie->cbe', [y, self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]])",
                            "Call"
                        ],
                        [
                            "tc.einsum('cad,c->cad', y, 1 / norm)",
                            "Call"
                        ],
                        [
                            "[tc.ones((self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)]",
                            "List"
                        ],
                        [
                            "[tc.ones((self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)]",
                            "List"
                        ],
                        [
                            "tc.einsum('ncr,ncl->nc', [yl, yr])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ncr,ncl->nc', [yl, yr])",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_2421": {
                "variable": {
                    "value": "yt",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nc,c->nc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "yt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tn(imgs)",
                            "Call"
                        ],
                        [
                            "tc.einsum('nc,c->nc', yt, 1 / (norm_t + 1e-12))",
                            "Call"
                        ],
                        [
                            "activate_func(yt)",
                            "Call"
                        ],
                        [
                            "mps(para_fw, img_t)",
                            "Call"
                        ],
                        [
                            "para['activate_fun_final'](yt)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_73": {
                "*size": {
                    "value": "(num_s, self.mps.tensors[0].shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_255": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "imgs - imgs1[n, :, :, :].repeat(s[0], 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "tc.cos(tmp * theta_m * np.pi / 2)",
                            "Call"
                        ],
                        [
                            "tc.log(tmp + 1e-10).sum() / s[0]",
                            "BinOp"
                        ],
                        [
                            "tensors[c, n, :dims[n], :, :dims[n + 1]]",
                            "Subscript"
                        ],
                        [
                            "tc.qr(tmp.reshape(-1, tmp.shape[2]))[0]",
                            "Subscript"
                        ],
                        [
                            "tensors[c, length - 1, :dims[length - 1], :, :dims[length]]",
                            "Subscript"
                        ],
                        [
                            "tc.einsum('na,ni,aib->nb', env['l'][n], vecs[:, :, n], self.mps.tensors[n])",
                            "Call"
                        ],
                        [
                            "tmp / tc.norm(tmp)",
                            "BinOp"
                        ],
                        [
                            "tc.einsum('na,ni,aib->nb', env['l'][n], vecs[:, :, n], self.mps.tensors[n])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ad,caib,cdie->be', [y[-1], self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ad,caib,cdie->be', [y[-1], tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]])",
                            "Call"
                        ],
                        [
                            "tc.zeros(shape_t, device=self.data_device, dtype=self.data_dtype) * 1e-08",
                            "BinOp"
                        ],
                        [
                            "tc.rand(shape_t, device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.randn(shape_t, device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.randn(shape_t, device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(self.state_dict()[x].data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_269": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "env['r'][n - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_307": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_426": {
                "variable": {
                    "value": "self.tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "tensor_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(self.channel, self.length, self.chi, self.d, self.chi)",
                            "Tuple"
                        ],
                        [
                            "(self.channel, self.length, self.chi, self.d, self.chi)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "norm_532": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "imgs - imgs1[n, :, :, :].repeat(s[0], 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "tc.cos(tmp * theta_m * np.pi / 2)",
                            "Call"
                        ],
                        [
                            "tc.log(tmp + 1e-10).sum() / s[0]",
                            "BinOp"
                        ],
                        [
                            "tensors[c, n, :dims[n], :, :dims[n + 1]]",
                            "Subscript"
                        ],
                        [
                            "tc.qr(tmp.reshape(-1, tmp.shape[2]))[0]",
                            "Subscript"
                        ],
                        [
                            "tensors[c, length - 1, :dims[length - 1], :, :dims[length]]",
                            "Subscript"
                        ],
                        [
                            "tc.einsum('na,ni,aib->nb', env['l'][n], vecs[:, :, n], self.mps.tensors[n])",
                            "Call"
                        ],
                        [
                            "tmp / tc.norm(tmp)",
                            "BinOp"
                        ],
                        [
                            "tc.einsum('na,ni,aib->nb', env['l'][n], vecs[:, :, n], self.mps.tensors[n])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ad,caib,cdie->be', [y[-1], self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ad,caib,cdie->be', [y[-1], tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]])",
                            "Call"
                        ],
                        [
                            "tc.zeros(shape_t, device=self.data_device, dtype=self.data_dtype) * 1e-08",
                            "BinOp"
                        ],
                        [
                            "tc.rand(shape_t, device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.randn(shape_t, device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.randn(shape_t, device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(self.state_dict()[x].data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_546": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "env['r'][n - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_562": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_575": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_719": {
                "variable": {
                    "value": "self.tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "tensor_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(self.channel, self.length, self.chi, self.d, self.chi)",
                            "Tuple"
                        ],
                        [
                            "(self.channel, self.length, self.chi, self.d, self.chi)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "zeros_722": {
                "variable": {
                    "value": "self.tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.channel, self.length, self.chi, self.d, self.chi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.data_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.data_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_758": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_803": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_810": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "cad,c->cad",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tc.exp(x)",
                            "Call"
                        ],
                        [
                            "y * norm",
                            "BinOp"
                        ],
                        [
                            "tn(imgs).squeeze()",
                            "Call"
                        ],
                        [
                            "tc.einsum('nc,c->nc', y, 1 / (norm_t + 1e-12))",
                            "Call"
                        ],
                        [
                            "activate_func(y)",
                            "Call"
                        ],
                        [
                            "mps(vecs)",
                            "Call"
                        ],
                        [
                            "mps(vecs, False, 'env', n)",
                            "Call"
                        ],
                        [
                            "mps(vecs, False, 'env', n)",
                            "Call"
                        ],
                        [
                            "mps(x=vecs, para=para_fw)",
                            "Call"
                        ],
                        [
                            "mps(para_fw, imgs)",
                            "Call"
                        ],
                        [
                            "para['activate_fun_final'](y)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((vecs.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', self.envl[nt], self.mps.tensors[nt], self.envr[nt], vecs)",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,na,aib->nb', vecs, y, self.mps.tensors[n])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,na,aib->nb', vecs[:, :, nt], y, self.mps.tensors[nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "y / norm",
                            "BinOp"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt] / (tc.norm(self.mps.tensors[nt]) + 1e-12), env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt], env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.calculate_y(x, env=env, feature_map=para['feature_map'], get_grad_way=para['get_grad_way'], activate=para['activate'], nt=n, normalize_center=para['normalize_center'])",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_by_env(nt, x, env, normalize_t=normalize_center)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((x.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,nca,caib->ncb', vecs[:, :, nt], y, self.mps.tensors[nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt] / (tc.norm(self.mps.tensors[nt]) + 1e-12), env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt], env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.calculate_y(x, env=env, feature_map=para['feature_map'], get_grad_way=para['get_grad_way'], activate=para['activate'], nt=n, normalize_center=para['normalize_center'])",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.mps.tensors[0].shape[1]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_by_env(nt, x, env, normalize_t=normalize_center)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.mps.tensors[0].shape[1]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('nca,caib,ni->ncb', y, self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_simple(nt, x, y, activate=activate, normalize=False)[0]",
                            "Subscript"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.ones((self.channel, self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('cad,caib,cdie->cbe', [y, self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]])",
                            "Call"
                        ],
                        [
                            "tc.einsum('cad,c->cad', y, 1 / norm)",
                            "Call"
                        ],
                        [
                            "[tc.ones((self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)]",
                            "List"
                        ],
                        [
                            "[tc.ones((self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)]",
                            "List"
                        ],
                        [
                            "tc.einsum('ncr,ncl->nc', [yl, yr])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ncr,ncl->nc', [yl, yr])",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_812": {
                "variable": {
                    "value": "self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "caib,c->caib",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_824": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ad,caib,cdie->be",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[y[-1], self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_835": {
                "variable": {
                    "value": "rho[nt]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "ad,caib,cdje,be->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[y[nt], self.tensors.data[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], self.tensors.data[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], yy]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_853": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ad,caib,cdie->be",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[y[-1], tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_863": {
                "variable": {
                    "value": "rho[nt]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "ad,caib,cdje,be->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[y[nt], tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], yy]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_946": {
                "*size": {
                    "value": "shape_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.data_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.data_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_964": {
                "variable": {
                    "value": "tmp[:, :, 1, 0, 0, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "tmp[:, :, 1, 0, 0, 0, :].shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.data_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.data_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_967": {
                "variable": {
                    "value": "tmp[:, :, 0, 1, 0, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "tmp[:, :, 1, 0, 0, 0, :].shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.data_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.data_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_970": {
                "variable": {
                    "value": "tmp[:, :, 0, 0, 1, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "tmp[:, :, 1, 0, 0, 0, :].shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.data_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.data_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_973": {
                "variable": {
                    "value": "tmp[:, :, 0, 0, 0, 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "tmp[:, :, 1, 0, 0, 0, :].shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.data_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.data_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_977": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.data_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.data_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_987": {
                "*size": {
                    "value": "shape_b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "self.data_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.data_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_993": {
                "dim": {
                    "value": "self.tensors.ndimension() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_1058": {
                "variable": {
                    "value": "yl",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ncl,ncd,cldr->ncr",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[yl, x[:, :, :, nx, ny], self.tensors[:, nt, :, :, :]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_1073": {
                "variable": {
                    "value": "yr",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ncr,ncd,cldr->ncl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[yr, x[:, :, :, nx, ny], self.tensors[:, nt, :, :, :]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_1089": {
                "variable": {
                    "value": "yl",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ncl,ncd,chldr->nhr",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[yl, x[:, :, :, nx, ny], self.tensors[:, :, nt, :, :, :]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_1102": {
                "variable": {
                    "value": "yr",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ncr,ncd,chldr->nhl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[yr, x[:, :, :, nx, ny], self.tensors[:, :, nt, :, :, :]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_1165": {
                "variable": {
                    "value": "x1[:, :, :, nx, ny]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "nci,ncj,nck,ncl,cijklo->nco",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[x[:, :, :, nx * 2, ny * 2], x[:, :, :, min(nx * 2 + 1, sx - 1), ny * 2], x[:, :, :, nx * 2, min(ny * 2 + 1, sy - 1)], x[:, :, :, min(nx * 2 + 1, sx - 1), min(ny * 2 + 1, sy - 1)], tensors[:, nx, ny, :, :, :, :, :]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_1179": {
                "variable": {
                    "value": "x1[:, :, :, nx, ny]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "nci,ncj,nck,ncl,cpijklo->npo",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[x[:, :, :, nx * 2, ny * 2], x[:, :, :, min(nx * 2 + 1, sx - 1), ny * 2], x[:, :, :, nx * 2, min(ny * 2 + 1, sy - 1)], x[:, :, :, min(nx * 2 + 1, sx - 1), min(ny * 2 + 1, sy - 1)], tensors[:, :, nx, ny, :, :, :, :, :]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_1237": {
                "variable": {
                    "value": "x1[:, :, :, nx, ny]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "nci,ncj,nck,ncl,cijklo->nco",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[x[:, :, :, nx * 2, ny * 2], x[:, :, :, min(nx * 2 + 1, sx - 1), ny * 2], x[:, :, :, nx * 2, min(ny * 2 + 1, sy - 1)], x[:, :, :, min(nx * 2 + 1, sx - 1), min(ny * 2 + 1, sy - 1)], tensors]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_1250": {
                "variable": {
                    "value": "x1[:, :, :, nx, ny]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "nci,ncj,nck,ncl,cpijklo->npo",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[x[:, :, :, nx * 2, ny * 2], x[:, :, :, min(nx * 2 + 1, sx - 1), ny * 2], x[:, :, :, nx * 2, min(ny * 2 + 1, sy - 1)], x[:, :, :, min(nx * 2 + 1, sx - 1), min(ny * 2 + 1, sy - 1)], tensors]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_1320": {
                "variable": {
                    "value": "x1[:, :, :, nx, ny]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "nci,ncj,nck,ncl,cijklo->nco",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[x[:, :, :, nx, ny], x[:, :, :, nx + 1, ny], x[:, :, :, nx, ny + 1], x[:, :, :, nx + 1, ny + 1], self.tensors[:, nx, ny, :, :, :, :, :]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_1333": {
                "variable": {
                    "value": "x1[:, :, :, nx, ny]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "nci,ncj,nck,ncl,cpijklo->npo",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[x[:, :, :, nx, ny], x[:, :, :, nx + 1, ny], x[:, :, :, nx, ny + 1], x[:, :, :, nx + 1, ny + 1], self.tensors[:, :, nx, ny, :, :, :, :, :]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_1390": {
                "variable": {
                    "value": "x1[:, :, :, nx, ny]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "nci,ncj,nck,ncl,cijklo->nco",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[x[:, :, :, nx, ny], x[:, :, :, nx + 1, ny], x[:, :, :, nx, ny + 1], x[:, :, :, nx + 1, ny + 1], tensors]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_1403": {
                "variable": {
                    "value": "x1[:, :, :, nx, ny]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "nci,ncj,nck,ncl,cpijklo->npo",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[x[:, :, :, nx, ny], x[:, :, :, nx + 1, ny], x[:, :, :, nx, ny + 1], x[:, :, :, nx + 1, ny + 1], tensors]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_1473": {
                "variable": {
                    "value": "x1[:, :, :, nx, ny]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "nci,ncj,cijo->nco",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[x[:, :, :, nx * 2, ny], x[:, :, :, min(nx * 2 + 1, sx - 1), ny], tensors[:, nx, ny, :, :, :]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_1485": {
                "variable": {
                    "value": "x1[:, :, :, nx, ny]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "nci,ncj,cpijo->npo",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[x[:, :, :, nx * 2, ny], x[:, :, :, min(nx * 2 + 1, sx - 1), ny], tensors[:, :, nx, ny, :, :, :]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_1553": {
                "variable": {
                    "value": "x1[:, :, :, nx, ny]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "nci,ncj,cijo->nco",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[x[:, :, :, nx, ny * 2], x[:, :, :, nx, min(ny * 2 + 1, sy - 1)], tensors[:, nx, ny, :, :, :]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_1565": {
                "variable": {
                    "value": "x1[:, :, :, nx, ny]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "nci,ncj,cpijo->npo",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[x[:, :, :, nx, ny * 2], x[:, :, :, nx, min(ny * 2 + 1, sy - 1)], tensors[:, :, nx, ny, :, :, :]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_2266": {
                "*size": {
                    "value": "imgs.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "imgs.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "imgs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_2296": {
                "input": {
                    "value": "tmp + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_2296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "qr_2319": {
                "input": {
                    "value": "tmp.reshape(-1, tmp.shape[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_113": {
                "variable": {
                    "value": "self.norms[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tc.exp(x)",
                            "Call"
                        ],
                        [
                            "y * norm",
                            "BinOp"
                        ],
                        [
                            "tn(imgs).squeeze()",
                            "Call"
                        ],
                        [
                            "tc.einsum('nc,c->nc', y, 1 / (norm_t + 1e-12))",
                            "Call"
                        ],
                        [
                            "activate_func(y)",
                            "Call"
                        ],
                        [
                            "mps(vecs)",
                            "Call"
                        ],
                        [
                            "mps(vecs, False, 'env', n)",
                            "Call"
                        ],
                        [
                            "mps(vecs, False, 'env', n)",
                            "Call"
                        ],
                        [
                            "mps(x=vecs, para=para_fw)",
                            "Call"
                        ],
                        [
                            "mps(para_fw, imgs)",
                            "Call"
                        ],
                        [
                            "para['activate_fun_final'](y)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((vecs.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', self.envl[nt], self.mps.tensors[nt], self.envr[nt], vecs)",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,na,aib->nb', vecs, y, self.mps.tensors[n])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,na,aib->nb', vecs[:, :, nt], y, self.mps.tensors[nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "y / norm",
                            "BinOp"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt] / (tc.norm(self.mps.tensors[nt]) + 1e-12), env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt], env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.calculate_y(x, env=env, feature_map=para['feature_map'], get_grad_way=para['get_grad_way'], activate=para['activate'], nt=n, normalize_center=para['normalize_center'])",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_by_env(nt, x, env, normalize_t=normalize_center)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((x.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,nca,caib->ncb', vecs[:, :, nt], y, self.mps.tensors[nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt] / (tc.norm(self.mps.tensors[nt]) + 1e-12), env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt], env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.calculate_y(x, env=env, feature_map=para['feature_map'], get_grad_way=para['get_grad_way'], activate=para['activate'], nt=n, normalize_center=para['normalize_center'])",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.mps.tensors[0].shape[1]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_by_env(nt, x, env, normalize_t=normalize_center)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.mps.tensors[0].shape[1]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('nca,caib,ni->ncb', y, self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_simple(nt, x, y, activate=activate, normalize=False)[0]",
                            "Subscript"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.ones((self.channel, self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('cad,caib,cdie->cbe', [y, self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]])",
                            "Call"
                        ],
                        [
                            "tc.einsum('cad,c->cad', y, 1 / norm)",
                            "Call"
                        ],
                        [
                            "[tc.ones((self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)]",
                            "List"
                        ],
                        [
                            "[tc.ones((self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)]",
                            "List"
                        ],
                        [
                            "tc.einsum('ncr,ncl->nc', [yl, yr])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ncr,ncl->nc', [yl, yr])",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_212": {
                "input": {
                    "value": "x * theta_max * np.pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_373": {
                "input": {
                    "value": "self.mps.tensors[nt].grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_640": {
                "input": {
                    "value": "self.mps.tensors[nt].grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_821": {
                "*size": {
                    "value": "(self.dims[0], self.dims[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.data_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.data_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_829": {
                "input": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "imgs - imgs1[n, :, :, :].repeat(s[0], 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "tc.cos(tmp * theta_m * np.pi / 2)",
                            "Call"
                        ],
                        [
                            "tc.log(tmp + 1e-10).sum() / s[0]",
                            "BinOp"
                        ],
                        [
                            "tensors[c, n, :dims[n], :, :dims[n + 1]]",
                            "Subscript"
                        ],
                        [
                            "tc.qr(tmp.reshape(-1, tmp.shape[2]))[0]",
                            "Subscript"
                        ],
                        [
                            "tensors[c, length - 1, :dims[length - 1], :, :dims[length]]",
                            "Subscript"
                        ],
                        [
                            "tc.einsum('na,ni,aib->nb', env['l'][n], vecs[:, :, n], self.mps.tensors[n])",
                            "Call"
                        ],
                        [
                            "tmp / tc.norm(tmp)",
                            "BinOp"
                        ],
                        [
                            "tc.einsum('na,ni,aib->nb', env['l'][n], vecs[:, :, n], self.mps.tensors[n])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ad,caib,cdie->be', [y[-1], self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ad,caib,cdie->be', [y[-1], tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]])",
                            "Call"
                        ],
                        [
                            "tc.zeros(shape_t, device=self.data_device, dtype=self.data_dtype) * 1e-08",
                            "BinOp"
                        ],
                        [
                            "tc.rand(shape_t, device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.randn(shape_t, device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.randn(shape_t, device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(self.state_dict()[x].data)",
                            "Call"
                        ]
                    ]
                }
            },
            "trace_842": {
                "input": {
                    "value": "rho[nt]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_844": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "be,caib,cdie->ad",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[yy, self.tensors.data[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], self.tensors.data[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_850": {
                "*size": {
                    "value": "(self.dims[0], self.dims[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.data_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.data_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_857": {
                "input": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "imgs - imgs1[n, :, :, :].repeat(s[0], 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "tc.cos(tmp * theta_m * np.pi / 2)",
                            "Call"
                        ],
                        [
                            "tc.log(tmp + 1e-10).sum() / s[0]",
                            "BinOp"
                        ],
                        [
                            "tensors[c, n, :dims[n], :, :dims[n + 1]]",
                            "Subscript"
                        ],
                        [
                            "tc.qr(tmp.reshape(-1, tmp.shape[2]))[0]",
                            "Subscript"
                        ],
                        [
                            "tensors[c, length - 1, :dims[length - 1], :, :dims[length]]",
                            "Subscript"
                        ],
                        [
                            "tc.einsum('na,ni,aib->nb', env['l'][n], vecs[:, :, n], self.mps.tensors[n])",
                            "Call"
                        ],
                        [
                            "tmp / tc.norm(tmp)",
                            "BinOp"
                        ],
                        [
                            "tc.einsum('na,ni,aib->nb', env['l'][n], vecs[:, :, n], self.mps.tensors[n])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ad,caib,cdie->be', [y[-1], self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ad,caib,cdie->be', [y[-1], tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]])",
                            "Call"
                        ],
                        [
                            "tc.zeros(shape_t, device=self.data_device, dtype=self.data_dtype) * 1e-08",
                            "BinOp"
                        ],
                        [
                            "tc.rand(shape_t, device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.randn(shape_t, device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.randn(shape_t, device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(self.state_dict()[x].data)",
                            "Call"
                        ]
                    ]
                }
            },
            "trace_870": {
                "input": {
                    "value": "rho[nt]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_872": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "be,caib,cdie->ad",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[yy, tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_1803": {
                "variable": {
                    "value": "tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "exp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'tc.optim.' + which + '(' + model_name + \".parameters(), lr=para['lr'])\"",
                            "BinOp"
                        ],
                        [
                            "''",
                            "Constant"
                        ],
                        [
                            "exp + (',' + exp[:-1] + '->' + exp)",
                            "BinOp"
                        ],
                        [
                            "':, ' * self.state_dict()[x].ndimension()",
                            "BinOp"
                        ],
                        [
                            "exp[:-1]",
                            "Subscript"
                        ],
                        [
                            "'self.state_dict()[x].data[' + exp + '] = tensors.data'",
                            "BinOp"
                        ],
                        [
                            "''",
                            "Constant"
                        ],
                        [
                            "''",
                            "Constant"
                        ]
                    ]
                },
                "*operands": {
                    "value": "[self.state_dict()[x].abs(), 1 / (norm + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_2386": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_2631": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cos_211": {
                "input": {
                    "value": "x * theta_max * np.pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_294": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tc.exp(x)",
                            "Call"
                        ],
                        [
                            "y * norm",
                            "BinOp"
                        ],
                        [
                            "tn(imgs).squeeze()",
                            "Call"
                        ],
                        [
                            "tc.einsum('nc,c->nc', y, 1 / (norm_t + 1e-12))",
                            "Call"
                        ],
                        [
                            "activate_func(y)",
                            "Call"
                        ],
                        [
                            "mps(vecs)",
                            "Call"
                        ],
                        [
                            "mps(vecs, False, 'env', n)",
                            "Call"
                        ],
                        [
                            "mps(vecs, False, 'env', n)",
                            "Call"
                        ],
                        [
                            "mps(x=vecs, para=para_fw)",
                            "Call"
                        ],
                        [
                            "mps(para_fw, imgs)",
                            "Call"
                        ],
                        [
                            "para['activate_fun_final'](y)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((vecs.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', self.envl[nt], self.mps.tensors[nt], self.envr[nt], vecs)",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,na,aib->nb', vecs, y, self.mps.tensors[n])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,na,aib->nb', vecs[:, :, nt], y, self.mps.tensors[nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "y / norm",
                            "BinOp"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt] / (tc.norm(self.mps.tensors[nt]) + 1e-12), env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt], env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.calculate_y(x, env=env, feature_map=para['feature_map'], get_grad_way=para['get_grad_way'], activate=para['activate'], nt=n, normalize_center=para['normalize_center'])",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_by_env(nt, x, env, normalize_t=normalize_center)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((x.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,nca,caib->ncb', vecs[:, :, nt], y, self.mps.tensors[nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt] / (tc.norm(self.mps.tensors[nt]) + 1e-12), env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt], env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.calculate_y(x, env=env, feature_map=para['feature_map'], get_grad_way=para['get_grad_way'], activate=para['activate'], nt=n, normalize_center=para['normalize_center'])",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.mps.tensors[0].shape[1]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_by_env(nt, x, env, normalize_t=normalize_center)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.mps.tensors[0].shape[1]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('nca,caib,ni->ncb', y, self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_simple(nt, x, y, activate=activate, normalize=False)[0]",
                            "Subscript"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.ones((self.channel, self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('cad,caib,cdie->cbe', [y, self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]])",
                            "Call"
                        ],
                        [
                            "tc.einsum('cad,c->cad', y, 1 / norm)",
                            "Call"
                        ],
                        [
                            "[tc.ones((self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)]",
                            "List"
                        ],
                        [
                            "[tc.ones((self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)]",
                            "List"
                        ],
                        [
                            "tc.einsum('ncr,ncl->nc', [yl, yr])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ncr,ncl->nc', [yl, yr])",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_298": {
                "equation": {
                    "value": "na,n->na",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tc.exp(x)",
                            "Call"
                        ],
                        [
                            "y * norm",
                            "BinOp"
                        ],
                        [
                            "tn(imgs).squeeze()",
                            "Call"
                        ],
                        [
                            "tc.einsum('nc,c->nc', y, 1 / (norm_t + 1e-12))",
                            "Call"
                        ],
                        [
                            "activate_func(y)",
                            "Call"
                        ],
                        [
                            "mps(vecs)",
                            "Call"
                        ],
                        [
                            "mps(vecs, False, 'env', n)",
                            "Call"
                        ],
                        [
                            "mps(vecs, False, 'env', n)",
                            "Call"
                        ],
                        [
                            "mps(x=vecs, para=para_fw)",
                            "Call"
                        ],
                        [
                            "mps(para_fw, imgs)",
                            "Call"
                        ],
                        [
                            "para['activate_fun_final'](y)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((vecs.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', self.envl[nt], self.mps.tensors[nt], self.envr[nt], vecs)",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,na,aib->nb', vecs, y, self.mps.tensors[n])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,na,aib->nb', vecs[:, :, nt], y, self.mps.tensors[nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "y / norm",
                            "BinOp"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt] / (tc.norm(self.mps.tensors[nt]) + 1e-12), env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt], env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.calculate_y(x, env=env, feature_map=para['feature_map'], get_grad_way=para['get_grad_way'], activate=para['activate'], nt=n, normalize_center=para['normalize_center'])",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_by_env(nt, x, env, normalize_t=normalize_center)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((x.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,nca,caib->ncb', vecs[:, :, nt], y, self.mps.tensors[nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt] / (tc.norm(self.mps.tensors[nt]) + 1e-12), env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt], env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.calculate_y(x, env=env, feature_map=para['feature_map'], get_grad_way=para['get_grad_way'], activate=para['activate'], nt=n, normalize_center=para['normalize_center'])",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.mps.tensors[0].shape[1]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_by_env(nt, x, env, normalize_t=normalize_center)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.mps.tensors[0].shape[1]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('nca,caib,ni->ncb', y, self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_simple(nt, x, y, activate=activate, normalize=False)[0]",
                            "Subscript"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.ones((self.channel, self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('cad,caib,cdie->cbe', [y, self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]])",
                            "Call"
                        ],
                        [
                            "tc.einsum('cad,c->cad', y, 1 / norm)",
                            "Call"
                        ],
                        [
                            "[tc.ones((self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)]",
                            "List"
                        ],
                        [
                            "[tc.ones((self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)]",
                            "List"
                        ],
                        [
                            "tc.einsum('ncr,ncl->nc', [yl, yr])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ncr,ncl->nc', [yl, yr])",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_317": {
                "input": {
                    "value": "self.mps.tensors[nt]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_477": {
                "input": {
                    "value": "x * theta_max * np.pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_482": {
                "input": {
                    "value": "x * theta_max * np.pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_587": {
                "input": {
                    "value": "self.mps.tensors[nt]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_665": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tc.exp(x)",
                            "Call"
                        ],
                        [
                            "y * norm",
                            "BinOp"
                        ],
                        [
                            "tn(imgs).squeeze()",
                            "Call"
                        ],
                        [
                            "tc.einsum('nc,c->nc', y, 1 / (norm_t + 1e-12))",
                            "Call"
                        ],
                        [
                            "activate_func(y)",
                            "Call"
                        ],
                        [
                            "mps(vecs)",
                            "Call"
                        ],
                        [
                            "mps(vecs, False, 'env', n)",
                            "Call"
                        ],
                        [
                            "mps(vecs, False, 'env', n)",
                            "Call"
                        ],
                        [
                            "mps(x=vecs, para=para_fw)",
                            "Call"
                        ],
                        [
                            "mps(para_fw, imgs)",
                            "Call"
                        ],
                        [
                            "para['activate_fun_final'](y)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((vecs.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', self.envl[nt], self.mps.tensors[nt], self.envr[nt], vecs)",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,na,aib->nb', vecs, y, self.mps.tensors[n])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,na,aib->nb', vecs[:, :, nt], y, self.mps.tensors[nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "y / norm",
                            "BinOp"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt] / (tc.norm(self.mps.tensors[nt]) + 1e-12), env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt], env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.calculate_y(x, env=env, feature_map=para['feature_map'], get_grad_way=para['get_grad_way'], activate=para['activate'], nt=n, normalize_center=para['normalize_center'])",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_by_env(nt, x, env, normalize_t=normalize_center)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((x.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,nca,caib->ncb', vecs[:, :, nt], y, self.mps.tensors[nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt] / (tc.norm(self.mps.tensors[nt]) + 1e-12), env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt], env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.calculate_y(x, env=env, feature_map=para['feature_map'], get_grad_way=para['get_grad_way'], activate=para['activate'], nt=n, normalize_center=para['normalize_center'])",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.mps.tensors[0].shape[1]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_by_env(nt, x, env, normalize_t=normalize_center)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.mps.tensors[0].shape[1]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('nca,caib,ni->ncb', y, self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_simple(nt, x, y, activate=activate, normalize=False)[0]",
                            "Subscript"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.ones((self.channel, self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('cad,caib,cdie->cbe', [y, self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]])",
                            "Call"
                        ],
                        [
                            "tc.einsum('cad,c->cad', y, 1 / norm)",
                            "Call"
                        ],
                        [
                            "[tc.ones((self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)]",
                            "List"
                        ],
                        [
                            "[tc.ones((self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)]",
                            "List"
                        ],
                        [
                            "tc.einsum('ncr,ncl->nc', [yl, yr])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ncr,ncl->nc', [yl, yr])",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_669": {
                "equation": {
                    "value": "na,n->na",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tc.exp(x)",
                            "Call"
                        ],
                        [
                            "y * norm",
                            "BinOp"
                        ],
                        [
                            "tn(imgs).squeeze()",
                            "Call"
                        ],
                        [
                            "tc.einsum('nc,c->nc', y, 1 / (norm_t + 1e-12))",
                            "Call"
                        ],
                        [
                            "activate_func(y)",
                            "Call"
                        ],
                        [
                            "mps(vecs)",
                            "Call"
                        ],
                        [
                            "mps(vecs, False, 'env', n)",
                            "Call"
                        ],
                        [
                            "mps(vecs, False, 'env', n)",
                            "Call"
                        ],
                        [
                            "mps(x=vecs, para=para_fw)",
                            "Call"
                        ],
                        [
                            "mps(para_fw, imgs)",
                            "Call"
                        ],
                        [
                            "para['activate_fun_final'](y)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((vecs.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', self.envl[nt], self.mps.tensors[nt], self.envr[nt], vecs)",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,na,aib->nb', vecs, y, self.mps.tensors[n])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,na,aib->nb', vecs[:, :, nt], y, self.mps.tensors[nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "y / norm",
                            "BinOp"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt] / (tc.norm(self.mps.tensors[nt]) + 1e-12), env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt], env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.calculate_y(x, env=env, feature_map=para['feature_map'], get_grad_way=para['get_grad_way'], activate=para['activate'], nt=n, normalize_center=para['normalize_center'])",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_by_env(nt, x, env, normalize_t=normalize_center)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((x.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,nca,caib->ncb', vecs[:, :, nt], y, self.mps.tensors[nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt] / (tc.norm(self.mps.tensors[nt]) + 1e-12), env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt], env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.calculate_y(x, env=env, feature_map=para['feature_map'], get_grad_way=para['get_grad_way'], activate=para['activate'], nt=n, normalize_center=para['normalize_center'])",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.mps.tensors[0].shape[1]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_by_env(nt, x, env, normalize_t=normalize_center)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.mps.tensors[0].shape[1]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('nca,caib,ni->ncb', y, self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_simple(nt, x, y, activate=activate, normalize=False)[0]",
                            "Subscript"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.ones((self.channel, self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('cad,caib,cdie->cbe', [y, self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]])",
                            "Call"
                        ],
                        [
                            "tc.einsum('cad,c->cad', y, 1 / norm)",
                            "Call"
                        ],
                        [
                            "[tc.ones((self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)]",
                            "List"
                        ],
                        [
                            "[tc.ones((self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)]",
                            "List"
                        ],
                        [
                            "tc.einsum('ncr,ncl->nc', [yl, yr])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ncr,ncl->nc', [yl, yr])",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_848": {
                "input": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tc.ones((self.dims[self.length], self.dims[self.length]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.ones((self.dims[self.length], self.dims[self.length]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('be,caib,cdie->ad', [yy, self.tensors.data[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], self.tensors.data[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]])",
                            "Call"
                        ],
                        [
                            "yy / tc.norm(yy)",
                            "BinOp"
                        ],
                        [
                            "tc.einsum('be,caib,cdie->ad', [yy, tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]])",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_876": {
                "input": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tc.ones((self.dims[self.length], self.dims[self.length]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.ones((self.dims[self.length], self.dims[self.length]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('be,caib,cdie->ad', [yy, self.tensors.data[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], self.tensors.data[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]])",
                            "Call"
                        ],
                        [
                            "yy / tc.norm(yy)",
                            "BinOp"
                        ],
                        [
                            "tc.einsum('be,caib,cdie->ad', [yy, tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]])",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_910": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tc.exp(x)",
                            "Call"
                        ],
                        [
                            "y * norm",
                            "BinOp"
                        ],
                        [
                            "tn(imgs).squeeze()",
                            "Call"
                        ],
                        [
                            "tc.einsum('nc,c->nc', y, 1 / (norm_t + 1e-12))",
                            "Call"
                        ],
                        [
                            "activate_func(y)",
                            "Call"
                        ],
                        [
                            "mps(vecs)",
                            "Call"
                        ],
                        [
                            "mps(vecs, False, 'env', n)",
                            "Call"
                        ],
                        [
                            "mps(vecs, False, 'env', n)",
                            "Call"
                        ],
                        [
                            "mps(x=vecs, para=para_fw)",
                            "Call"
                        ],
                        [
                            "mps(para_fw, imgs)",
                            "Call"
                        ],
                        [
                            "para['activate_fun_final'](y)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((vecs.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', self.envl[nt], self.mps.tensors[nt], self.envr[nt], vecs)",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,na,aib->nb', vecs, y, self.mps.tensors[n])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,na,aib->nb', vecs[:, :, nt], y, self.mps.tensors[nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "y / norm",
                            "BinOp"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt] / (tc.norm(self.mps.tensors[nt]) + 1e-12), env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt], env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.calculate_y(x, env=env, feature_map=para['feature_map'], get_grad_way=para['get_grad_way'], activate=para['activate'], nt=n, normalize_center=para['normalize_center'])",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_by_env(nt, x, env, normalize_t=normalize_center)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((x.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,nca,caib->ncb', vecs[:, :, nt], y, self.mps.tensors[nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt] / (tc.norm(self.mps.tensors[nt]) + 1e-12), env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt], env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.calculate_y(x, env=env, feature_map=para['feature_map'], get_grad_way=para['get_grad_way'], activate=para['activate'], nt=n, normalize_center=para['normalize_center'])",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.mps.tensors[0].shape[1]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_by_env(nt, x, env, normalize_t=normalize_center)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.mps.tensors[0].shape[1]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('nca,caib,ni->ncb', y, self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_simple(nt, x, y, activate=activate, normalize=False)[0]",
                            "Subscript"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.ones((self.channel, self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('cad,caib,cdie->cbe', [y, self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]])",
                            "Call"
                        ],
                        [
                            "tc.einsum('cad,c->cad', y, 1 / norm)",
                            "Call"
                        ],
                        [
                            "[tc.ones((self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)]",
                            "List"
                        ],
                        [
                            "[tc.ones((self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)]",
                            "List"
                        ],
                        [
                            "tc.einsum('ncr,ncl->nc', [yl, yr])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ncr,ncl->nc', [yl, yr])",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_914": {
                "equation": {
                    "value": "na,n->na",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tc.exp(x)",
                            "Call"
                        ],
                        [
                            "y * norm",
                            "BinOp"
                        ],
                        [
                            "tn(imgs).squeeze()",
                            "Call"
                        ],
                        [
                            "tc.einsum('nc,c->nc', y, 1 / (norm_t + 1e-12))",
                            "Call"
                        ],
                        [
                            "activate_func(y)",
                            "Call"
                        ],
                        [
                            "mps(vecs)",
                            "Call"
                        ],
                        [
                            "mps(vecs, False, 'env', n)",
                            "Call"
                        ],
                        [
                            "mps(vecs, False, 'env', n)",
                            "Call"
                        ],
                        [
                            "mps(x=vecs, para=para_fw)",
                            "Call"
                        ],
                        [
                            "mps(para_fw, imgs)",
                            "Call"
                        ],
                        [
                            "para['activate_fun_final'](y)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((vecs.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', self.envl[nt], self.mps.tensors[nt], self.envr[nt], vecs)",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,na,aib->nb', vecs, y, self.mps.tensors[n])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,na,aib->nb', vecs[:, :, nt], y, self.mps.tensors[nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "y / norm",
                            "BinOp"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt] / (tc.norm(self.mps.tensors[nt]) + 1e-12), env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt], env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.calculate_y(x, env=env, feature_map=para['feature_map'], get_grad_way=para['get_grad_way'], activate=para['activate'], nt=n, normalize_center=para['normalize_center'])",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_by_env(nt, x, env, normalize_t=normalize_center)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((x.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,nca,caib->ncb', vecs[:, :, nt], y, self.mps.tensors[nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt] / (tc.norm(self.mps.tensors[nt]) + 1e-12), env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt], env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.calculate_y(x, env=env, feature_map=para['feature_map'], get_grad_way=para['get_grad_way'], activate=para['activate'], nt=n, normalize_center=para['normalize_center'])",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.mps.tensors[0].shape[1]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_by_env(nt, x, env, normalize_t=normalize_center)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.mps.tensors[0].shape[1]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('nca,caib,ni->ncb', y, self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_simple(nt, x, y, activate=activate, normalize=False)[0]",
                            "Subscript"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.ones((self.channel, self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('cad,caib,cdie->cbe', [y, self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]])",
                            "Call"
                        ],
                        [
                            "tc.einsum('cad,c->cad', y, 1 / norm)",
                            "Call"
                        ],
                        [
                            "[tc.ones((self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)]",
                            "List"
                        ],
                        [
                            "[tc.ones((self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)]",
                            "List"
                        ],
                        [
                            "tc.einsum('ncr,ncl->nc', [yl, yr])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ncr,ncl->nc', [yl, yr])",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax_1793": {
                "dim": {
                    "value": "self.state_dict()[x].ndimension() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_1812": {
                "variable": {
                    "value": "tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "exp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'tc.optim.' + which + '(' + model_name + \".parameters(), lr=para['lr'])\"",
                            "BinOp"
                        ],
                        [
                            "''",
                            "Constant"
                        ],
                        [
                            "exp + (',' + exp[:-1] + '->' + exp)",
                            "BinOp"
                        ],
                        [
                            "':, ' * self.state_dict()[x].ndimension()",
                            "BinOp"
                        ],
                        [
                            "exp[:-1]",
                            "Subscript"
                        ],
                        [
                            "'self.state_dict()[x].data[' + exp + '] = tensors.data'",
                            "BinOp"
                        ],
                        [
                            "''",
                            "Constant"
                        ],
                        [
                            "''",
                            "Constant"
                        ]
                    ]
                },
                "*operands": {
                    "value": "[self.state_dict()[x].abs(), 1 / (norm + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_296": {
                "input": {
                    "value": "-y",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_476": {
                "input": {
                    "value": "x * theta_max * np.pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_481": {
                "input": {
                    "value": "x * theta_max * np.pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_667": {
                "input": {
                    "value": "-y",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_912": {
                "input": {
                    "value": "-y",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_298": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tc.exp(x)",
                            "Call"
                        ],
                        [
                            "y * norm",
                            "BinOp"
                        ],
                        [
                            "tn(imgs).squeeze()",
                            "Call"
                        ],
                        [
                            "tc.einsum('nc,c->nc', y, 1 / (norm_t + 1e-12))",
                            "Call"
                        ],
                        [
                            "activate_func(y)",
                            "Call"
                        ],
                        [
                            "mps(vecs)",
                            "Call"
                        ],
                        [
                            "mps(vecs, False, 'env', n)",
                            "Call"
                        ],
                        [
                            "mps(vecs, False, 'env', n)",
                            "Call"
                        ],
                        [
                            "mps(x=vecs, para=para_fw)",
                            "Call"
                        ],
                        [
                            "mps(para_fw, imgs)",
                            "Call"
                        ],
                        [
                            "para['activate_fun_final'](y)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((vecs.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', self.envl[nt], self.mps.tensors[nt], self.envr[nt], vecs)",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,na,aib->nb', vecs, y, self.mps.tensors[n])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,na,aib->nb', vecs[:, :, nt], y, self.mps.tensors[nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "y / norm",
                            "BinOp"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt] / (tc.norm(self.mps.tensors[nt]) + 1e-12), env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt], env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.calculate_y(x, env=env, feature_map=para['feature_map'], get_grad_way=para['get_grad_way'], activate=para['activate'], nt=n, normalize_center=para['normalize_center'])",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_by_env(nt, x, env, normalize_t=normalize_center)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((x.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,nca,caib->ncb', vecs[:, :, nt], y, self.mps.tensors[nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt] / (tc.norm(self.mps.tensors[nt]) + 1e-12), env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt], env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.calculate_y(x, env=env, feature_map=para['feature_map'], get_grad_way=para['get_grad_way'], activate=para['activate'], nt=n, normalize_center=para['normalize_center'])",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.mps.tensors[0].shape[1]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_by_env(nt, x, env, normalize_t=normalize_center)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.mps.tensors[0].shape[1]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('nca,caib,ni->ncb', y, self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_simple(nt, x, y, activate=activate, normalize=False)[0]",
                            "Subscript"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.ones((self.channel, self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('cad,caib,cdie->cbe', [y, self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]])",
                            "Call"
                        ],
                        [
                            "tc.einsum('cad,c->cad', y, 1 / norm)",
                            "Call"
                        ],
                        [
                            "[tc.ones((self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)]",
                            "List"
                        ],
                        [
                            "[tc.ones((self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)]",
                            "List"
                        ],
                        [
                            "tc.einsum('ncr,ncl->nc', [yl, yr])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ncr,ncl->nc', [yl, yr])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_669": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tc.exp(x)",
                            "Call"
                        ],
                        [
                            "y * norm",
                            "BinOp"
                        ],
                        [
                            "tn(imgs).squeeze()",
                            "Call"
                        ],
                        [
                            "tc.einsum('nc,c->nc', y, 1 / (norm_t + 1e-12))",
                            "Call"
                        ],
                        [
                            "activate_func(y)",
                            "Call"
                        ],
                        [
                            "mps(vecs)",
                            "Call"
                        ],
                        [
                            "mps(vecs, False, 'env', n)",
                            "Call"
                        ],
                        [
                            "mps(vecs, False, 'env', n)",
                            "Call"
                        ],
                        [
                            "mps(x=vecs, para=para_fw)",
                            "Call"
                        ],
                        [
                            "mps(para_fw, imgs)",
                            "Call"
                        ],
                        [
                            "para['activate_fun_final'](y)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((vecs.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', self.envl[nt], self.mps.tensors[nt], self.envr[nt], vecs)",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,na,aib->nb', vecs, y, self.mps.tensors[n])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,na,aib->nb', vecs[:, :, nt], y, self.mps.tensors[nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "y / norm",
                            "BinOp"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt] / (tc.norm(self.mps.tensors[nt]) + 1e-12), env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt], env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.calculate_y(x, env=env, feature_map=para['feature_map'], get_grad_way=para['get_grad_way'], activate=para['activate'], nt=n, normalize_center=para['normalize_center'])",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_by_env(nt, x, env, normalize_t=normalize_center)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((x.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,nca,caib->ncb', vecs[:, :, nt], y, self.mps.tensors[nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt] / (tc.norm(self.mps.tensors[nt]) + 1e-12), env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt], env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.calculate_y(x, env=env, feature_map=para['feature_map'], get_grad_way=para['get_grad_way'], activate=para['activate'], nt=n, normalize_center=para['normalize_center'])",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.mps.tensors[0].shape[1]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_by_env(nt, x, env, normalize_t=normalize_center)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.mps.tensors[0].shape[1]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('nca,caib,ni->ncb', y, self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_simple(nt, x, y, activate=activate, normalize=False)[0]",
                            "Subscript"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.ones((self.channel, self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('cad,caib,cdie->cbe', [y, self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]])",
                            "Call"
                        ],
                        [
                            "tc.einsum('cad,c->cad', y, 1 / norm)",
                            "Call"
                        ],
                        [
                            "[tc.ones((self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)]",
                            "List"
                        ],
                        [
                            "[tc.ones((self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)]",
                            "List"
                        ],
                        [
                            "tc.einsum('ncr,ncl->nc', [yl, yr])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ncr,ncl->nc', [yl, yr])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_914": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tc.exp(x)",
                            "Call"
                        ],
                        [
                            "y * norm",
                            "BinOp"
                        ],
                        [
                            "tn(imgs).squeeze()",
                            "Call"
                        ],
                        [
                            "tc.einsum('nc,c->nc', y, 1 / (norm_t + 1e-12))",
                            "Call"
                        ],
                        [
                            "activate_func(y)",
                            "Call"
                        ],
                        [
                            "mps(vecs)",
                            "Call"
                        ],
                        [
                            "mps(vecs, False, 'env', n)",
                            "Call"
                        ],
                        [
                            "mps(vecs, False, 'env', n)",
                            "Call"
                        ],
                        [
                            "mps(x=vecs, para=para_fw)",
                            "Call"
                        ],
                        [
                            "mps(para_fw, imgs)",
                            "Call"
                        ],
                        [
                            "para['activate_fun_final'](y)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((vecs.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', self.envl[nt], self.mps.tensors[nt], self.envr[nt], vecs)",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,na,aib->nb', vecs, y, self.mps.tensors[n])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,na,aib->nb', vecs[:, :, nt], y, self.mps.tensors[nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "y / norm",
                            "BinOp"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt] / (tc.norm(self.mps.tensors[nt]) + 1e-12), env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt], env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.calculate_y(x, env=env, feature_map=para['feature_map'], get_grad_way=para['get_grad_way'], activate=para['activate'], nt=n, normalize_center=para['normalize_center'])",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_by_env(nt, x, env, normalize_t=normalize_center)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((x.shape[0], self.mps.tensors[0].shape[0]), device=self.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('ni,nca,caib->ncb', vecs[:, :, nt], y, self.mps.tensors[nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt] / (tc.norm(self.mps.tensors[nt]) + 1e-12), env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "tc.einsum('na,aib,nb,ni->n', env['l'][nt], self.mps.tensors[nt], env['r'][nt], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.calculate_y(x, env=env, feature_map=para['feature_map'], get_grad_way=para['get_grad_way'], activate=para['activate'], nt=n, normalize_center=para['normalize_center'])",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.mps.tensors[0].shape[1]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_by_env(nt, x, env, normalize_t=normalize_center)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.mps.tensors[0].shape[1]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('nca,caib,ni->ncb', y, self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], vecs[:, :, nt])",
                            "Call"
                        ],
                        [
                            "self.activate(y, activate)",
                            "Call"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "self.calculate_y_simple(nt, x, y, activate=activate, normalize=False)[0]",
                            "Subscript"
                        ],
                        [
                            "tc.ones((x.shape[0], self.channel, self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.ones((self.channel, self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)",
                            "Call"
                        ],
                        [
                            "tc.einsum('cad,caib,cdie->cbe', [y, self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]], self.tensors[:, nt, :self.dims[nt], :, :self.dims[nt + 1]]])",
                            "Call"
                        ],
                        [
                            "tc.einsum('cad,c->cad', y, 1 / norm)",
                            "Call"
                        ],
                        [
                            "[tc.ones((self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)]",
                            "List"
                        ],
                        [
                            "[tc.ones((self.dims[0], self.dims[0]), device=self.data_device, dtype=self.data_dtype)]",
                            "List"
                        ],
                        [
                            "tc.einsum('ncr,ncl->nc', [yl, yr])",
                            "Call"
                        ],
                        [
                            "tc.einsum('ncr,ncl->nc', [yl, yr])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_gpu_memory/gpu_memory_log.py": {
        "torch": {
            "is_tensor_25": {
                "obj": {
                    "value": "obj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gc.get_objects()",
                            "Call"
                        ]
                    ]
                }
            },
            "memory_allocated_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "memory_cached_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_cached_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_gpu_memory/gpu_test.py": {
        "torch": {
            "device_19": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_20": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "D_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float",
                            "Attribute"
                        ]
                    ]
                }
            },
            "randn_21": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "D_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float",
                            "Attribute"
                        ]
                    ]
                }
            },
            "randn_23": {
                "variable": {
                    "value": "w1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "D_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float",
                            "Attribute"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_24": {
                "variable": {
                    "value": "w2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "D_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float",
                            "Attribute"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "randn_7": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_10": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ab,b->ab",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[x, 1 / (norm + 1e-10)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_14": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_17": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_21": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abc,b,c->a",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[x, y, z]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}