{
    "evaluation.py": {
        "sklearn": {
            "roc_auc_score_17": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1 for cs in true_edges] + [0 for ns in false_edges]",
                            "BinOp"
                        ],
                        [
                            "[labels[perm[i]] for i in range(0, len(labels))]",
                            "ListComp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_scores + false_scores",
                            "BinOp"
                        ],
                        [
                            "[scores[perm[i]] for i in range(0, len(scores))]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "roc_curve_18": {
                "variable": {
                    "value": "(fprs, tprs, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1 for cs in true_edges] + [0 for ns in false_edges]",
                            "BinOp"
                        ],
                        [
                            "[labels[perm[i]] for i in range(0, len(labels))]",
                            "ListComp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_scores + false_scores",
                            "BinOp"
                        ],
                        [
                            "[scores[perm[i]] for i in range(0, len(scores))]",
                            "ListComp"
                        ]
                    ]
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "precision_recall_curve_32": {
                "variable": {
                    "value": "(precisions, recalls, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1 for cs in true_edges] + [0 for ns in false_edges]",
                            "BinOp"
                        ],
                        [
                            "[labels[perm[i]] for i in range(0, len(labels))]",
                            "ListComp"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_scores + false_scores",
                            "BinOp"
                        ],
                        [
                            "[scores[perm[i]] for i in range(0, len(scores))]",
                            "ListComp"
                        ]
                    ]
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "neural_nets/autoencoders/gravity_gae/evaluation.py": {
        "sklearn": {
            "roc_auc_score_70": {
                "variable": {
                    "value": "roc_score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([np.ones(len(preds)), np.zeros(len(preds_neg))])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([preds, preds_neg])",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_71": {
                "variable": {
                    "value": "ap_score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([np.ones(len(preds)), np.zeros(len(preds_neg))])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([preds, preds_neg])",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {}
    },
    "neural_nets/autoencoders/linear_gae/evaluation.py": {
        "sklearn": {
            "roc_auc_score_41": {
                "variable": {
                    "value": "roc_score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([np.ones(len(preds)), np.zeros(len(preds_neg))])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([preds, preds_neg])",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_42": {
                "variable": {
                    "value": "ap_score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([np.ones(len(preds)), np.zeros(len(preds_neg))])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([preds, preds_neg])",
                            "Call"
                        ]
                    ]
                }
            },
            "adjusted_mutual_info_score_59": {
                "labels_true": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "clustering_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KMeans(n_clusters=nb_clusters, init='k-means++').fit(emb).labels_",
                            "Attribute"
                        ]
                    ]
                }
            },
            "KMeans_57": {
                "n_clusters": {
                    "value": "nb_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(np.unique(label))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "init": {
                    "value": "k-means++",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {}
    },
    "neural_nets/link_pred.py": {
        "sklearn": {
            "roc_curve_234": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_edges + false_edges",
                            "BinOp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "roc_auc_score_235": {
                "variable": {
                    "value": "auroc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_edges + false_edges",
                            "BinOp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "precision_recall_curve_237": {
                "variable": {
                    "value": "(prec, recall, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_edges + false_edges",
                            "BinOp"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "y_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "auc_238": {
                "variable": {
                    "value": "aupr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "prec",
                    "type": "variable",
                    "possible_values": []
                },
                "reorder": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "average_precision_score_242": {
                "variable": {
                    "value": "self.performance[AP]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_edges + false_edges",
                            "BinOp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "neural_nets/tgn/evaluation/evaluation.py": {
        "sklearn": {
            "average_precision_score_43": {
                "y_true": {
                    "value": "true_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([np.ones(size), np.zeros(size)])",
                            "Call"
                        ],
                        [
                            "np.concatenate([np.ones(size), np.asarray([])])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pred_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([pos_prob.cpu().numpy(), neg_prob.cpu().numpy()])",
                            "Call"
                        ],
                        [
                            "np.concatenate([pos_prob.cpu().numpy(), neg_prob.cpu().numpy()])",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_44": {
                "y_true": {
                    "value": "true_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([np.ones(size), np.zeros(size)])",
                            "Call"
                        ],
                        [
                            "np.concatenate([np.ones(size), np.asarray([])])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pred_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([pos_prob.cpu().numpy(), neg_prob.cpu().numpy()])",
                            "Call"
                        ],
                        [
                            "np.concatenate([pos_prob.cpu().numpy(), neg_prob.cpu().numpy()])",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "no_grad_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sst_svm_modeler.py": {
        "sklearn": {
            "LinearSVC_200": {
                "variable": {
                    "value": "self.__linear_svm__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "class_weight": {
                    "value": "balanced",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "400000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LinearSVC_463": {
                "variable": {
                    "value": "self.__linear_svm__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "class_weight": {
                    "value": "balanced",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "400000",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "neural_nets/autoencoders/gravity_gae/gae_fit.py": {
        "tensorflow": {
            "set_verbosity_22": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_124": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sparse_placeholder_59": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_placeholder_60": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_placeholder_61": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_with_default_62": {
                "input": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "name_scope_101": {
                "name": {
                    "value": "optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_105": {
                "tensor": {
                    "value": "tf.sparse_tensor_to_dense(placeholders['adj_orig'], validate_indices=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "tensor": {
                    "value": "tf.sparse_tensor_to_dense(placeholders['adj_orig'], validate_indices=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "neural_nets/autoencoders/gravity_gae/initializations.py": {
        "tensorflow": {
            "Variable_16": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([input_dim, output_dim], minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "neural_nets/autoencoders/gravity_gae/layers.py": {
        "tensorflow": {
            "cast_31": {
                "variable": {
                    "value": "dropout_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(random_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_180": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "X * X",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_181": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_82": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs_source, inputs_target, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_83": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs_source, inputs_target, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_118": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_119": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_120": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs_source, inputs_target, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_121": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs_source, inputs_target, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_134": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_140": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[:, 0:int(FLAGS.dimension / 2)]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "inputs_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[:, int(FLAGS.dimension / 2):FLAGS.dimension]",
                            "Subscript"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_141": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs_source, inputs_target, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_155": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_167": {
                "variable": {
                    "value": "mass",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.ones([tf.shape(inputs_mass)[0], 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(inputs_mass)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_170": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._call(inputs)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "mass - tf.scalar_mul(FLAGS.lamb, tf.log(dist))",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(outputs, [-1])",
                            "Call"
                        ],
                        [
                            "self.act(outputs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "floor_31": {
                "x": {
                    "value": "random_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Name"
                        ],
                        [
                            "random_tensor + tf.random_uniform(noise_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "l2_normalize_159": {
                "variable": {
                    "value": "inputs_z",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs[:, 0:FLAGS.dimension - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_181": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_65": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_167": {
                "shape": {
                    "value": "[tf.shape(inputs_mass)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_167": {
                "a": {
                    "value": "inputs_mass",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[:, FLAGS.dimension - 1:FLAGS.dimension]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "scalar_mul_169": {
                "scalar": {
                    "value": "FLAGS.lamb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.log(dist)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_184": {
                "a": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(X * X, 1, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_169": {
                "x": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_distance(inputs_z, FLAGS.epsilon)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_167": {
                "input": {
                    "value": "inputs_mass",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[:, FLAGS.dimension - 1:FLAGS.dimension]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "neural_nets/autoencoders/gravity_gae/model.py": {
        "tensorflow": {
            "get_collection_40": {
                "variable": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_123": {
                "x": {
                    "value": "self.z_log_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_201": {
                "x": {
                    "value": "self.z_log_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_280": {
                "x": {
                    "value": "self.z_log_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "neural_nets/autoencoders/gravity_gae/optimizer.py": {
        "tensorflow": {
            "AdamOptimizer_23": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_27": {
                "variable": {
                    "value": "self.correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(tf.greater_equal(tf.sigmoid(preds_sub), 0.5), tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(labels_sub, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_29": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_42": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_54": {
                "variable": {
                    "value": "self.correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(tf.greater_equal(tf.sigmoid(preds_sub), 0.5), tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(labels_sub, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_56": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_18": {
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(logits=preds_sub, targets=labels_sub, pos_weight=pos_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_27": {
                "x": {
                    "value": "tf.greater_equal(tf.sigmoid(preds_sub), 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_28": {
                "x": {
                    "value": "labels_sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Name"
                        ],
                        [
                            "labels",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_29": {
                "x": {
                    "value": "self.correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_37": {
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(logits=preds_sub, targets=labels_sub, pos_weight=pos_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_46": {
                "input_tensor": {
                    "value": "tf.reduce_sum(1 + 2 * model.z_log_std - tf.square(model.z_mean) - tf.square(tf.exp(model.z_log_std)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_54": {
                "x": {
                    "value": "tf.greater_equal(tf.sigmoid(preds_sub), 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_55": {
                "x": {
                    "value": "labels_sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Name"
                        ],
                        [
                            "labels",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_56": {
                "x": {
                    "value": "self.correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weighted_cross_entropy_with_logits_19": {
                "logits": {
                    "value": "preds_sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "Name"
                        ],
                        [
                            "preds",
                            "Name"
                        ]
                    ]
                },
                "targets": {
                    "value": "labels_sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Name"
                        ],
                        [
                            "labels",
                            "Name"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "pos_weight",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "greater_equal_27": {
                "x": {
                    "value": "tf.sigmoid(preds_sub)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "weighted_cross_entropy_with_logits_38": {
                "logits": {
                    "value": "preds_sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "Name"
                        ],
                        [
                            "preds",
                            "Name"
                        ]
                    ]
                },
                "targets": {
                    "value": "labels_sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Name"
                        ],
                        [
                            "labels",
                            "Name"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "pos_weight",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_46": {
                "input_tensor": {
                    "value": "1 + 2 * model.z_log_std - tf.square(model.z_mean) - tf.square(tf.exp(model.z_log_std))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_equal_54": {
                "x": {
                    "value": "tf.sigmoid(preds_sub)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_27": {
                "x": {
                    "value": "preds_sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "Name"
                        ],
                        [
                            "preds",
                            "Name"
                        ]
                    ]
                }
            },
            "sigmoid_54": {
                "x": {
                    "value": "preds_sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "Name"
                        ],
                        [
                            "preds",
                            "Name"
                        ]
                    ]
                }
            },
            "square_49": {
                "x": {
                    "value": "tf.exp(model.z_log_std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_48": {
                "x": {
                    "value": "model.z_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_49": {
                "x": {
                    "value": "model.z_log_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "neural_nets/autoencoders/gravity_gae/preprocessing.py": {
        "tensorflow": {}
    },
    "neural_nets/autoencoders/gravity_gae/train.py": {
        "tensorflow": {
            "set_verbosity_15": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_213": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sparse_placeholder_148": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_placeholder_149": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_placeholder_150": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_with_default_151": {
                "input": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "name_scope_190": {
                "name": {
                    "value": "optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_194": {
                "tensor": {
                    "value": "tf.sparse_tensor_to_dense(placeholders['adj_orig'], validate_indices=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_201": {
                "tensor": {
                    "value": "tf.sparse_tensor_to_dense(placeholders['adj_orig'], validate_indices=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "neural_nets/autoencoders/linear_gae/gae_fit.py": {
        "tensorflow": {
            "set_verbosity_19": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_116": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sparse_placeholder_60": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_placeholder_61": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_placeholder_62": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_with_default_63": {
                "input": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "name_scope_93": {
                "name": {
                    "value": "optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_97": {
                "tensor": {
                    "value": "tf.sparse_tensor_to_dense(placeholders['adj_orig'], validate_indices=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_104": {
                "tensor": {
                    "value": "tf.sparse_tensor_to_dense(placeholders['adj_orig'], validate_indices=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "neural_nets/autoencoders/linear_gae/initializations.py": {
        "tensorflow": {
            "Variable_16": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([input_dim, output_dim], minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "neural_nets/autoencoders/linear_gae/layers.py": {
        "tensorflow": {
            "cast_28": {
                "variable": {
                    "value": "dropout_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(random_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_79": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_80": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_115": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_116": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_117": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_118": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "floor_28": {
                "x": {
                    "value": "random_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Name"
                        ],
                        [
                            "random_tensor + tf.random_uniform(noise_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_62": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "neural_nets/autoencoders/linear_gae/model.py": {
        "tensorflow": {
            "get_collection_45": {
                "variable": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_128": {
                "x": {
                    "value": "self.z_log_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_197": {
                "x": {
                    "value": "self.z_log_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_292": {
                "x": {
                    "value": "self.z_log_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "neural_nets/autoencoders/linear_gae/optimizer.py": {
        "tensorflow": {
            "AdamOptimizer_28": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_32": {
                "variable": {
                    "value": "self.correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(tf.greater_equal(tf.sigmoid(preds_sub), 0.5), tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(labels_sub, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_34": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_47": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_59": {
                "variable": {
                    "value": "self.correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(tf.greater_equal(tf.sigmoid(preds_sub), 0.5), tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(labels_sub, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_61": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_23": {
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(logits=preds_sub, targets=labels_sub, pos_weight=pos_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_32": {
                "x": {
                    "value": "tf.greater_equal(tf.sigmoid(preds_sub), 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_33": {
                "x": {
                    "value": "labels_sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Name"
                        ],
                        [
                            "labels",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_34": {
                "x": {
                    "value": "self.correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_42": {
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(logits=preds_sub, targets=labels_sub, pos_weight=pos_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_51": {
                "input_tensor": {
                    "value": "tf.reduce_sum(1 + 2 * model.z_log_std - tf.square(model.z_mean) - tf.square(tf.exp(model.z_log_std)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_59": {
                "x": {
                    "value": "tf.greater_equal(tf.sigmoid(preds_sub), 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_60": {
                "x": {
                    "value": "labels_sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Name"
                        ],
                        [
                            "labels",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_61": {
                "x": {
                    "value": "self.correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weighted_cross_entropy_with_logits_24": {
                "logits": {
                    "value": "preds_sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "Name"
                        ],
                        [
                            "preds",
                            "Name"
                        ]
                    ]
                },
                "targets": {
                    "value": "labels_sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Name"
                        ],
                        [
                            "labels",
                            "Name"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "pos_weight",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "greater_equal_32": {
                "x": {
                    "value": "tf.sigmoid(preds_sub)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "weighted_cross_entropy_with_logits_43": {
                "logits": {
                    "value": "preds_sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "Name"
                        ],
                        [
                            "preds",
                            "Name"
                        ]
                    ]
                },
                "targets": {
                    "value": "labels_sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Name"
                        ],
                        [
                            "labels",
                            "Name"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "pos_weight",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_51": {
                "input_tensor": {
                    "value": "1 + 2 * model.z_log_std - tf.square(model.z_mean) - tf.square(tf.exp(model.z_log_std))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_equal_59": {
                "x": {
                    "value": "tf.sigmoid(preds_sub)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_32": {
                "x": {
                    "value": "preds_sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "Name"
                        ],
                        [
                            "preds",
                            "Name"
                        ]
                    ]
                }
            },
            "sigmoid_59": {
                "x": {
                    "value": "preds_sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "Name"
                        ],
                        [
                            "preds",
                            "Name"
                        ]
                    ]
                }
            },
            "square_54": {
                "x": {
                    "value": "tf.exp(model.z_log_std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_53": {
                "x": {
                    "value": "model.z_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_54": {
                "x": {
                    "value": "model.z_log_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "neural_nets/autoencoders/linear_gae/preprocessing.py": {
        "tensorflow": {}
    },
    "neural_nets/autoencoders/linear_gae/train.py": {
        "tensorflow": {
            "Session_233": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sparse_placeholder_174": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_placeholder_175": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_placeholder_176": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_with_default_177": {
                "input": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "name_scope_210": {
                "name": {
                    "value": "optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_214": {
                "tensor": {
                    "value": "tf.sparse_tensor_to_dense(placeholders['adj_orig'], validate_indices=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_221": {
                "tensor": {
                    "value": "tf.sparse_tensor_to_dense(placeholders['adj_orig'], validate_indices=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "neural_nets/tgn/model/temporal_attention.py": {
        "torch": {
            "MultiheadAttention_28": {
                "variable": {
                    "value": "self.multi_head_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embed_dim": {
                    "value": "self.query_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kdim": {
                    "value": "self.key_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "vdim": {
                    "value": "self.key_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_heads": {
                    "value": "n_head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_50": {
                "variable": {
                    "value": "src_node_features_unrolled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_node_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[src_node_features_unrolled, src_time_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[neighbors_features, edge_features, neighbors_time_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "neural_nets/tgn/model/tgn.py": {
        "torch": {
            "from_numpy_30": {
                "variable": {
                    "value": "self.node_raw_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "node_features.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_31": {
                "variable": {
                    "value": "self.edge_raw_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "edge_features.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_233": {
                "variable": {
                    "value": "edge_times",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "edge_times",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(edge_times).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_241": {
                "variable": {
                    "value": "source_message",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[source_memory, destination_memory, edge_features, source_time_delta_encoding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "time_diffs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[source_time_diffs, destination_time_diffs, negative_time_diffs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_193": {
                "tensors": {
                    "value": "[source_node_embedding, source_node_embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_194": {
                "tensors": {
                    "value": "[destination_node_embedding, negative_node_embedding]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "neural_nets/tgn/model/time_encoding.py": {
        "torch": {
            "Linear_11": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_13": {
                "variable": {
                    "value": "self.w.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(1 / 10 ** np.linspace(0, 9, dimension)).float().reshape(dimension, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_15": {
                "variable": {
                    "value": "self.w.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(dimension).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_23": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w(t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_13": {
                "ndarray": {
                    "value": "1 / 10 ** np.linspace(0, 9, dimension)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_13": {
                "input": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "*size": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "neural_nets/tgn/modules/embedding_module.py": {
        "torch": {
            "from_numpy_88": {
                "variable": {
                    "value": "source_nodes_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "source_nodes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_89": {
                "variable": {
                    "value": "timestamps_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(timestamps).float().to(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_163": {
                "variable": {
                    "value": "self.linear_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[torch.nn.Linear(embedding_dimension + n_time_features + n_edge_features, embedding_dimension) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_166": {
                "variable": {
                    "value": "self.linear_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[torch.nn.Linear(embedding_dimension + n_node_features + n_time_features, embedding_dimension) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "neighbors_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[neighbor_embeddings, edge_time_embeddings, edge_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_176": {
                "variable": {
                    "value": "neighbors_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neighbor_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compute_embedding(memory, neighbors, np.repeat(timestamps, n_neighbors), n_layers=n_layers - 1, n_neighbors=n_neighbors)",
                            "Call"
                        ],
                        [
                            "neighbor_embeddings.view(len(source_nodes), effective_n_neighbors, -1)",
                            "Call"
                        ],
                        [
                            "self.linear_1[n_layer - 1](neighbors_features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "source_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[source_node_features, source_nodes_time_embedding.squeeze()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "source_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[neighbors_sum, source_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_198": {
                "variable": {
                    "value": "self.attention_models",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TemporalAttentionLayer(n_node_features=n_node_features, n_neighbors_features=n_node_features, n_edge_features=n_edge_features, time_dim=n_time_features, n_head=n_heads, dropout=dropout, output_dimension=n_node_features) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "from_numpy_109": {
                "variable": {
                    "value": "neighbors_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "neighbors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neighbors.flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_111": {
                "variable": {
                    "value": "edge_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "edge_idxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(edge_idxs).long().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_115": {
                "variable": {
                    "value": "edge_deltas_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "edge_deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "timestamps[:, np.newaxis] - edge_times",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_89": {
                "ndarray": {
                    "value": "timestamps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_92": {
                "input": {
                    "value": "timestamps_torch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(torch.from_numpy(timestamps).float().to(self.device), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_163": {
                "in_features": {
                    "value": "embedding_dimension + n_time_features + n_edge_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_dimension",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_167": {
                "in_features": {
                    "value": "embedding_dimension + n_node_features + n_time_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_dimension",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "neural_nets/tgn/modules/memory.py": {
        "torch": {
            "Parameter_28": {
                "variable": {
                    "value": "self.memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((self.n_nodes, self.memory_dimension)).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.last_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_nodes).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_28": {
                "*size": {
                    "value": "(self.n_nodes, self.memory_dimension)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "*size": {
                    "value": "self.n_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "neural_nets/tgn/modules/memory_updater.py": {
        "torch": {
            "LayerNorm_14": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "memory_dimension",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRUCell_18": {
                "variable": {
                    "value": "self.memory_updater",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "message_dimension",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "memory_dimension",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "neural_nets/tgn/modules/message_aggregator.py": {
        "torch": {
            "stack_52": {
                "tensors": {
                    "value": "unique_messages",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(unique_messages) if len(to_update_node_ids) > 0 else []",
                            "IfExp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(unique_messages) if len(to_update_node_ids) > 0 else []",
                            "IfExp"
                        ]
                    ]
                }
            },
            "stack_53": {
                "tensors": {
                    "value": "unique_timestamps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(unique_timestamps) if len(to_update_node_ids) > 0 else []",
                            "IfExp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(unique_timestamps) if len(to_update_node_ids) > 0 else []",
                            "IfExp"
                        ]
                    ]
                }
            },
            "stack_78": {
                "tensors": {
                    "value": "unique_messages",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(unique_messages) if len(to_update_node_ids) > 0 else []",
                            "IfExp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(unique_messages) if len(to_update_node_ids) > 0 else []",
                            "IfExp"
                        ]
                    ]
                }
            },
            "stack_79": {
                "tensors": {
                    "value": "unique_timestamps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(unique_timestamps) if len(to_update_node_ids) > 0 else []",
                            "IfExp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(unique_timestamps) if len(to_update_node_ids) > 0 else []",
                            "IfExp"
                        ]
                    ]
                }
            },
            "mean_75": {
                "input": {
                    "value": "torch.stack([m[0] for m in messages[node_id]])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_75": {
                "tensors": {
                    "value": "[m[0] for m in messages[node_id]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "neural_nets/tgn/modules/message_function.py": {
        "torch": {
            "Sequential_17": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(raw_message_dimension, raw_message_dimension // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "raw_message_dimension",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "raw_message_dimension // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "raw_message_dimension // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "message_dimension",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "neural_nets/tgn/tgn_fit.py": {
        "torch": {
            "manual_seed_18": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_92": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device_string",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:{}'.format(GPU) if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "BCELoss_114": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_115": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tgn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "is_available_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_291": {
                "obj": {
                    "value": "tgn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "MODEL_SAVE_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'./saved_models/{args.prefix}-{args.data}.pth'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "save_251": {
                "obj": {
                    "value": "tgn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "get_checkpoint_path(epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_167": {
                "variable": {
                    "value": "pos_label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(sources_batch)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device(device_string)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_168": {
                "variable": {
                    "value": "neg_label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(sources_batch)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device(device_string)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_246": {
                "f": {
                    "value": "best_model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_checkpoint_path(early_stopper.best_epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "neural_nets/tgn/train_self_supervised.py": {
        "torch": {
            "device_128": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device_string",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:{}'.format(GPU) if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCELoss_150": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_151": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tgn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "is_available_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_332": {
                "obj": {
                    "value": "tgn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "MODEL_SAVE_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'./saved_models/{args.prefix}-{args.data}.pth'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "save_289": {
                "obj": {
                    "value": "tgn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "get_checkpoint_path(epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_203": {
                "variable": {
                    "value": "pos_label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(sources_batch)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device(device_string)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_204": {
                "variable": {
                    "value": "neg_label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(sources_batch)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device(device_string)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_284": {
                "f": {
                    "value": "best_model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_checkpoint_path(early_stopper.best_epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "neural_nets/tgn/utils/utils.py": {
        "torch": {
            "Linear_8": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim1 + dim2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim3",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_9": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim3",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim4",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_10": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_16": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}