{
    "eval.py": {
        "torch": {
            "DataLoader_46": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "normal_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FloorplanSVG(args.data_path, 'test.txt', format='lmdb', lmdb_folder='cubi_lmdb/', augmentations=Compose([DictToTensor()]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_48": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "model.conv4_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.n_classes",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_54": {
                "variable": {
                    "value": "model.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.n_classes",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.n_classes",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "floortrans/loaders/augmentations.py": {
        "torch": {
            "cat_166": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(heatmap_tensor, label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(heatmap_tensor, label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_335": {
                "variable": {
                    "value": "new_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[image.shape[0], new_h, new_w]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_338": {
                "variable": {
                    "value": "new_heatmaps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.input_slice[0], new_h, new_w]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_341": {
                "variable": {
                    "value": "new_rooms",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.input_slice[1], new_h, new_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.fill[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "full_343": {
                "variable": {
                    "value": "new_icons",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.input_slice[2], new_h, new_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.fill[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_346": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(new_heatmaps, new_rooms, new_icons)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_381": {
                "variable": {
                    "value": "new_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[image.shape[0], new_h, new_w]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_384": {
                "variable": {
                    "value": "new_rooms",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, new_h, new_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.fill[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "full_386": {
                "variable": {
                    "value": "new_icons",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, new_h, new_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.fill[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_389": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(new_rooms, new_icons)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_439": {
                "variable": {
                    "value": "new_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[image.shape[0], new_h, new_w]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_442": {
                "variable": {
                    "value": "new_rooms",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, new_h, new_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.fill[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "full_444": {
                "variable": {
                    "value": "new_icons",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, new_h, new_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.fill[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_447": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(new_rooms, new_icons)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_506": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_509": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "sample",
                            "Name"
                        ],
                        [
                            "img_1 * alpha + (1 - alpha) * img_2",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(res, min=0, max=255)",
                            "Call"
                        ],
                        [
                            "torch.stack((gray, gray, gray), dim=0)",
                            "Call"
                        ],
                        [
                            "self.grayscale(img)",
                            "Call"
                        ],
                        [
                            "self.blend(img, res, var)",
                            "Call"
                        ],
                        [
                            "torch.zeros(img.shape)",
                            "Call"
                        ],
                        [
                            "self.blend(img, res, var)",
                            "Call"
                        ],
                        [
                            "self.grayscale(img)",
                            "Call"
                        ],
                        [
                            "torch.full(res.shape, mean_color)",
                            "Call"
                        ],
                        [
                            "self.blend(img, res, var)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_518": {
                "variable": {
                    "value": "gray",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gray",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "red + green + blue",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(gray, min=0, max=255)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_519": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(gray, gray, gray)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_530": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "img.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_538": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "res.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "mean_color",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "res.mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_587": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rooms_padded, icons_padded)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_610": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rooms_padded, icons_padded)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_630": {
                "variable": {
                    "value": "new_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[img.shape[0], new_shape[0], new_shape[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_631": {
                "variable": {
                    "value": "old_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_634": {
                "variable": {
                    "value": "img_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_640": {
                "variable": {
                    "value": "interm_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "interm_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(ratio * img_s).ceil()",
                            "Call"
                        ],
                        [
                            "[interm_shape[0], interm_shape[1]]",
                            "List"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'nearest'",
                            "MethodArgument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "aling_corners",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "full_645": {
                "variable": {
                    "value": "new_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.augmentations",
                            "Attribute"
                        ],
                        [
                            "(interm_img.shape[0], self.size[0], self.size[1])",
                            "Tuple"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "fill_cval",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_577": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(heatmaps, rooms_padded, icons_padded)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_58": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_92": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "floortrans/loaders/svg_loader.py": {
        "torch": {
            "tensor_61": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "house.get_segmentation_tensor().astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "fplan.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_70": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(house.get_segmentation_tensor().astype(np.float32))",
                            "Call"
                        ],
                        [
                            "label.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(label, size=(height_org, width_org), mode='nearest')",
                            "Call"
                        ],
                        [
                            "label.squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(height_org, width_org)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "floortrans/losses/uncertainty_loss.py": {
        "torch": {
            "Parameter_21": {
                "variable": {
                    "value": "self.log_vars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([0, 0], requires_grad=True, dtype=torch.float32).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_22": {
                "variable": {
                    "value": "self.log_vars_mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(input_slice[0], requires_grad=True, dtype=torch.float32).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_32": {
                "variable": {
                    "value": "pred_arr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input * mask.to(torch.float32)",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.input_slice",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_35": {
                "variable": {
                    "value": "target_arr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "interpolate(target, size=(ct, h, w), mode='nearest')",
                            "Call"
                        ],
                        [
                            "target.squeeze(1)",
                            "Call"
                        ],
                        [
                            "target * mask.to(torch.float32)",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.target_slice",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_39": {
                "variable": {
                    "value": "rooms_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rooms_target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.squeeze(rooms_target, 1)",
                            "Call"
                        ],
                        [
                            "rooms_target.type(torch.cuda.LongTensor) - self.sub",
                            "BinOp"
                        ],
                        [
                            "rooms_target.type(torch.LongTensor) - self.sub",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_40": {
                "variable": {
                    "value": "icons_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "icons_target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.squeeze(icons_target, 1)",
                            "Call"
                        ],
                        [
                            "icons_target.type(torch.cuda.LongTensor) - self.sub",
                            "BinOp"
                        ],
                        [
                            "icons_target.type(torch.LongTensor) - self.sub",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_50": {
                "variable": {
                    "value": "self.loss_rooms_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "rooms_pred * torch.exp(-self.log_vars[0])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "rooms_target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.squeeze(rooms_target, 1)",
                            "Call"
                        ],
                        [
                            "rooms_target.type(torch.cuda.LongTensor) - self.sub",
                            "BinOp"
                        ],
                        [
                            "rooms_target.type(torch.LongTensor) - self.sub",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cross_entropy_51": {
                "variable": {
                    "value": "self.loss_icons_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "icons_pred * torch.exp(-self.log_vars[1])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "icons_target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.squeeze(icons_target, 1)",
                            "Call"
                        ],
                        [
                            "icons_target.type(torch.cuda.LongTensor) - self.sub",
                            "BinOp"
                        ],
                        [
                            "icons_target.type(torch.LongTensor) - self.sub",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cross_entropy_53": {
                "variable": {
                    "value": "self.loss_rooms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "rooms_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "rooms_target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.squeeze(rooms_target, 1)",
                            "Call"
                        ],
                        [
                            "rooms_target.type(torch.cuda.LongTensor) - self.sub",
                            "BinOp"
                        ],
                        [
                            "rooms_target.type(torch.LongTensor) - self.sub",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cross_entropy_54": {
                "variable": {
                    "value": "self.loss_icons",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "icons_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "icons_target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.squeeze(icons_target, 1)",
                            "Call"
                        ],
                        [
                            "icons_target.type(torch.cuda.LongTensor) - self.sub",
                            "BinOp"
                        ],
                        [
                            "icons_target.type(torch.LongTensor) - self.sub",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_105": {
                "variable": {
                    "value": "variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.log_vars.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_106": {
                "variable": {
                    "value": "mse_variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.log_vars_mse.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_129": {
                "variable": {
                    "value": "walls",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.nn.functional.softmax(heatmap_mask, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_29": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "interpolate(target, size=(ct, h, w), mode='nearest')",
                            "Call"
                        ],
                        [
                            "target.squeeze(1)",
                            "Call"
                        ],
                        [
                            "target * mask.to(torch.float32)",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(ct, h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mse_loss_61": {
                "variable": {
                    "value": "self.loss_heatmap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "heatmap_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "heatmap_target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_21": {
                "data": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_22": {
                "*size": {
                    "value": "input_slice[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_82": {
                "input": {
                    "value": "diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(preds - targets) ** 2",
                            "BinOp"
                        ],
                        [
                            "(preds - targets) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_86": {
                "input": {
                    "value": "1 + torch.exp(logvars)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_129": {
                "input": {
                    "value": "heatmap_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rooms_pred",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_146": {
                "input": {
                    "value": "diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(preds - targets) ** 2",
                            "BinOp"
                        ],
                        [
                            "(preds - targets) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_86": {
                "input": {
                    "value": "logvars",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_149": {
                "input": {
                    "value": "-logvars",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_50": {
                "input": {
                    "value": "-self.log_vars[0]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_51": {
                "input": {
                    "value": "-self.log_vars[1]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "floortrans/metrics.py": {
        "torch": {
            "split_94": {
                "variable": {
                    "value": "pred_arr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred[:, :, pad:-pad, :]",
                            "Subscript"
                        ],
                        [
                            "pred[:, :, :, pad:-pad]",
                            "Subscript"
                        ],
                        [
                            "transform.resize(pred, (pred_count, channels, height, width), order=3, mode='constant', anti_aliasing=False)",
                            "Call"
                        ],
                        [
                            "model(rot_image)",
                            "Call"
                        ],
                        [
                            "rot(pred, 'tensor', back)",
                            "Call"
                        ],
                        [
                            "rot(pred, 'points', back)",
                            "Call"
                        ],
                        [
                            "interpolate(pred, size=(height, width), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "input_slice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_96": {
                "variable": {
                    "value": "rooms_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rooms_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "softmax(rooms_pred, 0).argmax(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_96": {
                "variable": {
                    "value": "rooms_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eq_98": {
                "variable": {
                    "value": "rooms_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rooms_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "softmax(rooms_pred, 0).argmax(0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "rooms_target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target[input_slice[0]].type(torch.cuda.LongTensor) - sub",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_98": {
                "variable": {
                    "value": "rooms_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_101": {
                "variable": {
                    "value": "icons_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "icons_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "softmax(icons_pred, 0).argmax(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_101": {
                "variable": {
                    "value": "icons_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eq_102": {
                "variable": {
                    "value": "icons_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "icons_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "softmax(icons_pred, 0).argmax(0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "icons_target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target[input_slice[0] + 1].type(torch.cuda.LongTensor) - sub",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_102": {
                "variable": {
                    "value": "icons_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_143": {
                "variable": {
                    "value": "prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[pred_count, n_classes, height, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_159": {
                "variable": {
                    "value": "prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros([pred_count, n_classes, height, width])",
                            "Call"
                        ],
                        [
                            "model(images_val)",
                            "Call"
                        ],
                        [
                            "torch.mean(prediction, 0, True)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_154": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred[:, :, pad:-pad, :]",
                            "Subscript"
                        ],
                        [
                            "pred[:, :, :, pad:-pad]",
                            "Subscript"
                        ],
                        [
                            "transform.resize(pred, (pred_count, channels, height, width), order=3, mode='constant', anti_aliasing=False)",
                            "Call"
                        ],
                        [
                            "model(rot_image)",
                            "Call"
                        ],
                        [
                            "rot(pred, 'tensor', back)",
                            "Call"
                        ],
                        [
                            "rot(pred, 'points', back)",
                            "Call"
                        ],
                        [
                            "interpolate(pred, size=(height, width), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(height, width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "floortrans/models/hg_furukawa_original.py": {
        "torch": {
            "BatchNorm2d_12": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.numIn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.numIn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(self.numOut / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(self.numOut / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(self.numOut / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(self.numOut / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(self.numOut / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(self.numOut / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.numOut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv1_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_62": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_67": {
                "variable": {
                    "value": "self.maxpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_72": {
                "variable": {
                    "value": "self.maxpool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_77": {
                "variable": {
                    "value": "self.maxpool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_82": {
                "variable": {
                    "value": "self.maxpool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_88": {
                "variable": {
                    "value": "self.upsample4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_95": {
                "variable": {
                    "value": "self.upsample3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_102": {
                "variable": {
                    "value": "self.upsample2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_109": {
                "variable": {
                    "value": "self.upsample1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "variable": {
                    "value": "self.conv2_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_116": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_117": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "variable": {
                    "value": "self.conv3_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_119": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_120": {
                "variable": {
                    "value": "self.relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_121": {
                "variable": {
                    "value": "self.conv4_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_122": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_124": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.numIn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.numOut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_236": {
                "f": {
                    "value": "floortrans/models/model_1427.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_228": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "floortrans/models/model_1427.py": {
        "torch": {
            "Sequential_31": {
                "variable": {
                    "value": "model_1427",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, (7, 7), (2, 2), (3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(64), nn.ReLU(), nn.Conv2d(64, 64, (1, 1)), nn.BatchNorm2d(64), nn.ReLU(), nn.Conv2d(64, 64, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(64), nn.ReLU(), nn.Conv2d(64, 128, (1, 1))), nn.Sequential(nn.Conv2d(64, 128, (1, 1))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_54": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 64, (1, 1)), nn.BatchNorm2d(64), nn.ReLU(), nn.Conv2d(64, 64, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(64), nn.ReLU(), nn.Conv2d(64, 128, (1, 1))), Lambda(lambda x: x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 64, (1, 1)), nn.BatchNorm2d(64), nn.ReLU(), nn.Conv2d(64, 64, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(64), nn.ReLU(), nn.Conv2d(64, 128, (1, 1))), Lambda(lambda x: x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), nn.Sequential(nn.Conv2d(128, 256, (1, 1))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.MaxPool2d((2, 2), (2, 2)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.MaxPool2d((2, 2), (2, 2)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.MaxPool2d((2, 2), (2, 2)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.MaxPool2d((2, 2), (2, 2)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), nn.Sequential(nn.Conv2d(256, 512, (1, 1)))), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(512), nn.ReLU(), nn.Conv2d(512, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.ConvTranspose2d(512, 512, (2, 2), (2, 2), (0, 0), (0, 0))), nn.Sequential(nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), nn.Sequential(nn.Conv2d(256, 512, (1, 1)))), LambdaReduce(lambda x, y: x + y)))), LambdaReduce(lambda x, y: x + y), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(512), nn.ReLU(), nn.Conv2d(512, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y))), nn.ConvTranspose2d(512, 512, (2, 2), (2, 2), (0, 0), (0, 0))), nn.Sequential(nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), nn.Sequential(nn.Conv2d(256, 512, (1, 1)))), LambdaReduce(lambda x, y: x + y)))), LambdaReduce(lambda x, y: x + y), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(512), nn.ReLU(), nn.Conv2d(512, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y))), nn.ConvTranspose2d(512, 512, (2, 2), (2, 2), (0, 0), (0, 0))), nn.Sequential(nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), nn.Sequential(nn.Conv2d(256, 512, (1, 1)))), LambdaReduce(lambda x, y: x + y)))), LambdaReduce(lambda x, y: x + y), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(512), nn.ReLU(), nn.Conv2d(512, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y))), nn.ConvTranspose2d(512, 512, (2, 2), (2, 2), (0, 0), (0, 0))), nn.Sequential(nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), nn.Sequential(nn.Conv2d(256, 512, (1, 1)))), LambdaReduce(lambda x, y: x + y))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_655": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_656": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_657": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_658": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_659": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_660": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_661": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "51",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_662": {
                "in_channels": {
                    "value": "51",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "51",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "*args": {
                    "value": "nn.BatchNorm2d(64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "*args": {
                    "value": "nn.Conv2d(64, 128, (1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "*args": {
                    "value": "nn.BatchNorm2d(128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "*args": {
                    "value": "nn.BatchNorm2d(128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "*args": {
                    "value": "nn.BatchNorm2d(128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "*args": {
                    "value": "nn.Conv2d(128, 256, (1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_110": {
                "*args": {
                    "value": "nn.MaxPool2d((2, 2), (2, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_597": {
                "*args": {
                    "value": "nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_78": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_81": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_92": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_95": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_98": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool2d_111": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_163": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.MaxPool2d((2, 2), (2, 2)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.MaxPool2d((2, 2), (2, 2)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.MaxPool2d((2, 2), (2, 2)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), nn.Sequential(nn.Conv2d(256, 512, (1, 1)))), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(512), nn.ReLU(), nn.Conv2d(512, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.ConvTranspose2d(512, 512, (2, 2), (2, 2), (0, 0), (0, 0))), nn.Sequential(nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), nn.Sequential(nn.Conv2d(256, 512, (1, 1)))), LambdaReduce(lambda x, y: x + y)))), LambdaReduce(lambda x, y: x + y), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(512), nn.ReLU(), nn.Conv2d(512, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y))), nn.ConvTranspose2d(512, 512, (2, 2), (2, 2), (0, 0), (0, 0))), nn.Sequential(nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), nn.Sequential(nn.Conv2d(256, 512, (1, 1)))), LambdaReduce(lambda x, y: x + y)))), LambdaReduce(lambda x, y: x + y), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(512), nn.ReLU(), nn.Conv2d(512, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y))), nn.ConvTranspose2d(512, 512, (2, 2), (2, 2), (0, 0), (0, 0))), nn.Sequential(nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), nn.Sequential(nn.Conv2d(256, 512, (1, 1)))), LambdaReduce(lambda x, y: x + y))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_595": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_598": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_615": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_632": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), nn.Sequential(nn.Conv2d(256, 512, (1, 1))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_577": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(512), nn.ReLU(), nn.Conv2d(512, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), Lambda(lambda x: x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "*args": {
                    "value": "nn.BatchNorm2d(256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_131": {
                "*args": {
                    "value": "nn.BatchNorm2d(256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_148": {
                "*args": {
                    "value": "nn.BatchNorm2d(256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_165": {
                "*args": {
                    "value": "nn.MaxPool2d((2, 2), (2, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_520": {
                "*args": {
                    "value": "nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_600": {
                "*args": {
                    "value": "nn.BatchNorm2d(256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_617": {
                "*args": {
                    "value": "nn.BatchNorm2d(256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_634": {
                "*args": {
                    "value": "nn.BatchNorm2d(256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_645": {
                "*args": {
                    "value": "nn.Conv2d(256, 512, (1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_115": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_118": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_121": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_132": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_134": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_135": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_137": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_138": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_140": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_149": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_151": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_152": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_154": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_155": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_157": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool2d_166": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_167": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_184": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_201": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_218": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.MaxPool2d((2, 2), (2, 2)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.MaxPool2d((2, 2), (2, 2)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), nn.Sequential(nn.Conv2d(256, 512, (1, 1)))), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(512), nn.ReLU(), nn.Conv2d(512, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.ConvTranspose2d(512, 512, (2, 2), (2, 2), (0, 0), (0, 0))), nn.Sequential(nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), nn.Sequential(nn.Conv2d(256, 512, (1, 1)))), LambdaReduce(lambda x, y: x + y)))), LambdaReduce(lambda x, y: x + y), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(512), nn.ReLU(), nn.Conv2d(512, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y))), nn.ConvTranspose2d(512, 512, (2, 2), (2, 2), (0, 0), (0, 0))), nn.Sequential(nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), nn.Sequential(nn.Conv2d(256, 512, (1, 1)))), LambdaReduce(lambda x, y: x + y))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_518": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_521": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_538": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_555": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), nn.Sequential(nn.Conv2d(256, 512, (1, 1))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_579": {
                "*args": {
                    "value": "nn.BatchNorm2d(512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_601": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_602": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_603": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_604": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_605": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_606": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_607": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_608": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_609": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_618": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_619": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_620": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_621": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_622": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_623": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_624": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_625": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_626": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_635": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_636": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_637": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_638": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_639": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_640": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_641": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_642": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_643": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_646": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_500": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(512), nn.ReLU(), nn.Conv2d(512, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), Lambda(lambda x: x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_580": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_581": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_582": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_583": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_584": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_585": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_586": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_587": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_588": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_169": {
                "*args": {
                    "value": "nn.BatchNorm2d(256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_186": {
                "*args": {
                    "value": "nn.BatchNorm2d(256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_203": {
                "*args": {
                    "value": "nn.BatchNorm2d(256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_220": {
                "*args": {
                    "value": "nn.MaxPool2d((2, 2), (2, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_443": {
                "*args": {
                    "value": "nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_523": {
                "*args": {
                    "value": "nn.BatchNorm2d(256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_540": {
                "*args": {
                    "value": "nn.BatchNorm2d(256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_557": {
                "*args": {
                    "value": "nn.BatchNorm2d(256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_568": {
                "*args": {
                    "value": "nn.Conv2d(256, 512, (1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_170": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_172": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_173": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_175": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_176": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_178": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_187": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_189": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_190": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_192": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_193": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_195": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_204": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_206": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_207": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_209": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_210": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_212": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool2d_221": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_222": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_239": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_256": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_273": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.MaxPool2d((2, 2), (2, 2)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), nn.Sequential(nn.Conv2d(256, 512, (1, 1)))), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(512), nn.ReLU(), nn.Conv2d(512, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.ConvTranspose2d(512, 512, (2, 2), (2, 2), (0, 0), (0, 0))), nn.Sequential(nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y)), nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), nn.Sequential(nn.Conv2d(256, 512, (1, 1)))), LambdaReduce(lambda x, y: x + y))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_441": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_444": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_461": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_478": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), nn.Sequential(nn.Conv2d(256, 512, (1, 1))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_502": {
                "*args": {
                    "value": "nn.BatchNorm2d(512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_524": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_525": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_526": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_527": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_528": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_529": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_530": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_531": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_532": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_541": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_542": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_543": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_544": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_545": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_546": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_547": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_548": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_549": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_558": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_559": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_560": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_561": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_562": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_563": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_564": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_565": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_566": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_569": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_423": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(512), nn.ReLU(), nn.Conv2d(512, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), Lambda(lambda x: x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_503": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_504": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_505": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_506": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_507": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_508": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_509": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_510": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_511": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_224": {
                "*args": {
                    "value": "nn.BatchNorm2d(256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_241": {
                "*args": {
                    "value": "nn.BatchNorm2d(256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_258": {
                "*args": {
                    "value": "nn.BatchNorm2d(256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_275": {
                "*args": {
                    "value": "nn.MaxPool2d((2, 2), (2, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_366": {
                "*args": {
                    "value": "nn.Sequential(LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x)), LambdaReduce(lambda x, y: x + y))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_446": {
                "*args": {
                    "value": "nn.BatchNorm2d(256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_463": {
                "*args": {
                    "value": "nn.BatchNorm2d(256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_480": {
                "*args": {
                    "value": "nn.BatchNorm2d(256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_491": {
                "*args": {
                    "value": "nn.Conv2d(256, 512, (1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_225": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_227": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_228": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_229": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_230": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_231": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_233": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_242": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_244": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_245": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_247": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_248": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_250": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_259": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_261": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_262": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_264": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_265": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_266": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_267": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool2d_276": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_277": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_294": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_311": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_328": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), nn.Sequential(nn.Conv2d(256, 512, (1, 1))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_347": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(512), nn.ReLU(), nn.Conv2d(512, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), Lambda(lambda x: x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_364": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_367": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_384": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 128, (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(128), nn.ReLU(), nn.Conv2d(128, 256, (1, 1))), Lambda(lambda x: x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_401": {
                "*args": {
                    "value": "LambdaMap(lambda x: x, nn.Sequential(nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)), nn.BatchNorm2d(256), nn.ReLU(), nn.Conv2d(256, 512, (1, 1))), nn.Sequential(nn.Conv2d(256, 512, (1, 1))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_425": {
                "*args": {
                    "value": "nn.BatchNorm2d(512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_447": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_448": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_449": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_450": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_451": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_452": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_453": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_454": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_455": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_464": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_465": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_466": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_467": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_468": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_469": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_470": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_471": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_472": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_481": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_482": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_483": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_484": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_485": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_486": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_487": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_488": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_489": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_492": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_426": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_427": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_428": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_429": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_430": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_431": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_432": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_433": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_434": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_279": {
                "*args": {
                    "value": "nn.BatchNorm2d(256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_296": {
                "*args": {
                    "value": "nn.BatchNorm2d(256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_313": {
                "*args": {
                    "value": "nn.BatchNorm2d(256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_330": {
                "*args": {
                    "value": "nn.BatchNorm2d(256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_341": {
                "*args": {
                    "value": "nn.Conv2d(256, 512, (1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_349": {
                "*args": {
                    "value": "nn.BatchNorm2d(512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_369": {
                "*args": {
                    "value": "nn.BatchNorm2d(256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_386": {
                "*args": {
                    "value": "nn.BatchNorm2d(256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_403": {
                "*args": {
                    "value": "nn.BatchNorm2d(256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_414": {
                "*args": {
                    "value": "nn.Conv2d(256, 512, (1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_280": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_282": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_283": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_284": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_285": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_286": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_288": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_297": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_298": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_299": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_300": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_301": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_302": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_303": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_304": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_305": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_314": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_315": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_316": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_317": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_319": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_320": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_321": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_322": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_331": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_332": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_333": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_334": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_335": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_336": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_337": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_338": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_339": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_342": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_350": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_351": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_352": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_353": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_354": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_355": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_356": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_357": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_358": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_370": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_371": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_372": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_373": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_374": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_375": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_376": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_377": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_378": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_387": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_388": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_389": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_390": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_391": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_392": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_393": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_394": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_395": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_404": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_405": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_406": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_407": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_408": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_409": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_410": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_411": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_412": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_415": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "floortrans/plotting.py": {
        "torch": {}
    },
    "floortrans/post_prosessing.py": {
        "torch": {
            "split_1026": {
                "variable": {
                    "value": "(heatmaps, rooms, icons)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.interpolate(tensor, size=shape, mode='bilinear', align_corners=False).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[split[0], 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_1045": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.interpolate(tensor, size=shape, mode='bilinear', align_corners=False).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_1045": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_1046": {
                "variable": {
                    "value": "(heatmaps, rooms, icons)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.interpolate(tensor, size=shape, mode='bilinear', align_corners=False).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "split",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_1048": {
                "variable": {
                    "value": "icons",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "icons",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.empty([0, 4, 2], int)",
                            "Call"
                        ],
                        [
                            "find_icons(icon_points, gap, point_orientations, orientation_ranges, height, width, False)",
                            "Call"
                        ],
                        [
                            "F.interpolate(icons, size=shape, mode='nearest').squeeze().data.numpy()",
                            "Call"
                        ],
                        [
                            "F.softmax(icons, 0)",
                            "Call"
                        ],
                        [
                            "icons.data.numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_1049": {
                "variable": {
                    "value": "rooms",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rooms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.interpolate(rooms, size=shape, mode='nearest').squeeze().data.numpy()",
                            "Call"
                        ],
                        [
                            "F.softmax(rooms, 0)",
                            "Call"
                        ],
                        [
                            "rooms.data.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_1028": {
                "input": {
                    "value": "heatmaps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.interpolate(heatmaps, size=shape, mode='bilinear', align_corners=False).squeeze().data.numpy()",
                            "Call"
                        ],
                        [
                            "heatmaps.data.numpy()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_1028": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_1029": {
                "input": {
                    "value": "icons",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.empty([0, 4, 2], int)",
                            "Call"
                        ],
                        [
                            "find_icons(icon_points, gap, point_orientations, orientation_ranges, height, width, False)",
                            "Call"
                        ],
                        [
                            "F.interpolate(icons, size=shape, mode='nearest').squeeze().data.numpy()",
                            "Call"
                        ],
                        [
                            "F.softmax(icons, 0)",
                            "Call"
                        ],
                        [
                            "icons.data.numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_1029": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_1030": {
                "input": {
                    "value": "rooms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.interpolate(rooms, size=shape, mode='nearest').squeeze().data.numpy()",
                            "Call"
                        ],
                        [
                            "F.softmax(rooms, 0)",
                            "Call"
                        ],
                        [
                            "rooms.data.numpy()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_1030": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataLoader_67": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FloorplanSVG(args.data_path, 'train.txt', format='lmdb', augmentations=aug)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_69": {
                "variable": {
                    "value": "valloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FloorplanSVG(args.data_path, 'val.txt', format='lmdb', augmentations=DictToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "variable": {
                    "value": "dummy",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 3, args.image_size, args.image_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "variable": {
                    "value": "model.conv4_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_85": {
                "variable": {
                    "value": "model.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "args.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_103": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[{'params': model.parameters(), 'lr': args.l_rate}, {'params': criterion.parameters(), 'lr': args.l_rate}]",
                            "List"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_104": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(params, eps=1e-08, betas=(0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(params, eps=1e-08, betas=(0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(params, momentum=0.9, weight_decay=10 ** (-4), nesterov=True)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(params, eps=1e-08, betas=(0.9, 0.999))",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "args.patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_357": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch + 1, 'model_state': model.state_dict(), 'criterion_state': criterion.state_dict(), 'optimizer_state': optimizer.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'model_state': model.state_dict(), 'criterion_state': criterion.state_dict(), 'optimizer_state': optimizer.state_dict(), 'best_loss': best_loss}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'model_state': model.state_dict(), 'criterion_state': criterion.state_dict(), 'optimizer_state': optimizer.state_dict(), 'best_loss': best_loss}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'model_state': model.state_dict(), 'criterion_state': criterion.state_dict(), 'optimizer_state': optimizer.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'model_state': model.state_dict(), 'criterion_state': criterion.state_dict(), 'optimizer_state': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "log_dir + '/model_last_epoch.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_80": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.furukawa_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_106": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[{'params': model.parameters(), 'lr': args.l_rate}, {'params': criterion.parameters(), 'lr': args.l_rate}]",
                            "List"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_131": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_110": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[{'params': model.parameters(), 'lr': args.l_rate}, {'params': criterion.parameters(), 'lr': args.l_rate}]",
                            "List"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "10 ** (-4)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LambdaLR_111": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(params, eps=1e-08, betas=(0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(params, eps=1e-08, betas=(0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(params, momentum=0.9, weight_decay=10 ** (-4), nesterov=True)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(params, eps=1e-08, betas=(0.9, 0.999))",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_drop",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "interpolate_194": {
                "variable": {
                    "value": "labels_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "samples_val['label'].cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "F.interpolate(labels_val, size=outputs.shape[2:], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "samples_val['label'].cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "outputs.shape[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_266": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch + 1, 'model_state': model.state_dict(), 'criterion_state': criterion.state_dict(), 'optimizer_state': optimizer.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'model_state': model.state_dict(), 'criterion_state': criterion.state_dict(), 'optimizer_state': optimizer.state_dict(), 'best_loss': best_loss}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'model_state': model.state_dict(), 'criterion_state': criterion.state_dict(), 'optimizer_state': optimizer.state_dict(), 'best_loss': best_loss}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'model_state': model.state_dict(), 'criterion_state': criterion.state_dict(), 'optimizer_state': optimizer.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'model_state': model.state_dict(), 'criterion_state': criterion.state_dict(), 'optimizer_state': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "log_dir + '/model_best_val_loss_var.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_331": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch + 1, 'model_state': model.state_dict(), 'criterion_state': criterion.state_dict(), 'optimizer_state': optimizer.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'model_state': model.state_dict(), 'criterion_state': criterion.state_dict(), 'optimizer_state': optimizer.state_dict(), 'best_loss': best_loss}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'model_state': model.state_dict(), 'criterion_state': criterion.state_dict(), 'optimizer_state': optimizer.state_dict(), 'best_loss': best_loss}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'model_state': model.state_dict(), 'criterion_state': criterion.state_dict(), 'optimizer_state': optimizer.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'model_state': model.state_dict(), 'criterion_state': criterion.state_dict(), 'optimizer_state': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "log_dir + '/model_best_val_loss.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_341": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch + 1, 'model_state': model.state_dict(), 'criterion_state': criterion.state_dict(), 'optimizer_state': optimizer.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'model_state': model.state_dict(), 'criterion_state': criterion.state_dict(), 'optimizer_state': optimizer.state_dict(), 'best_loss': best_loss}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'model_state': model.state_dict(), 'criterion_state': criterion.state_dict(), 'optimizer_state': optimizer.state_dict(), 'best_loss': best_loss}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'model_state': model.state_dict(), 'criterion_state': criterion.state_dict(), 'optimizer_state': optimizer.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'model_state': model.state_dict(), 'criterion_state': criterion.state_dict(), 'optimizer_state': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "log_dir + '/model_best_val_acc.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_350": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch + 1, 'model_state': model.state_dict(), 'criterion_state': criterion.state_dict(), 'optimizer_state': optimizer.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'model_state': model.state_dict(), 'criterion_state': criterion.state_dict(), 'optimizer_state': optimizer.state_dict(), 'best_loss': best_loss}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'model_state': model.state_dict(), 'criterion_state': criterion.state_dict(), 'optimizer_state': optimizer.state_dict(), 'best_loss': best_loss}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'model_state': model.state_dict(), 'criterion_state': criterion.state_dict(), 'optimizer_state': optimizer.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch + 1, 'model_state': model.state_dict(), 'criterion_state': criterion.state_dict(), 'optimizer_state': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "log_dir + '/model_best_train_loss_var.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_115": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[{'params': model.parameters(), 'lr': args.l_rate}, {'params': criterion.parameters(), 'lr': args.l_rate}]",
                            "List"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LambdaLR_116": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(params, eps=1e-08, betas=(0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(params, eps=1e-08, betas=(0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(params, momentum=0.9, weight_decay=10 ** (-4), nesterov=True)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(params, eps=1e-08, betas=(0.9, 0.999))",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_drop",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_230": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "log_dir + '/model_best_val_loss_var.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_294": {
                "variable": {
                    "value": "pred_arr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(images)",
                            "Call"
                        ],
                        [
                            "model(images_val)",
                            "Call"
                        ],
                        [
                            "model(images_val)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "input_slice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[21, 12, 11]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_297": {
                "input": {
                    "value": "rooms_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "softmax(rooms_pred, 1).cpu().data.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_298": {
                "input": {
                    "value": "icons_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "softmax(icons_pred, 1).cpu().data.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}