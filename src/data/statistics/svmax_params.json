{
    "mnist_embedding.py": {
        "tensorflow": {
            "boolean_mask_36": {
                "variable": {
                    "value": "possible_fids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "all_imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "mask": {
                    "value": "tf.equal(all_pids, pid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mod_44": {
                "variable": {
                    "value": "full_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "tf.range(padded_count)",
                    "type": "Call",
                    "possible_values": []
                },
                "x2": {
                    "value": "count",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(possible_fids)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shuffle_47": {
                "variable": {
                    "value": "shuffled",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "full_range",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.mod(tf.range(padded_count), count)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_48": {
                "variable": {
                    "value": "selected_fids",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "possible_fids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.boolean_mask(all_imgs, tf.equal(all_pids, pid))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "shuffled[:batch_k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shuffle_87": {
                "variable": {
                    "value": "test_ds",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "10000",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "take_87": {
                "variable": {
                    "value": "test_ds",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "test_ds_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_size * 10",
                            "BinOp"
                        ]
                    ]
                }
            },
            "batch_87": {
                "variable": {
                    "value": "test_ds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_cls * num_instance",
                            "BinOp"
                        ]
                    ]
                }
            },
            "SGD_95": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Mean_97": {
                "variable": {
                    "value": "train_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_21": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Flatten_22": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_23": {
                "variable": {
                    "value": "self.d1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_24": {
                "variable": {
                    "value": "self.d2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_31": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "self.d1(x)",
                            "Call"
                        ],
                        [
                            "self.d2(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "svd_106": {
                "variable": {
                    "value": "sing_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(param_norm_batch_embedding_tiled, [param_batch_size, model.emb_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "compute_uv": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_109": {
                "variable": {
                    "value": "mean_sing_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sing_values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.linalg.svd(tf.reshape(param_norm_batch_embedding_tiled, [param_batch_size, model.emb_dim]), compute_uv=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_36": {
                "x": {
                    "value": "all_pids",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "pid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_42": {
                "input": {
                    "value": "possible_fids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.boolean_mask(all_imgs, tf.equal(all_pids, pid))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_43": {
                "x": {
                    "value": "count",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(possible_fids)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_50": {
                "dims": {
                    "value": "[batch_k]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "pid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gather_nd_123": {
                "variable": {
                    "value": "batch_embedding_ordered",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(images, training=True)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "contrastive_idx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.tile([0, 1, 4, 3, 2, 5, 6, 7], num_cls // 2)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(contrastive_idx, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_124": {
                "variable": {
                    "value": "pids_ordered",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(fixed_labels)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "contrastive_idx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.tile([0, 1, 4, 3, 2, 5, 6, 7], num_cls // 2)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(contrastive_idx, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_125": {
                "variable": {
                    "value": "(embeddings_anchor, embeddings_positive)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reshape(batch_embedding_ordered, [-1, 2, model.emb_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "num": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_130": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "fixed_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.tile([1, 0, 0, 1], num_cls // 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ceil_43": {
                "x": {
                    "value": "batch_k / tf.cast(count, tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_107": {
                "tensor": {
                    "value": "param_norm_batch_embedding_tiled",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[param_batch_size, model.emb_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GradientTape_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_126": {
                "tensor": {
                    "value": "batch_embedding_ordered",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather_nd(model_output, contrastive_idx)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2, model.emb_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_136": {
                "x": {
                    "value": "(upper_bound - mean_sing_val) / (upper_bound - lower_bound)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "ranking/angular.py": {
        "tensorflow": {
            "matmul_23": {
                "variable": {
                    "value": "xaTxp",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "anchor_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "pos_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "transpose_a": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_24": {
                "variable": {
                    "value": "sim_matrix_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2.0 * (1.0 + sq_tan_alpha) * xaTxp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.eye(batch_size, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_27": {
                "variable": {
                    "value": "xaPxpTxn",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "anchor_features + pos_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "pos_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "transpose_a": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_28": {
                "variable": {
                    "value": "sim_matrix_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "4.0 * sq_tan_alpha * xaPxpTxn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.ones_like(xaPxpTxn, dtype=tf.float32) - tf.eye(batch_size, dtype=tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_35": {
                "variable": {
                    "value": "lshape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_37": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[lshape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_39": {
                "variable": {
                    "value": "labels_remapped",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(labels, tf.transpose(labels))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_42": {
                "variable": {
                    "value": "xent_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "similarity_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sim_matrix_1 + sim_matrix_2",
                            "BinOp"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels_remapped",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.equal(labels, tf.transpose(labels)), tf.float32)",
                            "Call"
                        ],
                        [
                            "labels_remapped / tf.reduce_sum(labels_remapped, 1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_43": {
                "variable": {
                    "value": "xent_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "xent_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=similarity_matrix, labels=labels_remapped)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(xent_loss, name='xentropy_angular')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "xentropy_angular",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_51": {
                "variable": {
                    "value": "_input_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_52": {
                "variable": {
                    "value": "_anchor_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 0], [1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_53": {
                "variable": {
                    "value": "_pos_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[-1, 0], [-1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_9": {
                "variable": {
                    "value": "reg_anchor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.square(anchor_features), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_10": {
                "variable": {
                    "value": "reg_positive",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.square(pos_features), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_11": {
                "variable": {
                    "value": "l2loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.25 * 0.002",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "reg_anchor + reg_positive",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "l2loss_angular",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_40": {
                "input_tensor": {
                    "value": "labels_remapped",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.equal(labels, tf.transpose(labels)), tf.float32)",
                            "Call"
                        ],
                        [
                            "labels_remapped / tf.reduce_sum(labels_remapped, 1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_24": {
                "num_rows": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_39": {
                "x": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input_labels, [lshape[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_9": {
                "input_tensor": {
                    "value": "tf.square(anchor_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_10": {
                "input_tensor": {
                    "value": "tf.square(pos_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_29": {
                "input": {
                    "value": "xaPxpTxn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(anchor_features + pos_features, pos_features, transpose_a=False, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_29": {
                "num_rows": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_39": {
                "a": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input_labels, [lshape[0], 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "square_9": {
                "x": {
                    "value": "anchor_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_10": {
                "x": {
                    "value": "pos_features",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ranking/common.py": {
        "tensorflow": {
            "maximum_23": {
                "variable": {
                    "value": "pairwise_distances_squared",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pairwise_distances_squared",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math_ops.add(math_ops.reduce_sum(math_ops.square(feature), axis=[1], keepdims=True), math_ops.reduce_sum(math_ops.square(array_ops.transpose(feature)), axis=[0], keepdims=True)) - 2.0 * math_ops.matmul(feature, array_ops.transpose(feature))",
                            "BinOp"
                        ],
                        [
                            "math_ops.maximum(pairwise_distances_squared, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "less_equal_25": {
                "variable": {
                    "value": "error_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pairwise_distances_squared",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math_ops.add(math_ops.reduce_sum(math_ops.square(feature), axis=[1], keepdims=True), math_ops.reduce_sum(math_ops.square(array_ops.transpose(feature)), axis=[0], keepdims=True)) - 2.0 * math_ops.matmul(feature, array_ops.transpose(feature))",
                            "BinOp"
                        ],
                        [
                            "math_ops.maximum(pairwise_distances_squared, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_35": {
                "variable": {
                    "value": "pairwise_distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pairwise_distances",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pairwise_distances_squared",
                            "Name"
                        ],
                        [
                            "math_ops.sqrt(pairwise_distances_squared + math_ops.to_float(error_mask) * 1e-16)",
                            "Call"
                        ],
                        [
                            "math_ops.multiply(pairwise_distances, math_ops.to_float(math_ops.logical_not(error_mask)))",
                            "Call"
                        ],
                        [
                            "math_ops.multiply(pairwise_distances, mask_offdiagonals)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "math_ops.to_float(math_ops.logical_not(error_mask))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_42": {
                "variable": {
                    "value": "pairwise_distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pairwise_distances",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pairwise_distances_squared",
                            "Name"
                        ],
                        [
                            "math_ops.sqrt(pairwise_distances_squared + math_ops.to_float(error_mask) * 1e-16)",
                            "Call"
                        ],
                        [
                            "math_ops.multiply(pairwise_distances, math_ops.to_float(math_ops.logical_not(error_mask)))",
                            "Call"
                        ],
                        [
                            "math_ops.multiply(pairwise_distances, mask_offdiagonals)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mask_offdiagonals",
                    "type": "Name",
                    "possible_values": [
                        [
                            "array_ops.ones_like(pairwise_distances) - array_ops.diag(array_ops.ones([num_data]))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_31": {
                "variable": {
                    "value": "pairwise_distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pairwise_distances_squared + math_ops.to_float(error_mask) * 1e-16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_14": {
                "x": {
                    "value": "math_ops.reduce_sum(math_ops.square(feature), axis=[1], keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "math_ops.reduce_sum(math_ops.square(array_ops.transpose(feature)), axis=[0], keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_36": {
                "x": {
                    "value": "math_ops.logical_not(error_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_38": {
                "input": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_40": {
                "input": {
                    "value": "pairwise_distances",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pairwise_distances_squared",
                            "Name"
                        ],
                        [
                            "math_ops.sqrt(pairwise_distances_squared + math_ops.to_float(error_mask) * 1e-16)",
                            "Call"
                        ],
                        [
                            "math_ops.multiply(pairwise_distances, math_ops.to_float(math_ops.logical_not(error_mask)))",
                            "Call"
                        ],
                        [
                            "math_ops.multiply(pairwise_distances, mask_offdiagonals)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_40": {
                "diagonal": {
                    "value": "array_ops.ones([num_data])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_15": {
                "input_tensor": {
                    "value": "math_ops.square(feature)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_16": {
                "input_tensor": {
                    "value": "math_ops.square(array_ops.transpose(feature))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_19": {
                "a": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "array_ops.transpose(feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_not_36": {
                "x": {
                    "value": "error_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math_ops.less_equal(pairwise_distances_squared, 0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_41": {
                "shape": {
                    "value": "[num_data]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_15": {
                "x": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_17": {
                "x": {
                    "value": "array_ops.transpose(feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_20": {
                "a": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_17": {
                "a": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "to_float_32": {
                "x": {
                    "value": "error_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math_ops.less_equal(pairwise_distances_squared, 0.0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ranking/contrastive.py": {
        "tensorflow": {
            "sqrt_24": {
                "variable": {
                    "value": "distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.reduce_sum(math_ops.square(embeddings_anchor - embeddings_positive), 1) + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_36": {
                "variable": {
                    "value": "contrastive_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pos_loss + neg_loss",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "contrastive_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_31": {
                "x": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_31": {
                "x": {
                    "value": "distances",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math_ops.sqrt(math_ops.reduce_sum(math_ops.square(embeddings_anchor - embeddings_positive), 1) + epsilon)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_33": {
                "x": {
                    "value": "math_ops.maximum(margin - distances, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_25": {
                "input_tensor": {
                    "value": "math_ops.square(embeddings_anchor - embeddings_positive)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_33": {
                "x": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "maximum_33": {
                "x": {
                    "value": "margin - distances",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_26": {
                "x": {
                    "value": "embeddings_anchor - embeddings_positive",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "ranking/hard_triplet.py": {
        "tensorflow": {
            "equal_78": {
                "variable": {
                    "value": "same_identity_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(pids, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.expand_dims(pids, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_not_83": {
                "variable": {
                    "value": "negative_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "same_identity_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(tf.expand_dims(pids, axis=1), tf.expand_dims(pids, axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_xor_84": {
                "variable": {
                    "value": "positive_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "same_identity_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(tf.expand_dims(pids, axis=1), tf.expand_dims(pids, axis=0))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.eye(tf.shape(pids)[0], dtype=tf.bool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_88": {
                "variable": {
                    "value": "furthest_positive",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "furthest_dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dists * tf.cast(positive_mask, tf.float32)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "map_fn_89": {
                "variable": {
                    "value": "closest_negative",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda x: tf.reduce_min(tf.boolean_mask(x[0], x[1]))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "(dists, negative_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_19": {
                "input": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_43": {
                "name": {
                    "value": "cdist",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_75": {
                "name": {
                    "value": "batch_hard",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_99": {
                "variable": {
                    "value": "diff_result",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "diff + margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_46": {
                "input_tensor": {
                    "value": "tf.square(diffs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_78": {
                "input": {
                    "value": "pids",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_79": {
                "input": {
                    "value": "pids",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_85": {
                "num_rows": {
                    "value": "tf.shape(pids)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_87": {
                "x": {
                    "value": "positive_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.logical_xor(same_identity_mask, tf.eye(tf.shape(pids)[0], dtype=tf.bool))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_104": {
                "variable": {
                    "value": "diff_result",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "diff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "furthest_positive - closest_negative",
                            "BinOp"
                        ],
                        [
                            "diff_result",
                            "Name"
                        ],
                        [
                            "diff_result",
                            "Name"
                        ]
                    ]
                }
            },
            "Assert_105": {
                "variable": {
                    "value": "assert_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(tf.rank(diff), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Rank of image must be equal to 1.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_46": {
                "x": {
                    "value": "diffs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "all_diffs(a, b)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_48": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(diffs), axis=-1) + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_min_89": {
                "input_tensor": {
                    "value": "tf.boolean_mask(x[0], x[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_50": {
                "input_tensor": {
                    "value": "tf.abs(diffs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_55": {
                "variable": {
                    "value": "prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "adjoint_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_85": {
                "input": {
                    "value": "pids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "boolean_mask_89": {
                "tensor": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_105": {
                "x": {
                    "value": "tf.rank(diff)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "control_dependencies_106": {
                "control_inputs": {
                    "value": "[assert_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_48": {
                "input_tensor": {
                    "value": "tf.square(diffs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_50": {
                "x": {
                    "value": "diffs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "all_diffs(a, b)",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_105": {
                "input": {
                    "value": "diff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "furthest_positive - closest_negative",
                            "BinOp"
                        ],
                        [
                            "diff_result",
                            "Name"
                        ],
                        [
                            "diff_result",
                            "Name"
                        ]
                    ]
                }
            },
            "square_48": {
                "x": {
                    "value": "diffs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "all_diffs(a, b)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ranking/lifted_structured.py": {
        "tensorflow": {
            "shape_16": {
                "variable": {
                    "value": "lshape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_18": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[lshape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_24": {
                "variable": {
                    "value": "adjacency",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_not_26": {
                "variable": {
                    "value": "adjacency_not",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "adjacency",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.equal(labels, tf.transpose(labels))",
                            "Call"
                        ]
                    ]
                }
            },
            "size_28": {
                "variable": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_31": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "adjacency_not",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.logical_not(adjacency)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_35": {
                "variable": {
                    "value": "row_minimums",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "diff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "margin - pairwise_distances",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_46": {
                "variable": {
                    "value": "max_elements",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "row_negative_maximums",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.reduce_max(tf.math.multiply(diff - row_minimums, mask), 1, keepdims=True) + row_minimums",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(row_negative_maximums)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_48": {
                "variable": {
                    "value": "diff_tiled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "margin - pairwise_distances",
                            "BinOp"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_49": {
                "variable": {
                    "value": "mask_tiled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(adjacency_not, dtype=tf.dtypes.float32)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "max_elements_vect",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(max_elements)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_52": {
                "variable": {
                    "value": "loss_exp_left",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.math.reduce_sum(tf.math.multiply(tf.math.exp(diff_tiled - max_elements_vect), mask_tiled), 1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truediv_71": {
                "variable": {
                    "value": "lifted_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.25 * tf.math.reduce_sum(tf.math.square(tf.math.maximum(tf.math.multiply(loss_mat, mask_positives), 0.0)))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "num_positives",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.reduce_sum(mask_positives) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_24": {
                "a": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_36": {
                "input_tensor": {
                    "value": "tf.math.multiply(diff - row_minimums, mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_47": {
                "a": {
                    "value": "row_negative_maximums",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.reduce_max(tf.math.multiply(diff - row_minimums, mask), 1, keepdims=True) + row_minimums",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_50": {
                "a": {
                    "value": "max_elements",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.maximum(row_negative_maximums, tf.transpose(row_negative_maximums))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_53": {
                "input_tensor": {
                    "value": "tf.math.multiply(tf.math.exp(diff_tiled - max_elements_vect), mask_tiled)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_59": {
                "x": {
                    "value": "loss_exp_left + tf.transpose(loss_exp_left)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_64": {
                "x": {
                    "value": "adjacency",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.equal(labels, tf.transpose(labels))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_65": {
                "diagonal": {
                    "value": "tf.ones([batch_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_69": {
                "input_tensor": {
                    "value": "mask_positives",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(adjacency, dtype=tf.dtypes.float32) - tf.linalg.diag(tf.ones([batch_size]))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_37": {
                "x": {
                    "value": "diff - row_minimums",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(adjacency_not, dtype=tf.dtypes.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_54": {
                "x": {
                    "value": "tf.math.exp(diff_tiled - max_elements_vect)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mask_tiled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(mask, [batch_size, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_66": {
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_72": {
                "input_tensor": {
                    "value": "tf.math.square(tf.math.maximum(tf.math.multiply(loss_mat, mask_positives), 0.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_55": {
                "x": {
                    "value": "diff_tiled - max_elements_vect",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_60": {
                "a": {
                    "value": "loss_exp_left",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.math.reduce_sum(tf.math.multiply(tf.math.exp(diff_tiled - max_elements_vect), mask_tiled), 1, keepdims=True), [batch_size, batch_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "square_73": {
                "x": {
                    "value": "tf.math.maximum(tf.math.multiply(loss_mat, mask_positives), 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_74": {
                "x": {
                    "value": "tf.math.multiply(loss_mat, mask_positives)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_75": {
                "x": {
                    "value": "loss_mat",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "max_elements + tf.math.log(loss_exp_left + tf.transpose(loss_exp_left))",
                            "BinOp"
                        ],
                        [
                            "loss_mat + pairwise_distances",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "mask_positives",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(adjacency, dtype=tf.dtypes.float32) - tf.linalg.diag(tf.ones([batch_size]))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "ranking/npair.py": {
        "tensorflow": {
            "reduce_mean_28": {
                "variable": {
                    "value": "reg_anchor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.square(embeddings_anchor), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_30": {
                "variable": {
                    "value": "reg_positive",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.square(embeddings_positive), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_32": {
                "variable": {
                    "value": "l2loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.25 * reg_lambda",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "reg_anchor + reg_positive",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "l2loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_36": {
                "variable": {
                    "value": "similarity_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "embeddings_anchor",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "embeddings_positive",
                    "type": "Variable",
                    "possible_values": []
                },
                "transpose_a": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_41": {
                "variable": {
                    "value": "lshape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_43": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[lshape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_45": {
                "variable": {
                    "value": "labels_remapped",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(labels, tf.transpose(labels))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_50": {
                "variable": {
                    "value": "xent_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "similarity_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(embeddings_anchor, embeddings_positive, transpose_a=False, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels_remapped",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.equal(labels, tf.transpose(labels)), tf.float32)",
                            "Call"
                        ],
                        [
                            "labels_remapped / tf.reduce_sum(labels_remapped, 1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_52": {
                "variable": {
                    "value": "xent_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "xent_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=similarity_matrix, labels=labels_remapped)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(xent_loss, name='xentropy')",
                            "Call"
                        ],
                        [
                            "tf.Print(xent_loss, ['cross entropy:', xent_loss, 'l2loss:', l2loss])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "xentropy",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_47": {
                "input_tensor": {
                    "value": "labels_remapped",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.equal(labels, tf.transpose(labels)), tf.float32)",
                            "Call"
                        ],
                        [
                            "labels_remapped / tf.reduce_sum(labels_remapped, 1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Print_55": {
                "variable": {
                    "value": "xent_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "xent_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=similarity_matrix, labels=labels_remapped)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(xent_loss, name='xentropy')",
                            "Call"
                        ],
                        [
                            "tf.Print(xent_loss, ['cross entropy:', xent_loss, 'l2loss:', l2loss])",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "['cross entropy:', xent_loss, 'l2loss:', l2loss]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_29": {
                "input_tensor": {
                    "value": "tf.square(embeddings_anchor)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_31": {
                "input_tensor": {
                    "value": "tf.square(embeddings_positive)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_46": {
                "x": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_29": {
                "x": {
                    "value": "embeddings_anchor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_31": {
                "x": {
                    "value": "embeddings_positive",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_46": {
                "a": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ranking/semi_hard_triplet.py": {
        "tensorflow": {
            "reduce_max_20": {
                "variable": {
                    "value": "axis_maximums",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_min_40": {
                "variable": {
                    "value": "axis_minimums",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_129": {
                "variable": {
                    "value": "lshape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "array_ops.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_131": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "array_ops.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[lshape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_136": {
                "variable": {
                    "value": "adjacency",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "array_ops.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "array_ops.transpose(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_not_138": {
                "variable": {
                    "value": "adjacency_not",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "adjacency",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math_ops.equal(labels, array_ops.transpose(labels))",
                            "Call"
                        ]
                    ]
                }
            },
            "size_140": {
                "variable": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "array_ops.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_144": {
                "variable": {
                    "value": "pdist_matrix_tile",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pdist_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common.pairwise_distance(embeddings, squared=True)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_145": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "array_ops.tile(adjacency_not, [batch_size, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "math_ops.greater(pdist_matrix_tile, array_ops.reshape(array_ops.transpose(pdist_matrix), [-1, 1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_151": {
                "variable": {
                    "value": "mask_final",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "math_ops.greater(math_ops.reduce_sum(math_ops.cast(mask, dtype=dtypes.float32), 1, keepdims=True), 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_156": {
                "variable": {
                    "value": "mask_final",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "mask_final",
                    "type": "Call",
                    "possible_values": [
                        [
                            "array_ops.reshape(math_ops.greater(math_ops.reduce_sum(math_ops.cast(mask, dtype=dtypes.float32), 1, keepdims=True), 0.0), [batch_size, batch_size])",
                            "Call"
                        ],
                        [
                            "array_ops.transpose(mask_final)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_158": {
                "variable": {
                    "value": "adjacency_not",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "adjacency_not",
                    "type": "Call",
                    "possible_values": [
                        [
                            "math_ops.logical_not(adjacency)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(adjacency_not, dtype=dtypes.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_160": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "math_ops.logical_and(array_ops.tile(adjacency_not, [batch_size, 1]), math_ops.greater(pdist_matrix_tile, array_ops.reshape(array_ops.transpose(pdist_matrix), [-1, 1])))",
                            "Call"
                        ],
                        [
                            "math_ops.cast(mask, dtype=dtypes.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_163": {
                "variable": {
                    "value": "negatives_outside",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_minimum(pdist_matrix_tile, mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_165": {
                "variable": {
                    "value": "negatives_outside",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "negatives_outside",
                    "type": "Call",
                    "possible_values": [
                        [
                            "array_ops.reshape(masked_minimum(pdist_matrix_tile, mask), [batch_size, batch_size])",
                            "Call"
                        ],
                        [
                            "array_ops.transpose(negatives_outside)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_168": {
                "variable": {
                    "value": "negatives_inside",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_maximum(pdist_matrix, adjacency_not)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_172": {
                "variable": {
                    "value": "semi_hard_negatives",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask_final",
                    "type": "Call",
                    "possible_values": [
                        [
                            "array_ops.reshape(math_ops.greater(math_ops.reduce_sum(math_ops.cast(mask, dtype=dtypes.float32), 1, keepdims=True), 0.0), [batch_size, batch_size])",
                            "Call"
                        ],
                        [
                            "array_ops.transpose(mask_final)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "negatives_outside",
                    "type": "Call",
                    "possible_values": [
                        [
                            "array_ops.reshape(masked_minimum(pdist_matrix_tile, mask), [batch_size, batch_size])",
                            "Call"
                        ],
                        [
                            "array_ops.transpose(negatives_outside)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "negatives_inside",
                    "type": "Name",
                    "possible_values": [
                        [
                            "array_ops.tile(masked_maximum(pdist_matrix, adjacency_not), [1, batch_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_196": {
                "variable": {
                    "value": "triplet_loss_result",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.boolean_mask(loss_mat, tf.cast(mask_positives, tf.bool))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Assert_198": {
                "variable": {
                    "value": "assert_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(tf.rank(triplet_loss_result), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Rank of image must be equal to 1.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_min_21": {
                "input_tensor": {
                    "value": "math_ops.multiply(data - axis_maximums, mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_max_41": {
                "input_tensor": {
                    "value": "math_ops.multiply(data - axis_minimums, mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_61": {
                "input": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_86": {
                "name": {
                    "value": "cdist",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_136": {
                "a": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "array_ops.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_146": {
                "input": {
                    "value": "adjacency_not",
                    "type": "Call",
                    "possible_values": [
                        [
                            "math_ops.logical_not(adjacency)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(adjacency_not, dtype=dtypes.float32)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "greater_147": {
                "x": {
                    "value": "pdist_matrix_tile",
                    "type": "Name",
                    "possible_values": [
                        [
                            "array_ops.tile(pdist_matrix, [batch_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "array_ops.reshape(array_ops.transpose(pdist_matrix), [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_152": {
                "x": {
                    "value": "math_ops.reduce_sum(math_ops.cast(mask, dtype=dtypes.float32), 1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_189": {
                "x": {
                    "value": "adjacency",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math_ops.equal(labels, array_ops.transpose(labels))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_190": {
                "diagonal": {
                    "value": "array_ops.ones([batch_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_202": {
                "variable": {
                    "value": "triplet_loss_result",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.boolean_mask(loss_mat, tf.cast(mask_positives, tf.bool))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Assert_203": {
                "variable": {
                    "value": "assert_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(tf.rank(triplet_loss_result), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Rank of image must be equal to 1.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_22": {
                "x": {
                    "value": "data - axis_maximums",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "math_ops.logical_and(array_ops.tile(adjacency_not, [batch_size, 1]), math_ops.greater(pdist_matrix_tile, array_ops.reshape(array_ops.transpose(pdist_matrix), [-1, 1])))",
                            "Call"
                        ],
                        [
                            "math_ops.cast(mask, dtype=dtypes.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_42": {
                "x": {
                    "value": "data - axis_minimums",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "math_ops.logical_and(array_ops.tile(adjacency_not, [batch_size, 1]), math_ops.greater(pdist_matrix_tile, array_ops.reshape(array_ops.transpose(pdist_matrix), [-1, 1])))",
                            "Call"
                        ],
                        [
                            "math_ops.cast(mask, dtype=dtypes.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_89": {
                "input_tensor": {
                    "value": "tf.square(diffs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_148": {
                "tensor": {
                    "value": "array_ops.transpose(pdist_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_153": {
                "input_tensor": {
                    "value": "math_ops.cast(mask, dtype=dtypes.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_191": {
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "boolean_mask_196": {
                "tensor": {
                    "value": "loss_mat",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "pdist_matrix - semi_hard_negatives + margin",
                            "BinOp"
                        ],
                        [
                            "pdist_matrix - semi_hard_negatives",
                            "BinOp"
                        ]
                    ]
                },
                "mask": {
                    "value": "tf.cast(mask_positives, tf.bool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_198": {
                "x": {
                    "value": "tf.rank(triplet_loss_result)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "control_dependencies_199": {
                "control_inputs": {
                    "value": "[assert_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_89": {
                "x": {
                    "value": "diffs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "all_diffs(a, b)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_91": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(diffs), axis=-1) + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_149": {
                "a": {
                    "value": "pdist_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common.pairwise_distance(embeddings, squared=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_154": {
                "x": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "math_ops.logical_and(array_ops.tile(adjacency_not, [batch_size, 1]), math_ops.greater(pdist_matrix_tile, array_ops.reshape(array_ops.transpose(pdist_matrix), [-1, 1])))",
                            "Call"
                        ],
                        [
                            "math_ops.cast(mask, dtype=dtypes.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_196": {
                "x": {
                    "value": "mask_positives",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math_ops.cast(adjacency, dtype=dtypes.float32) - array_ops.diag(array_ops.ones([batch_size]))",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rank_198": {
                "input": {
                    "value": "triplet_loss_result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "math_ops.maximum(tf.boolean_mask(loss_mat, tf.cast(mask_positives, tf.bool)), 0.0)",
                            "Call"
                        ],
                        [
                            "tf.nn.softplus(tf.boolean_mask(loss_mat, tf.cast(mask_positives, tf.bool)))",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_202": {
                "tensor": {
                    "value": "loss_mat",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "pdist_matrix - semi_hard_negatives + margin",
                            "BinOp"
                        ],
                        [
                            "pdist_matrix - semi_hard_negatives",
                            "BinOp"
                        ]
                    ]
                },
                "mask": {
                    "value": "tf.cast(mask_positives, tf.bool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_203": {
                "x": {
                    "value": "tf.rank(triplet_loss_result)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "control_dependencies_204": {
                "control_inputs": {
                    "value": "[assert_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_93": {
                "input_tensor": {
                    "value": "tf.abs(diffs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_98": {
                "variable": {
                    "value": "prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "adjoint_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_202": {
                "x": {
                    "value": "mask_positives",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math_ops.cast(adjacency, dtype=dtypes.float32) - array_ops.diag(array_ops.ones([batch_size]))",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rank_203": {
                "input": {
                    "value": "triplet_loss_result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "math_ops.maximum(tf.boolean_mask(loss_mat, tf.cast(mask_positives, tf.bool)), 0.0)",
                            "Call"
                        ],
                        [
                            "tf.nn.softplus(tf.boolean_mask(loss_mat, tf.cast(mask_positives, tf.bool)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_91": {
                "input_tensor": {
                    "value": "tf.square(diffs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_93": {
                "x": {
                    "value": "diffs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "all_diffs(a, b)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_91": {
                "x": {
                    "value": "diffs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "all_diffs(a, b)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ranking/triplets_apn.py": {
        "tensorflow": {
            "argmin_9": {
                "variable": {
                    "value": "masked_minimums_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.math.multiply(data - axis_maximums, mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_min_13": {
                "variable": {
                    "value": "axis_minimums",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_15": {
                "variable": {
                    "value": "masked_maximums_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.math.multiply(data - axis_minimums, mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_max_31": {
                "variable": {
                    "value": "axis_maximums",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_min_51": {
                "variable": {
                    "value": "axis_minimums",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_58": {
                "variable": {
                    "value": "lshape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[lshape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "size_61": {
                "variable": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_62": {
                "variable": {
                    "value": "adjacency",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_not_63": {
                "variable": {
                    "value": "adjacency_not",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "adjacency",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.equal(labels, tf.transpose(labels))",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_68": {
                "variable": {
                    "value": "pdist_matrix_tile",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pdist_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common.pairwise_distance(embeddings, squared=True)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_69": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.tile(adjacency_not, [batch_size, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.math.greater(pdist_matrix_tile, tf.reshape(tf.transpose(pdist_matrix), [-1, 1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_75": {
                "variable": {
                    "value": "mask_final",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.math.greater(tf.reduce_sum(tf.cast(mask, dtype=tf.float32), 1, keepdims=True), 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_80": {
                "variable": {
                    "value": "mask_final",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "mask_final",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(tf.math.greater(tf.reduce_sum(tf.cast(mask, dtype=tf.float32), 1, keepdims=True), 0.0), [batch_size, batch_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(mask_final)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_83": {
                "variable": {
                    "value": "adjacency_not",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "adjacency_not",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.math.logical_not(adjacency)",
                            "Call"
                        ],
                        [
                            "tf.cast(adjacency_not, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_84": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.math.logical_and(tf.tile(adjacency_not, [batch_size, 1]), tf.math.greater(pdist_matrix_tile, tf.reshape(tf.transpose(pdist_matrix), [-1, 1])))",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "variable": {
                    "value": "negatives_outside_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_minimum_idx(pdist_matrix_tile, mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_87": {
                "variable": {
                    "value": "negatives_outside_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "negatives_outside_idx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(masked_minimum_idx(pdist_matrix_tile, mask), [batch_size, batch_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(negatives_outside_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_90": {
                "variable": {
                    "value": "negatives_inside_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_maximum_idx(pdist_matrix, adjacency_not)[:, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_93": {
                "variable": {
                    "value": "semi_hard_negatives_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask_final",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(tf.math.greater(tf.reduce_sum(tf.cast(mask, dtype=tf.float32), 1, keepdims=True), 0.0), [batch_size, batch_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(mask_final)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "negatives_outside_idx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(masked_minimum_idx(pdist_matrix_tile, mask), [batch_size, batch_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(negatives_outside_idx)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "negatives_inside_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(masked_maximum_idx(pdist_matrix, adjacency_not)[:, tf.newaxis], [1, batch_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_101": {
                "variable": {
                    "value": "range_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.range(0, batch_size), [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "boolean_mask_102": {
                "variable": {
                    "value": "anchor_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "range_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(tf.range(0, batch_size), [-1, 1]), [1, batch_size])",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "tf.cast(mask_positives, tf.bool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "boolean_mask_106": {
                "variable": {
                    "value": "positive_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(range_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "tf.cast(mask_positives, tf.bool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "boolean_mask_109": {
                "variable": {
                    "value": "negative_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "semi_hard_negatives_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(mask_final, negatives_outside_idx, negatives_inside_idx)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "tf.cast(mask_positives, tf.bool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_114": {
                "variable": {
                    "value": "lshape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_116": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[lshape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "size_117": {
                "variable": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_120": {
                "variable": {
                    "value": "same_identity_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.equal(tf.expand_dims(labels, axis=1), tf.expand_dims(labels, axis=0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_not_123": {
                "variable": {
                    "value": "negative_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "same_identity_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.equal(tf.expand_dims(labels, axis=1), tf.expand_dims(labels, axis=0)))",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_xor_124": {
                "variable": {
                    "value": "positive_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "same_identity_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.equal(tf.expand_dims(labels, axis=1), tf.expand_dims(labels, axis=0)))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.eye(tf.shape(labels)[0], dtype=tf.bool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_129": {
                "variable": {
                    "value": "positive_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.multiply(dists + delta, tf.cast(positive_mask, tf.float32))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_131": {
                "x": {
                    "value": "negative_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.logical_not(same_identity_mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_7": {
                "input_tensor": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_10": {
                "x": {
                    "value": "data - axis_maximums",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.math.logical_and(tf.tile(adjacency_not, [batch_size, 1]), tf.math.greater(pdist_matrix_tile, tf.reshape(tf.transpose(pdist_matrix), [-1, 1])))",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_16": {
                "x": {
                    "value": "data - axis_minimums",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.math.logical_and(tf.tile(adjacency_not, [batch_size, 1]), tf.math.greater(pdist_matrix_tile, tf.reshape(tf.transpose(pdist_matrix), [-1, 1])))",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_32": {
                "input_tensor": {
                    "value": "tf.math.multiply(data - axis_maximums, mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_max_52": {
                "input_tensor": {
                    "value": "tf.math.multiply(data - axis_minimums, mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_62": {
                "a": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_70": {
                "input": {
                    "value": "adjacency_not",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.math.logical_not(adjacency)",
                            "Call"
                        ],
                        [
                            "tf.cast(adjacency_not, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "greater_71": {
                "x": {
                    "value": "pdist_matrix_tile",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(pdist_matrix, [batch_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reshape(tf.transpose(pdist_matrix), [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_76": {
                "x": {
                    "value": "tf.reduce_sum(tf.cast(mask, dtype=tf.float32), 1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_96": {
                "x": {
                    "value": "adjacency",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.equal(labels, tf.transpose(labels))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_97": {
                "diagonal": {
                    "value": "tf.ones([batch_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_101": {
                "tensor": {
                    "value": "tf.range(0, batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_103": {
                "x": {
                    "value": "mask_positives",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(adjacency, dtype=tf.float32) - tf.linalg.diag(tf.ones([batch_size]))",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_106": {
                "a": {
                    "value": "range_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(tf.range(0, batch_size), [-1, 1]), [1, batch_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_107": {
                "x": {
                    "value": "mask_positives",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(adjacency, dtype=tf.float32) - tf.linalg.diag(tf.ones([batch_size]))",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_109": {
                "x": {
                    "value": "mask_positives",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(adjacency, dtype=tf.float32) - tf.linalg.diag(tf.ones([batch_size]))",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_120": {
                "x": {
                    "value": "tf.expand_dims(labels, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.expand_dims(labels, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_125": {
                "num_rows": {
                    "value": "tf.shape(labels)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_129": {
                "x": {
                    "value": "dists + delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(positive_mask, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_130": {
                "input_tensor": {
                    "value": "dists",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common.pairwise_distance(embeddings, squared=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmin_131": {
                "input": {
                    "value": "tf.math.multiply(dists - axis_maximums, tf.cast(negative_mask, tf.float32))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_33": {
                "x": {
                    "value": "data - axis_maximums",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.math.logical_and(tf.tile(adjacency_not, [batch_size, 1]), tf.math.greater(pdist_matrix_tile, tf.reshape(tf.transpose(pdist_matrix), [-1, 1])))",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_53": {
                "x": {
                    "value": "data - axis_minimums",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.math.logical_and(tf.tile(adjacency_not, [batch_size, 1]), tf.math.greater(pdist_matrix_tile, tf.reshape(tf.transpose(pdist_matrix), [-1, 1])))",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_72": {
                "tensor": {
                    "value": "tf.transpose(pdist_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_77": {
                "input_tensor": {
                    "value": "tf.cast(mask, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_98": {
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_101": {},
            "expand_dims_120": {
                "input": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_121": {
                "input": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_129": {
                "x": {
                    "value": "positive_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.logical_xor(same_identity_mask, tf.eye(tf.shape(labels)[0], dtype=tf.bool))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_131": {
                "x": {
                    "value": "dists - axis_maximums",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(negative_mask, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_73": {
                "a": {
                    "value": "pdist_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common.pairwise_distance(embeddings, squared=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_78": {
                "x": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.math.logical_and(tf.tile(adjacency_not, [batch_size, 1]), tf.math.greater(pdist_matrix_tile, tf.reshape(tf.transpose(pdist_matrix), [-1, 1])))",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_125": {
                "input": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, [lshape[0], 1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "svmax_tensorflow.py": {
        "tensorflow": {
            "svd_18": {
                "variable": {
                    "value": "sing_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(mini_batch_embedding, [batch_size, dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "compute_uv": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_21": {
                "variable": {
                    "value": "mean_sing_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sing_values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.linalg.svd(tf.reshape(mini_batch_embedding, [batch_size, dim]), compute_uv=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "uniform_28": {
                "variable": {
                    "value": "rand_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, emb_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_29": {
                "variable": {
                    "value": "normalized_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rand_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random.uniform([batch_size, emb_dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_42": {
                "variable": {
                    "value": "normalized_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "lower_case_embedding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, emb_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_19": {
                "tensor": {
                    "value": "mini_batch_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, dim]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "svmax_pytorch.py": {
        "torch": {
            "svd_18": {
                "variable": {
                    "value": "(c_u, c_e, c_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mini_batch_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "some": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_19": {
                "variable": {
                    "value": "mean_sing_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_e",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_26": {
                "variable": {
                    "value": "rand_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, emb_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normalize_27": {
                "variable": {
                    "value": "normalized_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rand_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.rand([batch_size, emb_dim])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_40": {
                "variable": {
                    "value": "normalized_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lower_case_embedding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, emb_dim))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}