{
    "agent.py": {
        "torch": {
            "MSELoss_79": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_80": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_107": {
                "variable": {
                    "value": "self.adj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.expand_dims(self.adj.astype(int), axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "self.last_observation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_177": {
                "variable": {
                    "value": "adj_tens",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.expand_dims(adj_tens.astype(int), axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_181": {
                "variable": {
                    "value": "last_observation_tens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(last_observation_tens, last_observation_)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_182": {
                "variable": {
                    "value": "action_tens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(action_tens, torch.Tensor([action_]).type(torch.LongTensor))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "reward_tens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(reward_tens, torch.Tensor([[reward_]]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "observation_tens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(observation_tens, observation_)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "done_tens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(done_tens, torch.Tensor([[done_]]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_187": {
                "variable": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.expand_dims(adj_.astype(int), axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "adj_tens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(adj_tens, adj)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_221": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "cwd + '/model.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_182": {},
            "Tensor_183": {},
            "Tensor_185": {},
            "max_134": {
                "input": {
                    "value": "self.model(observation_tens, adj_tens) + observation_tens * -100000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "baseline.py": {
        "torch": {
            "MSELoss_16": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_17": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "environment.py": {
        "torch": {
            "zeros_23": {
                "variable": {
                    "value": "self.observation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "Parameter_20": {
                "variable": {
                    "value": "self.mu_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.mu_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.q_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.q_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "q_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(q_1, q_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_99": {
                "variable": {
                    "value": "self.mu_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_101": {
                "variable": {
                    "value": "self.mu_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_113": {
                "variable": {
                    "value": "self.q_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_115": {
                "variable": {
                    "value": "self.q_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_117": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(2 * embed_dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_156": {
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "mu_1.clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2_).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_157": {
                "variable": {
                    "value": "q_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "mu_1.clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2_).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.q_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "q_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(q_1, q_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_178": {
                "variable": {
                    "value": "self.mu_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_181": {
                "variable": {
                    "value": "self.mu_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_199": {
                "variable": {
                    "value": "self.q_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_201": {
                "variable": {
                    "value": "self.q_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_261": {
                "variable": {
                    "value": "q_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(q_1_, q_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_279": {
                "variable": {
                    "value": "self.mu_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_280": {
                "variable": {
                    "value": "self.mu_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_289": {
                "variable": {
                    "value": "self.q_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_290": {
                "variable": {
                    "value": "self.q_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_291": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_332": {
                "variable": {
                    "value": "mu_w2v",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.expand_dims(self.model[list(map(str, sorted(list(map(int, list(self.model.wv.vocab))))))], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_359": {
                "variable": {
                    "value": "q_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(q_1, q_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_372": {
                "variable": {
                    "value": "self.nodes_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mul_396": {
                "variable": {
                    "value": "mulpositivebatch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nodes_embeddings(v_i).to(device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.contextnodes_embeddings(v_j).to(device)",
                            "Call"
                        ],
                        [
                            "self.nodes_embeddings(v_j).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "logsigmoid_397": {
                "variable": {
                    "value": "positivebatch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(mulpositivebatch, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_399": {
                "variable": {
                    "value": "mulnegativebatch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_i.view(len(v_i), 1, self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "negativenodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-self.contextnodes_embeddings(negsamples).to(device)",
                            "UnaryOp"
                        ],
                        [
                            "-self.nodes_embeddings(negsamples).to(device)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "sum_400": {
                "variable": {
                    "value": "negativebatch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.logsigmoid(torch.sum(mulnegativebatch, dim=2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_412": {
                "variable": {
                    "value": "self.l_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_413": {
                "variable": {
                    "value": "self.l_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_414": {
                "variable": {
                    "value": "self.l_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_435": {
                "variable": {
                    "value": "self.mu_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_438": {
                "variable": {
                    "value": "self.mu_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_453": {
                "variable": {
                    "value": "self.q_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_455": {
                "variable": {
                    "value": "self.q_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_457": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_471": {
                "variable": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nbr_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xv.shape[1]",
                            "Subscript"
                        ],
                        [
                            "xv.shape[1]",
                            "Subscript"
                        ],
                        [
                            "xv.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "diag_472": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(nbr_node)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_475": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_482": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(d)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_488": {
                "variable": {
                    "value": "gv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.inverse(d)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "adj_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj + I",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_519": {
                "variable": {
                    "value": "q_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(q_1, q_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "pre_lin",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "post_lin",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.q_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.reg_hidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.reg_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "pre_lin",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "post_lin",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_119": {
                "variable": {
                    "value": "self.q_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(2 * embed_dim, self.reg_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_121": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(self.reg_hidden, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_123": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(2 * embed_dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_160": {
                "variable": {
                    "value": "q_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.q_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "q_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((q_1, q_2), dim=-1)",
                            "Call"
                        ],
                        [
                            "q_.clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.cat((q_1, q_2), dim=-1)",
                            "Call"
                        ],
                        [
                            "q_.clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.cat((q_1_, q_2), dim=-1)",
                            "Call"
                        ],
                        [
                            "q_.clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.cat((q_1, q_2), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat((q_1, q_2), dim=-1)",
                            "Call"
                        ],
                        [
                            "q_.clamp(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_160": {
                "variable": {
                    "value": "q_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_161": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "q_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.q_reg(q_).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.q_reg, q_).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.q_reg(q_).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.q_reg(q_).clamp(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_164": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((q_1, q_2), dim=-1)",
                            "Call"
                        ],
                        [
                            "q_.clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.cat((q_1, q_2), dim=-1)",
                            "Call"
                        ],
                        [
                            "q_.clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.cat((q_1_, q_2), dim=-1)",
                            "Call"
                        ],
                        [
                            "q_.clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.cat((q_1, q_2), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat((q_1, q_2), dim=-1)",
                            "Call"
                        ],
                        [
                            "q_.clamp(0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_204": {
                "variable": {
                    "value": "self.q_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.reg_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_206": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.reg_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_208": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_375": {
                "variable": {
                    "value": "self.contextnodes_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_443": {
                "variable": {
                    "value": "pre_lin",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_448": {
                "variable": {
                    "value": "post_lin",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_459": {
                "variable": {
                    "value": "self.q_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.reg_hidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_461": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.reg_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_463": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_55": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xv.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.mu_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_55": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_62": {
                "variable": {
                    "value": "mu_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xv.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.mu_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_62": {
                "variable": {
                    "value": "mu_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_68": {
                "variable": {
                    "value": "mu_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "mu_1.clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2_).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_75": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.mu_1(xv)",
                            "Call"
                        ],
                        [
                            "self.mu_1(xv)",
                            "Call"
                        ],
                        [
                            "self.mu_1(xv)",
                            "Call"
                        ],
                        [
                            "self.mu_1(xv)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mu_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mu_2(mu_pool)",
                            "Call"
                        ],
                        [
                            "torch.matmul(mu_pool, self.mu_2)",
                            "Call"
                        ],
                        [
                            "self.list_post_pooling[i](mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.mu_2(torch.matmul(adj, mu_w2v))",
                            "Call"
                        ],
                        [
                            "self.mu_2(mu_pool)",
                            "Call"
                        ],
                        [
                            "self.mu_2(mu_pool)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_75": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_132": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xv.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.mu_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_132": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_139": {
                "variable": {
                    "value": "mu_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xv.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.mu_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_139": {
                "variable": {
                    "value": "mu_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_145": {
                "variable": {
                    "value": "mu_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "mu_1.clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2_).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_146": {
                "variable": {
                    "value": "mu_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(adj, mu)",
                            "Call"
                        ],
                        [
                            "self.list_post_pooling[i](mu_pool).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(adj, mu)",
                            "Call"
                        ],
                        [
                            "torch.matmul(adj, mu)",
                            "Call"
                        ],
                        [
                            "self.list_post_pooling[i](mu_pool).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(adj, mu)",
                            "Call"
                        ],
                        [
                            "self.list_post_pooling[i](mu_pool).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(gv, mu)",
                            "Call"
                        ],
                        [
                            "self.list_post_pooling[i](mu_pool).clamp(0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.mu_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_153": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.mu_1(xv)",
                            "Call"
                        ],
                        [
                            "self.mu_1(xv)",
                            "Call"
                        ],
                        [
                            "self.mu_1(xv)",
                            "Call"
                        ],
                        [
                            "self.mu_1(xv)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mu_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mu_2(mu_pool)",
                            "Call"
                        ],
                        [
                            "torch.matmul(mu_pool, self.mu_2)",
                            "Call"
                        ],
                        [
                            "self.list_post_pooling[i](mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.mu_2(torch.matmul(adj, mu_w2v))",
                            "Call"
                        ],
                        [
                            "self.mu_2(mu_pool)",
                            "Call"
                        ],
                        [
                            "self.mu_2(mu_pool)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_153": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_188": {
                "variable": {
                    "value": "pre_lin",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_195": {
                "variable": {
                    "value": "pre_lin",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_235": {
                "variable": {
                    "value": "mu_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "mu_1.clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2_).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_245": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.mu_1(xv)",
                            "Call"
                        ],
                        [
                            "self.mu_1(xv)",
                            "Call"
                        ],
                        [
                            "self.mu_1(xv)",
                            "Call"
                        ],
                        [
                            "self.mu_1(xv)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mu_2_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mu_2(mu_pool)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_245": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_249": {
                "input": {
                    "value": "xv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xv.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "mu_1.clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2_).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_339": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.mu_1(xv)",
                            "Call"
                        ],
                        [
                            "self.mu_1(xv)",
                            "Call"
                        ],
                        [
                            "self.mu_1(xv)",
                            "Call"
                        ],
                        [
                            "self.mu_1(xv)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mu_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mu_2(mu_pool)",
                            "Call"
                        ],
                        [
                            "torch.matmul(mu_pool, self.mu_2)",
                            "Call"
                        ],
                        [
                            "self.list_post_pooling[i](mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.mu_2(torch.matmul(adj, mu_w2v))",
                            "Call"
                        ],
                        [
                            "self.mu_2(mu_pool)",
                            "Call"
                        ],
                        [
                            "self.mu_2(mu_pool)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_339": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_348": {
                "variable": {
                    "value": "mu_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "mu_1.clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2_).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_355": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.mu_1(xv)",
                            "Call"
                        ],
                        [
                            "self.mu_1(xv)",
                            "Call"
                        ],
                        [
                            "self.mu_1(xv)",
                            "Call"
                        ],
                        [
                            "self.mu_1(xv)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mu_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mu_2(mu_pool)",
                            "Call"
                        ],
                        [
                            "torch.matmul(mu_pool, self.mu_2)",
                            "Call"
                        ],
                        [
                            "self.list_post_pooling[i](mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.mu_2(torch.matmul(adj, mu_w2v))",
                            "Call"
                        ],
                        [
                            "self.mu_2(mu_pool)",
                            "Call"
                        ],
                        [
                            "self.mu_2(mu_pool)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_355": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_357": {
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "mu_1.clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2_).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_397": {
                "input": {
                    "value": "mulpositivebatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(v_i, v_j)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsigmoid_401": {
                "input": {
                    "value": "torch.sum(mulnegativebatch, dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_406": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positivebatch + negativebatch",
                            "BinOp"
                        ]
                    ]
                }
            },
            "inverse_488": {
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(d)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_493": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xv.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.mu_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_493": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_500": {
                "variable": {
                    "value": "mu_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xv.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.mu_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_500": {
                "variable": {
                    "value": "mu_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_506": {
                "variable": {
                    "value": "mu_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(torch.inverse(d), adj_)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "mu_1.clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2_).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_515": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.mu_1(xv)",
                            "Call"
                        ],
                        [
                            "self.mu_1(xv)",
                            "Call"
                        ],
                        [
                            "self.mu_1(xv)",
                            "Call"
                        ],
                        [
                            "self.mu_1(xv)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mu_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mu_2(mu_pool)",
                            "Call"
                        ],
                        [
                            "torch.matmul(mu_pool, self.mu_2)",
                            "Call"
                        ],
                        [
                            "self.list_post_pooling[i](mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.mu_2(torch.matmul(adj, mu_w2v))",
                            "Call"
                        ],
                        [
                            "self.mu_2(mu_pool)",
                            "Call"
                        ],
                        [
                            "self.mu_2(mu_pool)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_515": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "data": {
                    "value": "self.reg_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_283": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_287": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_402": {
                "input": {
                    "value": "mulnegativebatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(v_i.view(len(v_i), 1, self.embed_dim), negativenodes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_481": {
                "input": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D",
                            "Name"
                        ]
                    ]
                }
            },
            "matmul_77": {
                "input": {
                    "value": "xv.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "mu_1.clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2_).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_338": {
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "mu_w2v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.expand_dims(self.model[list(map(str, sorted(list(map(int, list(self.model.wv.vocab))))))], axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_517": {
                "input": {
                    "value": "xv.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "mu_1.clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2_).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(xv, self.mu_1).clamp(0)",
                            "Call"
                        ],
                        [
                            "self.list_pre_pooling[i](mu).clamp(0)",
                            "Call"
                        ],
                        [
                            "torch.add(mu_1, mu_2).clamp(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}