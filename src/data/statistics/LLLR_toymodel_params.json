{
    "models/backbones_DRE.py": {
        "tensorflow": {
            "BatchNormalization_26": {
                "variable": {
                    "value": "self.bn_logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_27": {
                "variable": {
                    "value": "self.activation_logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_28": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "feat_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_29": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "feat_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_30": {
                "variable": {
                    "value": "self.fc_logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "nb_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/losses.py": {
        "tensorflow": {
            "reduce_mean_25": {
                "variable": {
                    "value": "KLIEP",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(labels * -2 + 1) * LLR",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_27": {
                "variable": {
                    "value": "sm_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "divide_28": {
                "variable": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sm_logits[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "sm_logits[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "boolean_mask_29": {
                "variable": {
                    "value": "LR_class1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.divide(sm_logits[:, 1], sm_logits[:, 0])",
                            "Call"
                        ],
                        [
                            "tf.math.divide(sm_logits[:, 0], sm_logits[:, 1])",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "divide_30": {
                "variable": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sm_logits[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "sm_logits[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "boolean_mask_31": {
                "variable": {
                    "value": "LR_class0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.divide(sm_logits[:, 1], sm_logits[:, 0])",
                            "Call"
                        ],
                        [
                            "tf.math.divide(sm_logits[:, 0], sm_logits[:, 1])",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "[not elem for elem in labels]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reduce_mean_9": {
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(tf.one_hot(labels.astype('int'), num_class), logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_18": {
                "input_tensor": {
                    "value": "tf.math.abs(labels - tf.math.sigmoid(LLR))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_10": {
                "labels": {
                    "value": "tf.one_hot(labels.astype('int'), num_class)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_19": {
                "x": {
                    "value": "labels - tf.math.sigmoid(LLR)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "one_hot_11": {
                "indices": {
                    "value": "labels.astype('int')",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_32": {
                "input_tensor": {
                    "value": "LR_class0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(LR, [not elem for elem in labels])",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientTape_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_20": {
                "x": {
                    "value": "LLR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[:, 1] - logits[:, 0]",
                            "BinOp"
                        ],
                        [
                            "logits[:, 1] - logits[:, 0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "l2_loss_93": {
                "t": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.trainable_variables",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "models/optimizers.py": {
        "tensorflow": {
            "PiecewiseConstantDecay_24": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "boundaries": {
                    "value": "decay_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[float(v) for v in decay_steps]",
                            "ListComp"
                        ]
                    ]
                },
                "values": {
                    "value": "learning_rates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[float(v) for v in learning_rates]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Adam_35": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.optimizers.schedules.PiecewiseConstantDecay(boundaries=decay_steps, values=learning_rates)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_45": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.optimizers.schedules.PiecewiseConstantDecay(boundaries=decay_steps, values=learning_rates)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_51": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.optimizers.schedules.PiecewiseConstantDecay(boundaries=decay_steps, values=learning_rates)",
                            "Call"
                        ]
                    ]
                }
            },
            "RMSprop_55": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.optimizers.schedules.PiecewiseConstantDecay(boundaries=decay_steps, values=learning_rates)",
                            "Call"
                        ]
                    ]
                },
                "rho": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "RMSprop_58": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.optimizers.schedules.PiecewiseConstantDecay(boundaries=decay_steps, values=learning_rates)",
                            "Call"
                        ]
                    ]
                },
                "rho": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adagrad_62": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.optimizers.schedules.PiecewiseConstantDecay(boundaries=decay_steps, values=learning_rates)",
                            "Call"
                        ]
                    ]
                },
                "initial_accumulator_value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adagrad_67": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.optimizers.schedules.PiecewiseConstantDecay(boundaries=decay_steps, values=learning_rates)",
                            "Call"
                        ]
                    ]
                },
                "initial_accumulator_value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "train_MLP.py": {
        "tensorflow": {
            "softmax_73": {
                "variable": {
                    "value": "estimated_LRs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_144": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_204": {
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_220": {
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_239": {
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/misc.py": {
        "tensorflow": {
            "list_physical_devices_13": {
                "variable": {
                    "value": "physical_devices",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_visible_devices_15": {
                "devices": {
                    "value": "physical_devices[gpu]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_memory_growth_16": {
                "device": {
                    "value": "physical_devices[gpu]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_seed_29": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/util_ckpt.py": {
        "tensorflow": {
            "Checkpoint_45": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "net": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "CheckpointManager_61": {
                "variable": {
                    "value": "ckpt_manager",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Checkpoint(step=global_step, optimizer=optimizer, net=model)",
                            "Call"
                        ]
                    ]
                },
                "directory": {
                    "value": "dir_ckptlogs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}_{}/{}_{}'.format(root_ckptlogs, subproject_name, exp_phase, comment, time_stamp)",
                            "Call"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "max_to_keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CheckpointManager_53": {
                "variable": {
                    "value": "ckpt_manager_restore",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Checkpoint(step=global_step, optimizer=optimizer, net=model)",
                            "Call"
                        ]
                    ]
                },
                "directory": {
                    "value": "path_resume",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "max_to_keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/util_tensorboard.py": {
        "tensorflow": {
            "create_file_writer_39": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.dir_tblogs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "flush_millis": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Summary_72": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "img_summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "scalar_44": {
                "name": {
                    "value": "tag",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "description": {
                    "value": "description",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "histogram_50": {
                "name": {
                    "value": "tag",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "buckets": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "description": {
                    "value": "description",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}