{
    "models/metrics/futuretraj.py": {
        "sklearn": {},
        "torch": {
            "sqrt_31": {
                "variable": {
                    "value": "loss_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(diff ** 2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_31": {
                "input": {
                    "value": "diff ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/metrics/map.py": {
        "sklearn": {
            "average_precision_score_31": {
                "y_true": {
                    "value": "self.all_gts[:, classid]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "self.all_preds[:, classid]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_45": {
                "variable": {
                    "value": "unseen_items",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[idx not in self.seen_idx for idx in batch['idx']]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "variable": {
                    "value": "y_true_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(y_true)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_55": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_out['y_pred'][unseen_items].view(n_frames, -1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(y_pred, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_50": {
                "start": {
                    "value": "n_frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(y_true)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/bdd.py": {
        "torch": {
            "DataLoader_107": {
                "variable": {
                    "value": "batch_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_size if batch_size is None else batch_size",
                            "IfExp"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.shuffle if shuffle is None else shuffle",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "self.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.nb_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.RandomSampler(self, replacement=True, num_samples=min(num_samples, len(self)))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "Tensor_185": {
                "variable": {
                    "value": "item[course_value]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_186": {
                "variable": {
                    "value": "item[goaldir_value]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_187": {
                "variable": {
                    "value": "item[accelerator_value]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_188": {
                "variable": {
                    "value": "item[speed_value]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_194": {
                "variable": {
                    "value": "_frames",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_196": {
                "variable": {
                    "value": "_frames",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.im_transform(f)[None, :] for f in _frames]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_197": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RandomSampler_102": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "min(num_samples, len(self))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/bdd_caption.py": {
        "torch": {
            "from_numpy_200": {
                "variable": {
                    "value": "item[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/hdd.py": {
        "torch": {}
    },
    "datasets/hdd_classif.py": {
        "torch": {
            "DataLoader_107": {
                "variable": {
                    "value": "batch_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "Constant"
                        ],
                        [
                            "self.batch_size if batch_size is None else batch_size",
                            "IfExp"
                        ],
                        [
                            "self.batch_size if batch_size is None else batch_size",
                            "IfExp"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.shuffle if shuffle is None else shuffle",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.shuffle if shuffle is None else shuffle",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "self.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "nb_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "self.nb_threads",
                            "Attribute"
                        ],
                        [
                            "self.nb_threads",
                            "Attribute"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "self.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.RandomSampler(self, replacement=True, num_samples=min(num_samples, len(self)))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "data.RandomSampler(self, replacement=True, num_samples=num_samples)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_129": {
                "variable": {
                    "value": "batch_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "Constant"
                        ],
                        [
                            "self.batch_size if batch_size is None else batch_size",
                            "IfExp"
                        ],
                        [
                            "self.batch_size if batch_size is None else batch_size",
                            "IfExp"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.shuffle if shuffle is None else shuffle",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.shuffle if shuffle is None else shuffle",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "self.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "nb_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "self.nb_threads",
                            "Attribute"
                        ],
                        [
                            "self.nb_threads",
                            "Attribute"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "self.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.RandomSampler(self, replacement=True, num_samples=min(num_samples, len(self)))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "data.RandomSampler(self, replacement=True, num_samples=num_samples)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "RandomSampler_102": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "min(num_samples, len(self))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RandomSampler_124": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size * 70000",
                            "BinOp"
                        ],
                        [
                            "200000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tensor_230": {
                "variable": {
                    "value": "r_next_xy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_234": {
                "variable": {
                    "value": "next_xy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_235": {
                "variable": {
                    "value": "r_next_xy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_223": {
                "variable": {
                    "value": "prev_xy[self.length - n:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_224": {
                "variable": {
                    "value": "r_prev_xy[self.length - n:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_237": {
                "variable": {
                    "value": "next_xy[:n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_238": {
                "variable": {
                    "value": "r_next_xy[:n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_280": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_286": {},
            "Tensor_287": {},
            "Tensor_288": {},
            "Tensor_289": {},
            "Tensor_290": {}
        }
    },
    "models/criterions/bdd.py": {
        "torch": {
            "MSELoss_8": {
                "variable": {
                    "value": "self.accel_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_9": {
                "variable": {
                    "value": "self.course_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/criterions/bdd_caption.py": {
        "torch": {
            "NLLLoss_8": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/criterions/frames_classif.py": {
        "torch": {
            "CrossEntropyLoss_14": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "class_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(len(class_freq)).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_9": {
                "variable": {
                    "value": "class_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(class_freq)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/criterions/l2_points.py": {
        "torch": {
            "zeros_like_14": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_xy[:, :1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_15": {
                "variable": {
                    "value": "gt_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_xy, zeros, next_xy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_25": {
                "variable": {
                    "value": "loss_values_mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(diff ** 2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_25": {
                "input": {
                    "value": "diff ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/criterions/multitask.py": {
        "torch": {}
    },
    "models/metrics/bdd.py": {
        "torch": {
            "L1Loss_15": {
                "variable": {
                    "value": "self.accel_mae",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_16": {
                "variable": {
                    "value": "self.course_mae",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/metrics/bdd_caption.py": {
        "torch": {}
    },
    "models/metrics/multimetrics.py": {
        "torch": {}
    },
    "models/networks/bdd.py": {
        "torch": {
            "Identity_21": {
                "variable": {
                    "value": "self.cnn3d.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.lin_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "visfeatures_dim + 2",
                            "BinOp"
                        ],
                        [
                            "visfeatures_dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_32": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_features['output'], batch['goaldir_value'], batch['speed_value']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/bdd_caption.py": {
        "torch": {
            "Embedding_23": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1290",
                            "MethodArgument"
                        ],
                        [
                            "1290",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.attn_combine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size + feature_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.w_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1290",
                            "MethodArgument"
                        ],
                        [
                            "1290",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_54": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(torch.cat((embedded, h[0]), 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_57": {
                "variable": {
                    "value": "attn_applied",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "all_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_features[0]",
                            "Subscript"
                        ],
                        [
                            "all_features * mask.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "self.fusion(flattened_input_features)",
                            "Call"
                        ],
                        [
                            "all_features.view(bsize, mask.size(1), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_57": {
                "variable": {
                    "value": "attn_applied",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedded, attn_applied)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn_combine(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_70": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w_out(output.squeeze(0))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "caption.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "caption.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outputs, 0)",
                            "Call"
                        ],
                        [
                            "outputs.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "net_out[sentence_decoded]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decoded_sentence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_54": {
                "tensors": {
                    "value": "(embedded, h[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_181": {
                "variable": {
                    "value": "token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output.div(self.temperature).exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/beef_hdd.py": {
        "torch": {
            "Identity_22": {
                "variable": {
                    "value": "self.cnn3d.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GRU_34": {
                "variable": {
                    "value": "self.gru_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.lin_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "gru_opt['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_36": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Identity_73": {
                "variable": {
                    "value": "self.cnn3d.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_74": {
                "variable": {
                    "value": "self.blinkers_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "blinkers_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRU_78": {
                "variable": {
                    "value": "self.gru_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.lin_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "gru_opt['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "input_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_features['output'], blink_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Identity_102": {
                "variable": {
                    "value": "self.cnn3d.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_104": {
                "variable": {
                    "value": "self.blinkers_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "blinkers_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRU_110": {
                "variable": {
                    "value": "self.gru_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self.lin_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "gru_opt['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_112": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "input_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_features['output'], blink_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_24": {
                "variable": {
                    "value": "self.blinkers_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "blinkers_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "input_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_features['output'], blink_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_122": {
                "variable": {
                    "value": "self.label_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/factory.py": {
        "torch": {
            "device_count_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/fusions.py": {
        "torch": {
            "Bilinear_43": {
                "variable": {
                    "value": "self.bilinear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in1_features": {
                    "value": "input_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in2_features": {
                    "value": "input_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.linear0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_97": {
                "variable": {
                    "value": "self.merge_linears0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "merge_linears0",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_98": {
                "variable": {
                    "value": "self.merge_linears1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "merge_linears1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "zs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_163": {
                "variable": {
                    "value": "self.linear0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_175": {
                "variable": {
                    "value": "self.bilinears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "bilinears",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Linear_176": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mm_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "zs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_233": {
                "variable": {
                    "value": "self.linear0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_234": {
                "variable": {
                    "value": "self.merge_linear0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "mm_dim * rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_241": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_256": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m0(x0_c) * m1(x1_c)",
                            "BinOp"
                        ],
                        [
                            "m.view(bsize, self.rank, -1)",
                            "Call"
                        ],
                        [
                            "m0 * m1",
                            "BinOp"
                        ],
                        [
                            "m.view(-1, self.rank, self.mm_dim)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_292": {
                "variable": {
                    "value": "self.linear0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_297": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Bilinear_298": {
                "variable": {
                    "value": "self.bilinear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in1_features": {
                    "value": "mm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "in2_features": {
                    "value": "mm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_299": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_349": {
                "variable": {
                    "value": "self.linear0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_350": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_351": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_410": {
                "variable": {
                    "value": "self.linear0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim * factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_411": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim * factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_412": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_474": {
                "variable": {
                    "value": "self.linear0_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim * factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_475": {
                "variable": {
                    "value": "self.linear1_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim * factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_476": {
                "variable": {
                    "value": "self.linear0_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim * factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_477": {
                "variable": {
                    "value": "self.linear1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim * factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_478": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mm_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_531": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_0, z_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "cat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_0.dim() - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_560": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_596": {
                "variable": {
                    "value": "self.linear0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_597": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_598": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_661": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "x[0].dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_52": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bilinear(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "ml0",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sizes_list",
                            "Attribute"
                        ],
                        [
                            "self.sizes_list",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "size * rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_108": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_1(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_109": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_0(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_120": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m0(x0_c) * m1(x1_c)",
                            "BinOp"
                        ],
                        [
                            "m.view(bsize, self.rank, -1)",
                            "Call"
                        ],
                        [
                            "m0 * m1",
                            "BinOp"
                        ],
                        [
                            "m.view(-1, self.rank, self.mm_dim)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_128": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bilinear(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_131": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bilinear(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_pre_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_135": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bilinear(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_167": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_184": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_1(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_185": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_0(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_200": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bilinear(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_203": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bilinear(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_pre_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_206": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bilinear(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_239": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_240": {
                "variable": {
                    "value": "self.merge_linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "mm_dim * rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_249": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_1(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_250": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_0(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_259": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bilinear(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_262": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bilinear(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_pre_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_267": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bilinear(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_296": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_307": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_1(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_308": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_0(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_314": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bilinear(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_317": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bilinear(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_pre_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_322": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bilinear(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_363": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_1(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_364": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_0(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_370": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bilinear(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_373": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bilinear(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_pre_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_381": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bilinear(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_424": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_1(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_425": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_0(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_430": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bilinear(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_pre_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_437": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bilinear(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_445": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bilinear(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_490": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_1(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_491": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_0(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_496": {
                "variable": {
                    "value": "z_0_skip",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_0_skip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z_0_skip, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_pre_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_503": {
                "variable": {
                    "value": "z_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_0_skip.view(z_0_skip.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z_0.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z_0)) - torch.sqrt(F.relu(-z_0))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z_0, p=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_514": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_1(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_515": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_0(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_520": {
                "variable": {
                    "value": "z_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0 * x1 * z_0_skip",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z_1, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "z_1.view(z_1.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z_1.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z_1)) - torch.sqrt(F.relu(-z_1))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z_1, p=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_pre_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_527": {
                "variable": {
                    "value": "z_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0 * x1 * z_0_skip",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z_1, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "z_1.view(z_1.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z_1.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z_1)) - torch.sqrt(F.relu(-z_1))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z_1, p=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_538": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bilinear(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_569": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bilinear(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_610": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_1(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_611": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_0(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_617": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bilinear(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_620": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bilinear(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_pre_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_628": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bilinear(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "ml1",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sizes_list",
                            "Attribute"
                        ],
                        [
                            "self.sizes_list",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "size * rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normalize_123": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bilinear(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_195": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bilinear(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_127": {
                "input": {
                    "value": "F.relu(-z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Bilinear_173": {
                "in1_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sizes_list",
                            "Attribute"
                        ],
                        [
                            "self.sizes_list",
                            "Attribute"
                        ]
                    ]
                },
                "in2_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sizes_list",
                            "Attribute"
                        ],
                        [
                            "self.sizes_list",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sizes_list",
                            "Attribute"
                        ],
                        [
                            "self.sizes_list",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sqrt_199": {
                "input": {
                    "value": "F.relu(-z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_258": {
                "input": {
                    "value": "F.relu(-z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_313": {
                "input": {
                    "value": "F.relu(-z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_369": {
                "input": {
                    "value": "F.relu(-z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_436": {
                "input": {
                    "value": "F.relu(-z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_502": {
                "input": {
                    "value": "F.relu(-z_0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_526": {
                "input": {
                    "value": "F.relu(-z_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_616": {
                "input": {
                    "value": "F.relu(-z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_122": {
                "input": {
                    "value": "F.relu(-z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_127": {
                "input": {
                    "value": "-z",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_194": {
                "input": {
                    "value": "F.relu(-z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_199": {
                "input": {
                    "value": "-z",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_258": {
                "input": {
                    "value": "-z",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_313": {
                "input": {
                    "value": "-z",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_369": {
                "input": {
                    "value": "-z",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_436": {
                "input": {
                    "value": "-z",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_502": {
                "input": {
                    "value": "-z_0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_526": {
                "input": {
                    "value": "-z_1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_616": {
                "input": {
                    "value": "-z",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_122": {
                "input": {
                    "value": "-z",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_194": {
                "input": {
                    "value": "-z",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/mlp.py": {
        "torch": {
            "ModuleList_19": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(input_dim, dimensions[0])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dimensions[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "din",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lin(x)",
                            "Call"
                        ],
                        [
                            "F.__dict__[self.activation](x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/video_cnn.py": {
        "torch": {
            "Sequential_91": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_builder(inplanes, planes, midplanes, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_builder(planes, planes, midplanes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_100": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(inplanes, planes, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_builder(planes, planes, midplanes, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(planes, planes * self.expansion, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_144": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_217": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_218": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_255": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(self.inplanes, planes * block.expansion, kernel_size=1, stride=ds_stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_267": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv3d_46": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "midplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes * planes * 3 * 3 * 3 // (inplanes * 3 * 3 + 3 * planes)",
                            "BinOp"
                        ],
                        [
                            "inplanes * planes * 3 * 3 * 3 // (inplanes * 3 * 3 + 3 * planes)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_49": {
                "num_features": {
                    "value": "midplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes * planes * 3 * 3 * 3 // (inplanes * 3 * 3 + 3 * planes)",
                            "BinOp"
                        ],
                        [
                            "inplanes * planes * 3 * 3 * 3 // (inplanes * 3 * 3 + 3 * planes)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_50": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_51": {
                "in_channels": {
                    "value": "midplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes * planes * 3 * 3 * 3 // (inplanes * 3 * 3 + 3 * planes)",
                            "BinOp"
                        ],
                        [
                            "inplanes * planes * 3 * 3 * 3 // (inplanes * 3 * 3 + 3 * planes)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(padding, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_93": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_98": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv3d_128": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_129": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_130": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_135": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_136": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_141": {
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_142": {
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv3d_169": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_171": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_172": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_180": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_183": {
                "num_features": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_184": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_185": {
                "in_channels": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_188": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_189": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_256": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "ds_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_builder.get_downsample_stride(stride)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_258": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}