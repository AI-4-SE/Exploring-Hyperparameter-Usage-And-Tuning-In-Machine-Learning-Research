{
    "src/probing.py": {
        "sklearn": {
            "LogisticRegression_178": {
                "variable": {
                    "value": "linear_probe",
                    "type": "variable",
                    "possible_values": []
                },
                "multi_class": {
                    "value": "multinomial",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                },
                "solver": {
                    "value": "lbfgs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LogisticRegression_188": {
                "variable": {
                    "value": "linear_probe_control",
                    "type": "variable",
                    "possible_values": []
                },
                "multi_class": {
                    "value": "multinomial",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                },
                "solver": {
                    "value": "lbfgs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MLPClassifier_198": {
                "variable": {
                    "value": "mlp_probe",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_layer_sizes": {
                    "value": "(args.mlp_hid,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MLPClassifier_208": {
                "variable": {
                    "value": "mlp_probe_control",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_layer_sizes": {
                    "value": "(args.mlp_hid,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "no_grad_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden[hidden_id][layer] for hidden in hiddens]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_122": {
                "tensors": {
                    "value": "[hidden[hidden_id][layer] for hidden in hiddens]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "generate_data.py": {
        "torch": {}
    },
    "src/components/mogrifierLSTM.py": {
        "torch": {
            "ModuleList_10": {
                "modules": {
                    "value": "[copy.deepcopy(module) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sigmoid_17": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.Qw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.Rw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_46": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_47": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "ninp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ntoken",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decoded_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/components/position_encodings.py": {
        "torch": {
            "Dropout_30": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1400",
                            "Method Argument"
                        ],
                        [
                            "5000",
                            "Method Argument"
                        ],
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_32": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1400",
                            "Method Argument"
                        ],
                        [
                            "5000",
                            "Method Argument"
                        ],
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_32": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_33": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, d_model, 2).float() * (-math.log(max_period) / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_34": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_64": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_65": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1400",
                            "Method Argument"
                        ],
                        [
                            "5000",
                            "Method Argument"
                        ],
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_81": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_83": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pos_embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(max_len, 1, d_model).uniform_(-init_range, init_range)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cos_36": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term[:-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_38": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_33": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/components/rnns.py": {
        "torch": {
            "Dropout_11": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "noutputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sigmoid_30": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_13": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "ninp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ntoken",
                            "variable"
                        ]
                    ]
                }
            },
            "Embedding_16": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "ninp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ntoken",
                            "variable"
                        ]
                    ]
                }
            },
            "eye_17": {
                "variable": {
                    "value": "self.encoder.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "ntoken",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RNN_28": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ninp",
                    "type": "variable",
                    "possible_values": []
                },
                "nonlinearity": {
                    "value": "nonlinearity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'RNN_TANH': 'tanh', 'RNN_RELU': 'relu'}[rnn_type]",
                            "Subscript"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_58": {
                "variable": {
                    "value": "emb_packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.drop(self.encoder(input))",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_60": {
                "variable": {
                    "value": "(output_padded, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output_packed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/components/sa_rnn.py": {
        "torch": {
            "Dropout_35": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_36": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "ninp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ntoken",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sigmoid_51": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decoded_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "H_t[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[H_t[i][1:], h_state]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "C_t[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[C_t[i][1:], c_state]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/components/self_attention.py": {
        "torch": {
            "softmax_21": {
                "variable": {
                    "value": "p_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.transpose(-2, -1)) / math.sqrt(d_k)",
                            "BinOp"
                        ],
                        [
                            "scores + mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_52": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_17": {
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "key.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_24": {
                "input": {
                    "value": "p_attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "dropout(p_attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/components/transformer_encoder.py": {
        "torch": {}
    },
    "src/components/transformers.py": {
        "torch": {
            "Embedding_38": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TransformerEncoderLayer_40": {
                "variable": {
                    "value": "encoder_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "d_model": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "nhead": {
                    "value": "nhead",
                    "type": "variable",
                    "possible_values": []
                },
                "dim_feedforward": {
                    "value": "d_ffn",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TransformerEncoder_41": {
                "variable": {
                    "value": "self.transformer_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "encoder_layer": {
                    "value": "encoder_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TransformerEncoderLayer(d_model, nhead, d_ffn, dropout)",
                            "Call"
                        ],
                        [
                            "self.transformer_encoder.layers",
                            "Attribute"
                        ],
                        [
                            "EncoderLayer(self_attn)",
                            "Call"
                        ],
                        [
                            "EncoderLayerFFN(self_attn, feed_forward)",
                            "Call"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "nlayers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "noutputs",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sigmoid_45": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "noutputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sigmoid_108": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_140": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_154": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "noutputs",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sigmoid_155": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "variable": {
                    "value": "feed_forward",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(d_model, d_ffn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "in_features": {
                    "value": "d_ffn",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "triu_51": {
                "input": {
                    "value": "torch.ones(sz, sz)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "triu_163": {
                "input": {
                    "value": "torch.ones(sz, sz)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_51": {
                "*size": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_163": {
                "*size": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/components/utils.py": {
        "torch": {
            "softmax_56": {
                "variable": {
                    "value": "p_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.transpose(-2, -1)) / math.sqrt(d_k)",
                            "BinOp"
                        ],
                        [
                            "scores.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_14": {
                "modules": {
                    "value": "[copy.deepcopy(module) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "variable": {
                    "value": "self.a_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_22": {
                "variable": {
                    "value": "self.b_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_40": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_73": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_53": {
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.linears[0](query).view(nbatches, nquery, self.h, self.d_k).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_59": {
                "input": {
                    "value": "p_attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "dropout(p_attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.linears[2](value).view(nbatches, nkeyval, self.h, self.d_k).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_21": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_22": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/dataloader.py": {
        "torch": {
            "tensor_219": {
                "variable": {
                    "value": "word_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[len(x) for x in word_batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_227": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_tensors_padded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.cat([t, torch.zeros(max_length - len(t), noutputs)]).unsqueeze(0) for t in target_tensors]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "transpose_227": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_226": {
                "tensors": {
                    "value": "[t, torch.zeros(max_length - len(t), noutputs)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_226": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_226": {
                "*size": {
                    "value": "max_length - len(t)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "noutputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_tensors[0].size(-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/main.py": {
        "torch": {
            "manual_seed_195": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_267": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_latest_checkpoint(config.model_path, logger)",
                            "Call"
                        ],
                        [
                            "get_latest_checkpoint(config.model_path, logger)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "src/model.py": {
        "torch": {
            "MSELoss_54": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_88": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_398": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_427": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adadelta_90": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__120": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.config.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ASGD_92": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_94": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_96": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_97": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "self.config.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "patience": {
                    "value": "self.config.decay_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/boolean_expr_generator.py": {
        "torch": {
            "zeros_77": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(line)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/crl_generator.py": {
        "torch": {
            "zeros_114": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(line)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/data_generator.py": {
        "torch": {
            "zeros_108": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_letters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(line)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(line)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_letters",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/dyck_generator.py": {
        "torch": {
            "zeros_176": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_letters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_183": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(line)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.n_letters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_189": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(line)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_letters",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/helper.py": {
        "torch": {
            "device_21": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:{}.format(gpu_num) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "set_device_20": {
                "device": {
                    "value": "int(gpu_num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_48": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_path, '{}_{}.pt'.format(ckpt, epoch))",
                            "Call"
                        ],
                        [
                            "ckpts[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_86": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_path, '{}_{}.pt'.format(ckpt, epoch))",
                            "Call"
                        ],
                        [
                            "ckpts[0]",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/nonstarfree_generator.py": {
        "torch": {
            "zeros_51": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(line)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/parity_generator.py": {
        "torch": {
            "zeros_108": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(line)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/parity_generatorv2.py": {
        "torch": {
            "zeros_96": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(line)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/reset_dyck_generator.py": {
        "torch": {
            "zeros_106": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(line)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_letters",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/sentence_processing.py": {
        "torch": {
            "tensor_32": {
                "variable": {
                    "value": "all_indexes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "all_indexes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(all_indexes, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_87": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "voc.nwords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "variable": {
                    "value": "one_hot_input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "one_hot[sents[0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_88": {
                "variable": {
                    "value": "one_hot_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sent_to_idx(voc, sentence, max_length)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/shuffle_generator.py": {
        "torch": {
            "ones_157": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(line) // self.pair_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_letters",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/starfree_generator.py": {
        "torch": {
            "zeros_96": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(line) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_163": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(line)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_227": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(line)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_307": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(line)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_419": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(line)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_559": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(len(line) + 1, 6)",
                            "Call"
                        ],
                        [
                            "torch.zeros(len(line), 2)",
                            "Call"
                        ],
                        [
                            "torch.zeros(len(line), 2)",
                            "Call"
                        ],
                        [
                            "torch.zeros(len(line), 3)",
                            "Call"
                        ],
                        [
                            "torch.zeros(len(line), 3)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(tensor)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(tensor)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(tensor)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_655": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(len(line) + 1, 6)",
                            "Call"
                        ],
                        [
                            "torch.zeros(len(line), 2)",
                            "Call"
                        ],
                        [
                            "torch.zeros(len(line), 2)",
                            "Call"
                        ],
                        [
                            "torch.zeros(len(line), 3)",
                            "Call"
                        ],
                        [
                            "torch.zeros(len(line), 3)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(tensor)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(tensor)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(tensor)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_724": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(len(line) + 1, 6)",
                            "Call"
                        ],
                        [
                            "torch.zeros(len(line), 2)",
                            "Call"
                        ],
                        [
                            "torch.zeros(len(line), 2)",
                            "Call"
                        ],
                        [
                            "torch.zeros(len(line), 3)",
                            "Call"
                        ],
                        [
                            "torch.zeros(len(line), 3)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(tensor)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(tensor)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(tensor)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_799": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(len(line) + 1, 6)",
                            "Call"
                        ],
                        [
                            "torch.zeros(len(line), 2)",
                            "Call"
                        ],
                        [
                            "torch.zeros(len(line), 2)",
                            "Call"
                        ],
                        [
                            "torch.zeros(len(line), 3)",
                            "Call"
                        ],
                        [
                            "torch.zeros(len(line), 3)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(tensor)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(tensor)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(tensor)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(tensor)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/utils/starfree_generatorv2.py": {
        "torch": {}
    },
    "src/utils/tomita_generator.py": {
        "torch": {
            "zeros_68": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(line)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_143": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(line) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/visualize_san.py": {
        "torch": {
            "tensor_148": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.triu(np.ones((n, n))).T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_151": {
                "variable": {
                    "value": "attn_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(queries, keys.T) / np.sqrt(3)",
                            "BinOp"
                        ],
                        [
                            "scores * mask + -1000000000.0 * (1 - mask)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mm_155": {
                "variable": {
                    "value": "attn_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_map.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "values.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_264": {
                "variable": {
                    "value": "decoder_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res_ln_out2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ln2(res_out2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "decoder_weights.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_81": {
                "input": {
                    "value": "embeddings.squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "kqv.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_149": {
                "input": {
                    "value": "queries",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "keys.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_182": {
                "input": {
                    "value": "attn_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(attn_map.float(), values.float())",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attn_ffn_w.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/visualize_san_v2.py": {
        "torch": {
            "unique_66": {
                "variable": {
                    "value": "embed_unq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.model.encoder(src) * np.sqrt(config.d_model)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_131": {
                "variable": {
                    "value": "values_unq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_142": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.triu(np.ones((n, n))).T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_145": {
                "variable": {
                    "value": "attn_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(queries, keys.T) / np.sqrt(3)",
                            "BinOp"
                        ],
                        [
                            "scores * mask + -1000000000.0 * (1 - mask)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mm_150": {
                "variable": {
                    "value": "attn_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_map.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "values.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_254": {
                "variable": {
                    "value": "decoder_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res_ln_out2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ln2(res_out2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "decoder_weights.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_83": {
                "input": {
                    "value": "embeddings.squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "kqv.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_143": {
                "input": {
                    "value": "queries",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "keys.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_178": {
                "input": {
                    "value": "attn_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(attn_map.float(), values.float())",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attn_ffn_w.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}