{
    "offlinerl/utils/data.py": {
        "sklearn": {
            "MinMaxScaler_214": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "feature_range": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "as_tensor_141": {
                "variable": {
                    "value": "self[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.items()",
                            "Call"
                        ],
                        [
                            "v.__getstate__()",
                            "Call"
                        ],
                        [
                            "self.items()",
                            "Call"
                        ],
                        [
                            "value.items()",
                            "Call"
                        ],
                        [
                            "self.items()",
                            "Call"
                        ],
                        [
                            "self.items()",
                            "Call"
                        ],
                        [
                            "self.items()",
                            "Call"
                        ],
                        [
                            "self.__dict__.values()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_tensor_14": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "offlinerl/algo/base.py": {
        "torch": {
            "load_78": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path",
                            "Method Argument"
                        ],
                        [
                            "model_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_74": {
                "obj": {
                    "value": "self.get_policy()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path",
                            "Method Argument"
                        ],
                        [
                            "model_path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "offlinerl/algo/modelbase/bremen.py": {
        "torch": {
            "zeros_like_27": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dot_30": {
                "variable": {
                    "value": "r_dot_old",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b.clone()",
                            "Call"
                        ],
                        [
                            "r - alpha * z",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b.clone()",
                            "Call"
                        ],
                        [
                            "r - alpha * z",
                            "BinOp"
                        ]
                    ]
                }
            },
            "AdamW_57": {
                "variable": {
                    "value": "transition_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "transition.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['transition_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_60": {
                "variable": {
                    "value": "behavior_actor_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "behavior_actor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['bc_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_65": {
                "variable": {
                    "value": "value_net_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "value_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['value_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "as_tensor_211": {
                "variable": {
                    "value": "max_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_buffer['obs_next'].max(axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_212": {
                "variable": {
                    "value": "min_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_buffer['obs_next'].min(axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_291": {
                "variable": {
                    "value": "advantages",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rewards[model_indexes, np.arange(obs.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(reward, min_reward, max_reward)",
                            "Call"
                        ],
                        [
                            "traj['rew']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_292": {
                "variable": {
                    "value": "td_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rewards[model_indexes, np.arange(obs.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(reward, min_reward, max_reward)",
                            "Call"
                        ],
                        [
                            "traj['rew']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_312": {
                "variable": {
                    "value": "p_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grad.view(-1) for grad in torch.autograd.grad(p_loss, self.actor.parameters(), create_graph=True)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_313": {
                "variable": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_314": {
                "variable": {
                    "value": "kl_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grad.view(-1) for grad in torch.autograd.grad(kl, self.actor.parameters(), create_graph=True)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_322": {
                "variable": {
                    "value": "old_parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[param.view(-1) for param in self.actor.parameters()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dot_37": {
                "variable": {
                    "value": "r_dot_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b.clone()",
                            "Call"
                        ],
                        [
                            "r - alpha * z",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b.clone()",
                            "Call"
                        ],
                        [
                            "r - alpha * z",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_105": {
                "variable": {
                    "value": "self.transition",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.args['dynamics_path']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_110": {
                "variable": {
                    "value": "self.behavior_actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.args['behavior_path']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_354": {
                "variable": {
                    "value": "v_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(value - returns) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_303": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_320": {
                "input": {
                    "value": "2 * self.args['trpo_step_size'] / (torch.dot(x, hvp(x)) + 1e-08)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_333": {
                "variable": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_368": {
                "tensors": {
                    "value": "[data['obs'], data['act']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_379": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_221": {
                "variable": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_buffer.sample(int(self.args['data_collection_per_epoch'] / self.args['horizon']))['obs']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(obs, device=self.device)",
                            "Call"
                        ],
                        [
                            "next_obs",
                            "variable"
                        ],
                        [
                            "traj['obs']",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_316": {
                "tensors": {
                    "value": "[grad.view(-1) for grad in torch.autograd.grad(torch.sum(kl_grad * x), self.actor.parameters(), create_graph=True)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_369": {
                "tensors": {
                    "value": "[data['obs_next'], data['rew']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_381": {
                "tensors": {
                    "value": "[valdata['obs'], valdata['act']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dot_34": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r.clone()",
                            "Call"
                        ],
                        [
                            "r + r_dot_new / r_dot_old * p",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ax(p)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_231": {
                "variable": {
                    "value": "obs_action",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obs, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_242": {
                "variable": {
                    "value": "next_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(next_obs, max_obs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_243": {
                "variable": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rewards[model_indexes, np.arange(obs.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(reward, min_reward, max_reward)",
                            "Call"
                        ],
                        [
                            "traj['rew']",
                            "Subscript"
                        ]
                    ]
                },
                "min": {
                    "value": "min_reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_buffer['rew'].min()",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "max_reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_buffer['rew'].max()",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_312": {
                "outputs": {
                    "value": "p_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(ratio * advantages).mean()",
                            "UnaryOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.actor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_314": {
                "outputs": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kl_divergence(action_dist, old_action_dist).mean()",
                            "Call"
                        ],
                        [
                            "kl_divergence(new_action_dist, old_action_dist).mean()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.actor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_251": {
                "variable": {
                    "value": "dones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rewards[model_indexes, np.arange(obs.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(reward, min_reward, max_reward)",
                            "Call"
                        ],
                        [
                            "traj['rew']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_256": {
                "variable": {
                    "value": "replace_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "replace_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_buffer.sample(done_traj)['obs']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(replace_obs, device=self.device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dot_320": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(b)",
                            "Call"
                        ],
                        [
                            "x + alpha * p",
                            "BinOp"
                        ],
                        [
                            "cg(hvp, p_grad, cg_iters=self.args['cg_iters'])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "hvp(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_242": {
                "input": {
                    "value": "next_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_obses[model_indexes, np.arange(obs.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "torch.max(torch.min(next_obs, max_obs), min_obs)",
                            "Call"
                        ],
                        [
                            "traj['obs_next']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_253": {
                "input": {
                    "value": "dones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.terminal_func({'obs': obs, 'action': action, 'next_obs': next_obs})",
                            "Call"
                        ],
                        [
                            "dones.to(reward)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(reward)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_316": {
                "outputs": {
                    "value": "torch.sum(kl_grad * x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.actor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_382": {
                "tensors": {
                    "value": "[valdata['obs_next'], valdata['rew']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_316": {
                "input": {
                    "value": "kl_grad * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_229": {
                "input": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_dist.sample()",
                            "Call"
                        ],
                        [
                            "action_dist.mean",
                            "Attribute"
                        ],
                        [
                            "action + torch.randn_like(action) * self.args['static_noise']",
                            "BinOp"
                        ],
                        [
                            "traj['act']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "where_257": {
                "condition": {
                    "value": "dones > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "offlinerl/algo/modelbase/combo.py": {
        "torch": {
            "Adam_36": {
                "variable": {
                    "value": "transition_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "transition.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['transition_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "7.5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_47": {
                "variable": {
                    "value": "actor_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "actor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['actor_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_49": {
                "variable": {
                    "value": "log_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "args['device']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_50": {
                "variable": {
                    "value": "alpha_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[log_alpha]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['critic_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_54": {
                "variable": {
                    "value": "critic_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[*q1.parameters(), *q2.parameters()]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['critic_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_56": {
                "variable": {
                    "value": "log_beta",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "args['device']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_57": {
                "variable": {
                    "value": "beta_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[log_beta]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['critic_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ExponentialLR_74": {
                "variable": {
                    "value": "self.transition_optim_secheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.transition_optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "obs_action",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obs, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_242": {
                "variable": {
                    "value": "sampled_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[action_dist.rsample() for _ in range(self.args['num_samples'])]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_246": {
                "variable": {
                    "value": "sampled_next_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[next_action_dist.rsample() for _ in range(self.args['num_samples'])]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "sampled_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[random_actions, sampled_actions]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "repeat_interleave_249": {
                "variable": {
                    "value": "repeated_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "repeats": {
                    "value": "sampled_actions.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_253": {
                "variable": {
                    "value": "sampled_next_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[random_next_actions, sampled_next_actions]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "repeat_interleave_254": {
                "variable": {
                    "value": "repeated_next_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_obs.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "repeats": {
                    "value": "sampled_next_actions.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_258": {
                "variable": {
                    "value": "sampled_q1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sampled_q1, sampled_next_q1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "sampled_q2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sampled_q2, sampled_next_q2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_309": {
                "variable": {
                    "value": "new_obs_action",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obs, new_action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_310": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.q1(new_obs_action)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_95": {
                "variable": {
                    "value": "self.transition",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.args['dynamics_path']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_206": {
                "variable": {
                    "value": "res[beta]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.log_beta.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_231": {
                "variable": {
                    "value": "next_obs_action",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[next_obs, next_action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_234": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.log_alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_266": {
                "variable": {
                    "value": "is_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_random_log_prob, _log_prob, _random_log_prob, _next_log_prob]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_158": {
                "variable": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_buffer.sample(int(self.args['data_collection_per_epoch']))['obs']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(obs, device=self.device)",
                            "Call"
                        ],
                        [
                            "next_obs",
                            "variable"
                        ],
                        [
                            "batch_data['obs']",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_250": {
                "tensors": {
                    "value": "[repeated_obs, sampled_actions]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_251": {
                "tensors": {
                    "value": "[repeated_obs, sampled_actions]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_255": {
                "tensors": {
                    "value": "[repeated_next_obs, sampled_next_actions]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_256": {
                "tensors": {
                    "value": "[repeated_next_obs, sampled_next_actions]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_282": {
                "input": {
                    "value": "self.log_beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_283": {
                "input": {
                    "value": "self.log_beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_285": {
                "input": {
                    "value": "q1_penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.logsumexp(sampled_q1, dim=0) - _q1) * self.args['base_beta']",
                            "BinOp"
                        ],
                        [
                            "q1_penalty * torch.exp(self.log_beta)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_325": {
                "tensors": {
                    "value": "[data['obs'], data['act']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_336": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "obs_action",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obs, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_168": {
                "variable": {
                    "value": "next_obs_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_obses_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_obs_dists.mean[:, :, :-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_179": {
                "variable": {
                    "value": "dones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rewards[model_indexes, np.arange(obs.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "batch_data['rew']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rand_240": {
                "*size": {
                    "value": "self.args['num_samples']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args['transition_batch_size']",
                            "Subscript"
                        ],
                        [
                            "done.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "action.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_244": {
                "*size": {
                    "value": "self.args['num_samples']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args['transition_batch_size']",
                            "Subscript"
                        ],
                        [
                            "done.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "action.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "logsumexp_270": {
                "input": {
                    "value": "sampled_q1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.q1(torch.cat([repeated_obs, sampled_actions], dim=-1))",
                            "Call"
                        ],
                        [
                            "torch.cat([sampled_q1, sampled_next_q1], dim=0)",
                            "Call"
                        ],
                        [
                            "sampled_q1 - is_weight",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_271": {
                "input": {
                    "value": "sampled_q2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.q2(torch.cat([repeated_obs, sampled_actions], dim=-1))",
                            "Call"
                        ],
                        [
                            "torch.cat([sampled_q2, sampled_next_q2], dim=0)",
                            "Call"
                        ],
                        [
                            "sampled_q2 - is_weight",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_276": {
                "input": {
                    "value": "torch.exp(self.log_beta) * (q2_penalty - self.args['lagrange_thresh']).detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_299": {
                "input": {
                    "value": "self.log_alpha * (log_prob + self.args['target_entropy']).detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_311": {
                "input": {
                    "value": "self.log_alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_326": {
                "tensors": {
                    "value": "[data['obs_next'], data['rew']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_338": {
                "tensors": {
                    "value": "[valdata['obs'], valdata['act']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_263": {
                "*size": {
                    "value": "self.args['num_samples']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args['transition_batch_size']",
                            "Subscript"
                        ],
                        [
                            "done.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_275": {
                "input": {
                    "value": "torch.exp(self.log_beta) * (q1_penalty - self.args['lagrange_thresh']).detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_170": {
                "input": {
                    "value": "torch.norm(diff, dim=-1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_171": {
                "input": {
                    "value": "torch.norm(next_obs_dists.stddev, dim=-1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_235": {
                "input": {
                    "value": "_target_q1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_q1(next_obs_action)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_276": {
                "input": {
                    "value": "self.log_beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_170": {
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_obses_mode - next_obs_mean",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_171": {
                "input": {
                    "value": "next_obs_dists.stddev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_275": {
                "input": {
                    "value": "self.log_beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_339": {
                "tensors": {
                    "value": "[valdata['obs_next'], valdata['rew']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "offlinerl/algo/modelbase/maple.py": {
        "torch": {
            "AdamW_45": {
                "variable": {
                    "value": "transition_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "transition.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['transition_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "7.5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_53": {
                "variable": {
                    "value": "actor_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[*policy_gru.parameters(), *actor.parameters()]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['actor_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_55": {
                "variable": {
                    "value": "log_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "args['device']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_56": {
                "variable": {
                    "value": "alpha_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[log_alpha]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['actor_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_58": {
                "variable": {
                    "value": "critic_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[*value_gru.parameters(), *q1.parameters(), *q2.parameters()]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['critic_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_192": {
                "variable": {
                    "value": "hidden_policy_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_policy_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.policy_gru(state, lst_action, hidden_policy, lens)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(hidden_policy_res, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_193": {
                "variable": {
                    "value": "action_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.actor(hidden_policy_res, state)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(action_res, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_194": {
                "variable": {
                    "value": "mu_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.actor(hidden_policy_res, state)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(mu_res, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_195": {
                "variable": {
                    "value": "std_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.actor(hidden_policy_res, state)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(std_res, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_256": {
                "variable": {
                    "value": "obs_max",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.obs_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_257": {
                "variable": {
                    "value": "obs_min",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.obs_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_337": {
                "variable": {
                    "value": "lens_next",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(lens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_345": {
                "variable": {
                    "value": "value_state_next",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[value_state[:, 1:], value_state_next]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_346": {
                "variable": {
                    "value": "policy_state_next",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[policy_state[:, 1:], policy_state_next]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_350": {
                "variable": {
                    "value": "valid_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch['valid']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_376": {
                "variable": {
                    "value": "log_p_act_now",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_p_act_now",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.actor(policy_state, batch['observations'])",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(log_p_act_now, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_388": {
                "variable": {
                    "value": "min_q_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q1_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.q1(value_state.detach(), act_now, batch['observations'])",
                            "Call"
                        ]
                    ]
                }
            },
            "load_99": {
                "variable": {
                    "value": "self.transition",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.args['dynamics_path']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_cache_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_182": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(state, dim=1)",
                            "Call"
                        ],
                        [
                            "env.reset()",
                            "Call"
                        ],
                        [
                            "state[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(state).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "state_next",
                            "variable"
                        ],
                        [
                            "env.reset()",
                            "Call"
                        ],
                        [
                            "state[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(state).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "state_next",
                            "variable"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_186": {
                "variable": {
                    "value": "hidden_policy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_policy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(hidden_policy, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(hidden_policy_init).to(self.device)",
                            "Call"
                        ],
                        [
                            "self.get_meta_action(obs, hidden, deterministic)",
                            "Call"
                        ],
                        [
                            "torch.zeros((1, 1, self.args['lstm_hidden_unit'])).to(self.device)",
                            "Call"
                        ],
                        [
                            "self.get_meta_action(state, hidden, deterministic=True)",
                            "Call"
                        ],
                        [
                            "torch.zeros((1, 1, self.args['lstm_hidden_unit'])).to(self.device)",
                            "Call"
                        ],
                        [
                            "self.get_meta_action(state, hidden, deterministic=True, out_mean_std=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_188": {
                "variable": {
                    "value": "lst_action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lst_action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(lst_action, dim=1)",
                            "Call"
                        ],
                        [
                            "batch['last_actions']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(lst_action).to(self.device)",
                            "Call"
                        ],
                        [
                            "act",
                            "variable"
                        ],
                        [
                            "torch.zeros((1, 1, self.args['action_shape'])).to(self.device)",
                            "Call"
                        ],
                        [
                            "action",
                            "variable"
                        ],
                        [
                            "torch.zeros((1, 1, self.args['action_shape'])).to(self.device)",
                            "Call"
                        ],
                        [
                            "action",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_268": {
                "variable": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['observations']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(obs).to(self.device)",
                            "Call"
                        ],
                        [
                            "next_obs",
                            "variable"
                        ]
                    ]
                }
            },
            "from_numpy_269": {
                "variable": {
                    "value": "lst_action",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lst_action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(lst_action, dim=1)",
                            "Call"
                        ],
                        [
                            "batch['last_actions']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(lst_action).to(self.device)",
                            "Call"
                        ],
                        [
                            "act",
                            "variable"
                        ],
                        [
                            "torch.zeros((1, 1, self.args['action_shape'])).to(self.device)",
                            "Call"
                        ],
                        [
                            "action",
                            "variable"
                        ],
                        [
                            "torch.zeros((1, 1, self.args['action_shape'])).to(self.device)",
                            "Call"
                        ],
                        [
                            "action",
                            "variable"
                        ]
                    ]
                }
            },
            "from_numpy_270": {
                "variable": {
                    "value": "hidden_policy",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "hidden_policy_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['policy_hidden']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_332": {
                "variable": {
                    "value": "batch[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "batch[k][:, :max_len]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_357": {
                "variable": {
                    "value": "Q_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q1_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_q1(value_state_next, act_target, batch['next_observations'])",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_358": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.log_alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_361": {
                "variable": {
                    "value": "Q_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(q1_target, q2_target)",
                            "Call"
                        ],
                        [
                            "Q_target - alpha * torch.unsqueeze(log_p_act_target, dim=-1)",
                            "BinOp"
                        ],
                        [
                            "batch['rewards'] + self.args['discount'] * ~batch['terminals'] * Q_target",
                            "BinOp"
                        ],
                        [
                            "torch.clip(Q_target, self.rew_min / (1 - self.args['discount']), self.rew_max / (1 - self.args['discount']))",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.rew_min / (1 - self.args['discount'])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.rew_max / (1 - self.args['discount'])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_459": {
                "variable": {
                    "value": "lst_action",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, self.args['action_shape'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_460": {
                "variable": {
                    "value": "hidden_policy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, self.args['lstm_hidden_unit'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_482": {
                "variable": {
                    "value": "lst_action",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, self.args['action_shape'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_483": {
                "variable": {
                    "value": "hidden_policy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, self.args['lstm_hidden_unit'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_97": {
                "tensors": {
                    "value": "(torch.Tensor(train_buffer['obs']), torch.Tensor(train_buffer['obs_next']))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_266": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_274": {
                "variable": {
                    "value": "obs_action",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obs, act]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_281": {
                "variable": {
                    "value": "next_obs_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_obses_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_obs_dists.mean[:, :, :-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_287": {
                "variable": {
                    "value": "uncertainty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "uncertainty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "disagreement_uncertainty if self.args['uncertainty_mode'] == 'disagreement' else aleatoric_uncertainty",
                            "IfExp"
                        ],
                        [
                            "torch.clamp(uncertainty, max=self.args['penalty_clip'])",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "self.args['penalty_clip']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_296": {
                "variable": {
                    "value": "next_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_obses[model_indexes, np.arange(obs.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(next_obs, obs_min, obs_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "obs_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(self.obs_min).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "obs_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(self.obs_max).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_297": {
                "variable": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rewards[model_indexes, np.arange(obs.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(reward, rew_min, rew_max)",
                            "Call"
                        ],
                        [
                            "env.step(use_action)",
                            "Call"
                        ],
                        [
                            "env.step(use_action)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "rew_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rew_min",
                            "Attribute"
                        ]
                    ]
                },
                "max": {
                    "value": "rew_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rew_max",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_352": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_364": {
                "input": {
                    "value": "(q1 - Q_target) ** 2 * batch['valid']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_365": {
                "input": {
                    "value": "(q2 - Q_target) ** 2 * batch['valid']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_390": {
                "input": {
                    "value": "policy_loss * batch['valid']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_410": {
                "tensors": {
                    "value": "[data['obs'], data['act']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_421": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_457": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_465": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(state, dim=1)",
                            "Call"
                        ],
                        [
                            "env.reset()",
                            "Call"
                        ],
                        [
                            "state[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(state).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "state_next",
                            "variable"
                        ],
                        [
                            "env.reset()",
                            "Call"
                        ],
                        [
                            "state[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(state).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "state_next",
                            "variable"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_480": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_490": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(state, dim=1)",
                            "Call"
                        ],
                        [
                            "env.reset()",
                            "Call"
                        ],
                        [
                            "state[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(state).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "state_next",
                            "variable"
                        ],
                        [
                            "env.reset()",
                            "Call"
                        ],
                        [
                            "state[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(state).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "state_next",
                            "variable"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_102": {
                "obj": {
                    "value": "self.transition",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.args['dynamics_save_path']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_411": {
                "tensors": {
                    "value": "[data['obs_next'], data['rew']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_423": {
                "tensors": {
                    "value": "[valdata['obs'], valdata['act']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_283": {
                "input": {
                    "value": "torch.norm(diff, dim=-1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_284": {
                "input": {
                    "value": "torch.norm(next_obs_dists.stddev, dim=-1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_359": {
                "input": {
                    "value": "log_p_act_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.actor(policy_state_next, batch['next_observations'])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_380": {
                "input": {
                    "value": "self.log_alpha * ((log_p_act_now + self.args['target_entropy']) * batch['valid']).detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_426": {
                "input": {
                    "value": "2 * transition.max_logstd - torch.log(dist.variance)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_427": {
                "input": {
                    "value": "logvar - 2 * transition.min_logstd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_283": {
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_obses_mode - next_obs_mean",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_284": {
                "input": {
                    "value": "next_obs_dists.stddev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_426": {
                "input": {
                    "value": "dist.variance",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_431": {
                "tensors": {
                    "value": "[valdata['obs_next'], valdata['rew']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_425": {
                "tensors": {
                    "value": "[valdata['obs_next'], valdata['rew']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "offlinerl/algo/modelbase/moose.py": {
        "torch": {
            "Adam_60": {
                "variable": {
                    "value": "vae_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "vae.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['vae_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_83": {
                "variable": {
                    "value": "actor_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "actor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['actor_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_93": {
                "variable": {
                    "value": "critic1_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "critic1.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['critic_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_103": {
                "variable": {
                    "value": "critic2_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "critic2.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['critic_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mse_loss_195": {
                "variable": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vae(obs, act)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.cat([obs, act], axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_41": {
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['vae_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_50": {
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['vae_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_262": {
                "variable": {
                    "value": "(rew_min, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "r_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "rew_list[index]",
                            "Subscript"
                        ],
                        [
                            "r_e + rew_list[index] * 0.99 ** index",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_263": {
                "variable": {
                    "value": "rew_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "rew_list[index]",
                            "Subscript"
                        ],
                        [
                            "r_e + rew_list[index] * 0.99 ** index",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "obs_act",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obs, act]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mse_loss_170": {
                "variable": {
                    "value": "bc_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs_next_pre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bcs[i](obs_act)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "obs_next",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.obs_next",
                            "Attribute"
                        ],
                        [
                            "batch.obs_next",
                            "Attribute"
                        ],
                        [
                            "[net(oa)[0] for (net, oa) in zip(self.bcs, obs_act)]",
                            "ListComp"
                        ],
                        [
                            "batch.obs_next",
                            "Attribute"
                        ],
                        [
                            "batch.obs_next",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mse_loss_171": {
                "variable": {
                    "value": "rew_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rew_pre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rews[i](torch.cat([obs, act, obs_next], axis=1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rew",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.rew",
                            "Attribute"
                        ],
                        [
                            "batch.rew",
                            "Attribute"
                        ],
                        [
                            "[net(oao)[0] for (net, oao) in zip(self.rews, obs_act_obs)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(rew, axis=1)",
                            "Call"
                        ],
                        [
                            "0.5 * rew_min + 0.5 * rew_mean - 0.5 * r_p",
                            "BinOp"
                        ],
                        [
                            "batch.rew",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_195": {
                "tensors": {
                    "value": "[obs, act]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_247": {
                "variable": {
                    "value": "rew",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rew",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.rew",
                            "Attribute"
                        ],
                        [
                            "batch.rew",
                            "Attribute"
                        ],
                        [
                            "[net(oao)[0] for (net, oao) in zip(self.rews, obs_act_obs)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(rew, axis=1)",
                            "Call"
                        ],
                        [
                            "0.5 * rew_min + 0.5 * rew_mean - 0.5 * r_p",
                            "BinOp"
                        ],
                        [
                            "batch.rew",
                            "Attribute"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_245": {
                "variable": {
                    "value": "r_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(rew, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_283": {
                "input": {
                    "value": "current_q2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic2(obs, act)",
                            "Call"
                        ],
                        [
                            "self.critic2(obs, act)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args['lmbda'] * torch.min(target_q1, target_q2) + (1 - self.args['lmbda']) * torch.max(target_q1, target_q2)",
                            "BinOp"
                        ],
                        [
                            "rew + (1 - done) * self.args['discount'] * target_q",
                            "BinOp"
                        ],
                        [
                            "self.args['lmbda'] * torch.min(target_q1, target_q2) + (1 - self.args['lmbda']) * torch.max(target_q1, target_q2)",
                            "BinOp"
                        ],
                        [
                            "rew + (1 - done) * self.args['discount'] * target_q",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_324": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_336": {
                "input": {
                    "value": "current_q2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic2(obs, act)",
                            "Call"
                        ],
                        [
                            "self.critic2(obs, act)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args['lmbda'] * torch.min(target_q1, target_q2) + (1 - self.args['lmbda']) * torch.max(target_q1, target_q2)",
                            "BinOp"
                        ],
                        [
                            "rew + (1 - done) * self.args['discount'] * target_q",
                            "BinOp"
                        ],
                        [
                            "self.args['lmbda'] * torch.min(target_q1, target_q2) + (1 - self.args['lmbda']) * torch.max(target_q1, target_q2)",
                            "BinOp"
                        ],
                        [
                            "rew + (1 - done) * self.args['discount'] * target_q",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_168": {
                "tensors": {
                    "value": "[obs, act, obs_next]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_238": {
                "tensors": {
                    "value": "[o, a]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_240": {
                "tensors": {
                    "value": "[oa, on]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_358": {
                "input": {
                    "value": "actions - mid_actions",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_358": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_244": {
                "input": {
                    "value": "torch.abs(self.vae(o, a)[0] - oa).detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_245": {
                "tensors": {
                    "value": "rew",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.rew",
                            "Attribute"
                        ],
                        [
                            "batch.rew",
                            "Attribute"
                        ],
                        [
                            "[net(oao)[0] for (net, oao) in zip(self.rews, obs_act_obs)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(rew, axis=1)",
                            "Call"
                        ],
                        [
                            "0.5 * rew_min + 0.5 * rew_mean - 0.5 * r_p",
                            "BinOp"
                        ],
                        [
                            "batch.rew",
                            "Attribute"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_277": {
                "input": {
                    "value": "target_q1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic1_target(obs_next, action_next)",
                            "Call"
                        ],
                        [
                            "self.critic1_target(obs_next, next_action)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_277": {
                "input": {
                    "value": "target_q1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic1_target(obs_next, action_next)",
                            "Call"
                        ],
                        [
                            "self.critic1_target(obs_next, next_action)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_330": {
                "input": {
                    "value": "target_q1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic1_target(obs_next, action_next)",
                            "Call"
                        ],
                        [
                            "self.critic1_target(obs_next, next_action)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_330": {
                "input": {
                    "value": "target_q1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic1_target(obs_next, action_next)",
                            "Call"
                        ],
                        [
                            "self.critic1_target(obs_next, next_action)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_244": {
                "input": {
                    "value": "self.vae(o, a)[0] - oa",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_196": {
                "input": {
                    "value": "std.pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "offlinerl/algo/modelbase/mopo.py": {
        "torch": {
            "AdamW_34": {
                "variable": {
                    "value": "transition_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "transition.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['transition_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "7.5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_45": {
                "variable": {
                    "value": "actor_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "actor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['actor_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_47": {
                "variable": {
                    "value": "log_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "args['device']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_48": {
                "variable": {
                    "value": "alpha_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[log_alpha]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['actor_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_52": {
                "variable": {
                    "value": "critic_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[*q1.parameters(), *q2.parameters()]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['actor_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_tensor_147": {
                "variable": {
                    "value": "obs_max",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_buffer['obs'].max(axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_148": {
                "variable": {
                    "value": "obs_min",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_buffer['obs'].min(axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "obs_action",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obs, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "new_obs_action",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obs, new_action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_261": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.q1(new_obs_action)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_89": {
                "variable": {
                    "value": "self.transition",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.args['dynamics_path']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_232": {
                "variable": {
                    "value": "next_obs_action",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[next_obs, next_action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_235": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.log_alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "variable": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_buffer.sample(int(self.args['data_collection_per_epoch']))['obs']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(obs, device=self.device)",
                            "Call"
                        ],
                        [
                            "next_obs",
                            "variable"
                        ],
                        [
                            "batch_data['obs']",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_276": {
                "tensors": {
                    "value": "[data['obs'], data['act']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_92": {
                "obj": {
                    "value": "self.transition",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.args['dynamics_save_path']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "obs_action",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obs, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_166": {
                "variable": {
                    "value": "next_obs_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_obses_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_obs_dists.mean[:, :, :-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_176": {
                "variable": {
                    "value": "next_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(next_obs, obs_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_177": {
                "variable": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rewards[model_indexes, np.arange(obs.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(reward, rew_min, rew_max)",
                            "Call"
                        ],
                        [
                            "batch_data['rew']",
                            "Subscript"
                        ]
                    ]
                },
                "min": {
                    "value": "rew_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_buffer['rew'].min()",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "rew_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_buffer['rew'].max()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_183": {
                "variable": {
                    "value": "dones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rewards[model_indexes, np.arange(obs.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(reward, rew_min, rew_max)",
                            "Call"
                        ],
                        [
                            "batch_data['rew']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_250": {
                "input": {
                    "value": "self.log_alpha * (log_prob + self.args['target_entropy']).detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_262": {
                "input": {
                    "value": "self.log_alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_277": {
                "tensors": {
                    "value": "[data['obs_next'], data['rew']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_289": {
                "tensors": {
                    "value": "[valdata['obs'], valdata['act']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_168": {
                "input": {
                    "value": "torch.norm(diff, dim=-1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_169": {
                "input": {
                    "value": "torch.norm(next_obs_dists.stddev, dim=-1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_176": {
                "input": {
                    "value": "next_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_obses[model_indexes, np.arange(obs.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "torch.max(torch.min(next_obs, obs_max), obs_min)",
                            "Call"
                        ],
                        [
                            "batch_data['obs_next']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_236": {
                "input": {
                    "value": "_target_q1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_q1(next_obs_action)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_168": {
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_obses_mode - next_obs_mean",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_169": {
                "input": {
                    "value": "next_obs_dists.stddev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_290": {
                "tensors": {
                    "value": "[valdata['obs_next'], valdata['rew']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "offlinerl/algo/modelfree/bc.py": {
        "torch": {
            "Adam_27": {
                "variable": {
                    "value": "actor_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "actor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['actor_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "offlinerl/algo/modelfree/bcq.py": {
        "torch": {
            "Adam_107": {
                "variable": {
                    "value": "vae_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "vae.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['vae_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_110": {
                "variable": {
                    "value": "jitter_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "jitter.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['jitter_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_114": {
                "variable": {
                    "value": "critic_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[*q1.parameters(), *q2.parameters()]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['critic_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_28": {
                "variable": {
                    "value": "state_action",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_29": {
                "variable": {
                    "value": "(mu, logstd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.encoder(state_action)",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_30": {
                "variable": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(self.encoder(state_action), 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(logstd, -4, 15)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-4",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_31": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(self.encoder(state_action), 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(logstd, -4, 15)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_61": {
                "variable": {
                    "value": "state_action",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "as_tensor_80": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(state).to(param)",
                            "Call"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "repeat_interleave_81": {
                "variable": {
                    "value": "repeat_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "state.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "repeats": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "state_action",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[repeat_state, multiple_actions]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_85": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.q_net(state_action)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_85": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Normal_32": {
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(self.encoder(state_action), 2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(logstd)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_37": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(*state.shape[:-1], self.latent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clamp_38": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((*state.shape[:-1], self.latent_dim)).to(param)",
                            "Call"
                        ],
                        [
                            "torch.clamp(z, -0.5, 0.5)",
                            "Call"
                        ],
                        [
                            "dist.rsample()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_65": {
                "input": {
                    "value": "action + noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-self.max_action",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.max_action",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_40": {
                "tensors": {
                    "value": "[state, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_41": {
                "input": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(torch.cat([state, z], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.max_action * torch.tanh(action)",
                            "BinOp"
                        ],
                        [
                            "self.decode(state, z)",
                            "Call"
                        ],
                        [
                            "multiple_actions[index, np.arange(index.shape[0])]",
                            "Subscript"
                        ],
                        [
                            "batch_data['act']",
                            "Subscript"
                        ],
                        [
                            "self.vae.decode(obs)",
                            "Call"
                        ],
                        [
                            "self.jitter(obs, action)",
                            "Call"
                        ],
                        [
                            "action",
                            "Method Argument"
                        ],
                        [
                            "action",
                            "Method Argument"
                        ],
                        [
                            "action",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_63": {
                "input": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.jitter_net(state_action)",
                            "Call"
                        ],
                        [
                            "self.phi * self.max_action * torch.tanh(noise)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_158": {
                "variable": {
                    "value": "kl_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_158": {
                "variable": {
                    "value": "kl_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "obs_action",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obs, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "obs_action",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obs, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "repeat_interleave_168": {
                "variable": {
                    "value": "repeat_next_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_obs.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "repeats": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_171": {
                "variable": {
                    "value": "obs_action",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[repeat_next_obs, multiple_actions]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_183": {
                "input": {
                    "value": "q2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MLP(obs_shape + action_shape, 1, args['value_features'], args['value_layers'], hidden_activation='relu').to(args['device'])",
                            "Call"
                        ],
                        [
                            "self.q2(obs_action)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lam * torch.min(target_q1, target_q2) + (1 - self.lam) * torch.max(target_q1, target_q2)",
                            "BinOp"
                        ],
                        [
                            "torch.max(target_q, dim=0)[0]",
                            "Subscript"
                        ],
                        [
                            "reward + self.gamma * (1 - done) * target_q",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_176": {
                "input": {
                    "value": "target_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lam * torch.min(target_q1, target_q2) + (1 - self.lam) * torch.max(target_q1, target_q2)",
                            "BinOp"
                        ],
                        [
                            "torch.max(target_q, dim=0)[0]",
                            "Subscript"
                        ],
                        [
                            "reward + self.gamma * (1 - done) * target_q",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_175": {
                "input": {
                    "value": "target_q1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_q1(obs_action)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_175": {
                "input": {
                    "value": "target_q1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_q1(obs_action)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_158": {
                "loc": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "scale": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "offlinerl/algo/modelfree/bcqd.py": {
        "torch": {
            "Adam_41": {
                "variable": {
                    "value": "critic_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "critic.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_115": {
                "variable": {
                    "value": "q_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "current_Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Q(state)",
                            "Call"
                        ],
                        [
                            "current_Q.gather(1, action)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reward + done * self.discount * q.gather(1, next_action).reshape(-1, 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "nll_loss_116": {
                "variable": {
                    "value": "i_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Q(next_state)",
                            "Call"
                        ],
                        [
                            "imt.exp()",
                            "Call"
                        ],
                        [
                            "(imt / imt.max(1, keepdim=True)[0] > self.threshold).float()",
                            "Call"
                        ],
                        [
                            "self.Q_target(next_state)",
                            "Call"
                        ],
                        [
                            "self.Q(state)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "action.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_145": {
                "obj": {
                    "value": "self.Q.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '_Q'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_146": {
                "obj": {
                    "value": "self.Q_optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '_optimizer'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_150": {
                "f": {
                    "value": "filename + '_Q'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_152": {
                "f": {
                    "value": "filename + '_optimizer'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "offlinerl/algo/modelfree/cql.py": {
        "torch": {
            "Adam_43": {
                "variable": {
                    "value": "actor_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "actor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['actor_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_53": {
                "variable": {
                    "value": "critic1_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "critic1.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['critic_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_63": {
                "variable": {
                    "value": "critic2_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "critic2.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['critic_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "log_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "args['device']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_71": {
                "variable": {
                    "value": "alpha_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[log_alpha]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['actor_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_86": {
                "variable": {
                    "value": "log_alpha_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "args['device']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_87": {
                "variable": {
                    "value": "alpha_prime_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[log_alpha_prime]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['critic_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MSELoss_121": {
                "variable": {
                    "value": "self.critic_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_272": {
                "variable": {
                    "value": "cat_q1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[q1_rand, q1_pred.unsqueeze(1), q1_next_actions, q1_curr_actions]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_273": {
                "variable": {
                    "value": "cat_q2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[q2_rand, q2_pred.unsqueeze(1), q2_next_actions, q2_curr_actions]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_204": {
                "variable": {
                    "value": "q_new_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.critic1(obs, new_obs_actions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_229": {
                "variable": {
                    "value": "target_q_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.critic1_target(next_obs, new_next_actions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_278": {
                "variable": {
                    "value": "cat_q1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[q1_rand - random_density, q1_next_actions - new_log_pis.detach(), q1_curr_actions - curr_log_pis.detach()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_281": {
                "variable": {
                    "value": "cat_q2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[q2_rand - random_density, q2_next_actions - new_log_pis.detach(), q2_curr_actions - curr_log_pis.detach()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_294": {
                "variable": {
                    "value": "alpha_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.log_alpha_prime.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_236": {
                "variable": {
                    "value": "target_q_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.critic1_target(next_obs, new_next_actions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_253": {
                "variable": {
                    "value": "target_q_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_qf1_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_tensor_values(next_obs, next_actions_temp, network=self.critic1).max(1)[0].view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "logsumexp_285": {
                "input": {
                    "value": "cat_q1 / self.args['temp']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "logsumexp_286": {
                "input": {
                    "value": "cat_q2 / self.args['temp']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_286": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_244": {
                "input": {
                    "value": "target_q1_next",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic1_target(next_obs, new_next_actions)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_245": {
                "input": {
                    "value": "target_q1_next",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic1_target(next_obs, new_next_actions)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "offlinerl/algo/modelfree/crr.py": {
        "torch": {
            "Adam_39": {
                "variable": {
                    "value": "actor_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "actor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_44": {
                "variable": {
                    "value": "critic_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "critic.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_102": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[action_dist.sample() for _ in range(self.m)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "repeat_interleave_103": {
                "variable": {
                    "value": "repeat_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "repeats": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_113": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "advantage / self.beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_118": {
                "input": {
                    "value": "weight * log_prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_93": {
                "input": {
                    "value": "p + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "offlinerl/algo/modelfree/plas.py": {
        "torch": {
            "Adam_43": {
                "variable": {
                    "value": "vae_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "vae.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['vae_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_65": {
                "variable": {
                    "value": "actor_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "actor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['actor_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_75": {
                "variable": {
                    "value": "critic1_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "critic1.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['critic_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_85": {
                "variable": {
                    "value": "critic2_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "critic2.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['critic_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mse_loss_135": {
                "variable": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vae(obs, act)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.act",
                            "Attribute"
                        ],
                        [
                            "batch.act",
                            "Attribute"
                        ],
                        [
                            "batch.act",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_188": {
                "input": {
                    "value": "current_q2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic2(obs, act)",
                            "Call"
                        ],
                        [
                            "self.critic2(obs, act)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args['lmbda'] * torch.min(target_q1, target_q2) + (1 - self.args['lmbda']) * torch.max(target_q1, target_q2)",
                            "BinOp"
                        ],
                        [
                            "rew + (1 - done) * self.args['discount'] * target_q",
                            "BinOp"
                        ],
                        [
                            "self.args['lmbda'] * torch.min(target_q1, target_q2) + (1 - self.args['lmbda']) * torch.max(target_q1, target_q2)",
                            "BinOp"
                        ],
                        [
                            "rew + (1 - done) * self.args['discount'] * target_q",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_240": {
                "input": {
                    "value": "current_q2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic2(obs, act)",
                            "Call"
                        ],
                        [
                            "self.critic2(obs, act)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args['lmbda'] * torch.min(target_q1, target_q2) + (1 - self.args['lmbda']) * torch.max(target_q1, target_q2)",
                            "BinOp"
                        ],
                        [
                            "rew + (1 - done) * self.args['discount'] * target_q",
                            "BinOp"
                        ],
                        [
                            "self.args['lmbda'] * torch.min(target_q1, target_q2) + (1 - self.args['lmbda']) * torch.max(target_q1, target_q2)",
                            "BinOp"
                        ],
                        [
                            "rew + (1 - done) * self.args['discount'] * target_q",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_182": {
                "input": {
                    "value": "target_q1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic1_target(obs_next, action_next_vae)",
                            "Call"
                        ],
                        [
                            "self.critic1_target(obs_next, next_action)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_182": {
                "input": {
                    "value": "target_q1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic1_target(obs_next, action_next_vae)",
                            "Call"
                        ],
                        [
                            "self.critic1_target(obs_next, next_action)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_234": {
                "input": {
                    "value": "target_q1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic1_target(obs_next, action_next_vae)",
                            "Call"
                        ],
                        [
                            "self.critic1_target(obs_next, next_action)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_234": {
                "input": {
                    "value": "target_q1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic1_target(obs_next, action_next_vae)",
                            "Call"
                        ],
                        [
                            "self.critic1_target(obs_next, next_action)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_136": {
                "input": {
                    "value": "std.pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "offlinerl/config/algo/bc_config.py": {
        "torch": {
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "offlinerl/config/algo/bcq_config.py": {
        "torch": {
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "offlinerl/config/algo/bcqd_config.py": {
        "torch": {
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "offlinerl/config/algo/bremen_config.py": {
        "torch": {
            "is_available_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "offlinerl/config/algo/combo_config.py": {
        "torch": {
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "offlinerl/config/algo/cql_config.py": {
        "torch": {
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "offlinerl/config/algo/crr_config.py": {
        "torch": {
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "offlinerl/config/algo/maple_config.py": {
        "torch": {
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "offlinerl/config/algo/moose_config.py": {
        "torch": {
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "offlinerl/config/algo/mopo_config.py": {
        "torch": {
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "offlinerl/config/algo/plas_config.py": {
        "torch": {
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "offlinerl/evaluation/__init__.py": {
        "torch": {
            "cat_148": {
                "variable": {
                    "value": "estimate_q0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "estimate_q0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(estimate_q0, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_165": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.trainsition.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_394": {
                "variable": {
                    "value": "optim_Auto",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.trainsition.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "float(1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "StepLR_395": {
                "variable": {
                    "value": "scheduler_Auto",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optim_Auto",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(self.trainsition.parameters(), lr=0.001, weight_decay=float(1e-06))",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_97": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "policy.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "variable": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.obs",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(obs).float()",
                            "Call"
                        ],
                        [
                            "data.obs",
                            "Attribute"
                        ],
                        [
                            "next[..., 1:]",
                            "Subscript"
                        ],
                        [
                            "batch.obs",
                            "Attribute"
                        ],
                        [
                            "self.trainsition.forward_r(obs, action)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_137": {
                "variable": {
                    "value": "batches",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.obs",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(obs).float()",
                            "Call"
                        ],
                        [
                            "data.obs",
                            "Attribute"
                        ],
                        [
                            "next[..., 1:]",
                            "Subscript"
                        ],
                        [
                            "batch.obs",
                            "Attribute"
                        ],
                        [
                            "self.trainsition.forward_r(obs, action)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "init_sa",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(o, a)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_247": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - np.triu(np.ones([obs_dim, obs_dim]), 1) - np.eye(obs_dim)",
                            "BinOp"
                        ],
                        [
                            "np.concatenate([mask, np.ones([1, obs_dim])], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_248": {
                "variable": {
                    "value": "self.one_hot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "obs_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_277": {
                "variable": {
                    "value": "sa",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s, a]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_279": {
                "variable": {
                    "value": "s_res",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[sa.shape[0], self.obs_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_295": {
                "variable": {
                    "value": "sa",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s, a]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_296": {
                "variable": {
                    "value": "s_res",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[sa.shape[0], self.obs_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_307": {
                "variable": {
                    "value": "final_all_one",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(sa.shape[0], self.obs_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_308": {
                "variable": {
                    "value": "sas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[final_all_one, sa, s_res]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_316": {
                "variable": {
                    "value": "sa",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s, a]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_322": {
                "variable": {
                    "value": "sa",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([s, a], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([s, a], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([s, a], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(sa, dim=1).expand(-1, self.obs_dim, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([s, a], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(sa, dim=1).expand(-1, self.obs_dim + 1, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_325": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.one_hot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_327": {
                "variable": {
                    "value": "sas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[one_hot, sa, maked_s_]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_336": {
                "variable": {
                    "value": "sa",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s, a]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_343": {
                "variable": {
                    "value": "sa",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([s, a], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([s, a], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([s, a], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(sa, dim=1).expand(-1, self.obs_dim, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([s, a], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(sa, dim=1).expand(-1, self.obs_dim + 1, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_346": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.one_hot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_348": {
                "variable": {
                    "value": "sas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[one_hot, sa, maked_s_]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_357": {
                "variable": {
                    "value": "(mu, logstd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_output",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_362": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(_output, 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "soft_clamp(logstd, _min=logstd_MIN, _max=logstd_MAX)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_362": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_432": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_440": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_139": {
                "data": {
                    "value": "self.buffer.sample(256).obs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_169": {
                "tensors": {
                    "value": "[data.obs, data.act]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "self.one_hot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.one_hot, torch.ones((1, obs_dim), device=device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_281": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.tensor(i, device=self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.obs_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_282": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.one_hot(torch.tensor(i, device=self.device), num_classes=self.obs_dim)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(one_hot, dim=0).expand(sa.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.one_hot(torch.tensor(i, device=self.device), num_classes=self.obs_dim)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(one_hot, dim=0).expand(sa.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(self.one_hot, dim=0).expand(sa.shape[0], -1, -1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(self.one_hot, dim=0).expand(sa.shape[0], -1, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_283": {
                "variable": {
                    "value": "sas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[one_hot, sa, s_res]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_299": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.tensor(i, device=self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.obs_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_300": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.one_hot(torch.tensor(i, device=self.device), num_classes=self.obs_dim)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(one_hot, dim=0).expand(sa.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.one_hot(torch.tensor(i, device=self.device), num_classes=self.obs_dim)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(one_hot, dim=0).expand(sa.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(self.one_hot, dim=0).expand(sa.shape[0], -1, -1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(self.one_hot, dim=0).expand(sa.shape[0], -1, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_302": {
                "variable": {
                    "value": "sas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[one_hot, sa, s_res]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_332": {
                "input": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.log_prob(s_)",
                            "Call"
                        ],
                        [
                            "dist.log_prob(torch.cat([s_, r], dim=-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_353": {
                "input": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.log_prob(s_)",
                            "Call"
                        ],
                        [
                            "dist.log_prob(torch.cat([s_, r], dim=-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Normal_364": {
                "loc": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(logstd).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_367": {
                "obj": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "model_save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_save_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_402": {
                "input": {
                    "value": "self.trainsition.log_prob_r(data_train.obs, data_train.act, data_train.obs_next, data_train.rew)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_192": {
                "tensors": {
                    "value": "[obs, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_317": {
                "input": {
                    "value": "s_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s_",
                            "Method Argument"
                        ],
                        [
                            "s_",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_338": {
                "input": {
                    "value": "s_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s_",
                            "Method Argument"
                        ],
                        [
                            "s_",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_351": {
                "tensors": {
                    "value": "[s_, r]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_373": {
                "variable": {
                    "value": "each_data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "each_data.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_375": {
                "variable": {
                    "value": "each_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "each_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_data",
                            "variable"
                        ],
                        [
                            "torch.from_numpy(each_data.astype(np.float32)).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(each_data, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(each_data.squeeze(), dim=0)",
                            "Call"
                        ],
                        [
                            "each_data.to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_377": {
                "variable": {
                    "value": "each_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "each_data.squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_417": {
                "input": {
                    "value": "self.trainsition.log_prob_r(data_val.obs, data_val.act, data_val.obs_next, data_val.rew)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_281": {
                "data": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tqdm(range(10000))",
                            "Call"
                        ],
                        [
                            "tqdm(range(100000))",
                            "Call"
                        ],
                        [
                            "tqdm(range(1000000))",
                            "Call"
                        ],
                        [
                            "i in range(self.obs_dim)",
                            "Call"
                        ],
                        [
                            "i in range(self.obs_dim)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_299": {
                "data": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tqdm(range(10000))",
                            "Call"
                        ],
                        [
                            "tqdm(range(100000))",
                            "Call"
                        ],
                        [
                            "tqdm(range(1000000))",
                            "Call"
                        ],
                        [
                            "i in range(self.obs_dim)",
                            "Call"
                        ],
                        [
                            "i in range(self.obs_dim)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_170": {
                "tensors": {
                    "value": "[data.rew, data.obs_next]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_259": {
                "*size": {
                    "value": "(1, obs_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "nansum_448": {
                "input": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "ret + 0.995 ** t * r",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isnan_448": {
                "input": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "ret + 0.995 ** t * r",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "offlinerl/evaluation/d4rl.py": {
        "torch": {}
    },
    "offlinerl/evaluation/fqe.py": {
        "torch": {
            "Adam_46": {
                "variable": {
                    "value": "critic_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "critic.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "critic_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_67": {
                "variable": {
                    "value": "backup",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "backup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r + current_discount * q_target",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(backup, min_value, max_value)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "min_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1.2 * min_reward + 0.8 * max_reward) / (1 - discount)",
                            "BinOp"
                        ]
                    ]
                },
                "max": {
                    "value": "max_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1.2 * max_reward + 0.8 * min_reward) / (1 - discount)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_69": {
                "tensors": {
                    "value": "(o1, a1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_64": {
                "tensors": {
                    "value": "(o2, a2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "offlinerl/utils/env.py": {
        "torch": {}
    },
    "offlinerl/utils/exp.py": {
        "torch": {
            "manual_seed_13": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_14": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "offlinerl/utils/function.py": {
        "torch": {
            "softplus_7": {
                "input": {
                    "value": "_max - x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_9": {
                "input": {
                    "value": "x - _min",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "offlinerl/utils/loader.py": {
        "torch": {
            "set_default_tensor_type_8": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_233": {
                "ndarray": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((len(traj_lens_it), max_traj_len, data['observations'].shape[-1]), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((len(traj_lens_it), max_traj_len, data['observations'].shape[-1]), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_234": {
                "ndarray": {
                    "value": "lst_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((len(traj_lens_it), max_traj_len, data['last_actions'].shape[-1]), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((len(traj_lens_it), max_traj_len, data['last_actions'].shape[-1]), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_235": {
                "ndarray": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((len(traj_lens_it), max_traj_len, data['observations'].shape[-1]), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((len(traj_lens_it), max_traj_len, data['observations'].shape[-1]), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_236": {
                "ndarray": {
                    "value": "lst_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((len(traj_lens_it), max_traj_len, data['last_actions'].shape[-1]), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((len(traj_lens_it), max_traj_len, data['last_actions'].shape[-1]), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_109": {
                "ndarray": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((len(traj_lens_it), max_traj_len, data['observations'].shape[-1]), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((len(traj_lens_it), max_traj_len, data['observations'].shape[-1]), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_110": {
                "ndarray": {
                    "value": "lst_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((len(traj_lens_it), max_traj_len, data['last_actions'].shape[-1]), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((len(traj_lens_it), max_traj_len, data['last_actions'].shape[-1]), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_111": {
                "ndarray": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((len(traj_lens_it), max_traj_len, data['observations'].shape[-1]), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((len(traj_lens_it), max_traj_len, data['observations'].shape[-1]), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_112": {
                "ndarray": {
                    "value": "lst_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((len(traj_lens_it), max_traj_len, data['last_actions'].shape[-1]), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((len(traj_lens_it), max_traj_len, data['last_actions'].shape[-1]), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "offlinerl/utils/net/bcq_net.py": {
        "torch": {
            "Conv2d_14": {
                "variable": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frames",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.c3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.q1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3136",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.q2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.q3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_actions",
                            "Method Argument"
                        ],
                        [
                            "num_actions",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.i1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3136",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.i2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.i3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_actions",
                            "Method Argument"
                        ],
                        [
                            "num_actions",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_28": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c1(state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c2(c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c3(c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.q1(c.reshape(-1, 3136))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.q2(q)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_36": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.i1(c.reshape(-1, 3136))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.i2(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.q1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.q2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.q3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_actions",
                            "Method Argument"
                        ],
                        [
                            "num_actions",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.i1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.i2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.i3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_actions",
                            "Method Argument"
                        ],
                        [
                            "num_actions",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_70": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.q1(state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_71": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.q2(q)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_73": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.i1(state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_74": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.i2(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_75": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.i3(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_43": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c1(state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_44": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c2(c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c3(c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_47": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.q1(c.reshape(-1, 3136))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_48": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.q2(q)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.i1(c.reshape(-1, 3136))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_51": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.i2(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_39": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.i1(c.reshape(-1, 3136)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.i2(i))",
                            "Call"
                        ],
                        [
                            "self.i3(i)",
                            "Call"
                        ],
                        [
                            "F.relu(self.i1(c.reshape(-1, 3136)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.i2(i))",
                            "Call"
                        ],
                        [
                            "F.relu(self.i1(state))",
                            "Call"
                        ],
                        [
                            "F.relu(self.i2(i))",
                            "Call"
                        ],
                        [
                            "F.relu(self.i3(i))",
                            "Call"
                        ],
                        [
                            "self(obs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_76": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.i1(c.reshape(-1, 3136)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.i2(i))",
                            "Call"
                        ],
                        [
                            "self.i3(i)",
                            "Call"
                        ],
                        [
                            "F.relu(self.i1(c.reshape(-1, 3136)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.i2(i))",
                            "Call"
                        ],
                        [
                            "F.relu(self.i1(state))",
                            "Call"
                        ],
                        [
                            "F.relu(self.i2(i))",
                            "Call"
                        ],
                        [
                            "F.relu(self.i3(i))",
                            "Call"
                        ],
                        [
                            "self(obs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "offlinerl/utils/net/common.py": {
        "torch": {
            "as_tensor_32": {
                "variable": {
                    "value": "obs_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs",
                            "Method Argument"
                        ],
                        [
                            "obs",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "next(self.parameters()).device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "LSTM_138": {
                "variable": {
                    "value": "self.nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "hidden_layer_size",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_layer_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "layer_num",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_144": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "np.prod(state_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_layer_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_145": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_layer_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "np.prod(action_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*Q",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*V",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "softmax_118": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(s)",
                            "Call"
                        ],
                        [
                            "q - q.mean(dim=1, keepdim=True) + v",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_216": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_234": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*net",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_176": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, x.shape[-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_192": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ELU_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_194": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GELU_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_101": {
                "in_features": {
                    "value": "hidden_layer_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_217": {
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_232": {
                "in_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "in_features": {
                    "value": "hidden_layer_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "np.prod(action_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "in_features": {
                    "value": "hidden_layer_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "np.prod(action_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "in_features": {
                    "value": "hidden_layer_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_223": {
                "in_features": {
                    "value": "in_features if i == 0 else hidden_features",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_226": {
                "normalized_shape": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_228": {
                "num_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "offlinerl/utils/net/continuous.py": {
        "torch": {
            "Linear_29": {
                "variable": {
                    "value": "self.last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_layer_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "np.prod(action_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_layer_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_96": {
                "variable": {
                    "value": "(mu, log_std)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.backbone(obs)",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_118": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_layer_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "np.prod(action_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_166": {
                "variable": {
                    "value": "self.nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "np.prod(state_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_layer_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "layer_num",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_layer_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "np.prod(action_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_233": {
                "variable": {
                    "value": "self.nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "np.prod(state_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_layer_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "layer_num",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_239": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_layer_size + np.prod(action_shape)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_279": {
                "variable": {
                    "value": "obs_action",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obs, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_281": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.preprocess(s, state)",
                            "Call"
                        ],
                        [
                            "self._max * torch.tanh(self.last(logits))",
                            "BinOp"
                        ],
                        [
                            "self.preprocess(s)",
                            "Call"
                        ],
                        [
                            "self.last(logits)",
                            "Call"
                        ],
                        [
                            "self.preprocess(s, state)",
                            "Call"
                        ],
                        [
                            "s[:, -1]",
                            "Subscript"
                        ],
                        [
                            "self.net(obs_action)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_294": {
                "variable": {
                    "value": "target_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reward + discount * self.z",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(target_z, self.min_value, self.max_value)",
                            "Call"
                        ],
                        [
                            "target_z.unsqueeze(dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.min_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.max_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_298": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_z - self.z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_299": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - distance / self.delta_z",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_300": {
                "variable": {
                    "value": "target_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.unsqueeze(dim=-1) * ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_288": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s, a]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Normal_98": {
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(self.backbone(obs), 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.mu(logits)",
                            "Call"
                        ],
                        [
                            "self._max * torch.tanh(mu)",
                            "BinOp"
                        ],
                        [
                            "self.mu(logits)",
                            "Call"
                        ],
                        [
                            "self._max * torch.tanh(mu)",
                            "BinOp"
                        ]
                    ]
                },
                "scale": {
                    "value": "torch.exp(log_std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_121": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_layer_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "np.prod(action_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_123": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(np.prod(action_shape), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_139": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigma(logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "SIGMA_MIN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-20",
                            "UnaryOp"
                        ]
                    ]
                },
                "max": {
                    "value": "SIGMA_MAX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "exp_139": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_175": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_layer_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "np.prod(action_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_177": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(np.prod(action_shape), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_205": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigma(logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "SIGMA_MIN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-20",
                            "UnaryOp"
                        ]
                    ]
                },
                "max": {
                    "value": "SIGMA_MAX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "exp_205": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_253": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s, a]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_283": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p * self.z",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_43": {
                "input": {
                    "value": "self.last(logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_72": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(a)",
                            "Call"
                        ],
                        [
                            "a.to(s)",
                            "Call"
                        ],
                        [
                            "a.flatten(1)",
                            "Call"
                        ],
                        [
                            "to_torch_as(a, s)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_88": {
                "data": {
                    "value": "torch.ones(action_dim) * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_89": {
                "data": {
                    "value": "torch.ones(action_dim) * -10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_98": {
                "input": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(self.backbone(obs), 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "soft_clamp(log_std, self.min_logstd, self.max_logstd)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_274": {
                "start": {
                    "value": "min_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min_value",
                            "Method Argument"
                        ],
                        [
                            "min_value",
                            "Method Argument"
                        ]
                    ]
                },
                "end": {
                    "value": "max_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_value",
                            "Method Argument"
                        ],
                        [
                            "max_value",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "self.atoms",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "*size": {
                    "value": "np.prod(action_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_137": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(self.backbone(obs), 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.mu(logits)",
                            "Call"
                        ],
                        [
                            "self._max * torch.tanh(mu)",
                            "BinOp"
                        ],
                        [
                            "self.mu(logits)",
                            "Call"
                        ],
                        [
                            "self._max * torch.tanh(mu)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_177": {
                "*size": {
                    "value": "np.prod(action_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_203": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(self.backbone(obs), 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.mu(logits)",
                            "Call"
                        ],
                        [
                            "self._max * torch.tanh(mu)",
                            "BinOp"
                        ],
                        [
                            "self.mu(logits)",
                            "Call"
                        ],
                        [
                            "self._max * torch.tanh(mu)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "linspace_267": {
                "start": {
                    "value": "min_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min_value",
                            "Method Argument"
                        ],
                        [
                            "min_value",
                            "Method Argument"
                        ]
                    ]
                },
                "end": {
                    "value": "max_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_value",
                            "Method Argument"
                        ],
                        [
                            "max_value",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "atoms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "atoms",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_88": {
                "*size": {
                    "value": "action_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_89": {
                "*size": {
                    "value": "action_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_145": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(self.backbone(obs), 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.mu(logits)",
                            "Call"
                        ],
                        [
                            "self._max * torch.tanh(mu)",
                            "BinOp"
                        ],
                        [
                            "self.mu(logits)",
                            "Call"
                        ],
                        [
                            "self._max * torch.tanh(mu)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_211": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(self.backbone(obs), 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.mu(logits)",
                            "Call"
                        ],
                        [
                            "self._max * torch.tanh(mu)",
                            "BinOp"
                        ],
                        [
                            "self.mu(logits)",
                            "Call"
                        ],
                        [
                            "self._max * torch.tanh(mu)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "offlinerl/utils/net/maple_actor.py": {
        "torch": {
            "Sequential_25": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.mlp",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.Guassain_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.Guassain_mlp",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.Guassain_mu_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.Guassain_mu_mlp",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.Guassain_logstd_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.Guassain_logstd_mlp",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "self.Guassain_hidden_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "action_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "self.Guassain_hidden_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "action_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softplus_54": {
                "input": {
                    "value": "-2 * pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "offlinerl/utils/net/mlas.py": {
        "torch": {
            "Linear_16": {
                "variable": {
                    "value": "self.e1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_dim + action_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "750",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.e2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "750",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "750",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "750",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.log_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "750",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.d1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_dim + latent_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "750",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.d2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "750",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "750",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.d3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "750",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "action_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_32": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e1(torch.cat([state, action], 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e2(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_38": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.log_std(z).clamp(-4, 15)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_52": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.d1(torch.cat([state, z], 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_53": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.d2(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dim",
                            "Method Argument"
                        ],
                        [
                            "state_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hidden_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.l3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_action_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_action_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.l4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_dim + action_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.l5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.l6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "action_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_83": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l1(state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_84": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l2(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_89": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l4(torch.cat([state, mid_action], 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_90": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l5(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_48": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(state.shape[0], self.latent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tanh_57": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.d1(torch.cat([state, z], 1)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.d2(a))",
                            "Call"
                        ],
                        [
                            "self.d3(a)",
                            "Call"
                        ],
                        [
                            "F.relu(self.l1(state))",
                            "Call"
                        ],
                        [
                            "F.relu(self.l2(a))",
                            "Call"
                        ],
                        [
                            "F.relu(self.l4(torch.cat([state, mid_action], 1)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.l5(a))",
                            "Call"
                        ],
                        [
                            "self.phi * torch.tanh(self.l6(a))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_85": {
                "input": {
                    "value": "self.l3(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_91": {
                "input": {
                    "value": "self.l6(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_32": {
                "tensors": {
                    "value": "[state, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_like_39": {
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(log_std)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_52": {
                "tensors": {
                    "value": "[state, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_89": {
                "tensors": {
                    "value": "[state, mid_action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "offlinerl/utils/net/model/ensemble.py": {
        "torch": {
            "ModuleList_61": {
                "variable": {
                    "value": "self.backbones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "module_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "chunk_100": {
                "variable": {
                    "value": "(mu, logstd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output_layer(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_27": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ij,bjk->bik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('ij,bjk->bik', x, weight)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bij,bjk->bik', x, weight)",
                            "Call"
                        ],
                        [
                            "x + bias",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,bjk->bik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('ij,bjk->bik', x, weight)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bij,bjk->bik', x, weight)",
                            "Call"
                        ],
                        [
                            "x + bias",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Normal_110": {
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(self.output_layer(output), 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([obs, reward], dim=-1)",
                            "Call"
                        ],
                        [
                            "mu + obs_action[..., :self.obs_dim]",
                            "BinOp"
                        ]
                    ]
                },
                "scale": {
                    "value": "torch.exp(logstd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_12": {
                "data": {
                    "value": "torch.zeros(ensemble_size, in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_13": {
                "data": {
                    "value": "torch.zeros(ensemble_size, 1, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_17": {
                "data": {
                    "value": "self.weight.detach().clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_18": {
                "data": {
                    "value": "self.bias.detach().clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_66": {
                "data": {
                    "value": "torch.ones(obs_dim + self.with_reward) * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "data": {
                    "value": "torch.ones(obs_dim + self.with_reward) * -5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "split_86": {
                "variable": {
                    "value": "(obs, action)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "obs_action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs_action",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[self.obs_dim, obs_action.shape[-1] - self.obs_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obs, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_105": {
                "variable": {
                    "value": "(obs, reward)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(self.output_layer(output), 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([obs, reward], dim=-1)",
                            "Call"
                        ],
                        [
                            "mu + obs_action[..., :self.obs_dim]",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[self.obs_dim, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obs, reward]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_110": {
                "input": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(self.output_layer(output), 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "soft_clamp(logstd, self.min_logstd, self.max_logstd)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_12": {
                "*size": {
                    "value": "ensemble_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "Method Argument"
                        ],
                        [
                            "7",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_13": {
                "*size": {
                    "value": "ensemble_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "Method Argument"
                        ],
                        [
                            "7",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_66": {
                "*size": {
                    "value": "obs_dim + self.with_reward",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_67": {
                "*size": {
                    "value": "obs_dim + self.with_reward",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "offlinerl/utils/net/model/maple_critic.py": {
        "torch": {
            "Sequential_21": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.mlp",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.vfs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.vfs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "self.value_hidden_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "offlinerl/utils/net/model_GRU.py": {
        "torch": {
            "GRU_14": {
                "variable": {
                    "value": "self.GRU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.obs_dim + self.action_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "offlinerl/utils/net/moose.py": {
        "torch": {
            "Linear_16": {
                "variable": {
                    "value": "self.e1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_dim + action_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "750",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.e2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "750",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "750",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "750",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.log_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "750",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.d1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "750",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.d2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "750",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "750",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.d3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "750",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "state_dim + action_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e1(torch.cat([state, action], 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e2(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_38": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.log_std(z).clamp(-4, 15)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_46": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.d1(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_47": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.d2(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_32": {
                "tensors": {
                    "value": "[state, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_like_39": {
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(log_std)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "offlinerl/utils/net/tanhpolicy.py": {
        "torch": {
            "Normal_27": {
                "variable": {
                    "value": "self.normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "normal_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normal_mean",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "normal_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normal_std",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_29": {
                "variable": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "normal_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normal_mean",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_118": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mu(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(mean, self.MEAN_MIN, self.MEAN_MAX)",
                            "Call"
                        ],
                        [
                            "self.mu(logits)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.MEAN_MIN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.MEAN_MAX",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_120": {
                "variable": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigma(logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "self.LOG_SIG_MIN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.LOG_SIG_MAX",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_151": {
                "variable": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigma(logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "self.LOG_SIG_MIN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.LOG_SIG_MAX",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_43": {
                "input": {
                    "value": "one_plus_x / one_minus_x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_64": {
                "input": {
                    "value": "action_scale * (1 - squashed_action.pow(2)) + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_111": {
                "input": {
                    "value": "one_plus_x / one_minus_x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Normal_89": {
                "loc": {
                    "value": "torch.zeros(self.normal_mean.size(), device=self.normal_mean.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.ones(self.normal_std.size(), device=self.normal_mean.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_127": {
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mu(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(mean, self.MEAN_MIN, self.MEAN_MAX)",
                            "Call"
                        ],
                        [
                            "self.mu(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_158": {
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mu(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(mean, self.MEAN_MIN, self.MEAN_MAX)",
                            "Call"
                        ],
                        [
                            "self.mu(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_38": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.normal.sample_n(n)",
                            "Call"
                        ],
                        [
                            "self.normal.sample().detach()",
                            "Call"
                        ],
                        [
                            "self.normal_mean + self.normal_std * Normal(torch.zeros(self.normal_mean.size(), device=self.normal_mean.device), torch.ones(self.normal_std.size(), device=self.normal_mean.device)).sample()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_78": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.normal.sample_n(n)",
                            "Call"
                        ],
                        [
                            "self.normal.sample().detach()",
                            "Call"
                        ],
                        [
                            "self.normal_mean + self.normal_std * Normal(torch.zeros(self.normal_mean.size(), device=self.normal_mean.device), torch.ones(self.normal_std.size(), device=self.normal_mean.device)).sample()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_99": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.normal.sample_n(n)",
                            "Call"
                        ],
                        [
                            "self.normal.sample().detach()",
                            "Call"
                        ],
                        [
                            "self.normal_mean + self.normal_std * Normal(torch.zeros(self.normal_mean.size(), device=self.normal_mean.device), torch.ones(self.normal_std.size(), device=self.normal_mean.device)).sample()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_36": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.normal.sample_n(n)",
                            "Call"
                        ],
                        [
                            "self.normal.sample().detach()",
                            "Call"
                        ],
                        [
                            "self.normal_mean + self.normal_std * Normal(torch.zeros(self.normal_mean.size(), device=self.normal_mean.device), torch.ones(self.normal_std.size(), device=self.normal_mean.device)).sample()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_76": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.normal.sample_n(n)",
                            "Call"
                        ],
                        [
                            "self.normal.sample().detach()",
                            "Call"
                        ],
                        [
                            "self.normal_mean + self.normal_std * Normal(torch.zeros(self.normal_mean.size(), device=self.normal_mean.device), torch.ones(self.normal_std.size(), device=self.normal_mean.device)).sample()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_97": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.normal.sample_n(n)",
                            "Call"
                        ],
                        [
                            "self.normal.sample().detach()",
                            "Call"
                        ],
                        [
                            "self.normal_mean + self.normal_std * Normal(torch.zeros(self.normal_mean.size(), device=self.normal_mean.device), torch.ones(self.normal_std.size(), device=self.normal_mean.device)).sample()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_90": {
                "*size": {
                    "value": "self.normal_mean.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.normal_mean.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_91": {
                "*size": {
                    "value": "self.normal_std.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.normal_mean.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "offlinerl/utils/net/vae.py": {
        "torch": {
            "Linear_16": {
                "variable": {
                    "value": "self.e1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_dim + action_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "750",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.e2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "750",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "750",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "750",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.log_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "750",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.d1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_dim + latent_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "750",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.d2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "750",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "750",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.d3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "750",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "action_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_32": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e1(torch.cat([state, action], 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e2(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_38": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.log_std(z).clamp(-4, 15)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_52": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.d1(torch.cat([state, z], 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_53": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.d2(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dim",
                            "Method Argument"
                        ],
                        [
                            "state_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hidden_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.l3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_action_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_action_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.l4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_dim + action_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.l5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.l6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "action_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_83": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l1(state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_84": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l2(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_89": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l4(torch.cat([state, mid_action], 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_90": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l5(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_48": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(state.shape[0], self.latent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tanh_57": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.d1(torch.cat([state, z], 1)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.d2(a))",
                            "Call"
                        ],
                        [
                            "self.d3(a)",
                            "Call"
                        ],
                        [
                            "F.relu(self.l1(state))",
                            "Call"
                        ],
                        [
                            "F.relu(self.l2(a))",
                            "Call"
                        ],
                        [
                            "F.relu(self.l4(torch.cat([state, mid_action], 1)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.l5(a))",
                            "Call"
                        ],
                        [
                            "self.phi * torch.tanh(self.l6(a))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_85": {
                "input": {
                    "value": "self.l3(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_91": {
                "input": {
                    "value": "self.l6(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_32": {
                "tensors": {
                    "value": "[state, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_like_39": {
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(log_std)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_52": {
                "tensors": {
                    "value": "[state, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_89": {
                "tensors": {
                    "value": "[state, mid_action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}