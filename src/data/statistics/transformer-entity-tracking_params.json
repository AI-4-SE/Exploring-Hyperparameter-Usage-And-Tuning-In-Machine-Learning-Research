{
    "gpt-entity-tracking/run_transformer_recipe_lm.py": {
        "sklearn": {
            "accuracy_score_298": {
                "y_true": {
                    "value": "flatten_list(trY[:n_valid])",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.argmax(tr_logits, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_score_299": {
                "y_true": {
                    "value": "flatten_list(vaY)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.argmax(va_logits, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shuffle_326": {
                "*arrays_0": {
                    "value": "trlmX",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "trlmM",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "trlmM",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "np.random",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shuffle_342": {
                "*arrays_0": {
                    "value": "trX",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "trM",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "trYt",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "np.random",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shuffle_360": {
                "*arrays_0": {
                    "value": "trlmX",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "trlmM",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "np.random",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_450": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_451": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_611": {
                "variable": {
                    "value": "dh_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "dh_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DoubleHeadModel(args, clf_token, 'custom', vocab, n_ctx)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(dh_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_615": {
                "variable": {
                    "value": "dh_model.module.transformer.embed.weight.data[289, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "[768]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_624": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_330": {
                "variable": {
                    "value": "XMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "xmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 3), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 4), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_331": {
                "variable": {
                    "value": "YMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "flatten_list(ymb)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_332": {
                "variable": {
                    "value": "MMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_346": {
                "variable": {
                    "value": "XMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "xmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 3), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 4), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_347": {
                "variable": {
                    "value": "YMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "flatten_list(ymb)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_348": {
                "variable": {
                    "value": "MMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_365": {
                "variable": {
                    "value": "XMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "xmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 3), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 4), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_366": {
                "variable": {
                    "value": "MMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_436": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_437": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_229": {
                "variable": {
                    "value": "XMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "xmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 3), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 4), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_230": {
                "variable": {
                    "value": "YMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "flatten_list(ymb)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_231": {
                "variable": {
                    "value": "MMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_258": {
                "variable": {
                    "value": "XMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "xmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 3), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 4), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_259": {
                "variable": {
                    "value": "MMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_276": {
                "variable": {
                    "value": "XMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "xmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 3), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 4), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_277": {
                "variable": {
                    "value": "MMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_613": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, desc, 'best_params')",
                            "Call"
                        ],
                        [
                            "os.path.join(submission_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_266": {
                "input": {
                    "value": "MMB[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_450": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gpt-entity-tracking/train_ablations.py": {
        "sklearn": {
            "accuracy_score_200": {
                "y_true": {
                    "value": "trY[:n_valid]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.argmax(tr_logits, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_score_201": {
                "y_true": {
                    "value": "vaY",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.argmax(va_logits, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shuffle_228": {
                "*arrays_0": {
                    "value": "trX",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "trM",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "trX2",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_3": {
                    "value": "trM2",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_4": {
                    "value": "trYt",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "np.random",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shuffle_247": {
                "*arrays_0": {
                    "value": "trlmX",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "trlmM",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "np.random",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_332": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_333": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_490": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_508": {
                "variable": {
                    "value": "dh_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "dh_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DoubleHeadModelModified(args, clf_token, extra_token, 'custom', vocab, n_ctx)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(dh_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_533": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_232": {
                "variable": {
                    "value": "XMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "xmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 3), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 4), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_233": {
                "variable": {
                    "value": "YMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ymb",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_234": {
                "variable": {
                    "value": "MMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_235": {
                "variable": {
                    "value": "XMB2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "xmb2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_236": {
                "variable": {
                    "value": "MMB2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mmb2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_236": {
                "variable": {
                    "value": "MMB2",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_252": {
                "variable": {
                    "value": "XMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "xmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 3), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 4), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_253": {
                "variable": {
                    "value": "MMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_319": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_320": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_155": {
                "variable": {
                    "value": "XMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "xmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 3), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 4), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "variable": {
                    "value": "YMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ymb",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "variable": {
                    "value": "MMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_158": {
                "variable": {
                    "value": "XMB2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "xmb2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_159": {
                "variable": {
                    "value": "MMB2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mmb2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_185": {
                "variable": {
                    "value": "XMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "xmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 3), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 4), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_186": {
                "variable": {
                    "value": "MMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_521": {
                "obj": {
                    "value": "dh_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "make_path(path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_209": {
                "obj": {
                    "value": "dh_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "make_path(path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_332": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_559": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, desc, 'best_params')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, desc, 'best_params')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, desc, 'best_params')",
                            "Call"
                        ],
                        [
                            "os.path.join(submission_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gpt-entity-tracking/train_recipeQA.py": {
        "sklearn": {
            "accuracy_score_100": {
                "y_true": {
                    "value": "trY[:n_valid]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.argmax(tr_logits, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_score_101": {
                "y_true": {
                    "value": "vaY",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.argmax(va_logits, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shuffle_129": {
                "*arrays_0": {
                    "value": "trX",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "trM",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "trYt",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "np.random",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_213": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_214": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_300": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_319": {
                "variable": {
                    "value": "dh_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "dh_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DoubleHeadModel(args, clf_token, 'multiple_choice', vocab, n_ctx)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(dh_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_133": {
                "variable": {
                    "value": "XMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "xmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, 4, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_134": {
                "variable": {
                    "value": "YMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ymb",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_135": {
                "variable": {
                    "value": "MMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, 4, n_ctx), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_200": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_201": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "XMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "xmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, 4, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "YMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ymb",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "MMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, 4, n_ctx), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "XMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "xmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, 4, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "variable": {
                    "value": "MMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, 4, n_ctx), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_327": {
                "obj": {
                    "value": "dh_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "make_path(path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_109": {
                "obj": {
                    "value": "dh_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "make_path(path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gpt-entity-tracking/train_transformer_recipe_lm.py": {
        "sklearn": {
            "accuracy_score_211": {
                "y_true": {
                    "value": "flatten_list(trY[:n_valid])",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.argmax(tr_logits, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_score_212": {
                "y_true": {
                    "value": "flatten_list(vaY)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.argmax(va_logits, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_score_225": {
                "y_true": {
                    "value": "flatten_list(teY)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.argmax(te_logits, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shuffle_230": {
                "*arrays_0": {
                    "value": "trlmX",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "trlmM",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "trlmM",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "np.random",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shuffle_243": {
                "*arrays_0": {
                    "value": "trX",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "trM",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "trYt",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "np.random",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shuffle_261": {
                "*arrays_0": {
                    "value": "trlmX",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "trlmM",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "np.random",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_332": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_333": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_438": {
                "variable": {
                    "value": "dh_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "dh_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DoubleHeadModel(args, clf_token, 'custom', vocab, n_ctx)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(dh_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_452": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_219": {
                "obj": {
                    "value": "dh_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "make_path(path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_234": {
                "variable": {
                    "value": "XMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "xmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 3), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 4), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_235": {
                "variable": {
                    "value": "YMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "flatten_list(ymb)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_236": {
                "variable": {
                    "value": "MMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_247": {
                "variable": {
                    "value": "XMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "xmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 3), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 4), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_248": {
                "variable": {
                    "value": "YMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "flatten_list(ymb)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_249": {
                "variable": {
                    "value": "MMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_266": {
                "variable": {
                    "value": "XMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "xmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 3), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 4), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_267": {
                "variable": {
                    "value": "MMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_320": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_321": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_153": {
                "variable": {
                    "value": "XMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "xmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 3), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 4), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_154": {
                "variable": {
                    "value": "YMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "flatten_list(ymb)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_155": {
                "variable": {
                    "value": "MMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_174": {
                "variable": {
                    "value": "XMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "xmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 3), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 4), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_175": {
                "variable": {
                    "value": "MMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_189": {
                "variable": {
                    "value": "XMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "xmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 3), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx, 4), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_190": {
                "variable": {
                    "value": "MMB",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mmb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_batch, n_ctx), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_179": {
                "input": {
                    "value": "MMB[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_332": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "bert-entity-tracking/bert_propara.py": {
        "torch": {
            "device_435": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_436": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_439": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_454": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_543": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_544": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_545": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_546": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_547": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_552": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_677": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_678": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_679": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_680": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_681": {
                "variable": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_683": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_684": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_438": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_456": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_502": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BertForSequenceClassification.from_pretrained(args.bert_model, cache_dir=cache_dir, num_labels=num_labels)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ],
                        [
                            "BertForSequenceClassification.from_pretrained(args.bert_model, num_labels=num_labels)",
                            "Call"
                        ],
                        [
                            "BertForSequenceClassification(config, num_labels=num_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_549": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_551": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_593": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_594": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_595": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_596": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_597": {
                "variable": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_599": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_600": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_657": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_665": {
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_698": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_435": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_614": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "bert-entity-tracking/bert_recipes.py": {
        "torch": {
            "device_426": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_427": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_430": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_445": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_534": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_535": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_536": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_537": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_538": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_543": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_661": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_662": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_663": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_664": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_665": {
                "variable": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_667": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_668": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_429": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_447": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_493": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BertForSequenceClassification.from_pretrained(args.bert_model, cache_dir=cache_dir, num_labels=num_labels)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ],
                        [
                            "BertForSequenceClassification.from_pretrained(args.bert_model, num_labels=num_labels)",
                            "Call"
                        ],
                        [
                            "BertForSequenceClassification(config, num_labels=num_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_540": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_542": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_584": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_585": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_586": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_587": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_588": {
                "variable": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_590": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_591": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_641": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_649": {
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_680": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_426": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_603": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "bert-entity-tracking/bert_sentence_pred.py": {
        "torch": {
            "device_452": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_453": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_456": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_471": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_560": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_561": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_562": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_563": {
                "variable": {
                    "value": "all_mean_pooling_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.mean_pooling_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_564": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_565": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_570": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_mean_pooling_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_688": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_689": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_690": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_691": {
                "variable": {
                    "value": "all_mean_pooling_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.mean_pooling_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_692": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_693": {
                "variable": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_695": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_mean_pooling_ids, all_label_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_mean_pooling_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_696": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_mean_pooling_ids, all_label_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_mean_pooling_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_455": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_473": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_519": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BertForSequenceClassification2.from_pretrained(args.bert_model, cache_dir=cache_dir, num_labels=num_labels)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ],
                        [
                            "BertForSequenceClassification.from_pretrained(args.bert_model, num_labels=num_labels)",
                            "Call"
                        ],
                        [
                            "BertForSequenceClassification(config, num_labels=num_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_567": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_mean_pooling_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_569": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_mean_pooling_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_611": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_612": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_613": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_614": {
                "variable": {
                    "value": "all_mean_pooling_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.mean_pooling_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_615": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_616": {
                "variable": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_618": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_mean_pooling_ids, all_label_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_mean_pooling_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_619": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_mean_pooling_ids, all_label_ids)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_mean_pooling_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_668": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_676": {
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_709": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_452": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_632": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "bert-entity-tracking/bert_tagging.py": {
        "torch": {
            "device_471": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_472": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_475": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_490": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_580": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_581": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_582": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_583": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_584": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_589": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_664": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_665": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_666": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_667": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_668": {
                "variable": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_670": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_671": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_474": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_492": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_538": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BertForTokenClassification.from_pretrained(args.bert_model, cache_dir=cache_dir, num_labels=num_labels)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ],
                        [
                            "BertForSequenceClassification.from_pretrained(args.bert_model, num_labels=num_labels)",
                            "Call"
                        ],
                        [
                            "BertForTokenClassification(config, num_labels=num_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_586": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_588": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_644": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_652": {
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_683": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_471": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "bert-entity-tracking/elmo_model_recipes.py": {
        "torch": {
            "device_10": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_15": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_22": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "NLLLoss_42": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_44": {
                "variable": {
                    "value": "self.lstm_sent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_46": {
                "variable": {
                    "value": "self.lstm_entity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.ing_sent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.bi_attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.ing_red",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.hid2tag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.tagset_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.hid2logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_52": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_53": {
                "variable": {
                    "value": "self.bce_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_54": {
                "variable": {
                    "value": "self.transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.tagset_size, self.tagset_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_116": {
                "variable": {
                    "value": "(ing_max_pool, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lstm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sent_embeds",
                            "Name"
                        ],
                        [
                            "lstm_out.view(len(elmo_sent), -1)",
                            "Call"
                        ],
                        [
                            "lstm_out.view(len(elmo_sent), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_117": {
                "variable": {
                    "value": "concat_max_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ing_max_pool.view(1, -1), ing_embeds_red)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_125": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "tags",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor([self.tag_to_ix[START_TAG]], dtype=torch.long).to(device), tags]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_147": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_170": {
                "variable": {
                    "value": "step_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "step_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(step_features).contiguous()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(step_features).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_193": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_212": {
                "variable": {
                    "value": "step_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "step_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(step_features).contiguous()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(step_features).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_30": {
                "input": {
                    "value": "torch.sum(torch.exp(vec - max_score_broadcast))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_99": {
                "tensors": {
                    "value": "ings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mm_158": {
                "variable": {
                    "value": "attn_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lstm_out[indices[step_num] + 1:indices[step_num + 1] + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.t(attn_ing)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_161": {
                "variable": {
                    "value": "attn_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(lstm_out[indices[step_num] + 1:indices[step_num + 1] + 1], torch.t(attn_ing))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_scores, 0)",
                            "Call"
                        ],
                        [
                            "torch.mm(lstm_out[indices[step_num] + 1:indices[step_num + 1] + 1], torch.t(attn_ing))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_scores, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_166": {
                "variable": {
                    "value": "attn_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(attn_scores)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "lstm_out[indices[step_num] + 1:indices[step_num + 1] + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mm_205": {
                "variable": {
                    "value": "attn_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lstm_out[indices[step_num] + 1:indices[step_num + 1] + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.t(attn_ing)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_207": {
                "variable": {
                    "value": "attn_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(lstm_out[indices[step_num] + 1:indices[step_num + 1] + 1], torch.t(attn_ing))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_scores, 0)",
                            "Call"
                        ],
                        [
                            "torch.mm(lstm_out[indices[step_num] + 1:indices[step_num + 1] + 1], torch.t(attn_ing))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_scores, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_209": {
                "variable": {
                    "value": "attn_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(attn_scores)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "lstm_out[indices[step_num] + 1:indices[step_num + 1] + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_30": {
                "input": {
                    "value": "torch.exp(vec - max_score_broadcast)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_55": {
                "*size": {
                    "value": "self.tagset_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.tagset_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_65": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_66": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_78": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim2 // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_79": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim2 // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_30": {
                "input": {
                    "value": "vec - max_score_broadcast",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_97": {
                "input": {
                    "value": "self._get_elmo_features(ing.split())",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "data": {
                    "value": "[self.tag_to_ix[START_TAG]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_158": {
                "input": {
                    "value": "attn_ing",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bi_attention(elmo_ings)",
                            "Call"
                        ],
                        [
                            "self.bi_attention(elmo_ings)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_166": {
                "input": {
                    "value": "attn_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(lstm_out[indices[step_num] + 1:indices[step_num + 1] + 1], torch.t(attn_ing))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_scores, 0)",
                            "Call"
                        ],
                        [
                            "torch.mm(lstm_out[indices[step_num] + 1:indices[step_num + 1] + 1], torch.t(attn_ing))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_scores, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_205": {
                "input": {
                    "value": "attn_ing",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bi_attention(elmo_ings)",
                            "Call"
                        ],
                        [
                            "self.bi_attention(elmo_ings)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_209": {
                "input": {
                    "value": "attn_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(lstm_out[indices[step_num] + 1:indices[step_num + 1] + 1], torch.t(attn_ing))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_scores, 0)",
                            "Call"
                        ],
                        [
                            "torch.mm(lstm_out[indices[step_num] + 1:indices[step_num + 1] + 1], torch.t(attn_ing))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_scores, 0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "bert-entity-tracking/gpt2_samples.py": {
        "torch": {
            "topk_59": {
                "variable": {
                    "value": "(values, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[:, -1, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, k=top_k)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_138": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "TensorDataset_170": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*train_tensor_dataset",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "RandomSampler_171": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensor_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_172": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensor_dataset)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_61": {
                "condition": {
                    "value": "logits < min_values",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(logits, dtype=logits.dtype) * -10000000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[:, -1, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, k=top_k)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(context, device=device, dtype=torch.long).unsqueeze(0).repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "torch.full((batch_size, 1), start_token, device=device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_66": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_69": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "start_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_136": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_137": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_78": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[:, -1, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, k=top_k)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_61": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[:, -1, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, k=top_k)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_80": {
                "variable": {
                    "value": "prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_82": {
                "variable": {
                    "value": "(_, prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_47": {
                "data": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "bert-entity-tracking/gpt_ppl.py": {
        "torch": {}
    },
    "bert-entity-tracking/gpt_ppl_recs_gpt.py": {
        "torch": {
            "device_142": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_143": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_212": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*train_tensor_dataset",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "RandomSampler_213": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensor_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_214": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensor_dataset)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_217": {
                "variable": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*eval_tensor_dataset",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "SequentialSampler_218": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensor_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_219": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensor_dataset)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_139": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_140": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_100": {
                "data": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "bert-entity-tracking/gpt_predictions.py": {
        "torch": {}
    },
    "bert-entity-tracking/ncrf_model_recipes.py": {
        "torch": {
            "device_10": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_15": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_22": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "NLLLoss_41": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_43": {
                "variable": {
                    "value": "self.lstm_sent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_45": {
                "variable": {
                    "value": "self.lstm_entity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.ing_sent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.bi_attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.ing_red",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.hid2tag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.tagset_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_50": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_51": {
                "variable": {
                    "value": "self.sigmoid_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_52": {
                "variable": {
                    "value": "self.transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.tagset_size, self.tagset_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_114": {
                "variable": {
                    "value": "(ing_max_pool, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lstm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sent_embeds",
                            "Name"
                        ],
                        [
                            "lstm_out.view(len(elmo_sent), -1)",
                            "Call"
                        ],
                        [
                            "lstm_out.view(len(elmo_sent), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_115": {
                "variable": {
                    "value": "concat_max_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ing_max_pool.view(1, -1), ing_embeds_red)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "tags",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor([self.tag_to_ix[START_TAG]], dtype=torch.long).to(device), tags]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_142": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_172": {
                "variable": {
                    "value": "step_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "step_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(step_features).contiguous()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(step_features).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_224": {
                "variable": {
                    "value": "step_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "step_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(step_features).contiguous()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(step_features).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_241": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_242": {
                "variable": {
                    "value": "tags",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor([self.tag_to_ix[START_TAG]], dtype=torch.long).to(device), tags]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "full_254": {
                "variable": {
                    "value": "init_vvars",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, self.tagset_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-10000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "full_299": {
                "variable": {
                    "value": "init_alphas",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, self.tagset_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-10000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_30": {
                "input": {
                    "value": "torch.sum(torch.exp(vec - max_score_broadcast))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_97": {
                "tensors": {
                    "value": "ings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mm_165": {
                "variable": {
                    "value": "attn_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lstm_out[indices[step_num] + 1:indices[step_num + 1] + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.t(attn_ing)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_167": {
                "variable": {
                    "value": "attn_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(lstm_out[indices[step_num] + 1:indices[step_num + 1] + 1], torch.t(attn_ing))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_scores, 0)",
                            "Call"
                        ],
                        [
                            "torch.mm(lstm_out[indices[step_num] + 1:indices[step_num + 1] + 1], torch.t(attn_ing))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_scores, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_169": {
                "variable": {
                    "value": "attn_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(attn_scores)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "lstm_out[indices[step_num] + 1:indices[step_num + 1] + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mm_217": {
                "variable": {
                    "value": "attn_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lstm_out[indices[step_num] + 1:indices[step_num + 1] + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.t(attn_ing)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_219": {
                "variable": {
                    "value": "attn_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(lstm_out[indices[step_num] + 1:indices[step_num + 1] + 1], torch.t(attn_ing))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_scores, 0)",
                            "Call"
                        ],
                        [
                            "torch.mm(lstm_out[indices[step_num] + 1:indices[step_num + 1] + 1], torch.t(attn_ing))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_scores, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_221": {
                "variable": {
                    "value": "attn_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(attn_scores)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "lstm_out[indices[step_num] + 1:indices[step_num + 1] + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_323": {
                "variable": {
                    "value": "forward_var",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "alphas_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sum_30": {
                "input": {
                    "value": "torch.exp(vec - max_score_broadcast)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_53": {
                "*size": {
                    "value": "self.tagset_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.tagset_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_63": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_64": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_76": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_77": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_182": {
                "data": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_30": {
                "input": {
                    "value": "vec - max_score_broadcast",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_95": {
                "input": {
                    "value": "self._get_elmo_features(ing.split('_'))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "data": {
                    "value": "[self.tag_to_ix[START_TAG]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_165": {
                "input": {
                    "value": "attn_ing",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bi_attention(elmo_ings)",
                            "Call"
                        ],
                        [
                            "self.bi_attention(elmo_ings)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_169": {
                "input": {
                    "value": "attn_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(lstm_out[indices[step_num] + 1:indices[step_num + 1] + 1], torch.t(attn_ing))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_scores, 0)",
                            "Call"
                        ],
                        [
                            "torch.mm(lstm_out[indices[step_num] + 1:indices[step_num + 1] + 1], torch.t(attn_ing))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_scores, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_217": {
                "input": {
                    "value": "attn_ing",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bi_attention(elmo_ings)",
                            "Call"
                        ],
                        [
                            "self.bi_attention(elmo_ings)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_221": {
                "input": {
                    "value": "attn_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(lstm_out[indices[step_num] + 1:indices[step_num + 1] + 1], torch.t(attn_ing))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_scores, 0)",
                            "Call"
                        ],
                        [
                            "torch.mm(lstm_out[indices[step_num] + 1:indices[step_num + 1] + 1], torch.t(attn_ing))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_scores, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_242": {
                "data": {
                    "value": "[self.tag_to_ix[START_TAG]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_275": {
                "tensors": {
                    "value": "viterbivars_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "gpt-entity-tracking/loss.py": {
        "torch": {
            "max_6": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "tags",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor([0], dtype=torch.long).cuda(), tags]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "full_119": {
                "variable": {
                    "value": "init_alphas",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_46": {
                "input": {
                    "value": "torch.sum(torch.exp(vec - max_score_broadcast))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "forward_var",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "alphas_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sum_46": {
                "input": {
                    "value": "torch.exp(vec - max_score_broadcast)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_200": {
                "input": {
                    "value": "M[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_26": {
                "input": {
                    "value": "M[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_46": {
                "input": {
                    "value": "vec - max_score_broadcast",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_73": {
                "input": {
                    "value": "M[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_112": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_158": {
                "input": {
                    "value": "M[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gpt-entity-tracking/model_ablations.py": {
        "torch": {
            "from_numpy_520": {
                "variable": {
                    "value": "model.embed.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init_params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(n_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_80": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.attn_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_81": {
                "variable": {
                    "value": "self.resid_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_84": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_129": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_160": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40990",
                            "MethodArgument"
                        ],
                        [
                            "40990",
                            "MethodArgument"
                        ],
                        [
                            "40990",
                            "MethodArgument"
                        ],
                        [
                            "40990",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "cfg.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_161": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_163": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(block) for _ in range(cfg.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_185": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_204": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.clf_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_205": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_235": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.clf_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_236": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ],
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Dropout_258": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.clf_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_259": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ],
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Dropout_316": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.clf_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_317": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ],
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_318": {
                "variable": {
                    "value": "self.bilinear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cfg.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_332": {
                "variable": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clf_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.view(-1, self.n_embd)",
                            "Call"
                        ],
                        [
                            "clf_h[flat == self.clf_token, :]",
                            "Subscript"
                        ],
                        [
                            "clf_h.view(-1, x.size(1), self.n_embd, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(clf_h.transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "clf_h.contiguous().view(-1, self.n_embd)",
                            "Call"
                        ],
                        [
                            "h.view(-1, self.n_embd)",
                            "Call"
                        ],
                        [
                            "clf_h[flat == self.clf_token, :]",
                            "Subscript"
                        ],
                        [
                            "self.dropout(clf_h)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.t(a1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_334": {
                "variable": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bilinear(clf_h2)",
                            "Call"
                        ],
                        [
                            "torch.mm(clf_h, torch.t(a1))",
                            "Call"
                        ],
                        [
                            "F.softmax(a1, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_336": {
                "variable": {
                    "value": "contextual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(a1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "clf_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.view(-1, self.n_embd)",
                            "Call"
                        ],
                        [
                            "clf_h[flat == self.clf_token, :]",
                            "Subscript"
                        ],
                        [
                            "clf_h.view(-1, x.size(1), self.n_embd, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(clf_h.transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "clf_h.contiguous().view(-1, self.n_embd)",
                            "Call"
                        ],
                        [
                            "h.view(-1, self.n_embd)",
                            "Call"
                        ],
                        [
                            "clf_h[flat == self.clf_token, :]",
                            "Subscript"
                        ],
                        [
                            "self.dropout(clf_h)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_351": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.clf_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_352": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_396": {
                "variable": {
                    "value": "self.extra_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.n_embd * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_437": {
                "variable": {
                    "value": "self.extra_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.n_embd * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_543": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ip",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_19": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.e)",
                            "BinOp"
                        ],
                        [
                            "torch.addmm(self.b, x.view(-1, x.size(-1)), self.w)",
                            "Call"
                        ],
                        [
                            "x.view(*size_out)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.size(-2), x.size(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_51": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.n_embd",
                            "Attribute"
                        ],
                        [
                            "cfg.n_embd",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_53": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(nx, nf)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / math.sqrt(v.size(-1))",
                            "BinOp"
                        ],
                        [
                            "w * b + -1000000000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_54": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(nf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addmm_61": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat1": {
                    "value": "x.view(-1, x.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_94": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(nx, nf)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / math.sqrt(v.size(-1))",
                            "BinOp"
                        ],
                        [
                            "w * b + -1000000000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_377": {
                "variable": {
                    "value": "pos_emb_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40990",
                            "MethodArgument"
                        ],
                        [
                            "40990",
                            "MethodArgument"
                        ],
                        [
                            "40990",
                            "MethodArgument"
                        ],
                        [
                            "40990",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_386": {
                "variable": {
                    "value": "lm_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lm_logits + self.pos_emb_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_15": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_34": {
                "*size": {
                    "value": "n_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nx",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "n_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nx",
                            "Name"
                        ]
                    ]
                }
            },
            "sqrt_41": {
                "input": {
                    "value": "s + self.e",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_74": {
                "input": {
                    "value": "torch.ones(n_ctx, n_ctx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_92": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "t_332": {
                "input": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bilinear(clf_h2)",
                            "Call"
                        ],
                        [
                            "torch.mm(clf_h, torch.t(a1))",
                            "Call"
                        ],
                        [
                            "F.softmax(a1, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_336": {
                "input": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bilinear(clf_h2)",
                            "Call"
                        ],
                        [
                            "torch.mm(clf_h, torch.t(a1))",
                            "Call"
                        ],
                        [
                            "F.softmax(a1, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_54": {
                "*size": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_74": {
                "*size": {
                    "value": "n_ctx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_ctx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pow_15": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.e)",
                            "BinOp"
                        ],
                        [
                            "torch.addmm(self.b, x.view(-1, x.size(-1)), self.w)",
                            "Call"
                        ],
                        [
                            "x.view(*size_out)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.size(-2), x.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gpt-entity-tracking/model_pytorch.py": {
        "torch": {
            "from_numpy_518": {
                "variable": {
                    "value": "model.embed.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init_params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(n_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_80": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.attn_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_81": {
                "variable": {
                    "value": "self.resid_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_84": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_129": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_160": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40990",
                            "MethodArgument"
                        ],
                        [
                            "40990",
                            "MethodArgument"
                        ],
                        [
                            "40990",
                            "MethodArgument"
                        ],
                        [
                            "40990",
                            "MethodArgument"
                        ],
                        [
                            "40990",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "cfg.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_161": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_163": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(block) for _ in range(cfg.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_186": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_205": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.clf_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_206": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_236": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.clf_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_237": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ],
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ],
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Dropout_259": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.clf_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_260": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ],
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ],
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Dropout_283": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.clf_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_284": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.n_embd * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ],
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ],
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_306": {
                "variable": {
                    "value": "clf_comb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(clf_h, clf_h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_320": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.clf_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_321": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_365": {
                "variable": {
                    "value": "self.extra_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.n_embd * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_405": {
                "variable": {
                    "value": "self.extra_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.n_embd * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_445": {
                "variable": {
                    "value": "self.extra_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.n_embd * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_541": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ip",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_19": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.e)",
                            "BinOp"
                        ],
                        [
                            "torch.addmm(self.b, x.view(-1, x.size(-1)), self.w)",
                            "Call"
                        ],
                        [
                            "x.view(*size_out)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.size(-2), x.size(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_51": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.n_embd",
                            "Attribute"
                        ],
                        [
                            "cfg.n_embd",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_53": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(nx, nf)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / math.sqrt(v.size(-1))",
                            "BinOp"
                        ],
                        [
                            "w * b + -1000000000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_54": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(nf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addmm_61": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat1": {
                    "value": "x.view(-1, x.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_346": {
                "variable": {
                    "value": "pos_emb_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40990",
                            "MethodArgument"
                        ],
                        [
                            "40990",
                            "MethodArgument"
                        ],
                        [
                            "40990",
                            "MethodArgument"
                        ],
                        [
                            "40990",
                            "MethodArgument"
                        ],
                        [
                            "40990",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_355": {
                "variable": {
                    "value": "lm_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lm_logits + self.pos_emb_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_15": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_34": {
                "*size": {
                    "value": "n_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nx",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "n_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nx",
                            "Name"
                        ]
                    ]
                }
            },
            "sqrt_41": {
                "input": {
                    "value": "s + self.e",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_74": {
                "input": {
                    "value": "torch.ones(n_ctx, n_ctx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_92": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_94": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(nx, nf)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / math.sqrt(v.size(-1))",
                            "BinOp"
                        ],
                        [
                            "w * b + -1000000000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "*size": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_74": {
                "*size": {
                    "value": "n_ctx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_ctx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pow_15": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.e)",
                            "BinOp"
                        ],
                        [
                            "torch.addmm(self.b, x.view(-1, x.size(-1)), self.w)",
                            "Call"
                        ],
                        [
                            "x.view(*size_out)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.size(-2), x.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gpt-entity-tracking/model_pytorch_analysis.py": {
        "torch": {
            "from_numpy_516": {
                "variable": {
                    "value": "model.embed.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init_params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(n_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_80": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.attn_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_81": {
                "variable": {
                    "value": "self.resid_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_84": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_129": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_160": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40990",
                            "MethodArgument"
                        ],
                        [
                            "40990",
                            "MethodArgument"
                        ],
                        [
                            "40990",
                            "MethodArgument"
                        ],
                        [
                            "40990",
                            "MethodArgument"
                        ],
                        [
                            "40990",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "cfg.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_161": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_163": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(block) for _ in range(cfg.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_184": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_203": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.clf_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_204": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_234": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.clf_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_235": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ],
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ],
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Dropout_257": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.clf_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_258": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ],
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ],
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Dropout_281": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.clf_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_282": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.n_embd * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ],
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ],
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_304": {
                "variable": {
                    "value": "clf_comb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(clf_h, clf_h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_318": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.clf_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_319": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_363": {
                "variable": {
                    "value": "self.extra_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.n_embd * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_403": {
                "variable": {
                    "value": "self.extra_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.n_embd * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_443": {
                "variable": {
                    "value": "self.extra_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.n_embd * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_539": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ip",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_19": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.e)",
                            "BinOp"
                        ],
                        [
                            "torch.addmm(self.b, x.view(-1, x.size(-1)), self.w)",
                            "Call"
                        ],
                        [
                            "x.view(*size_out)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.size(-2), x.size(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_51": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.n_embd",
                            "Attribute"
                        ],
                        [
                            "cfg.n_embd",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_53": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(nx, nf)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / math.sqrt(v.size(-1))",
                            "BinOp"
                        ],
                        [
                            "w * b + -1000000000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_54": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(nf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addmm_61": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat1": {
                    "value": "x.view(-1, x.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_94": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(nx, nf)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / math.sqrt(v.size(-1))",
                            "BinOp"
                        ],
                        [
                            "w * b + -1000000000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_344": {
                "variable": {
                    "value": "pos_emb_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40990",
                            "MethodArgument"
                        ],
                        [
                            "40990",
                            "MethodArgument"
                        ],
                        [
                            "40990",
                            "MethodArgument"
                        ],
                        [
                            "40990",
                            "MethodArgument"
                        ],
                        [
                            "40990",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_353": {
                "variable": {
                    "value": "lm_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lm_logits + self.pos_emb_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_15": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_34": {
                "*size": {
                    "value": "n_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nx",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "n_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nx",
                            "Name"
                        ]
                    ]
                }
            },
            "sqrt_41": {
                "input": {
                    "value": "s + self.e",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_74": {
                "input": {
                    "value": "torch.ones(n_ctx, n_ctx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_92": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "*size": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_74": {
                "*size": {
                    "value": "n_ctx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_ctx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pow_15": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.e)",
                            "BinOp"
                        ],
                        [
                            "torch.addmm(self.b, x.view(-1, x.size(-1)), self.w)",
                            "Call"
                        ],
                        [
                            "x.view(*size_out)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.size(-2), x.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gpt-entity-tracking/model_pytorch_gradients.py": {
        "torch": {
            "from_numpy_522": {
                "variable": {
                    "value": "model.embed.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init_params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(n_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_82": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.attn_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_83": {
                "variable": {
                    "value": "self.resid_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_86": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_131": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_162": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40990",
                            "MethodArgument"
                        ],
                        [
                            "40990",
                            "MethodArgument"
                        ],
                        [
                            "40990",
                            "MethodArgument"
                        ],
                        [
                            "40990",
                            "MethodArgument"
                        ],
                        [
                            "40990",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "cfg.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_163": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_165": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(block) for _ in range(cfg.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_190": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_209": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.clf_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_210": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_240": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.clf_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_241": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ],
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ],
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Dropout_263": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.clf_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_264": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ],
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ],
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Dropout_287": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.clf_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_288": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.n_embd * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ],
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ],
                        [
                            "task_head_type[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_310": {
                "variable": {
                    "value": "clf_comb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(clf_h, clf_h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_324": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.clf_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_325": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_369": {
                "variable": {
                    "value": "self.extra_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.n_embd * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_409": {
                "variable": {
                    "value": "self.extra_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.n_embd * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_449": {
                "variable": {
                    "value": "self.extra_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.n_embd * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_545": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ip",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_19": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.e)",
                            "BinOp"
                        ],
                        [
                            "torch.addmm(self.b, x.view(-1, x.size(-1)), self.w)",
                            "Call"
                        ],
                        [
                            "x.view(*size_out)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.size(-2), x.size(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_51": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.n_embd",
                            "Attribute"
                        ],
                        [
                            "cfg.n_embd",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_53": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(nx, nf)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / math.sqrt(v.size(-1))",
                            "BinOp"
                        ],
                        [
                            "w * b + -1000000000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_54": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(nf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addmm_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat1": {
                    "value": "x.view(-1, x.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_96": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(nx, nf)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / math.sqrt(v.size(-1))",
                            "BinOp"
                        ],
                        [
                            "w * b + -1000000000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_350": {
                "variable": {
                    "value": "pos_emb_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40990",
                            "MethodArgument"
                        ],
                        [
                            "40990",
                            "MethodArgument"
                        ],
                        [
                            "40990",
                            "MethodArgument"
                        ],
                        [
                            "40990",
                            "MethodArgument"
                        ],
                        [
                            "40990",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_359": {
                "variable": {
                    "value": "lm_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lm_logits + self.pos_emb_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_15": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_34": {
                "*size": {
                    "value": "n_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nx",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "n_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nx",
                            "Name"
                        ]
                    ]
                }
            },
            "sqrt_41": {
                "input": {
                    "value": "s + self.e",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_76": {
                "input": {
                    "value": "torch.ones(n_ctx, n_ctx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_94": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "*size": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_76": {
                "*size": {
                    "value": "n_ctx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_ctx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pow_15": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.e)",
                            "BinOp"
                        ],
                        [
                            "torch.addmm(self.b, x.view(-1, x.size(-1)), self.w)",
                            "Call"
                        ],
                        [
                            "x.view(*size_out)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.size(-2), x.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gpt-entity-tracking/opt.py": {
        "torch": {
            "zeros_like_78": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_80": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_8": {
                "input": {
                    "value": "math.pi * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__89": {
                "parameters": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "group['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}