{
    "Conv-TasNet_lightning/Datasets.py": {
        "torch": {
            "DataLoader_44": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Datasets(**data_kwargs, chunk_size=chunk_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_93": {
                "ndarray": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "read_wav(self.mix_audio[k])",
                            "Call"
                        ],
                        [
                            "read_wav(self.mix_audio[index])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_94": {
                "ndarray": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "Conv-TasNet_lightning/Loss.py": {
        "torch": {
            "randn_57": {
                "variable": {
                    "value": "ests",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_58": {
                "variable": {
                    "value": "egs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_49": {
                "variable": {
                    "value": "sisnr_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sisnr_loss(p) for p in permutations(range(len(ests)))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "max_51": {
                "variable": {
                    "value": "(max_perutt, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sisnr_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([sisnr_loss(p) for p in permutations(range(len(ests)))])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_26": {
                "input": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_32": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_33": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log10_37": {
                "input": {
                    "value": "eps + l2norm(t) / (l2norm(x_zm - t) + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_34": {
                "input": {
                    "value": "x_zm * s_zm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_53": {
                "input": {
                    "value": "max_perutt",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "Conv-TasNet_lightning/lightning.py": {
        "torch": {
            "stack_107": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_107": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_121": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_122": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(self.parameters(), lr=self.learning_rate, weight_decay=1e-05)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "self.scheduler_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "factor": {
                    "value": "self.scheduler_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "patience": {
                    "value": "self.patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_129": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Datasets(self.train_mix_scp, self.train_ref_scp, sr=self.sample_rate)",
                            "Call"
                        ],
                        [
                            "Datasets(self.val_mix_scp, self.val_ref_scp, sr=self.sample_rate)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_134": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Datasets(self.train_mix_scp, self.train_ref_scp, sr=self.sample_rate)",
                            "Call"
                        ],
                        [
                            "Datasets(self.val_mix_scp, self.val_ref_scp, sr=self.sample_rate)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Conv-TasNet_lightning/model.py": {
        "torch": {
            "randn_236": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_35": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.gamma * (x - mean) / torch.sqrt(var + self.eps) + self.beta",
                            "BinOp"
                        ],
                        [
                            "(x - mean) / torch.sqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x + w",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(x, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.gamma * (x - mean) / torch.sqrt(var + self.eps) + self.beta",
                            "BinOp"
                        ],
                        [
                            "(x - mean) / torch.sqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x + w",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(x, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_68": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.gamma * (x - mean) / torch.sqrt(var + self.eps) + self.beta",
                            "BinOp"
                        ],
                        [
                            "(x - mean) / torch.sqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x + w",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(x, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_69": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x - mean) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_101": {
                "variable": {
                    "value": "self.conv1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_102": {
                "variable": {
                    "value": "self.prelu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_108": {
                "variable": {
                    "value": "self.dwconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_110": {
                "variable": {
                    "value": "self.prelu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_112": {
                "variable": {
                    "value": "self.sconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "variable": {
                    "value": "self.tcn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*seq",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "variable": {
                    "value": "self.sep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*s",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv1d_154": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_157": {
                "variable": {
                    "value": "self.conv1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bottleneck",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose1d_178": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_205": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "H * num_spks",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_221": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask(w)",
                            "Call"
                        ],
                        [
                            "torch.chunk(m, chunks=self.num_spks, dim=1)",
                            "Call"
                        ],
                        [
                            "self.non_linear(torch.stack(m, dim=0))",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "self.num_spks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_54": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_55": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_166": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.gamma * (x - mean) / torch.sqrt(var + self.eps) + self.beta",
                            "BinOp"
                        ],
                        [
                            "(x - mean) / torch.sqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x + w",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(x, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_168": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.gamma * (x - mean) / torch.sqrt(var + self.eps) + self.beta",
                            "BinOp"
                        ],
                        [
                            "(x - mean) / torch.sqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x + w",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(x, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_183": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.gamma * (x - mean) / torch.sqrt(var + self.eps) + self.beta",
                            "BinOp"
                        ],
                        [
                            "(x - mean) / torch.sqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x + w",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(x, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm1d_93": {
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_222": {
                "tensors": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask(w)",
                            "Call"
                        ],
                        [
                            "torch.chunk(m, chunks=self.num_spks, dim=1)",
                            "Call"
                        ],
                        [
                            "self.non_linear(torch.stack(m, dim=0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_55": {
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_75": {
                "input": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_73": {
                "input": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Conv-TasNet_lightning/train.py": {
        "torch": {
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Conv_TasNet_Pytorch/AudioReader.py": {
        "torch": {}
    },
    "Conv_TasNet_Pytorch/Conv_TasNet.py": {
        "torch": {
            "randn_277": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_38": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(4, 32)",
                            "Call"
                        ],
                        [
                            "self.weight * (x - mean) / torch.sqrt(var + self.eps) + self.bias",
                            "BinOp"
                        ],
                        [
                            "(x - mean) / torch.sqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "super().forward(x if x.dim() == 3 else torch.unsqueeze(x, 1))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x)",
                            "Call"
                        ],
                        [
                            "super().forward(x if x.dim() == 3 else torch.unsqueeze(x, 1))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_39": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x - mean) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_62": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(4, 32)",
                            "Call"
                        ],
                        [
                            "self.weight * (x - mean) / torch.sqrt(var + self.eps) + self.bias",
                            "BinOp"
                        ],
                        [
                            "(x - mean) / torch.sqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "super().forward(x if x.dim() == 3 else torch.unsqueeze(x, 1))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x)",
                            "Call"
                        ],
                        [
                            "super().forward(x if x.dim() == 3 else torch.unsqueeze(x, 1))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_66": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(4, 32)",
                            "Call"
                        ],
                        [
                            "self.weight * (x - mean) / torch.sqrt(var + self.eps) + self.bias",
                            "BinOp"
                        ],
                        [
                            "(x - mean) / torch.sqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "super().forward(x if x.dim() == 3 else torch.unsqueeze(x, 1))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x)",
                            "Call"
                        ],
                        [
                            "super().forward(x if x.dim() == 3 else torch.unsqueeze(x, 1))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_136": {
                "variable": {
                    "value": "self.PReLU_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PReLU_144": {
                "variable": {
                    "value": "self.PReLU_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_146": {
                "variable": {
                    "value": "self.Sc_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_259": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gen_masks(e)",
                            "Call"
                        ],
                        [
                            "torch.chunk(m, chunks=self.num_spks, dim=1)",
                            "Call"
                        ],
                        [
                            "self.activation(torch.stack(m, dim=0))",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "self.num_spks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_81": {
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_99": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(4, 32)",
                            "Call"
                        ],
                        [
                            "self.weight * (x - mean) / torch.sqrt(var + self.eps) + self.bias",
                            "BinOp"
                        ],
                        [
                            "(x - mean) / torch.sqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "super().forward(x if x.dim() == 3 else torch.unsqueeze(x, 1))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x)",
                            "Call"
                        ],
                        [
                            "super().forward(x if x.dim() == 3 else torch.unsqueeze(x, 1))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_122": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(4, 32)",
                            "Call"
                        ],
                        [
                            "self.weight * (x - mean) / torch.sqrt(var + self.eps) + self.bias",
                            "BinOp"
                        ],
                        [
                            "(x - mean) / torch.sqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "super().forward(x if x.dim() == 3 else torch.unsqueeze(x, 1))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x)",
                            "Call"
                        ],
                        [
                            "super().forward(x if x.dim() == 3 else torch.unsqueeze(x, 1))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_228": {
                "*args": {
                    "value": "*Conv1D_Block_lists",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_240": {
                "*args": {
                    "value": "*repeats_lists",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "unsqueeze_248": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(4, 32)",
                            "Call"
                        ],
                        [
                            "self.weight * (x - mean) / torch.sqrt(var + self.eps) + self.bias",
                            "BinOp"
                        ],
                        [
                            "(x - mean) / torch.sqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "super().forward(x if x.dim() == 3 else torch.unsqueeze(x, 1))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x)",
                            "Call"
                        ],
                        [
                            "super().forward(x if x.dim() == 3 else torch.unsqueeze(x, 1))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_212": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_261": {
                "tensors": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gen_masks(e)",
                            "Call"
                        ],
                        [
                            "torch.chunk(m, chunks=self.num_spks, dim=1)",
                            "Call"
                        ],
                        [
                            "self.activation(torch.stack(m, dim=0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_23": {
                "*size": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "*size": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_44": {
                "input": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_97": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(4, 32)",
                            "Call"
                        ],
                        [
                            "self.weight * (x - mean) / torch.sqrt(var + self.eps) + self.bias",
                            "BinOp"
                        ],
                        [
                            "(x - mean) / torch.sqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "super().forward(x if x.dim() == 3 else torch.unsqueeze(x, 1))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x)",
                            "Call"
                        ],
                        [
                            "super().forward(x if x.dim() == 3 else torch.unsqueeze(x, 1))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_120": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(4, 32)",
                            "Call"
                        ],
                        [
                            "self.weight * (x - mean) / torch.sqrt(var + self.eps) + self.bias",
                            "BinOp"
                        ],
                        [
                            "(x - mean) / torch.sqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "super().forward(x if x.dim() == 3 else torch.unsqueeze(x, 1))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x)",
                            "Call"
                        ],
                        [
                            "super().forward(x if x.dim() == 3 else torch.unsqueeze(x, 1))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_42": {
                "input": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Conv_TasNet_Pytorch/DataLoaders.py": {
        "torch": {
            "DataLoader_116": {
                "variable": {
                    "value": "self.data_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self._collate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_83": {
                "variable": {
                    "value": "sample[mix]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "sample['mix']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, gap)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_84": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, gap)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Conv_TasNet_Pytorch/DataLoaders_new.py": {
        "torch": {
            "DataLoader_36": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Datasets(**data_kwargs, chunk_size=chunk_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_87": {
                "ndarray": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "read_wav(self.mix_audio[k])",
                            "Call"
                        ],
                        [
                            "read_wav(self.mix_audio[index])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_88": {
                "ndarray": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "Conv_TasNet_Pytorch/SI_SNR.py": {
        "torch": {
            "stack_82": {
                "variable": {
                    "value": "sisnr_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sisnr_loss(p) for p in permutations(range(num_spks))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "max_84": {
                "variable": {
                    "value": "(max_perutt, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sisnr_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([sisnr_loss(p) for p in permutations(range(num_spks))])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "variable": {
                    "value": "a_t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "variable": {
                    "value": "b_t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 4, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_18": {
                "input": {
                    "value": "torch.norm(s, p=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log10_20": {
                "input": {
                    "value": "torch.norm(s_target, p=2) / torch.norm(e_noise, p=2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_54": {
                "input": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_60": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_61": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s - torch.mean(s)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log10_65": {
                "input": {
                    "value": "eps + l2norm(t) / (l2norm(x_zm - t) + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_16": {
                "input": {
                    "value": "_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_s - torch.mean(_s)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_17": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s - torch.mean(s)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_18": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s - torch.mean(s)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_62": {
                "input": {
                    "value": "x_zm * s_zm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_86": {
                "input": {
                    "value": "max_perutt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mul_18": {
                "input": {
                    "value": "_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_s - torch.mean(_s)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s - torch.mean(s)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_20": {
                "input": {
                    "value": "e_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_s - s_target",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Conv_TasNet_Pytorch/Separation.py": {
        "torch": {
            "load_20": {
                "variable": {
                    "value": "dicts",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_25": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:{}.format(gpuid[0]) if len(gpuid) > 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_34": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "egs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "egs.to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_37": {
                "input": {
                    "value": "s.detach().cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_40": {
                "input": {
                    "value": "s.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_45": {
                "input": {
                    "value": "torch.abs(s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_45": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spks",
                            "variable"
                        ],
                        [
                            "s[:egs.shape[0]]",
                            "Subscript"
                        ],
                        [
                            "s * norm / torch.max(torch.abs(s))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "Conv_TasNet_Pytorch/Separation_wav.py": {
        "torch": {
            "load_20": {
                "variable": {
                    "value": "dicts",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_25": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:{}.format(gpuid[0]) if len(gpuid) > 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "norm_32": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "egs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mix.to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_35": {
                "input": {
                    "value": "s.detach().cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_38": {
                "input": {
                    "value": "s.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_43": {
                "input": {
                    "value": "torch.abs(s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_43": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spks",
                            "variable"
                        ],
                        [
                            "s[:egs.shape[0]]",
                            "Subscript"
                        ],
                        [
                            "s * norm / torch.max(torch.abs(s))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "Conv_TasNet_Pytorch/train.py": {
        "torch": {}
    },
    "Conv_TasNet_Pytorch/trainer.py": {
        "torch": {
            "device_68": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(gpuid[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_106": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "patience",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "min_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_89": {
                "variable": {
                    "value": "cpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume['path']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_151": {
                "obj": {
                    "value": "{'epoch': self.cur_epoch, 'model_state_dict': self.net.state_dict(), 'optim_state_dict': self.optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.checkpoint, '{0}.pt'.format('best' if best else 'last'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_221": {
                "type": {
                    "value": "self.gpuid[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__176": {
                "parameters": {
                    "value": "self.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}