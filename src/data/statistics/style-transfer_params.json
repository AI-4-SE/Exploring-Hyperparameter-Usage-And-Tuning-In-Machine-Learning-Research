{
    "evaluation/feature_extractor/feature_extractor.py": {
        "sklearn": {},
        "tensorflow": {
            "IsDirectory_55": {
                "dirname": {
                    "value": "snapshot_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(snapshot_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_56": {
                "variable": {
                    "value": "snapshot_path",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "snapshot_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(snapshot_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "map_fn_97": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "function_to_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda x: image_preprocessing_fn(x, eval_image_size, eval_image_size)",
                            "Lambda"
                        ]
                    ]
                },
                "elems": {
                    "value": "input_pl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, eval_image_size, eval_image_size, 3], name='x')",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_119": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(per_process_gpu_memory_fraction=gpu_memory_fraction)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_121": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(gpu_options=tf.GPUOptions(per_process_gpu_memory_fraction=gpu_memory_fraction))",
                            "Call"
                        ]
                    ]
                }
            },
            "NewCheckpointReader_70": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "snapshot_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(snapshot_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_90": {
                "variable": {
                    "value": "input_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, eval_image_size, eval_image_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_94": {
                "variable": {
                    "value": "is_phase_train_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "tuple()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "is_phase_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_default_graph_113": {
                "variable": {
                    "value": "self.MaxPool_0a_7x7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_default_graph_112": {
                "variable": {
                    "value": "self.__dict__[short_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_118": {
                "variable": {
                    "value": "self.__dict__[vgg_16/{}_prerelu.format(layer_name)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GPUOptions_120": {
                "per_process_gpu_memory_fraction": {
                    "value": "gpu_memory_fraction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "evaluation/feature_extractor/features.py": {
        "sklearn": {},
        "tensorflow": {}
    },
    "dnnlib/tflib/autosummary.py": {
        "tensorflow": {}
    },
    "dnnlib/tflib/network.py": {
        "tensorflow": {}
    },
    "dnnlib/tflib/optimizer.py": {
        "tensorflow": {
            "convert_to_tensor_52": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_default_graph_54": {
                "variable": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_90": {
                "name": {
                    "value": "self.id + '_grad'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_90": {
                "device_name": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "group_180": {
                "*inputs": {
                    "value": "*ops",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "TrainingOp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_194": {
                "variable": {
                    "value": "self._dev_ls_var[device]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.float32(self.loss_scaling_init)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_scaling_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_97": {
                "x": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.apply_loss_scaling(tf.cast(loss, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_193": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "name_scope_117": {
                "name": {
                    "value": "'ProcessGrads%d' % dev_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_117": {
                "device_name": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "name_scope_130": {
                "name": {
                    "value": "SumAcrossGPUs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_130": {
                "device_name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "name_scope_142": {
                "name": {
                    "value": "'ApplyGrads%d' % dev_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_142": {
                "device_name": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_all_152": {
                "input_tensor": {
                    "value": "tf.is_finite(g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_99": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_146": {
                "variable": {
                    "value": "coef",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.float32(1.0 / total_grads)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "coef",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_151": {
                "name": {
                    "value": "CheckOverflow",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_155": {
                "name": {
                    "value": "UpdateWeights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_122": {
                "x": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[dev_grads[dev][var_idx][0] for dev in devices]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(g, tf.float32) for (g, v) in gv]",
                            "ListComp"
                        ],
                        [
                            "g[0] if len(g) == 1 else tf.add_n(g)",
                            "IfExp"
                        ],
                        [
                            "nccl_ops.all_sum(g)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_123": {
                "inputs": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[dev_grads[dev][var_idx][0] for dev in devices]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(g, tf.float32) for (g, v) in gv]",
                            "ListComp"
                        ],
                        [
                            "g[0] if len(g) == 1 else tf.add_n(g)",
                            "IfExp"
                        ],
                        [
                            "nccl_ops.all_sum(g)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_145": {
                "name": {
                    "value": "Scale",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_152": {
                "values": {
                    "value": "[tf.reduce_all(tf.is_finite(g)) for (g, v) in grads]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "name_scope_169": {
                "name": {
                    "value": "Statistics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_161": {
                "pred": {
                    "value": "grad_ok",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.stack([tf.reduce_all(tf.is_finite(g)) for (g, v) in grads]))",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : opt.apply_gradients(grads)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_163": {
                "pred": {
                    "value": "grad_ok",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.stack([tf.reduce_all(tf.is_finite(g)) for (g, v) in grads]))",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.group(tf.assign_add(ls_var, self.loss_scaling_inc), opt.apply_gradients(grads))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.group(tf.assign_sub(ls_var, self.loss_scaling_dec))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "where_171": {
                "condition": {
                    "value": "grad_ok",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.stack([tf.reduce_all(tf.is_finite(g)) for (g, v) in grads]))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_finite_152": {
                "x": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[dev_grads[dev][var_idx][0] for dev in devices]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(g, tf.float32) for (g, v) in gv]",
                            "ListComp"
                        ],
                        [
                            "g[0] if len(g) == 1 else tf.add_n(g)",
                            "IfExp"
                        ],
                        [
                            "nccl_ops.all_sum(g)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_164": {
                "*inputs": {
                    "value": "tf.assign_add(ls_var, self.loss_scaling_inc)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "opt.apply_gradients(grads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_165": {
                "*inputs": {
                    "value": "tf.assign_sub(ls_var, self.loss_scaling_dec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_add_164": {
                "ref": {
                    "value": "ls_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_loss_scaling_var(dev)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "self.loss_scaling_inc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_sub_165": {
                "ref": {
                    "value": "ls_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_loss_scaling_var(dev)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "self.loss_scaling_dec",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dnnlib/tflib/tfutil.py": {
        "tensorflow": {}
    },
    "evaluation/feature_extractor/nets/nets_factory.py": {
        "tensorflow": {}
    },
    "evaluation/feature_extractor/nets/vgg.py": {
        "tensorflow": {
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'vgg_a'",
                            "Method Argument"
                        ],
                        [
                            "'vgg_16'",
                            "Method Argument"
                        ],
                        [
                            "'vgg_16'",
                            "Method Argument"
                        ],
                        [
                            "'vgg_19'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "vgg_a",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "repeat_97": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "repeats": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_98": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_99": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_100": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_101": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_102": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_103": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_104": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_105": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_106": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_108": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[7, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_109": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_111": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_112": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_114": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc8",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'vgg_a'",
                            "Method Argument"
                        ],
                        [
                            "'vgg_16'",
                            "Method Argument"
                        ],
                        [
                            "'vgg_16'",
                            "Method Argument"
                        ],
                        [
                            "'vgg_19'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "vgg_16",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "repeat_158": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "repeats": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_159": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_160": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_161": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_162": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_163": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_164": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_165": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_166": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_167": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_169": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[7, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_170": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_172": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_173": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_203": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'vgg_a'",
                            "Method Argument"
                        ],
                        [
                            "'vgg_16'",
                            "Method Argument"
                        ],
                        [
                            "'vgg_16'",
                            "Method Argument"
                        ],
                        [
                            "'vgg_19'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "vgg_16",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "repeat_208": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "repeats": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_209": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_210": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_211": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_212": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_213": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_214": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_215": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_216": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_217": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_219": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[7, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_220": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_222": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_223": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_270": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'vgg_a'",
                            "Method Argument"
                        ],
                        [
                            "'vgg_16'",
                            "Method Argument"
                        ],
                        [
                            "'vgg_16'",
                            "Method Argument"
                        ],
                        [
                            "'vgg_19'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "vgg_19",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "repeat_275": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "repeats": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_276": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_277": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_278": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_279": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_280": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_281": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_282": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_283": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_284": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_286": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[7, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_287": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_289": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_290": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_292": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc8",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_121": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_176": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc8",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_184": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_228": {
                "variable": {
                    "value": "heads[task_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "task_num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "'fc8_' + task_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_299": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_initializer_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_236": {
                "variable": {
                    "value": "heads[task_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_head",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'fc8_{}/squeezed'.format(task_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/feature_extractor/preprocessing/preprocessing_factory.py": {
        "tensorflow": {}
    },
    "evaluation/feature_extractor/preprocessing/vgg_preprocessing.py": {
        "tensorflow": {
            "shape_69": {
                "variable": {
                    "value": "original_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "Assert_71": {
                "variable": {
                    "value": "rank_assertion",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(tf.rank(image), 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Rank of image must be equal to 3.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Assert_78": {
                "variable": {
                    "value": "size_assertion",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.greater_equal(original_shape[0], crop_height), tf.greater_equal(original_shape[1], crop_width))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Crop size greater than the image size.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_84": {
                "variable": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([offset_height, offset_width, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Assert_134": {
                "variable": {
                    "value": "crop_size_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.greater_equal(image_height, crop_height), tf.greater_equal(image_width, crop_width))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Crop size greater than the image size.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_230": {
                "variable": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_252": {
                "variable": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_254": {
                "variable": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(height)",
                            "Call"
                        ],
                        [
                            "shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_255": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(width)",
                            "Call"
                        ],
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_256": {
                "variable": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_258": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(height, width)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : smallest_side / width",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : smallest_side / height",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "to_int32_261": {
                "variable": {
                    "value": "new_height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_262": {
                "variable": {
                    "value": "new_width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_277": {
                "variable": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_279": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_283": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_bilinear_284": {
                "variable": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[new_height, new_width]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_286": {
                "variable": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_bilinear(image, [new_height, new_width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(resized_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_319": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_flip_left_right_320": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_339": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_91": {
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "cropped_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([rank_assertion], tf.stack([crop_height, crop_width, original_shape[2]]))",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_122": {
                "variable": {
                    "value": "image_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Assert_123": {
                "variable": {
                    "value": "rank_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(image_rank, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Wrong rank for tensor  %s [expected] [actual]', image_list[i].name, 3, image_rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Assert_150": {
                "variable": {
                    "value": "height_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(height, image_height)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Wrong height for tensor %s [expected][actual]', image.name, height, image_height]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Assert_154": {
                "variable": {
                    "value": "width_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(width, image_width)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Wrong width for tensor %s [expected][actual]', image.name, width, image_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_233": {
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(axis=2, num_or_size_splits=num_channels, value=image)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_72": {
                "x": {
                    "value": "tf.rank(image)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_76": {
                "values": {
                    "value": "[crop_height, crop_width, original_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_79": {
                "x": {
                    "value": "tf.greater_equal(original_shape[0], crop_height)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(original_shape[1], crop_width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_84": {
                "values": {
                    "value": "[offset_height, offset_width, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_90": {
                "input_": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.stack([offset_height, offset_width, 0]))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "cropped_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([rank_assertion], tf.stack([crop_height, crop_width, original_shape[2]]))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_131": {
                "input": {
                    "value": "image_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "logical_and_135": {
                "x": {
                    "value": "tf.greater_equal(image_height, crop_height)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(image_width, crop_width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_166": {
                "tensor": {
                    "value": "image_height - crop_height + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_168": {
                "tensor": {
                    "value": "image_width - crop_width + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "greater_258": {
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(height)",
                            "Call"
                        ],
                        [
                            "shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(width)",
                            "Call"
                        ],
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rank_72": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_equal_80": {
                "x": {
                    "value": "original_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "crop_height",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "greater_equal_81": {
                "x": {
                    "value": "original_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "crop_width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_124": {
                "x": {
                    "value": "image_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.rank(image_list[i])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_equal_136": {
                "x": {
                    "value": "image_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "crop_height",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "greater_equal_137": {
                "x": {
                    "value": "image_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "crop_width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_146": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_151": {
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(height)",
                            "Call"
                        ],
                        [
                            "shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "image_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_155": {
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(width)",
                            "Call"
                        ],
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "image_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_192": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_193": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "evaluation/logger.py": {
        "tensorflow": {}
    },
    "main.py": {
        "tensorflow": {
            "set_random_seed_20": {
                "seed": {
                    "value": "228",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_143": {
                "variable": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "run_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_145": {
                "config": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model.py": {
        "tensorflow": {
            "Saver_86": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_87": {
                "variable": {
                    "value": "self.saver_long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "global_variables_initializer_299": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_392": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_463": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_n_177": {
                "variable": {
                    "value": "self.gener_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "list(self.output_photo_gener_loss.values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_198": {
                "variable": {
                    "value": "t_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_204": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_225": {
                "variable": {
                    "value": "s_d",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "discriminator/discr_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.discr_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_226": {
                "variable": {
                    "value": "self.summary_discriminator_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "s_d1 + s_d2 + s_d3 + [s_d]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_235": {
                "variable": {
                    "value": "s_d_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "discriminator/discr_acc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.discr_acc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_236": {
                "variable": {
                    "value": "s_d_acc_g",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "discriminator/discr_acc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.gener_acc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_237": {
                "variable": {
                    "value": "self.summary_discriminator_acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "s_d1_acc + s_d2_acc + s_d3_acc + [s_d_acc]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_240": {
                "variable": {
                    "value": "s_i1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "image_loss/photo",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.img_loss_photo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_241": {
                "variable": {
                    "value": "s_i",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "image_loss/loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.img_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_242": {
                "variable": {
                    "value": "self.summary_image_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[s_i1 + s_i]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_245": {
                "variable": {
                    "value": "s_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "feature_loss/photo",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.feature_loss_photo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_246": {
                "variable": {
                    "value": "s_f",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "feature_loss/loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.feature_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_247": {
                "variable": {
                    "value": "self.summary_feature_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[s_f1 + s_f]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "merge_all_249": {
                "variable": {
                    "value": "self.summary_merged_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_250": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.logs_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_540": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_93": {
                "variable": {
                    "value": "self.input_painting",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "painting",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_96": {
                "variable": {
                    "value": "self.input_photo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "photo",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_99": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_207": {
                "variable": {
                    "value": "self.d_optim_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_210": {
                "variable": {
                    "value": "self.g_optim_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_254": {
                "variable": {
                    "value": "self.input_photo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "photo",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_92": {
                "name": {
                    "value": "placeholder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_151": {
                "inputs": {
                    "value": "list(self.output_photo_discr_loss.values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_185": {
                "inputs": {
                    "value": "list(self.output_photo_gener_acc.values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_206": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_219": {
                "name": {
                    "value": "'discriminator/input_painting_discr_loss/' + key",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_221": {
                "name": {
                    "value": "'discriminator/input_photo_discr_loss/' + key",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_223": {
                "name": {
                    "value": "'discriminator/output_photo_discr_loss/' + key",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_229": {
                "name": {
                    "value": "'discriminator/input_painting_discr_acc/' + key",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_231": {
                "name": {
                    "value": "'discriminator/input_photo_discr_acc/' + key",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_233": {
                "name": {
                    "value": "'discriminator/output_photo_discr_acc/' + key",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_253": {
                "name": {
                    "value": "placeholder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_149": {
                "inputs": {
                    "value": "list(self.input_painting_discr_loss.values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_150": {
                "inputs": {
                    "value": "list(self.input_photo_discr_loss.values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_154": {
                "input_tensor": {
                    "value": "tf.cast(x=pred > tf.zeros_like(pred), dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_158": {
                "input_tensor": {
                    "value": "tf.cast(x=pred < tf.zeros_like(pred), dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_162": {
                "input_tensor": {
                    "value": "tf.cast(x=pred < tf.zeros_like(pred), dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_168": {
                "inputs": {
                    "value": "list(self.output_photo_discr_acc.values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_180": {
                "input_tensor": {
                    "value": "tf.cast(x=pred > tf.zeros_like(pred), dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_139": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_142": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_145": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_154": {
                "x": {
                    "value": "pred > tf.zeros_like(pred)",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_158": {
                "x": {
                    "value": "pred < tf.zeros_like(pred)",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_162": {
                "x": {
                    "value": "pred < tf.zeros_like(pred)",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_166": {
                "inputs": {
                    "value": "list(self.input_painting_discr_acc.values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_167": {
                "inputs": {
                    "value": "list(self.input_photo_discr_acc.values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_173": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_180": {
                "x": {
                    "value": "pred > tf.zeros_like(pred)",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_154": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_158": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_162": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_180": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "ops.py": {
        "tensorflow": {
            "get_variable_42": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "scale",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[depth]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(1.0, 0.02, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_43": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "offset",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[depth]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "moments_44": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rsqrt_46": {
                "variable": {
                    "value": "inv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "variance + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_70": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflayers.batch_norm(inputs=input, scale=True, is_training=is_training, trainable=True, reuse=None)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "leak * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_76": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_.get_shape()[-1], output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_78": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_start)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ],
                        [
                            "'instance_norm'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_52": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ],
                        [
                            "'instance_norm'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_53": {
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(images=input_, size=tf.shape(input_)[1:3] * s, method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "activation_fn": {
                    "value": "activation_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                },
                "biases_initializer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ],
                        [
                            "'instance_norm'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_75": {
                "name_or_scope": {
                    "value": "scope or 'Linear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_77": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_normal_initializer_42": {
                "mean": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_43": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_54": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_79": {
                "value": {
                    "value": "bias_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_83": {
                "a": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(images=input_, size=tf.shape(input_)[1:3] * s, method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [input_.get_shape()[-1], output_size], tf.float32, tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_81": {
                "a": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(images=input_, size=tf.shape(input_)[1:3] * s, method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [input_.get_shape()[-1], output_size], tf.float32, tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_64": {
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(images=input_, size=tf.shape(input_)[1:3] * s, method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "runway_model.py": {
        "torch": {
            "device_37": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "vgg",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg.children())[:31]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_77": {
                "f": {
                    "value": "models/decoder.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_78": {
                "f": {
                    "value": "models/vgg_normalised.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}