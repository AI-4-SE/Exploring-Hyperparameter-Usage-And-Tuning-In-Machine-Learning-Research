{
    "Code/IFCNN_Main.py": {
        "torch": {
            "load_65": {
                "f": {
                    "value": "snapshots/ + model_name + .pth",
                    "possible_values": []
                }
            },
            "load_230": {
                "f": {
                    "value": "snapshots/ + model_name + .pth",
                    "possible_values": []
                }
            },
            "zeros_267": {
                "variable": {
                    "value": "Cbs",
                    "possible_values": []
                },
                "*size": {
                    "value": "NUM",
                    "possible_values": [
                        [
                            "len(imgs)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "h",
                    "possible_values": []
                },
                "dtype": {
                    "value": "w",
                    "possible_values": []
                }
            },
            "zeros_268": {
                "variable": {
                    "value": "Crs",
                    "possible_values": []
                },
                "*size": {
                    "value": "NUM",
                    "possible_values": [
                        [
                            "len(imgs)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "h",
                    "possible_values": []
                },
                "dtype": {
                    "value": "w",
                    "possible_values": []
                }
            },
            "no_grad_189": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_134": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "isnan_283": {
                "input": {
                    "value": "CbNew",
                    "possible_values": [
                        [
                            "sum(Cbs * Cb128 / sum(Cb128).repeat(NUM, 1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_284": {
                "input": {
                    "value": "CrNew",
                    "possible_values": [
                        [
                            "sum(Crs * Cr128 / sum(Cr128).repeat(NUM, 1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_288": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "Code/model.py": {
        "torch": {
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplane",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplane",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "variable": {
                    "value": "self.bn",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outplane",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "pad_21": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "pad": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.conv4",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "pad_87": {
                "variable": {
                    "value": "out_tensor",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tensors",
                            "Name"
                        ],
                        [
                            "tensors",
                            "Name"
                        ]
                    ]
                },
                "pad": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "possible_values": [
                        [
                            "'constant'",
                            "MethodArgument"
                        ]
                    ]
                },
                "value": {
                    "value": "value",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_55": {
                "variable": {
                    "value": "max_tensor",
                    "possible_values": []
                },
                "input": {
                    "value": "max_tensor",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tensor",
                            "Name"
                        ],
                        [
                            "torch.max(max_tensor, tensor)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Code/utils/myDatasets.py": {
        "torch": {}
    }
}