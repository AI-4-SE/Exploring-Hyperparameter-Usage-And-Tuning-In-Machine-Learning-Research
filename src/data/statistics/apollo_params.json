{
    "classification/cifar.py": {
        "torch": {
            "is_available_123": {
                "variable": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_168": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset(data_path, train=True, download=True, transform=transforms.Compose([transforms.RandomCrop(32, padding=4), transforms.RandomHorizontalFlip(), transforms.ToTensor(), transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.201))]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_170": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset(data_path, train=False, download=False, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.201))]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_260": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_70": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "hyper1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.opt_h1",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.weight_decay",
                            "Attribute"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ExponentialLR_100": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SGD(parameters, lr=learning_rate, momentum=hyper1, weight_decay=weight_decay, nesterov=True)",
                            "Call"
                        ],
                        [
                            "RAdamW(parameters, lr=learning_rate, betas=(hyper1, hyper2), eps=eps, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "AdamW(parameters, lr=learning_rate, betas=(hyper1, hyper2), eps=eps, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "AdaBelief(parameters, lr=learning_rate, betas=(hyper1, hyper2), eps=eps, weight_decay=weight_decay, weight_decay_type=weight_decay_type)",
                            "Call"
                        ],
                        [
                            "Apollo(parameters, lr=learning_rate, beta=hyper1, eps=eps, rebound=rebound, warmup=warmup_updates, init_lr=init_lr, weight_decay=weight_decay, weight_decay_type=weight_decay_type)",
                            "Call"
                        ],
                        [
                            "AdaHessian(parameters, lr=learning_rate, betas=(hyper1, hyper2), eps=eps, warmup=warmup_updates, init_lr=init_lr, weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "decay_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.decay_rate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv2d_337": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_338": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_339": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_343": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_344": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MultiStepLR_103": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SGD(parameters, lr=learning_rate, momentum=hyper1, weight_decay=weight_decay, nesterov=True)",
                            "Call"
                        ],
                        [
                            "RAdamW(parameters, lr=learning_rate, betas=(hyper1, hyper2), eps=eps, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "AdamW(parameters, lr=learning_rate, betas=(hyper1, hyper2), eps=eps, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "AdaBelief(parameters, lr=learning_rate, betas=(hyper1, hyper2), eps=eps, weight_decay=weight_decay, weight_decay_type=weight_decay_type)",
                            "Call"
                        ],
                        [
                            "Apollo(parameters, lr=learning_rate, beta=hyper1, eps=eps, rebound=rebound, warmup=warmup_updates, init_lr=init_lr, weight_decay=weight_decay, weight_decay_type=weight_decay_type)",
                            "Call"
                        ],
                        [
                            "AdaHessian(parameters, lr=learning_rate, betas=(hyper1, hyper2), eps=eps, warmup=warmup_updates, init_lr=init_lr, weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "milestone",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.milestone",
                            "Attribute"
                        ]
                    ]
                },
                "gamma": {
                    "value": "decay_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.decay_rate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_128": {
                "seed": {
                    "value": "random_seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_129": {
                "seed": {
                    "value": "random_seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "device_131": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_device_133": {
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "torch.device('cuda', 0) if args.cuda else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "args.device",
                            "Attribute"
                        ],
                        [
                            "args.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "empty_cache_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_357": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_369": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamW_78": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(hyper1, hyper2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.eps",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.weight_decay",
                            "Attribute"
                        ]
                    ]
                }
            },
            "CosineAnnealingLR_106": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SGD(parameters, lr=learning_rate, momentum=hyper1, weight_decay=weight_decay, nesterov=True)",
                            "Call"
                        ],
                        [
                            "RAdamW(parameters, lr=learning_rate, betas=(hyper1, hyper2), eps=eps, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "AdamW(parameters, lr=learning_rate, betas=(hyper1, hyper2), eps=eps, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "AdaBelief(parameters, lr=learning_rate, betas=(hyper1, hyper2), eps=eps, weight_decay=weight_decay, weight_decay_type=weight_decay_type)",
                            "Call"
                        ],
                        [
                            "Apollo(parameters, lr=learning_rate, beta=hyper1, eps=eps, rebound=rebound, warmup=warmup_updates, init_lr=init_lr, weight_decay=weight_decay, weight_decay_type=weight_decay_type)",
                            "Call"
                        ],
                        [
                            "AdaHessian(parameters, lr=learning_rate, betas=(hyper1, hyper2), eps=eps, warmup=warmup_updates, init_lr=init_lr, weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "num_epochs",
                    "type": "Variable",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "last_lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.last_lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_301": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_358": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_360": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "classification/imagenet.py": {
        "torch": {
            "is_available_165": {
                "variable": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_228": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(train_path, transform=transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(trainset, rank=args.rank, num_replicas=args.world_size, shuffle=True)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_242": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_398": {
                "variable": {
                    "value": "all_loss",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_399": {
                "variable": {
                    "value": "all_top1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_400": {
                "variable": {
                    "value": "all_top5",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "set_device_93": {
                "device": {
                    "value": "local_rank",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(0, nproc_per_node)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_108": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "hyper1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.opt_h1",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.weight_decay",
                            "Attribute"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ExponentialLR_138": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SGD(parameters, lr=learning_rate, momentum=hyper1, weight_decay=weight_decay, nesterov=True)",
                            "Call"
                        ],
                        [
                            "RAdamW(parameters, lr=learning_rate, betas=(hyper1, hyper2), eps=eps, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "AdamW(parameters, lr=learning_rate, betas=(hyper1, hyper2), eps=eps, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "AdaBelief(parameters, lr=learning_rate, betas=(hyper1, hyper2), eps=eps, weight_decay=weight_decay, weight_decay_type=weight_decay_type)",
                            "Call"
                        ],
                        [
                            "Apollo(parameters, lr=learning_rate, beta=hyper1, eps=eps, rebound=rebound, warmup=warmup_updates, init_lr=init_lr, weight_decay=weight_decay, weight_decay_type=weight_decay_type)",
                            "Call"
                        ],
                        [
                            "AdaHessian(parameters, lr=learning_rate, betas=(hyper1, hyper2), eps=eps, warmup=warmup_updates, init_lr=init_lr, weight_decay=weight_decay, num_threads=world_size)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "decay_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.decay_rate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DistributedSampler_223": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(train_path, transform=transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))]))",
                            "Call"
                        ]
                    ]
                },
                "rank": {
                    "value": "args.rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_replicas": {
                    "value": "args.world_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_232": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(val_path, transform=transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_278": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_name",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "args.checkpoint_name",
                            "Attribute"
                        ],
                        [
                            "args.checkpoint_name",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_141": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SGD(parameters, lr=learning_rate, momentum=hyper1, weight_decay=weight_decay, nesterov=True)",
                            "Call"
                        ],
                        [
                            "RAdamW(parameters, lr=learning_rate, betas=(hyper1, hyper2), eps=eps, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "AdamW(parameters, lr=learning_rate, betas=(hyper1, hyper2), eps=eps, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "AdaBelief(parameters, lr=learning_rate, betas=(hyper1, hyper2), eps=eps, weight_decay=weight_decay, weight_decay_type=weight_decay_type)",
                            "Call"
                        ],
                        [
                            "Apollo(parameters, lr=learning_rate, beta=hyper1, eps=eps, rebound=rebound, warmup=warmup_updates, init_lr=init_lr, weight_decay=weight_decay, weight_decay_type=weight_decay_type)",
                            "Call"
                        ],
                        [
                            "AdaHessian(parameters, lr=learning_rate, betas=(hyper1, hyper2), eps=eps, warmup=warmup_updates, init_lr=init_lr, weight_decay=weight_decay, num_threads=world_size)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "milestone",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.milestone",
                            "Attribute"
                        ]
                    ]
                },
                "gamma": {
                    "value": "decay_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.decay_rate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_173": {
                "seed": {
                    "value": "random_seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ],
                        [
                            "random_seed + args.rank if args.rank >= 0 else random_seed",
                            "IfExp"
                        ],
                        [
                            "random_seed + random.randint(0, 1024)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_174": {
                "seed": {
                    "value": "random_seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ],
                        [
                            "random_seed + args.rank if args.rank >= 0 else random_seed",
                            "IfExp"
                        ],
                        [
                            "random_seed + random.randint(0, 1024)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_176": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_device_178": {
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "torch.device('cuda', args.local_rank) if args.cuda else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "args.device",
                            "Attribute"
                        ],
                        [
                            "args.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "empty_cache_365": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_433": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamW_116": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(hyper1, hyper2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.eps",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.weight_decay",
                            "Attribute"
                        ]
                    ]
                }
            },
            "CosineAnnealingLR_144": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SGD(parameters, lr=learning_rate, momentum=hyper1, weight_decay=weight_decay, nesterov=True)",
                            "Call"
                        ],
                        [
                            "RAdamW(parameters, lr=learning_rate, betas=(hyper1, hyper2), eps=eps, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "AdamW(parameters, lr=learning_rate, betas=(hyper1, hyper2), eps=eps, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "AdaBelief(parameters, lr=learning_rate, betas=(hyper1, hyper2), eps=eps, weight_decay=weight_decay, weight_decay_type=weight_decay_type)",
                            "Call"
                        ],
                        [
                            "Apollo(parameters, lr=learning_rate, beta=hyper1, eps=eps, rebound=rebound, warmup=warmup_updates, init_lr=init_lr, weight_decay=weight_decay, weight_decay_type=weight_decay_type)",
                            "Call"
                        ],
                        [
                            "AdaHessian(parameters, lr=learning_rate, betas=(hyper1, hyper2), eps=eps, warmup=warmup_updates, init_lr=init_lr, weight_decay=weight_decay, num_threads=world_size)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "num_epochs",
                    "type": "Variable",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "last_lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.last_lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "save_340": {
                "obj": {
                    "value": "{'epoch': epoch + 1, 'model': model.state_dict(), 'optimizer': optimizer.state_dict(), 'scheduler': scheduler.state_dict(), 'best_epoch': best_epoch, 'best_top1': best_top1, 'best_top5': best_top5, 'best_loss': best_loss, 'numbers': numbers}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_name",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "args.checkpoint_name",
                            "Attribute"
                        ],
                        [
                            "args.checkpoint_name",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_291": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "language_model/model_word_ada/adaptive.py": {
        "torch": {
            "Linear_37": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.head_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.head_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_38": {
                "variable": {
                    "value": "self.tail",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_101": {
                "variable": {
                    "value": "head_logprob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.head(input)",
                            "Call"
                        ],
                        [
                            "self.head(input)",
                            "Call"
                        ],
                        [
                            "self.head(input)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_112": {
                "variable": {
                    "value": "head_logprob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.head(input)",
                            "Call"
                        ],
                        [
                            "self.head(input)",
                            "Call"
                        ],
                        [
                            "self.head(input)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_161": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.head(input)",
                            "Call"
                        ],
                        [
                            "self.head(input)",
                            "Call"
                        ],
                        [
                            "self.head(input)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "projection",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(self.in_features, hsz, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_118": {
                "variable": {
                    "value": "cluster_logprob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cluster_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.tail[i - 1](input_subset)",
                            "Call"
                        ],
                        [
                            "self.tail[i](input)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_87": {
                "variable": {
                    "value": "cluster_logprob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cluster_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.tail[i - 1](input_subset)",
                            "Call"
                        ],
                        [
                            "self.tail[i](input)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_175": {
                "variable": {
                    "value": "output[not_in_shortlist]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "log_prob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._get_full_log_prob(input, head_output)",
                            "Call"
                        ],
                        [
                            "self._get_full_log_prob(input[not_in_shortlist], head_output[not_in_shortlist])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "self.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hsz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.in_features // self.div_value ** i)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "in_features": {
                    "value": "hsz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.in_features // self.div_value ** i)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "osz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.cutoffs[i + 1] - self.cutoffs[i]",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_170": {
                "input": {
                    "value": "log_prob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._get_full_log_prob(input, head_output)",
                            "Call"
                        ],
                        [
                            "self._get_full_log_prob(input[not_in_shortlist], head_output[not_in_shortlist])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "language_model/model_word_ada/dataset.py": {
        "torch": {
            "unbind_25": {
                "input": {
                    "value": "torch.LongTensor(self.dataset[0:res_num]).view(-1, self.sequence_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unbind_26": {
                "input": {
                    "value": "torch.LongTensor(self.dataset[1:res_num + 1]).view(-1, self.sequence_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "language_model/model_word_ada/lm.py": {
        "torch": {
            "Embedding_11": {
                "variable": {
                    "value": "self.word_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "w_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "w_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdaptiveLogSoftmaxWithLoss_15": {
                "variable": {
                    "value": "self.soft_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_classes": {
                    "value": "w_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "cutoffs": {
                    "value": "cutoffs",
                    "type": "Variable",
                    "possible_values": []
                },
                "div_value": {
                    "value": "4.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_16": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "language_model/train_1bw.py": {
        "torch": {
            "MultiStepLR_50": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SGD(parameters, lr=learning_rate, momentum=0.9, weight_decay=0.0, nesterov=True)",
                            "Call"
                        ],
                        [
                            "RAdamW(parameters, lr=learning_rate, betas=(0.9, 0.999), weight_decay=0.0)",
                            "Call"
                        ],
                        [
                            "Adam(parameters, lr=learning_rate, betas=(0.9, 0.999), weight_decay=0.0)",
                            "Call"
                        ],
                        [
                            "AdaBelief(parameters, lr=learning_rate, betas=(0.9, 0.999), eps=1e-12, weight_decay=0.0)",
                            "Call"
                        ],
                        [
                            "Apollo(parameters, lr=learning_rate, beta=0.9, eps=0.0001, rebound=rebound, warmup=warmup_updates, init_lr=init_lr, weight_decay=0.0)",
                            "Call"
                        ],
                        [
                            "AdaHessian(parameters, lr=learning_rate, betas=(0.9, 0.999), eps=0.0001, warmup=warmup_updates, init_lr=init_lr, weight_decay=0.0)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "milestone",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.milestone",
                            "Attribute"
                        ]
                    ]
                },
                "gamma": {
                    "value": "decay_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.decay_rate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "is_available_118": {
                "variable": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_33": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_168": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_name",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "args.checkpoint_name",
                            "Attribute"
                        ],
                        [
                            "args.checkpoint_name",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_125": {
                "seed": {
                    "value": "random_seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ],
                        [
                            "random_seed + random.randint(0, 1024)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_126": {
                "seed": {
                    "value": "random_seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ],
                        [
                            "random_seed + random.randint(0, 1024)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_128": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_device_130": {
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda', 0) if args.cuda else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "args.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "save_237": {
                "obj": {
                    "value": "{'epoch': epoch + 1, 'batch_index': batch_index, 'model': lm_model.state_dict(), 'optimizer': optimizer.state_dict(), 'scheduler': scheduler.state_dict(), 'best_epoch': best_epoch, 'best_ppl': best_ppl, 'train_loss': train_loss, 'numbers': numbers}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_name",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "args.checkpoint_name",
                            "Attribute"
                        ],
                        [
                            "args.checkpoint_name",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Adam_37": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "optim/adabelief.py": {
        "torch": {
            "no_grad_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_69": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_71": {
                "variable": {
                    "value": "state[exp_avg_var]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "optim/adahessian.py": {
        "torch": {
            "grad_91": {
                "variable": {
                    "value": "hzs",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "grads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[p.grad for p in params]",
                            "ListComp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "zs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.randint_like(p, high=2) * 2.0 - 1.0 for p in params]",
                            "ListComp"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "broadcast_89": {
                "tensor": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "zs",
                            "Name"
                        ]
                    ]
                },
                "src": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_121": {
                "variable": {
                    "value": "p.hess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "p.hess",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_121": {
                "variable": {
                    "value": "p.hess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clone_121": {
                "variable": {
                    "value": "p.hess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_128": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_129": {
                "variable": {
                    "value": "state[exp_hessian_diag_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_like_85": {
                "input": {
                    "value": "p",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.get_params()",
                            "Call"
                        ],
                        [
                            "self.get_params()",
                            "Call"
                        ],
                        [
                            "filter(lambda p: p.grad is not None, self.get_params())",
                            "Call"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "high": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "optim/apollo.py": {
        "torch": {
            "no_grad_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_77": {
                "variable": {
                    "value": "state[exp_avg_grad]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_79": {
                "variable": {
                    "value": "state[approx_hessian]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_81": {
                "variable": {
                    "value": "state[update]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_129": {
                "variable": {
                    "value": "denom",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "B.abs()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "optim/lr_scheduler.py": {
        "torch": {}
    },
    "optim/radamw.py": {
        "torch": {
            "no_grad_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_50": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_51": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "max_76": {
                "input": {
                    "value": "torch.stack(grad_norms)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__50": {
                "parameters": {
                    "value": "parameters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[parameters]",
                            "List"
                        ],
                        [
                            "list(filter(lambda p: p.grad is not None, parameters))",
                            "Call"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "max_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "float(max_norm)",
                            "Call"
                        ]
                    ]
                },
                "norm_type": {
                    "value": "norm_type",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "float(norm_type)",
                            "Call"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "norm_70": {
                "variable": {
                    "value": "grad_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grads",
                            "Name"
                        ]
                    ]
                },
                "p": {
                    "value": "norm_type",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "float(norm_type)",
                            "Call"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_76": {
                "tensors": {
                    "value": "grad_norms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    }
}