{
    "dataset.py": {
        "torch": {}
    },
    "example.py": {
        "torch": {
            "DataLoader_26": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "coco_data_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CocoCaptionsRV(sset='val', transform=prepro_val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "loss.py": {
        "torch": {
            "mm_11": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imgs",
                            "Method Argument"
                        ],
                        [
                            "imgs",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "caps.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_14": {
                "variable": {
                    "value": "cost_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(self.margin - diag).expand_as(scores) + scores",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_18": {
                "variable": {
                    "value": "cost_im",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(self.margin - diag.view(-1, 1)).expand_as(scores) + scores",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_20": {
                "variable": {
                    "value": "diag_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cost_s.diag()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_21": {
                "variable": {
                    "value": "diag_im",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cost_im.diag()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_35": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imgs",
                            "Method Argument"
                        ],
                        [
                            "imgs",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "caps.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_41": {
                "variable": {
                    "value": "(sorted_cap, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(imgs, caps.t())",
                            "Call"
                        ],
                        [
                            "torch.matmul(imgs, caps.t())",
                            "Call"
                        ],
                        [
                            "scores - 2 * torch.diag(scores.diag())",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_42": {
                "variable": {
                    "value": "(sorted_img, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(imgs, caps.t())",
                            "Call"
                        ],
                        [
                            "torch.matmul(imgs, caps.t())",
                            "Call"
                        ],
                        [
                            "scores - 2 * torch.diag(scores.diag())",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_49": {
                "variable": {
                    "value": "neg_cap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(max_c + (self.margin - diag).view(1, -1).expand_as(max_c), min=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_50": {
                "variable": {
                    "value": "neg_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(max_i + (self.margin - diag).view(-1, 1).expand_as(max_i), min=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_67": {
                "variable": {
                    "value": "attention_map_T",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_map",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_49": {
                "input": {
                    "value": "max_c + (self.margin - diag).view(1, -1).expand_as(max_c)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_50": {
                "input": {
                    "value": "max_i + (self.margin - diag).view(-1, 1).expand_as(max_i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_39": {
                "input": {
                    "value": "scores.diag()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_68": {
                "input": {
                    "value": "attention_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_map",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attention_map_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(attention_map, 1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_76": {
                "input": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.sum(torch.sum(mat ** 2, 1), 1) + 1e-10) ** 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_61": {
                "*size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.attention_hop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.attention_hop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_75": {
                "input": {
                    "value": "mat ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Linear_21": {
                "variable": {
                    "value": "self.ws1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.attn_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.ws2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.attn_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.attn_hop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_23": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_24": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_26": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim_out * self.attn_hop",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "attn_value.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_value.size(2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_67": {
                "variable": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ws2(hbar).view(size[0], size[1], -1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(alphas, 1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_72": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alphas.masked_fill(mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "self.softmax(attention_value)",
                            "Call"
                        ],
                        [
                            "attention_value.view(size[0], self.attn_hop, size[1])",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.mul(mask)",
                            "Call"
                        ],
                        [
                            "x.sum(1, keepdim=True).view(batch_size, self.dim_out)",
                            "Call"
                        ],
                        [
                            "input.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "self.rnn(x)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.base_layer[0](x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.base_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(resnet.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "variable": {
                    "value": "self.spaConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.dimemb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.attn_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.attn_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.attn_hop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_93": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_95": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_106": {
                "variable": {
                    "value": "attn_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc2(hbar_img).view(size[0], size[2] * size[3], self.attn_hop)",
                            "Call"
                        ],
                        [
                            "torch.transpose(attn_img, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.softmax(attn_img)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_108": {
                "variable": {
                    "value": "out_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc2(hbar_img).view(size[0], size[2] * size[3], self.attn_hop)",
                            "Call"
                        ],
                        [
                            "torch.transpose(attn_img, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.softmax(attn_img)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base_layer(x)",
                            "Call"
                        ],
                        [
                            "self.spaConv(emb)",
                            "Call"
                        ],
                        [
                            "unfolded_embedding.transpose(1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_124": {
                "variable": {
                    "value": "self.img_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "img_embedding(args)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_125": {
                "variable": {
                    "value": "self.cap_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "SruEmb(args, 620)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_126": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(args.dimemb * args.attn_hop, args.dimemb, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_127": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "in_features": {
                    "value": "args.dimemb * args.attn_hop",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.dimemb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_135": {
                "input": {
                    "value": "x_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.img_emb(imgs)",
                            "Call"
                        ],
                        [
                            "self.dropout(x_imgs)",
                            "Call"
                        ],
                        [
                            "self.fc(x_imgs)",
                            "Call"
                        ],
                        [
                            "x_imgs / torch.norm(x_imgs, 2, dim=1, keepdim=True).expand_as(x_imgs)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_141": {
                "input": {
                    "value": "x_caps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cap_emb(caps, lengths)",
                            "Call"
                        ],
                        [
                            "x_caps / torch.norm(x_caps, 2, dim=1, keepdim=True).expand_as(x_caps)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "train_coco.py": {
        "torch": {}
    },
    "train_flickr.py": {
        "torch": {}
    },
    "utils.py": {
        "torch": {
            "stack_121": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*data)",
                            "Call"
                        ],
                        [
                            "torch.stack(images, 0)",
                            "Call"
                        ],
                        [
                            "zip(*data)",
                            "Call"
                        ],
                        [
                            "torch.stack(images, 0)",
                            "Call"
                        ],
                        [
                            "data",
                            "variable"
                        ],
                        [
                            "torch.stack(images, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequence_124": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "captions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*data)",
                            "Call"
                        ],
                        [
                            "data",
                            "variable"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_sequence_130": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "captions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*data)",
                            "Call"
                        ],
                        [
                            "data",
                            "variable"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_136": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*data)",
                            "Call"
                        ],
                        [
                            "torch.stack(images, 0)",
                            "Call"
                        ],
                        [
                            "zip(*data)",
                            "Call"
                        ],
                        [
                            "torch.stack(images, 0)",
                            "Call"
                        ],
                        [
                            "data",
                            "variable"
                        ],
                        [
                            "torch.stack(images, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_142": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*data)",
                            "Call"
                        ],
                        [
                            "torch.stack(images, 0)",
                            "Call"
                        ],
                        [
                            "zip(*data)",
                            "Call"
                        ],
                        [
                            "torch.stack(images, 0)",
                            "Call"
                        ],
                        [
                            "data",
                            "variable"
                        ],
                        [
                            "torch.stack(images, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_101": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('./weights/', model_name, model_name + '_checkpoint.pth.tar')",
                            "Call"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_159": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4242",
                            "int"
                        ],
                        [
                            "random_seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_160": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4242",
                            "int"
                        ],
                        [
                            "random_seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_166": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('./weights/', model_name, model_name + '_checkpoint.pth.tar')",
                            "Call"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_93": {
                "variable": {
                    "value": "sent_in[i, :620]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "embed[dico[w]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_75": {
                "variable": {
                    "value": "sent_in.data[0, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "embed[dico[w]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_95": {
                "variable": {
                    "value": "sent_in[i, :620]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "embed[dico['UNK']]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_77": {
                "variable": {
                    "value": "sent_in.data[0, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "embed[dico['UNK']]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}