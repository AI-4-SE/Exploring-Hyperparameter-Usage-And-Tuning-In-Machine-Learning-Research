{
    "tensorflow/data/midnet_data.py": {
        "sklearn": {
            "KMeans_175": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pt_num",
                            "variable"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "n_init": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/libs/__init__.py": {
        "tensorflow": {
            "load_op_library_20": {
                "variable": {
                    "value": "_tf_ocnn_module",
                    "type": "variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "os.path.join(_current_path, 'libocnn.so')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RegisterGradient_90": {
                "op_type": {
                    "value": "OctreePad",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RegisterGradient_96": {
                "op_type": {
                    "value": "OctreeDepad",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RegisterGradient_102": {
                "op_type": {
                    "value": "OctreeToCol",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RegisterGradient_109": {
                "op_type": {
                    "value": "ColToOctree",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RegisterGradient_116": {
                "op_type": {
                    "value": "OctreeMaxPool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RegisterGradient_123": {
                "op_type": {
                    "value": "OctreeMaxUnpool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RegisterGradient_130": {
                "op_type": {
                    "value": "OctreeMaskPool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RegisterGradient_137": {
                "op_type": {
                    "value": "OctreeConv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RegisterGradient_145": {
                "op_type": {
                    "value": "OctreeDeconv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RegisterGradient_153": {
                "op_type": {
                    "value": "OctreeAlign",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RegisterGradient_159": {
                "op_type": {
                    "value": "OctreeMask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_167": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "op.inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "RegisterGradient_165": {
                "op_type": {
                    "value": "OctreeGather",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_188": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_pad(data, octree, depth - 1)",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "_octree_max_unpool(data, mask, octree, depth + 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, int(data.shape[1]), -1, 8])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(data, axis=3, keepdims=True)",
                            "Call"
                        ],
                        [
                            "octree_pad(data, octree, depth - 1)",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, [0, 3])",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [channel, -1, height])",
                            "Call"
                        ],
                        [
                            "tf.transpose(data, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.tile(data, [1, 1, 1, 8])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, axis=[0, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(data)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, [0, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, int(data.shape[1]), -1, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_189": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_pad(data, octree, depth - 1)",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "_octree_max_unpool(data, mask, octree, depth + 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, int(data.shape[1]), -1, 8])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(data, axis=3, keepdims=True)",
                            "Call"
                        ],
                        [
                            "octree_pad(data, octree, depth - 1)",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, [0, 3])",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [channel, -1, height])",
                            "Call"
                        ],
                        [
                            "tf.transpose(data, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.tile(data, [1, 1, 1, 8])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, axis=[0, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(data)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, [0, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_202": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[channel, dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_205": {
                "variable": {
                    "value": "col",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "col",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree2col(data, octree, depth, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "tf.reshape(col, [dim, -1])",
                            "Call"
                        ],
                        [
                            "col2octree(deconv, octree, depth, kernel_size, stride)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[dim, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_206": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=[channel, dim], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=[channel, dim], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=[int(data.shape[1]), dim], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=[int(data.shape[1]), dim], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "col",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree2col(data, octree, depth, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "tf.reshape(col, [dim, -1])",
                            "Call"
                        ],
                        [
                            "col2octree(deconv, octree, depth, kernel_size, stride)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_207": {
                "input": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(kernel, col)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(conv, 0), -1)",
                            "Call"
                        ],
                        [
                            "octree_pad(conv, octree, depth - 1, 0)",
                            "Call"
                        ],
                        [
                            "_octree_conv(data, kernel, octree, depth, channel, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "octree_pad(conv, octree, depth - 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_220": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[channel, dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_236": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(data.shape[1]), dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_241": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_pad(data, octree, depth - 1)",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "_octree_max_unpool(data, mask, octree, depth + 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, int(data.shape[1]), -1, 8])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(data, axis=3, keepdims=True)",
                            "Call"
                        ],
                        [
                            "octree_pad(data, octree, depth - 1)",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, [0, 3])",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [channel, -1, height])",
                            "Call"
                        ],
                        [
                            "tf.transpose(data, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.tile(data, [1, 1, 1, 8])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, axis=[0, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(data)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, [0, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_242": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=[channel, dim], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=[channel, dim], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=[int(data.shape[1]), dim], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=[int(data.shape[1]), dim], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_pad(data, octree, depth - 1)",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "_octree_max_unpool(data, mask, octree, depth + 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, int(data.shape[1]), -1, 8])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(data, axis=3, keepdims=True)",
                            "Call"
                        ],
                        [
                            "octree_pad(data, octree, depth - 1)",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, [0, 3])",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [channel, -1, height])",
                            "Call"
                        ],
                        [
                            "tf.transpose(data, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.tile(data, [1, 1, 1, 8])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, axis=[0, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(data)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, [0, 3])",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_243": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(kernel, data, transpose_a=True, transpose_b=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(deconv, [channel, kernel_sdim, -1])",
                            "Call"
                        ],
                        [
                            "_octree_deconv(data, kernel, octree, depth, channel, kernel_size, stride)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[channel, kernel_sdim, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_256": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(data.shape[1]), dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_268": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_pad(data, octree, depth - 1)",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "_octree_max_unpool(data, mask, octree, depth + 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, int(data.shape[1]), -1, 8])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(data, axis=3, keepdims=True)",
                            "Call"
                        ],
                        [
                            "octree_pad(data, octree, depth - 1)",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, [0, 3])",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [channel, -1, height])",
                            "Call"
                        ],
                        [
                            "tf.transpose(data, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.tile(data, [1, 1, 1, 8])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, axis=[0, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(data)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, [0, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[channel, -1, height]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_269": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_pad(data, octree, depth - 1)",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "_octree_max_unpool(data, mask, octree, depth + 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, int(data.shape[1]), -1, 8])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(data, axis=3, keepdims=True)",
                            "Call"
                        ],
                        [
                            "octree_pad(data, octree, depth - 1)",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, [0, 3])",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [channel, -1, height])",
                            "Call"
                        ],
                        [
                            "tf.transpose(data, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.tile(data, [1, 1, 1, 8])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, axis=[0, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(data)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, [0, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_276": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_pad(data, octree, depth - 1)",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "_octree_max_unpool(data, mask, octree, depth + 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, int(data.shape[1]), -1, 8])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(data, axis=3, keepdims=True)",
                            "Call"
                        ],
                        [
                            "octree_pad(data, octree, depth - 1)",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, [0, 3])",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [channel, -1, height])",
                            "Call"
                        ],
                        [
                            "tf.transpose(data, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.tile(data, [1, 1, 1, 8])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, axis=[0, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(data)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, [0, 3])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_278": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_pad(data, octree, depth - 1)",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "_octree_max_unpool(data, mask, octree, depth + 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, int(data.shape[1]), -1, 8])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(data, axis=3, keepdims=True)",
                            "Call"
                        ],
                        [
                            "octree_pad(data, octree, depth - 1)",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, [0, 3])",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [channel, -1, height])",
                            "Call"
                        ],
                        [
                            "tf.transpose(data, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.tile(data, [1, 1, 1, 8])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, axis=[0, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(data)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, [0, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, channel, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_286": {
                "variable": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_property(octree, property_name='index', dtype=tf.int32, depth=depth, channel=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(segment_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_287": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_pad(data, octree, depth - 1)",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "_octree_max_unpool(data, mask, octree, depth + 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, int(data.shape[1]), -1, 8])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(data, axis=3, keepdims=True)",
                            "Call"
                        ],
                        [
                            "octree_pad(data, octree, depth - 1)",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, [0, 3])",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [channel, -1, height])",
                            "Call"
                        ],
                        [
                            "tf.transpose(data, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.tile(data, [1, 1, 1, 8])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, axis=[0, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(data)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, [0, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_288": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_pad(data, octree, depth - 1)",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "_octree_max_unpool(data, mask, octree, depth + 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, int(data.shape[1]), -1, 8])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(data, axis=3, keepdims=True)",
                            "Call"
                        ],
                        [
                            "octree_pad(data, octree, depth - 1)",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, [0, 3])",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [channel, -1, height])",
                            "Call"
                        ],
                        [
                            "tf.transpose(data, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.tile(data, [1, 1, 1, 8])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, axis=[0, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(data)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, [0, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "segment_mean_289": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_pad(data, octree, depth - 1)",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "_octree_max_unpool(data, mask, octree, depth + 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, int(data.shape[1]), -1, 8])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(data, axis=3, keepdims=True)",
                            "Call"
                        ],
                        [
                            "octree_pad(data, octree, depth - 1)",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, [0, 3])",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [channel, -1, height])",
                            "Call"
                        ],
                        [
                            "tf.transpose(data, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.tile(data, [1, 1, 1, 8])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, axis=[0, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(data)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, [0, 3])",
                            "Call"
                        ]
                    ]
                },
                "segment_ids": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_property(octree, property_name='index', dtype=tf.int32, depth=depth, channel=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(segment_ids, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_295": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [0, 1, 1], [1, 0, 1], [1, 1, 0], [1, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_299": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(data, [0, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_300": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(index)[0], tf.shape(feat)[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_301": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(index)[0], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_307": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(data, [1, channel, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.segment_mean(data, segment_ids)",
                            "Call"
                        ],
                        [
                            "tf.zeros([tf.shape(index)[0], tf.shape(feat)[1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "output + weight * octree_gather(data, idxi)",
                            "BinOp"
                        ],
                        [
                            "tf.div(output, norm)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.transpose(output), 0), -1)",
                            "Call"
                        ],
                        [
                            "tf.zeros([tf.shape(xyzi)[0], tf.shape(feat)[1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.div(output, norm)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.transpose(output), 0), -1)",
                            "Call"
                        ],
                        [
                            "tf.zeros([1, tf.shape(data)[1], tf.shape(xyzi)[0], 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.div(output, norm)",
                            "Call"
                        ],
                        [
                            "tf.sparse.sparse_dense_matmul(mat, data, adjoint_a=False, adjoint_b=True)",
                            "Call"
                        ],
                        [
                            "tf.div(output, norm + 1e-10)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.transpose(output), 0), -1)",
                            "Call"
                        ],
                        [
                            "octree_bilinear_v3(xyz, data, octree, depth)",
                            "Call"
                        ],
                        [
                            "octree_gather(data, idx)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([tf.shape(index)[0], 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "norm + weight * tf.expand_dims(tf.cast(idxi > -1, dtype=tf.float32), -1)",
                            "BinOp"
                        ],
                        [
                            "tf.zeros([tf.shape(xyzi)[0], 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([tf.shape(xyzi)[0], 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.sparse.sparse_dense_matmul(mat, tf.ones([h, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_308": {
                "input": {
                    "value": "tf.transpose(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_316": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_320": {
                "variable": {
                    "value": "(xyzf, ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(pts, dtype=tf_uints)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "floor_322": {
                "variable": {
                    "value": "xyzi",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "xyzf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyzf - 0.5",
                            "BinOp"
                        ],
                        [
                            "xyzf - 0.5",
                            "BinOp"
                        ],
                        [
                            "xyzf - 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_325": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(data, [0, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_326": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(xyzi)[0], tf.shape(feat)[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_327": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(xyzi)[0], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_339": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(data, [1, channel, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.segment_mean(data, segment_ids)",
                            "Call"
                        ],
                        [
                            "tf.zeros([tf.shape(index)[0], tf.shape(feat)[1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "output + weight * octree_gather(data, idxi)",
                            "BinOp"
                        ],
                        [
                            "tf.div(output, norm)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.transpose(output), 0), -1)",
                            "Call"
                        ],
                        [
                            "tf.zeros([tf.shape(xyzi)[0], tf.shape(feat)[1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.div(output, norm)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.transpose(output), 0), -1)",
                            "Call"
                        ],
                        [
                            "tf.zeros([1, tf.shape(data)[1], tf.shape(xyzi)[0], 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.div(output, norm)",
                            "Call"
                        ],
                        [
                            "tf.sparse.sparse_dense_matmul(mat, data, adjoint_a=False, adjoint_b=True)",
                            "Call"
                        ],
                        [
                            "tf.div(output, norm + 1e-10)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.transpose(output), 0), -1)",
                            "Call"
                        ],
                        [
                            "octree_bilinear_v3(xyz, data, octree, depth)",
                            "Call"
                        ],
                        [
                            "octree_gather(data, idx)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([tf.shape(index)[0], 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "norm + weight * tf.expand_dims(tf.cast(idxi > -1, dtype=tf.float32), -1)",
                            "BinOp"
                        ],
                        [
                            "tf.zeros([tf.shape(xyzi)[0], 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([tf.shape(xyzi)[0], 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.sparse.sparse_dense_matmul(mat, tf.ones([h, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_341": {
                "input": {
                    "value": "tf.transpose(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_342": {
                "input": {
                    "value": "tf.transpose(frac)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_350": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_354": {
                "variable": {
                    "value": "(xyzf, ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(pts, dtype=tf_uints)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "floor_356": {
                "variable": {
                    "value": "xyzi",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "xyzf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyzf - 0.5",
                            "BinOp"
                        ],
                        [
                            "xyzf - 0.5",
                            "BinOp"
                        ],
                        [
                            "xyzf - 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_359": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, tf.shape(data)[1], tf.shape(xyzi)[0], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_360": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(xyzi)[0], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_374": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(data, [1, channel, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.segment_mean(data, segment_ids)",
                            "Call"
                        ],
                        [
                            "tf.zeros([tf.shape(index)[0], tf.shape(feat)[1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "output + weight * octree_gather(data, idxi)",
                            "BinOp"
                        ],
                        [
                            "tf.div(output, norm)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.transpose(output), 0), -1)",
                            "Call"
                        ],
                        [
                            "tf.zeros([tf.shape(xyzi)[0], tf.shape(feat)[1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.div(output, norm)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.transpose(output), 0), -1)",
                            "Call"
                        ],
                        [
                            "tf.zeros([1, tf.shape(data)[1], tf.shape(xyzi)[0], 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.div(output, norm)",
                            "Call"
                        ],
                        [
                            "tf.sparse.sparse_dense_matmul(mat, data, adjoint_a=False, adjoint_b=True)",
                            "Call"
                        ],
                        [
                            "tf.div(output, norm + 1e-10)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.transpose(output), 0), -1)",
                            "Call"
                        ],
                        [
                            "octree_bilinear_v3(xyz, data, octree, depth)",
                            "Call"
                        ],
                        [
                            "octree_gather(data, idx)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([tf.shape(index)[0], 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "norm + weight * tf.expand_dims(tf.cast(idxi > -1, dtype=tf.float32), -1)",
                            "BinOp"
                        ],
                        [
                            "tf.zeros([tf.shape(xyzi)[0], 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([tf.shape(xyzi)[0], 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.sparse.sparse_dense_matmul(mat, tf.ones([h, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_383": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_395": {
                "variable": {
                    "value": "(xyzf, ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(pts, dtype=tf_uints)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "floor_397": {
                "variable": {
                    "value": "xyzi",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "xyzf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyzf - 0.5",
                            "BinOp"
                        ],
                        [
                            "xyzf - 0.5",
                            "BinOp"
                        ],
                        [
                            "xyzf - 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_400": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.concat([xyzi, ids], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_uints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.uint16",
                            "Attribute"
                        ],
                        [
                            "tf.uint8",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_401": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "octree_encode_key(key)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_intk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.int64",
                            "Attribute"
                        ],
                        [
                            "tf.int32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_405": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(key, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_uintk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.uint64",
                            "Attribute"
                        ],
                        [
                            "tf.uint32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "boolean_mask_409": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_search_key(key, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(idx, flgs)",
                            "Call"
                        ],
                        [
                            "octree_search_key(key, octree, depth)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "flgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx > -1",
                            "Compare"
                        ]
                    ]
                }
            },
            "reshape_412": {
                "variable": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(npt)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_413": {
                "variable": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(ids, [1, 8])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "boolean_mask_414": {
                "variable": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.range(npt), [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(ids, [1, 8]), [-1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(ids, flgs)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "flgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx > -1",
                            "Compare"
                        ]
                    ]
                }
            },
            "abs_417": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.reduce_prod(frac, axis=2), [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "boolean_mask_418": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(tf.reduce_prod(mask[i, :] - fracs, axis=1, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.abs(tf.reduce_prod(maskc - frac, axis=1, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.abs(tf.reduce_prod(maskc - frac, axis=1, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.abs(tf.reshape(tf.reduce_prod(frac, axis=2), [-1]))",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(weight, flgs)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "flgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx > -1",
                            "Compare"
                        ]
                    ]
                }
            },
            "concat_420": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(ids, 1), tf.expand_dims(idx, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_421": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.expand_dims(ids, 1), tf.expand_dims(idx, 1)], 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(indices, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_422": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_pad(data, octree, depth - 1)",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "_octree_max_unpool(data, mask, octree, depth + 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, int(data.shape[1]), -1, 8])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(data, axis=3, keepdims=True)",
                            "Call"
                        ],
                        [
                            "octree_pad(data, octree, depth - 1)",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, [0, 3])",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [channel, -1, height])",
                            "Call"
                        ],
                        [
                            "tf.transpose(data, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.tile(data, [1, 1, 1, 8])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, axis=[0, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(data)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, [0, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SparseTensor_424": {
                "variable": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.expand_dims(ids, 1), tf.expand_dims(idx, 1)], 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(indices, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(tf.reduce_prod(mask[i, :] - fracs, axis=1, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.abs(tf.reduce_prod(maskc - frac, axis=1, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.abs(tf.reduce_prod(maskc - frac, axis=1, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.abs(tf.reshape(tf.reduce_prod(frac, axis=2), [-1]))",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(weight, flgs)",
                            "Call"
                        ]
                    ]
                },
                "dense_shape": {
                    "value": "[npt, h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_dense_matmul_444": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "sp_a": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.SparseTensor(indices=indices, values=weight, dense_shape=[npt, h])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_pad(data, octree, depth - 1)",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "_octree_max_unpool(data, mask, octree, depth + 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, int(data.shape[1]), -1, 8])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(data, axis=3, keepdims=True)",
                            "Call"
                        ],
                        [
                            "octree_pad(data, octree, depth - 1)",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, [0, 3])",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [channel, -1, height])",
                            "Call"
                        ],
                        [
                            "tf.transpose(data, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.tile(data, [1, 1, 1, 8])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, axis=[0, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(data)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, [0, 3])",
                            "Call"
                        ]
                    ]
                },
                "adjoint_a": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "adjoint_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sparse_dense_matmul_445": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "sp_a": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.SparseTensor(indices=indices, values=weight, dense_shape=[npt, h])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.ones([h, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_446": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(data, [1, channel, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.segment_mean(data, segment_ids)",
                            "Call"
                        ],
                        [
                            "tf.zeros([tf.shape(index)[0], tf.shape(feat)[1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "output + weight * octree_gather(data, idxi)",
                            "BinOp"
                        ],
                        [
                            "tf.div(output, norm)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.transpose(output), 0), -1)",
                            "Call"
                        ],
                        [
                            "tf.zeros([tf.shape(xyzi)[0], tf.shape(feat)[1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.div(output, norm)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.transpose(output), 0), -1)",
                            "Call"
                        ],
                        [
                            "tf.zeros([1, tf.shape(data)[1], tf.shape(xyzi)[0], 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.div(output, norm)",
                            "Call"
                        ],
                        [
                            "tf.sparse.sparse_dense_matmul(mat, data, adjoint_a=False, adjoint_b=True)",
                            "Call"
                        ],
                        [
                            "tf.div(output, norm + 1e-10)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.transpose(output), 0), -1)",
                            "Call"
                        ],
                        [
                            "octree_bilinear_v3(xyz, data, octree, depth)",
                            "Call"
                        ],
                        [
                            "octree_gather(data, idx)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "norm + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_447": {
                "input": {
                    "value": "tf.transpose(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_455": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_property(octree, property_name='xyz', depth=target_depth, channel=1, dtype=tf_uintk)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xyz, [-1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(xyz, mask)",
                            "Call"
                        ],
                        [
                            "tf.cast(octree_decode_key(xyz), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "xyz * tf.constant([scale, scale, scale, 1.0], dtype=tf.float32)",
                            "BinOp"
                        ],
                        [
                            "octree_property(octree, property_name='xyz', dtype=tf_uintk, depth=depth, channel=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xyz, [-1])",
                            "Call"
                        ],
                        [
                            "octree_decode_key(xyz)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_458": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "octree_decode_key(xyz)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_475": {
                "variable": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(pts, dtype=tf_uints)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf_uints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.uint16",
                            "Attribute"
                        ],
                        [
                            "tf.uint8",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_476": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "octree_encode_key(pts)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_494": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_property(octree, property_name='feature', dtype=tf.float32, depth=depth, channel=channel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [1, channel, -1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, channel, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_502": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_property(octree, property_name='xyz', depth=target_depth, channel=1, dtype=tf_uintk)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xyz, [-1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(xyz, mask)",
                            "Call"
                        ],
                        [
                            "tf.cast(octree_decode_key(xyz), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "xyz * tf.constant([scale, scale, scale, 1.0], dtype=tf.float32)",
                            "BinOp"
                        ],
                        [
                            "octree_property(octree, property_name='xyz', dtype=tf_uintk, depth=depth, channel=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xyz, [-1])",
                            "Call"
                        ],
                        [
                            "octree_decode_key(xyz)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_512": {
                "variable": {
                    "value": "child",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "child",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_property(octree, property_name='child', dtype=tf.int32, depth=depth, channel=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(child, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_520": {
                "variable": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_property(octree, property_name='split', dtype=tf.float32, depth=depth, channel=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(split, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_173": {
                "name_or_scope": {
                    "value": "octree_max_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_180": {
                "name_or_scope": {
                    "value": "octree_max_unpool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_187": {
                "name_or_scope": {
                    "value": "octree_avg_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "octree_conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_218": {
                "name_or_scope": {
                    "value": "octree_conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_233": {
                "name_or_scope": {
                    "value": "octree_deconv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_253": {
                "name_or_scope": {
                    "value": "octree_deconv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_267": {
                "name_or_scope": {
                    "value": "octree_full_voxel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_274": {
                "name_or_scope": {
                    "value": "octree_tile",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_283": {
                "name_or_scope": {
                    "value": "octree_global_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_294": {
                "name_or_scope": {
                    "value": "octree_bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_304": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_prod(mask[i, :] - fracs, axis=1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_315": {
                "name_or_scope": {
                    "value": "octree_bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_333": {
                "variable": {
                    "value": "xyzm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.concat([xyzm, ids], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_uints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.uint16",
                            "Attribute"
                        ],
                        [
                            "tf.uint8",
                            "Attribute"
                        ]
                    ]
                }
            },
            "abs_336": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_prod(maskc - frac, axis=1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_349": {
                "name_or_scope": {
                    "value": "octree_bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_366": {
                "variable": {
                    "value": "xyzm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.concat([xyzm, ids], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_uints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.uint16",
                            "Attribute"
                        ],
                        [
                            "tf.uint8",
                            "Attribute"
                        ]
                    ]
                }
            },
            "abs_370": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_prod(maskc - frac, axis=1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_382": {
                "name_or_scope": {
                    "value": "octree_linear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_387": {
                "variable": {
                    "value": "masku",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 4294967296, 65536, 4295032832, 1, 4294967297, 65537, 4295032833]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_390": {
                "variable": {
                    "value": "masku",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 65536, 256, 65792, 1, 65537, 257, 65793]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_452": {
                "name": {
                    "value": "Octree_bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "boolean_mask_457": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_property(octree, property_name='xyz', depth=target_depth, channel=1, dtype=tf_uintk)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xyz, [-1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(xyz, mask)",
                            "Call"
                        ],
                        [
                            "tf.cast(octree_decode_key(xyz), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "xyz * tf.constant([scale, scale, scale, 1.0], dtype=tf.float32)",
                            "BinOp"
                        ],
                        [
                            "octree_property(octree, property_name='xyz', dtype=tf_uintk, depth=depth, channel=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xyz, [-1])",
                            "Call"
                        ],
                        [
                            "octree_decode_key(xyz)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [0, 1, 1], [1, 0, 1], [1, 1, 0], [1, 1, 1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_462": {
                "value": {
                    "value": "[0.5, 0.5, 0.5, 0.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_463": {
                "value": {
                    "value": "[scale, scale, scale, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_472": {
                "name_or_scope": {
                    "value": "octree_nearest_interp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_491": {
                "name": {
                    "value": "octree_signal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_499": {
                "name": {
                    "value": "octree_xyz",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_509": {
                "name": {
                    "value": "octree_child",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_517": {
                "name": {
                    "value": "octree_split",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_299": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_pad(data, octree, depth - 1)",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "_octree_max_unpool(data, mask, octree, depth + 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, int(data.shape[1]), -1, 8])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(data, axis=3, keepdims=True)",
                            "Call"
                        ],
                        [
                            "octree_pad(data, octree, depth - 1)",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, [0, 3])",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [channel, -1, height])",
                            "Call"
                        ],
                        [
                            "tf.transpose(data, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.tile(data, [1, 1, 1, 8])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, axis=[0, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(data)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, [0, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_325": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_pad(data, octree, depth - 1)",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "_octree_max_unpool(data, mask, octree, depth + 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, int(data.shape[1]), -1, 8])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(data, axis=3, keepdims=True)",
                            "Call"
                        ],
                        [
                            "octree_pad(data, octree, depth - 1)",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, [0, 3])",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [channel, -1, height])",
                            "Call"
                        ],
                        [
                            "tf.transpose(data, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.tile(data, [1, 1, 1, 8])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, axis=[0, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(data)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, [0, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_400": {
                "values": {
                    "value": "[xyzi, ids]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_404": {
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.concat([xyzi, ids], axis=1), dtype=tf_uints)",
                            "Call"
                        ],
                        [
                            "tf.cast(octree_encode_key(key), dtype=tf_intk)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(key, 1) + masku",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.reshape(key, [-1]), dtype=tf_uintk)",
                            "Call"
                        ],
                        [
                            "tf.reshape(octree_encode_key(pts), [-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_405": {
                "tensor": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.concat([xyzi, ids], axis=1), dtype=tf_uints)",
                            "Call"
                        ],
                        [
                            "tf.cast(octree_encode_key(key), dtype=tf_intk)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(key, 1) + masku",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.reshape(key, [-1]), dtype=tf_uintk)",
                            "Call"
                        ],
                        [
                            "tf.reshape(octree_encode_key(pts), [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_411": {
                "input": {
                    "value": "xyzi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.floor(xyzf)",
                            "Call"
                        ],
                        [
                            "tf.floor(xyzf)",
                            "Call"
                        ],
                        [
                            "tf.floor(xyzf)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_413": {
                "input": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.range(npt), [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(ids, [1, 8]), [-1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(ids, flgs)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_416": {
                "input": {
                    "value": "frac",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyzf - xyzi",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.transpose(frac), 0), -1)",
                            "Call"
                        ],
                        [
                            "xyzf - xyzi",
                            "BinOp"
                        ],
                        [
                            "xyzf - xyzi",
                            "BinOp"
                        ],
                        [
                            "maskc - tf.expand_dims(frac, axis=1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_417": {
                "tensor": {
                    "value": "tf.reduce_prod(frac, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_423": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_pad(data, octree, depth - 1)",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "_octree_max_unpool(data, mask, octree, depth + 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, int(data.shape[1]), -1, 8])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(data, axis=3, keepdims=True)",
                            "Call"
                        ],
                        [
                            "octree_pad(data, octree, depth - 1)",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, [0, 3])",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [channel, -1, height])",
                            "Call"
                        ],
                        [
                            "tf.transpose(data, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.tile(data, [1, 1, 1, 8])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, axis=[0, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(data)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(data, [0, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_445": {
                "shape": {
                    "value": "[h, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_prod_304": {
                "input_tensor": {
                    "value": "mask[i, :] - fracs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_305": {
                "params": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.squeeze(data, [0, 3]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(data, [0, 3]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idxi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "index[:, i]",
                            "Subscript"
                        ],
                        [
                            "octree_search_key(octree_encode_key(xyzm), octree, depth, is_xyz=True)",
                            "Call"
                        ],
                        [
                            "octree_search_key(octree_encode_key(xyzm), octree, depth, is_xyz=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_306": {
                "input": {
                    "value": "tf.cast(idxi > -1, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_308": {
                "a": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(data, [1, channel, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.segment_mean(data, segment_ids)",
                            "Call"
                        ],
                        [
                            "tf.zeros([tf.shape(index)[0], tf.shape(feat)[1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "output + weight * octree_gather(data, idxi)",
                            "BinOp"
                        ],
                        [
                            "tf.div(output, norm)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.transpose(output), 0), -1)",
                            "Call"
                        ],
                        [
                            "tf.zeros([tf.shape(xyzi)[0], tf.shape(feat)[1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.div(output, norm)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.transpose(output), 0), -1)",
                            "Call"
                        ],
                        [
                            "tf.zeros([1, tf.shape(data)[1], tf.shape(xyzi)[0], 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.div(output, norm)",
                            "Call"
                        ],
                        [
                            "tf.sparse.sparse_dense_matmul(mat, data, adjoint_a=False, adjoint_b=True)",
                            "Call"
                        ],
                        [
                            "tf.div(output, norm + 1e-10)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.transpose(output), 0), -1)",
                            "Call"
                        ],
                        [
                            "octree_bilinear_v3(xyz, data, octree, depth)",
                            "Call"
                        ],
                        [
                            "octree_gather(data, idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_333": {
                "values": {
                    "value": "[xyzm, ids]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_prod_336": {
                "input_tensor": {
                    "value": "maskc - frac",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_337": {
                "params": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.squeeze(data, [0, 3]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(data, [0, 3]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idxi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "index[:, i]",
                            "Subscript"
                        ],
                        [
                            "octree_search_key(octree_encode_key(xyzm), octree, depth, is_xyz=True)",
                            "Call"
                        ],
                        [
                            "octree_search_key(octree_encode_key(xyzm), octree, depth, is_xyz=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_338": {
                "input": {
                    "value": "tf.cast(idxi > -1, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_341": {
                "a": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(data, [1, channel, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.segment_mean(data, segment_ids)",
                            "Call"
                        ],
                        [
                            "tf.zeros([tf.shape(index)[0], tf.shape(feat)[1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "output + weight * octree_gather(data, idxi)",
                            "BinOp"
                        ],
                        [
                            "tf.div(output, norm)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.transpose(output), 0), -1)",
                            "Call"
                        ],
                        [
                            "tf.zeros([tf.shape(xyzi)[0], tf.shape(feat)[1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.div(output, norm)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.transpose(output), 0), -1)",
                            "Call"
                        ],
                        [
                            "tf.zeros([1, tf.shape(data)[1], tf.shape(xyzi)[0], 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.div(output, norm)",
                            "Call"
                        ],
                        [
                            "tf.sparse.sparse_dense_matmul(mat, data, adjoint_a=False, adjoint_b=True)",
                            "Call"
                        ],
                        [
                            "tf.div(output, norm + 1e-10)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.transpose(output), 0), -1)",
                            "Call"
                        ],
                        [
                            "octree_bilinear_v3(xyz, data, octree, depth)",
                            "Call"
                        ],
                        [
                            "octree_gather(data, idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_342": {
                "a": {
                    "value": "frac",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyzf - xyzi",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.transpose(frac), 0), -1)",
                            "Call"
                        ],
                        [
                            "xyzf - xyzi",
                            "BinOp"
                        ],
                        [
                            "xyzf - xyzi",
                            "BinOp"
                        ],
                        [
                            "maskc - tf.expand_dims(frac, axis=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_366": {
                "values": {
                    "value": "[xyzm, ids]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_prod_370": {
                "input_tensor": {
                    "value": "maskc - frac",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_373": {
                "input": {
                    "value": "tf.cast(idxi > -1, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_prod_417": {
                "input_tensor": {
                    "value": "frac",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyzf - xyzi",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.transpose(frac), 0), -1)",
                            "Call"
                        ],
                        [
                            "xyzf - xyzi",
                            "BinOp"
                        ],
                        [
                            "xyzf - xyzi",
                            "BinOp"
                        ],
                        [
                            "maskc - tf.expand_dims(frac, axis=1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_420": {
                "input": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_search_key(key, octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(idx, flgs)",
                            "Call"
                        ],
                        [
                            "octree_search_key(key, octree, depth)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_447": {
                "a": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(data, [1, channel, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.segment_mean(data, segment_ids)",
                            "Call"
                        ],
                        [
                            "tf.zeros([tf.shape(index)[0], tf.shape(feat)[1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "output + weight * octree_gather(data, idxi)",
                            "BinOp"
                        ],
                        [
                            "tf.div(output, norm)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.transpose(output), 0), -1)",
                            "Call"
                        ],
                        [
                            "tf.zeros([tf.shape(xyzi)[0], tf.shape(feat)[1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.div(output, norm)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.transpose(output), 0), -1)",
                            "Call"
                        ],
                        [
                            "tf.zeros([1, tf.shape(data)[1], tf.shape(xyzi)[0], 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.div(output, norm)",
                            "Call"
                        ],
                        [
                            "tf.sparse.sparse_dense_matmul(mat, data, adjoint_a=False, adjoint_b=True)",
                            "Call"
                        ],
                        [
                            "tf.div(output, norm + 1e-10)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.transpose(output), 0), -1)",
                            "Call"
                        ],
                        [
                            "octree_bilinear_v3(xyz, data, octree, depth)",
                            "Call"
                        ],
                        [
                            "octree_gather(data, idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_300": {
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.squeeze(data, [0, 3]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(data, [0, 3]))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_301": {
                "input": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_306": {
                "x": {
                    "value": "idxi > -1",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_326": {
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.squeeze(data, [0, 3]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(data, [0, 3]))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_327": {
                "input": {
                    "value": "xyzi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.floor(xyzf)",
                            "Call"
                        ],
                        [
                            "tf.floor(xyzf)",
                            "Call"
                        ],
                        [
                            "tf.floor(xyzf)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_338": {
                "x": {
                    "value": "idxi > -1",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_359": {
                "input": {
                    "value": "xyzi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.floor(xyzf)",
                            "Call"
                        ],
                        [
                            "tf.floor(xyzf)",
                            "Call"
                        ],
                        [
                            "tf.floor(xyzf)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_360": {
                "input": {
                    "value": "xyzi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.floor(xyzf)",
                            "Call"
                        ],
                        [
                            "tf.floor(xyzf)",
                            "Call"
                        ],
                        [
                            "tf.floor(xyzf)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_373": {
                "x": {
                    "value": "idxi > -1",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/libs/build.py": {
        "tensorflow": {
            "get_compile_flags_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_link_flags_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/script/dataset.py": {
        "tensorflow": {
            "parse_single_example_16": {
                "variable": {
                    "value": "parsed",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_79": {
                "variable": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0, 0, 0]",
                            "List"
                        ],
                        [
                            "tf.stack(angle)",
                            "Call"
                        ],
                        [
                            "[20",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "uniform_82": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": []
                },
                "maxval": {
                    "value": "maxval",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_87": {
                "variable": {
                    "value": "jitter",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": []
                },
                "maxval": {
                    "value": "maxval",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_90": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": []
                },
                "maxval": {
                    "value": "maxval",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_92": {
                "variable": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": []
                },
                "maxval": {
                    "value": "maxval",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_97": {
                "variable": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.random.uniform(shape=[], minval=0, maxval=s) for s in self.stddev]",
                            "ListComp"
                        ],
                        [
                            "tf.stack(stddev)",
                            "Call"
                        ],
                        [
                            "[0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TFRecordDataset_131": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "record_names",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "take_131": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "take",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "repeat_131": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TFRecordDataset_149": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "record_names",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "take_149": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "take",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "repeat_149": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FixedLenFeature_12": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_13": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_77": {
                "variable": {
                    "value": "rnd",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "-rot_num",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "rot_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.angle[i] // interval",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_84": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[scale[0]] * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_99": {
                "value": {
                    "value": "[0.0, 0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_117": {
                "name": {
                    "value": "points_dataset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_145": {
                "name": {
                    "value": "octree_dataset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "uniform_96": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_78": {
                "x": {
                    "value": "rnd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(shape=[], minval=-rot_num, maxval=rot_num, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/script/feature.py": {
        "tensorflow": {
            "reshape_34": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensors['fc1']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(fc1, [channel1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[channel1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_38": {
                "variable": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensors['fc2']",
                            "Subscript"
                        ],
                        [
                            "tf.nn.l2_normalize(fc2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc2, [channel2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_40": {
                "variable": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensors['fc2']",
                            "Subscript"
                        ],
                        [
                            "tf.nn.l2_normalize(fc2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc2, [channel2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[channel2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_45": {
                "variable": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensors['logit_seg']",
                            "Subscript"
                        ],
                        [
                            "tf.nn.l2_normalize(seg, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_75": {
                "variable": {
                    "value": "tf_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_76": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_verbosity_11": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_23": {
                "variable": {
                    "value": "child",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "child",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_property(octree, property_name='child', dtype=tf.int32, depth=FLAGS.DATA.test.depth, channel=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(child, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_20": {
                "name_or_scope": {
                    "value": "signal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_78": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_79": {
                "logdir": {
                    "value": "FLAGSS.logdir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/script/learning_rate.py": {
        "tensorflow": {
            "floordiv_16": {
                "variable": {
                    "value": "epoch",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(global_step, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.flags.step_size[0]",
                            "Subscript"
                        ],
                        [
                            "list(self.flags.step_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_17": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "epoch / max_epoch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "piecewise_constant_37": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "boundaries": {
                    "value": "steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step_size",
                            "variable"
                        ]
                    ]
                },
                "values": {
                    "value": "lr_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.flags.gamma ** i * self.flags.learning_rate for i in range(0, 6)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "variable_scope_9": {
                "name_or_scope": {
                    "value": "cos_lr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "step_lr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_16": {
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_18": {
                "x": {
                    "value": "pi * val",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/script/mid_loss.py": {
        "tensorflow": {
            "get_variable_11": {
                "variable": {
                    "value": "self.memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "memory",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.flags.inst_num, channel]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_normalize_18": {
                "variable": {
                    "value": "self.feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feature",
                            "Attribute"
                        ],
                        [
                            "tf.unsorted_segment_mean(feature, point_id, seg_num * batch_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(feature, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(feature, [batch_size, seg_num, -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_19": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_a": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "div_20": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.feature, self.memory, transpose_a=False, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.div(logit, self.flags.sigma)",
                            "Call"
                        ],
                        [
                            "tf.concat(out, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.div(logit, self.flags.sigma)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.flags.sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_43": {
                "variable": {
                    "value": "one_hot_train",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label_train",
                    "type": "variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "top_k_44": {
                "variable": {
                    "value": "(top_k_values, top_k_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.feature, self.memory, transpose_a=False, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.div(logit, self.flags.sigma)",
                            "Call"
                        ],
                        [
                            "tf.concat(out, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.div(logit, self.flags.sigma)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_45": {
                "variable": {
                    "value": "top_k_label",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "one_hot_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(label_train, depth=class_num)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_k_indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_46": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.exp(top_k_values)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_47": {
                "variable": {
                    "value": "weighted_label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "top_k_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(one_hot_train, top_k_indices)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.memory, self.shape_id)",
                            "Call"
                        ],
                        [
                            "self.feature * momentum + weight * (1 - momentum)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(weight, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.exp(top_k_values), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.gather(self.memory, self.shape_id)",
                            "Call"
                        ],
                        [
                            "feature * momentum + weight * (1 - momentum)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(weight, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_48": {
                "variable": {
                    "value": "sum_up_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weighted_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(top_k_label, weight)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_49": {
                "variable": {
                    "value": "label_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sum_up_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(weighted_label, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_61": {
                "variable": {
                    "value": "self.memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "memory",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.flags.inst_num, self.flags.seg_num, channel]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_normalize_72": {
                "variable": {
                    "value": "self.feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feature",
                            "Attribute"
                        ],
                        [
                            "tf.unsorted_segment_mean(feature, point_id, seg_num * batch_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(feature, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(feature, [batch_size, seg_num, -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "segment_sum_75": {
                "variable": {
                    "value": "node_nums",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.ones_like(obj_segment)",
                    "type": "Call",
                    "possible_values": []
                },
                "segment_ids": {
                    "value": "obj_segment",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_76": {
                "variable": {
                    "value": "node_nums",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "node_nums",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.segment_sum(tf.ones_like(obj_segment), obj_segment)",
                            "Call"
                        ],
                        [
                            "tf.reshape(node_nums, [self.batch_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_77": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "node_nums",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.segment_sum(tf.ones_like(obj_segment), obj_segment)",
                            "Call"
                        ],
                        [
                            "tf.reshape(node_nums, [self.batch_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_86": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] * self.batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_87": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.feature, self.memory, transpose_a=False, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.div(logit, self.flags.sigma)",
                            "Call"
                        ],
                        [
                            "tf.concat(out, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.div(logit, self.flags.sigma)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.flags.sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_10": {
                "name_or_scope": {
                    "value": "shape_memory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_16": {
                "name_or_scope": {
                    "value": "shape_cls",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_25": {
                "name": {
                    "value": "shape_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_32": {
                "control_inputs": {
                    "value": "[solver]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_35": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.shape_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_37": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.memory, self.shape_id)",
                            "Call"
                        ],
                        [
                            "self.feature * momentum + weight * (1 - momentum)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(weight, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.exp(top_k_values), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.gather(self.memory, self.shape_id)",
                            "Call"
                        ],
                        [
                            "feature * momentum + weight * (1 - momentum)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(weight, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scatter_update_38": {
                "variable": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.shape_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "updates": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.memory, self.shape_id)",
                            "Call"
                        ],
                        [
                            "self.feature * momentum + weight * (1 - momentum)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(weight, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.exp(top_k_values), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.gather(self.memory, self.shape_id)",
                            "Call"
                        ],
                        [
                            "feature * momentum + weight * (1 - momentum)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(weight, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_42": {
                "name": {
                    "value": "knn_accu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "point_memory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_70": {
                "name_or_scope": {
                    "value": "point_cls",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_82": {
                "variable": {
                    "value": "out[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "a": {
                    "value": "features[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "self.memory[shape_id[i], :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "transpose_a": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "name_scope_93": {
                "name": {
                    "value": "point_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_104": {
                "control_inputs": {
                    "value": "[solver]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsorted_segment_mean_114": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feature",
                            "Attribute"
                        ],
                        [
                            "tf.unsorted_segment_mean(feature, point_id, seg_num * batch_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(feature, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(feature, [batch_size, seg_num, -1])",
                            "Call"
                        ]
                    ]
                },
                "segment_ids": {
                    "value": "point_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_id + self.obj_segment * seg_num",
                            "BinOp"
                        ]
                    ]
                },
                "num_segments": {
                    "value": "seg_num * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_normalize_115": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feature",
                            "Attribute"
                        ],
                        [
                            "tf.unsorted_segment_mean(feature, point_id, seg_num * batch_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(feature, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(feature, [batch_size, seg_num, -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feature",
                            "Attribute"
                        ],
                        [
                            "tf.unsorted_segment_mean(feature, point_id, seg_num * batch_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(feature, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(feature, [batch_size, seg_num, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, seg_num, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_119": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.shape_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_121": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.memory, self.shape_id)",
                            "Call"
                        ],
                        [
                            "self.feature * momentum + weight * (1 - momentum)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(weight, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.exp(top_k_values), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.gather(self.memory, self.shape_id)",
                            "Call"
                        ],
                        [
                            "feature * momentum + weight * (1 - momentum)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(weight, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scatter_update_122": {
                "variable": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.shape_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "updates": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.memory, self.shape_id)",
                            "Call"
                        ],
                        [
                            "self.feature * momentum + weight * (1 - momentum)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(weight, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.exp(top_k_values), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.gather(self.memory, self.shape_id)",
                            "Call"
                        ],
                        [
                            "feature * momentum + weight * (1 - momentum)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(weight, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_33": {
                "name": {
                    "value": "update_shape_memory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_46": {
                "x": {
                    "value": "top_k_values",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_75": {
                "input": {
                    "value": "obj_segment",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_105": {
                "name": {
                    "value": "update_point_memory",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/script/network_ae.py": {
        "tensorflow": {
            "variable_scope_13": {
                "name_or_scope": {
                    "value": "ocnn_encoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_17": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_property(octree, property_name='feature', dtype=tf.float32, depth=depth, channel=flags.channel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, flags.channel, -1, 1])",
                            "Call"
                        ],
                        [
                            "octree_conv_bn_relu(data, octree, d, channel[d], training)",
                            "Call"
                        ],
                        [
                            "downsample(data, channel[1], training)",
                            "Call"
                        ],
                        [
                            "code",
                            "variable"
                        ],
                        [
                            "upsample(data, channel[1], training)",
                            "Call"
                        ],
                        [
                            "octree_upsample(data, octree, d - 1, channel[d], training)",
                            "Call"
                        ],
                        [
                            "octree_conv_bn_relu(data, octree, d, channel[d], training)",
                            "Call"
                        ],
                        [
                            "code",
                            "variable"
                        ],
                        [
                            "upsample(data, channel[1], training)",
                            "Call"
                        ],
                        [
                            "octree_upsample(data, octree, d - 1, channel[d], training)",
                            "Call"
                        ],
                        [
                            "octree_conv_bn_relu(data, octree, d, channel[d], training)",
                            "Call"
                        ],
                        [
                            "octree_property(octree, property_name='feature', dtype=tf.float32, depth=depth, channel=flags.channel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, flags.channel, -1, 1])",
                            "Call"
                        ],
                        [
                            "octree_conv_bn_relu(data, octree, depth, channels[depth], training)",
                            "Call"
                        ],
                        [
                            "octree_resblock(data, octree, d, channels[d], 1, training)",
                            "Call"
                        ],
                        [
                            "octree_conv_bn_relu(data, octree, d, channels[d - 1], training, stride=2, kernel_size=[2])",
                            "Call"
                        ],
                        [
                            "code",
                            "variable"
                        ],
                        [
                            "octree_resblock(data, octree, d, channels[d], 1, training)",
                            "Call"
                        ],
                        [
                            "octree_deconv_bn_relu(data, octree, d, channels[d - 1], training, stride=2, kernel_size=[2])",
                            "Call"
                        ],
                        [
                            "code",
                            "variable"
                        ],
                        [
                            "octree_resblock(data, octree, d, channels[d], 1, training)",
                            "Call"
                        ],
                        [
                            "octree_deconv_bn_relu(data, octree, d, channels[d - 1], training, stride=2, kernel_size=[2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, flags.channel, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_29": {
                "variable": {
                    "value": "code",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "code",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d_bn(data, channel[1], kernel_size=1, stride=1, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(code)",
                            "Call"
                        ],
                        [
                            "octree_conv1x1_bn(data, flags.nout, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(code)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_36": {
                "name_or_scope": {
                    "value": "ocnn_decoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_47": {
                "variable": {
                    "value": "signal_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_property(octree, property_name='feature', dtype=tf.float32, depth=depth, channel=flags.channel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal_gt, [1, flags.channel, -1, 1])",
                            "Call"
                        ],
                        [
                            "octree_property(octree, property_name='feature', dtype=tf.float32, depth=depth, channel=flags.channel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal_gt, [1, flags.channel, -1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, flags.channel, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_78": {
                "name_or_scope": {
                    "value": "ocnn_decoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_122": {
                "name_or_scope": {
                    "value": "ocnn_encoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_126": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_property(octree, property_name='feature', dtype=tf.float32, depth=depth, channel=flags.channel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, flags.channel, -1, 1])",
                            "Call"
                        ],
                        [
                            "octree_conv_bn_relu(data, octree, d, channel[d], training)",
                            "Call"
                        ],
                        [
                            "downsample(data, channel[1], training)",
                            "Call"
                        ],
                        [
                            "code",
                            "variable"
                        ],
                        [
                            "upsample(data, channel[1], training)",
                            "Call"
                        ],
                        [
                            "octree_upsample(data, octree, d - 1, channel[d], training)",
                            "Call"
                        ],
                        [
                            "octree_conv_bn_relu(data, octree, d, channel[d], training)",
                            "Call"
                        ],
                        [
                            "code",
                            "variable"
                        ],
                        [
                            "upsample(data, channel[1], training)",
                            "Call"
                        ],
                        [
                            "octree_upsample(data, octree, d - 1, channel[d], training)",
                            "Call"
                        ],
                        [
                            "octree_conv_bn_relu(data, octree, d, channel[d], training)",
                            "Call"
                        ],
                        [
                            "octree_property(octree, property_name='feature', dtype=tf.float32, depth=depth, channel=flags.channel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, flags.channel, -1, 1])",
                            "Call"
                        ],
                        [
                            "octree_conv_bn_relu(data, octree, depth, channels[depth], training)",
                            "Call"
                        ],
                        [
                            "octree_resblock(data, octree, d, channels[d], 1, training)",
                            "Call"
                        ],
                        [
                            "octree_conv_bn_relu(data, octree, d, channels[d - 1], training, stride=2, kernel_size=[2])",
                            "Call"
                        ],
                        [
                            "code",
                            "variable"
                        ],
                        [
                            "octree_resblock(data, octree, d, channels[d], 1, training)",
                            "Call"
                        ],
                        [
                            "octree_deconv_bn_relu(data, octree, d, channels[d - 1], training, stride=2, kernel_size=[2])",
                            "Call"
                        ],
                        [
                            "code",
                            "variable"
                        ],
                        [
                            "octree_resblock(data, octree, d, channels[d], 1, training)",
                            "Call"
                        ],
                        [
                            "octree_deconv_bn_relu(data, octree, d, channels[d - 1], training, stride=2, kernel_size=[2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, flags.channel, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_142": {
                "variable": {
                    "value": "code",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "code",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d_bn(data, channel[1], kernel_size=1, stride=1, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(code)",
                            "Call"
                        ],
                        [
                            "octree_conv1x1_bn(data, flags.nout, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(code)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "ocnn_decoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_190": {
                "name_or_scope": {
                    "value": "ocnn_decoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_14": {
                "name_or_scope": {
                    "value": "signal_gt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_24": {
                "name_or_scope": {
                    "value": "depth_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "code",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "label_gt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_42": {
                "variable": {
                    "value": "label_gt[d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(label, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "signal_gt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_50": {
                "name_or_scope": {
                    "value": "depth_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_63": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(logit, [0, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "octree_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "octree_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "octree_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_88": {
                "name_or_scope": {
                    "value": "depth_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_123": {
                "name_or_scope": {
                    "value": "signal_gt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_128": {
                "name_or_scope": {
                    "value": "front",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_139": {
                "name_or_scope": {
                    "value": "code",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_159": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(logit, [0, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "octree_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_194": {
                "name_or_scope": {
                    "value": "octree_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_196": {
                "name_or_scope": {
                    "value": "octree_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_20": {
                "name_or_scope": {
                    "value": "'depth_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "'depth_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "'predict_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "'loss_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "'depth_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "'predict_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "'octree_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_135": {
                "name_or_scope": {
                    "value": "'down_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "'predict_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_161": {
                "name_or_scope": {
                    "value": "'loss_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_165": {
                "variable": {
                    "value": "label_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(label_gt, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_205": {
                "name_or_scope": {
                    "value": "'predict_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_208": {
                "name_or_scope": {
                    "value": "'octree_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_42": {
                "x": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_property(octree, property_name='split', dtype=tf.float32, depth=d, channel=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_63": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.squeeze(logit, [0, 3]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(logit, [0, 3]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "'regress_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "'octree_%d' % (d + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "'regress_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_110": {
                "name_or_scope": {
                    "value": "'octree_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_133": {
                "name_or_scope": {
                    "value": "'resblock_%d_%d' % (d, i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_154": {
                "name_or_scope": {
                    "value": "'resblock_%d_%d' % (d, i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_159": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.squeeze(logit, [0, 3]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(logit, [0, 3]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "label_gt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_170": {
                "name_or_scope": {
                    "value": "'regress_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_173": {
                "name_or_scope": {
                    "value": "loss_regress",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_177": {
                "variable": {
                    "value": "signal_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_property(octree, property_name='feature', dtype=tf.float32, depth=depth, channel=flags.channel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal_gt, [1, flags.channel, -1, 1])",
                            "Call"
                        ],
                        [
                            "octree_property(octree, property_name='feature', dtype=tf.float32, depth=depth, channel=flags.channel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal_gt, [1, flags.channel, -1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, flags.channel, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_181": {
                "name_or_scope": {
                    "value": "'up_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_202": {
                "name_or_scope": {
                    "value": "'resblock_%d_%d' % (d, i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_211": {
                "name_or_scope": {
                    "value": "'octree_%d' % (d + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_214": {
                "name_or_scope": {
                    "value": "'regress_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_218": {
                "name_or_scope": {
                    "value": "'octree_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_222": {
                "name_or_scope": {
                    "value": "'up_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_165": {
                "x": {
                    "value": "label_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] * 10",
                            "BinOp"
                        ],
                        [
                            "octree_property(octree, property_name='split', dtype=tf.float32, depth=d, channel=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(label_gt, dtype=tf.int32), [-1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_174": {
                "name_or_scope": {
                    "value": "signal_gt",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/script/network_cls.py": {
        "tensorflow": {
            "reshape_12": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_property(octree, property_name='feature', dtype=tf.float32, depth=depth, channel=flags.channel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, flags.channel, -1, 1])",
                            "Call"
                        ],
                        [
                            "octree_conv_bn_relu(data, octree, depth, channels[depth], training)",
                            "Call"
                        ],
                        [
                            "octree_full_voxel(data, depth=2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(data, 2)",
                            "Call"
                        ],
                        [
                            "octree_resblock(data, octree, d, channels[d], 1, training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(data, rate=0.5, training=training)",
                            "Call"
                        ],
                        [
                            "octree_property(octree, property_name='feature', dtype=tf.float32, depth=depth, channel=flags.channel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, flags.channel, -1, 1])",
                            "Call"
                        ],
                        [
                            "octree_conv_bn_relu(data, octree, d, channels[d], training)",
                            "Call"
                        ],
                        [
                            "octree_full_voxel(data, depth=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(data, rate=0.5, training=training)",
                            "Call"
                        ],
                        [
                            "fc_bn_relu(data, channels[2], training=training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(data, rate=0.5, training=training)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, flags.channel, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_44": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_property(octree, property_name='feature', dtype=tf.float32, depth=depth, channel=flags.channel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, flags.channel, -1, 1])",
                            "Call"
                        ],
                        [
                            "octree_conv_bn_relu(data, octree, depth, channels[depth], training)",
                            "Call"
                        ],
                        [
                            "octree_full_voxel(data, depth=2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(data, 2)",
                            "Call"
                        ],
                        [
                            "octree_resblock(data, octree, d, channels[d], 1, training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(data, rate=0.5, training=training)",
                            "Call"
                        ],
                        [
                            "octree_property(octree, property_name='feature', dtype=tf.float32, depth=depth, channel=flags.channel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, flags.channel, -1, 1])",
                            "Call"
                        ],
                        [
                            "octree_conv_bn_relu(data, octree, d, channels[d], training)",
                            "Call"
                        ],
                        [
                            "octree_full_voxel(data, depth=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(data, rate=0.5, training=training)",
                            "Call"
                        ],
                        [
                            "fc_bn_relu(data, channels[2], training=training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(data, rate=0.5, training=training)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, flags.channel, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_9": {
                "name_or_scope": {
                    "value": "ocnn_resnet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_26": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_property(octree, property_name='feature', dtype=tf.float32, depth=depth, channel=flags.channel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, flags.channel, -1, 1])",
                            "Call"
                        ],
                        [
                            "octree_conv_bn_relu(data, octree, depth, channels[depth], training)",
                            "Call"
                        ],
                        [
                            "octree_full_voxel(data, depth=2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(data, 2)",
                            "Call"
                        ],
                        [
                            "octree_resblock(data, octree, d, channels[d], 1, training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(data, rate=0.5, training=training)",
                            "Call"
                        ],
                        [
                            "octree_property(octree, property_name='feature', dtype=tf.float32, depth=depth, channel=flags.channel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, flags.channel, -1, 1])",
                            "Call"
                        ],
                        [
                            "octree_conv_bn_relu(data, octree, d, channels[d], training)",
                            "Call"
                        ],
                        [
                            "octree_full_voxel(data, depth=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(data, rate=0.5, training=training)",
                            "Call"
                        ],
                        [
                            "fc_bn_relu(data, channels[2], training=training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(data, rate=0.5, training=training)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_29": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_property(octree, property_name='feature', dtype=tf.float32, depth=depth, channel=flags.channel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, flags.channel, -1, 1])",
                            "Call"
                        ],
                        [
                            "octree_conv_bn_relu(data, octree, depth, channels[depth], training)",
                            "Call"
                        ],
                        [
                            "octree_full_voxel(data, depth=2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(data, 2)",
                            "Call"
                        ],
                        [
                            "octree_resblock(data, octree, d, channels[d], 1, training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(data, rate=0.5, training=training)",
                            "Call"
                        ],
                        [
                            "octree_property(octree, property_name='feature', dtype=tf.float32, depth=depth, channel=flags.channel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, flags.channel, -1, 1])",
                            "Call"
                        ],
                        [
                            "octree_conv_bn_relu(data, octree, d, channels[d], training)",
                            "Call"
                        ],
                        [
                            "octree_full_voxel(data, depth=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(data, rate=0.5, training=training)",
                            "Call"
                        ],
                        [
                            "fc_bn_relu(data, channels[2], training=training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(data, rate=0.5, training=training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "ocnn",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_53": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_property(octree, property_name='feature', dtype=tf.float32, depth=depth, channel=flags.channel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, flags.channel, -1, 1])",
                            "Call"
                        ],
                        [
                            "octree_conv_bn_relu(data, octree, depth, channels[depth], training)",
                            "Call"
                        ],
                        [
                            "octree_full_voxel(data, depth=2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(data, 2)",
                            "Call"
                        ],
                        [
                            "octree_resblock(data, octree, d, channels[d], 1, training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(data, rate=0.5, training=training)",
                            "Call"
                        ],
                        [
                            "octree_property(octree, property_name='feature', dtype=tf.float32, depth=depth, channel=flags.channel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, flags.channel, -1, 1])",
                            "Call"
                        ],
                        [
                            "octree_conv_bn_relu(data, octree, d, channels[d], training)",
                            "Call"
                        ],
                        [
                            "octree_full_voxel(data, depth=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(data, rate=0.5, training=training)",
                            "Call"
                        ],
                        [
                            "fc_bn_relu(data, channels[2], training=training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(data, rate=0.5, training=training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_57": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_property(octree, property_name='feature', dtype=tf.float32, depth=depth, channel=flags.channel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, flags.channel, -1, 1])",
                            "Call"
                        ],
                        [
                            "octree_conv_bn_relu(data, octree, depth, channels[depth], training)",
                            "Call"
                        ],
                        [
                            "octree_full_voxel(data, depth=2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(data, 2)",
                            "Call"
                        ],
                        [
                            "octree_resblock(data, octree, d, channels[d], 1, training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(data, rate=0.5, training=training)",
                            "Call"
                        ],
                        [
                            "octree_property(octree, property_name='feature', dtype=tf.float32, depth=depth, channel=flags.channel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, flags.channel, -1, 1])",
                            "Call"
                        ],
                        [
                            "octree_conv_bn_relu(data, octree, d, channels[d], training)",
                            "Call"
                        ],
                        [
                            "octree_full_voxel(data, depth=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(data, rate=0.5, training=training)",
                            "Call"
                        ],
                        [
                            "fc_bn_relu(data, channels[2], training=training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(data, rate=0.5, training=training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_14": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_24": {
                "name_or_scope": {
                    "value": "global_average",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_31": {
                "name_or_scope": {
                    "value": "fc2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "full_voxel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "fc1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "fc2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_21": {
                "name_or_scope": {
                    "value": "'max_pool_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "'depth_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_19": {
                "name_or_scope": {
                    "value": "'resblock_%d_%d' % (d, i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/script/network_completion.py": {
        "tensorflow": {
            "reshape_9": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_property(octree, property_name='feature', dtype=tf.float32, depth=depth, channel=channel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [1, channel, -1, 1])",
                            "Call"
                        ],
                        [
                            "predict_signal(deconv, flags.channel, 32, training)",
                            "Call"
                        ],
                        [
                            "predict_signal(deconv, flags.channel, 32, training)",
                            "Call"
                        ],
                        [
                            "normalize_signal(signal)",
                            "Call"
                        ],
                        [
                            "octree_mask(signal, label, mask=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, channel, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_17": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(label, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_17": {
                "x": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_property(octree, property_name='split', dtype=tf.float32, depth=depth, channel=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(label, dtype=tf.int32), [-1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_30": {
                "name_or_scope": {
                    "value": "ocnn_encoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "ocnn_decoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_97": {
                "name_or_scope": {
                    "value": "ocnn_decoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_31": {
                "name_or_scope": {
                    "value": "signal_gt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "'front_%d' % depth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_75": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(logit, [0, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "octree_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "octree_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "octree_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_72": {
                "name_or_scope": {
                    "value": "'predict_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "'loss_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_122": {
                "name_or_scope": {
                    "value": "'predict_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_125": {
                "name_or_scope": {
                    "value": "'octree_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "'resblock_%d_%d' % (d, i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "'down_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "'up_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_75": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.squeeze(logit, [0, 3]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_78": {
                "name_or_scope": {
                    "value": "label_gt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "'regress_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "loss_regress",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_109": {
                "name_or_scope": {
                    "value": "'up_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_128": {
                "name_or_scope": {
                    "value": "'octree_%d' % (d + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_131": {
                "name_or_scope": {
                    "value": "'regress_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_135": {
                "name_or_scope": {
                    "value": "'octree_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "'resblock_%d_%d' % (d, i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_88": {
                "name_or_scope": {
                    "value": "signal_gt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_118": {
                "name_or_scope": {
                    "value": "'resblock_%d_%d' % (d, i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/script/network_factory.py": {
        "tensorflow": {}
    },
    "tensorflow/script/network_hrnet.py": {
        "tensorflow": {
            "split_168": {
                "variable": {
                    "value": "(xyz, ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_170": {
                "variable": {
                    "value": "pts5",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[xyz * 16.0, ids]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_193": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_resblock(data, octree, depth, channel, 1, training, bottleneck)",
                            "Call"
                        ],
                        [
                            "data_in",
                            "variable"
                        ],
                        [
                            "octree_conv1x1_bn(data, channel1, training)",
                            "Call"
                        ],
                        [
                            "octree_conv1x1_bn(data, channel1, training)",
                            "Call"
                        ],
                        [
                            "OctreeUpsample(upsample)(data, octree, d)",
                            "Call"
                        ],
                        [
                            "octree_tile(data, octree, d)",
                            "Call"
                        ],
                        [
                            "octree_bilinear(data, octree, d, d + 1, mask)",
                            "Call"
                        ],
                        [
                            "[t for t in inputs]",
                            "ListComp"
                        ],
                        [
                            "[t for t in inputs]",
                            "ListComp"
                        ],
                        [
                            "octree_property(octree, property_name='feature', dtype=tf.float32, depth=depth, channel=flags.channel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, flags.channel, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.abs(data)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_210": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_resblock(data, octree, depth, channel, 1, training, bottleneck)",
                            "Call"
                        ],
                        [
                            "data_in",
                            "variable"
                        ],
                        [
                            "octree_conv1x1_bn(data, channel1, training)",
                            "Call"
                        ],
                        [
                            "octree_conv1x1_bn(data, channel1, training)",
                            "Call"
                        ],
                        [
                            "OctreeUpsample(upsample)(data, octree, d)",
                            "Call"
                        ],
                        [
                            "octree_tile(data, octree, d)",
                            "Call"
                        ],
                        [
                            "octree_bilinear(data, octree, d, d + 1, mask)",
                            "Call"
                        ],
                        [
                            "[t for t in inputs]",
                            "ListComp"
                        ],
                        [
                            "[t for t in inputs]",
                            "ListComp"
                        ],
                        [
                            "octree_property(octree, property_name='feature', dtype=tf.float32, depth=depth, channel=flags.channel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, flags.channel, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.abs(data)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "'trans_%d_%d' % (d0, d1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "'trans_%d_%d' % (d0, d1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_90": {
                "variable": {
                    "value": "outputs[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add_n(features[j])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_153": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[feature, conv6]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_161": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(logit, [0, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_174": {
                "variable": {
                    "value": "pts6",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[xyz * 32.0, ids]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_176": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[feature, conv6]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_180": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(logit, [0, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_221": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_global_pool(conv, octree, depth=3)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(fc1, rate=0.5, training=training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_236": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_resblock(data, octree, depth, channel, 1, training, bottleneck)",
                            "Call"
                        ],
                        [
                            "data_in",
                            "variable"
                        ],
                        [
                            "octree_conv1x1_bn(data, channel1, training)",
                            "Call"
                        ],
                        [
                            "octree_conv1x1_bn(data, channel1, training)",
                            "Call"
                        ],
                        [
                            "OctreeUpsample(upsample)(data, octree, d)",
                            "Call"
                        ],
                        [
                            "octree_tile(data, octree, d)",
                            "Call"
                        ],
                        [
                            "octree_bilinear(data, octree, d, d + 1, mask)",
                            "Call"
                        ],
                        [
                            "[t for t in inputs]",
                            "ListComp"
                        ],
                        [
                            "[t for t in inputs]",
                            "ListComp"
                        ],
                        [
                            "octree_property(octree, property_name='feature', dtype=tf.float32, depth=depth, channel=flags.channel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, flags.channel, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.abs(data)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, flags.channel, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_19": {
                "name_or_scope": {
                    "value": "'resblock_d%d_%d' % (depth, i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "'branch_%d' % (depth - i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "'fuse_%d' % (depth - j)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "ocnn_hrnet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_118": {
                "name_or_scope": {
                    "value": "ocnn_hrnet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_130": {
                "name_or_scope": {
                    "value": "ocnn_hrnet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "boolean_mask_152": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tensors['front/conv6']",
                            "Subscript"
                        ],
                        [
                            "tf.boolean_mask(conv6, mask, axis=2)",
                            "Call"
                        ],
                        [
                            "self.tensors['front/conv6']",
                            "Subscript"
                        ],
                        [
                            "octree_nearest_interp(pts6, conv6, octree, depth=6)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "boolean_mask_156": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.points_feat(inputs, octree)",
                            "Call"
                        ],
                        [
                            "OctreeUpsample('linear')(feature, octree, 5, mask)",
                            "Call"
                        ],
                        [
                            "tf.concat([feature, conv6], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(feature, mask, axis=2)",
                            "Call"
                        ],
                        [
                            "self.points_feat(inputs, octree)",
                            "Call"
                        ],
                        [
                            "octree_bilinear_v3(pts5, feature, octree, depth=5)",
                            "Call"
                        ],
                        [
                            "tf.concat([feature, conv6], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat(data, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_159": {
                "name_or_scope": {
                    "value": "'predict_%d' % depth_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_178": {
                "name_or_scope": {
                    "value": "'predict_%d' % depth_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_215": {
                "name_or_scope": {
                    "value": "fc1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_223": {
                "name_or_scope": {
                    "value": "fc2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_233": {
                "name_or_scope": {
                    "value": "signal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_237": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_resblock(data, octree, depth, channel, 1, training, bottleneck)",
                            "Call"
                        ],
                        [
                            "data_in",
                            "variable"
                        ],
                        [
                            "octree_conv1x1_bn(data, channel1, training)",
                            "Call"
                        ],
                        [
                            "octree_conv1x1_bn(data, channel1, training)",
                            "Call"
                        ],
                        [
                            "OctreeUpsample(upsample)(data, octree, d)",
                            "Call"
                        ],
                        [
                            "octree_tile(data, octree, d)",
                            "Call"
                        ],
                        [
                            "octree_bilinear(data, octree, d, d + 1, mask)",
                            "Call"
                        ],
                        [
                            "[t for t in inputs]",
                            "ListComp"
                        ],
                        [
                            "[t for t in inputs]",
                            "ListComp"
                        ],
                        [
                            "octree_property(octree, property_name='feature', dtype=tf.float32, depth=depth, channel=flags.channel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, flags.channel, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.abs(data)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_255": {
                "name_or_scope": {
                    "value": "front",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "'down_%d' % (d1 + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "'conv1x1_%d' % d1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_n_90": {
                "inputs": {
                    "value": "features[j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_108": {
                "name_or_scope": {
                    "value": "seg_header",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_112": {
                "name_or_scope": {
                    "value": "cls_header",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "cls_header",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_136": {
                "name_or_scope": {
                    "value": "seg_header",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_161": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls_header(convs, octree, self.flags.nout, training)",
                            "Call"
                        ],
                        [
                            "self.seg_header(convs, octree, self.flags.nout, mask, training)",
                            "Call"
                        ],
                        [
                            "self.seg_header_pts(convs, octree, self.flags.nout, pts, training)",
                            "Call"
                        ],
                        [
                            "predict_module(feature, nout, 128 * factor, training)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(logit, [0, 3]))",
                            "Call"
                        ],
                        [
                            "predict_module(feature, nout, 128 * factor, training)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(logit, [0, 3]))",
                            "Call"
                        ],
                        [
                            "dense(fc1, nout, use_bias=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_180": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls_header(convs, octree, self.flags.nout, training)",
                            "Call"
                        ],
                        [
                            "self.seg_header(convs, octree, self.flags.nout, mask, training)",
                            "Call"
                        ],
                        [
                            "self.seg_header_pts(convs, octree, self.flags.nout, pts, training)",
                            "Call"
                        ],
                        [
                            "predict_module(feature, nout, 128 * factor, training)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(logit, [0, 3]))",
                            "Call"
                        ],
                        [
                            "predict_module(feature, nout, 128 * factor, training)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(logit, [0, 3]))",
                            "Call"
                        ],
                        [
                            "dense(fc1, nout, use_bias=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_189": {
                "name_or_scope": {
                    "value": "'up_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_204": {
                "name_or_scope": {
                    "value": "'down_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_247": {
                "name_or_scope": {
                    "value": "'stage_%d' % stage",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_262": {
                "name_or_scope": {
                    "value": "'depth_%d' % d1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "'down_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "'down_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_257": {
                "name_or_scope": {
                    "value": "'depth_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_48": {
                "name_or_scope": {
                    "value": "'up_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "'up_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_206": {
                "name_or_scope": {
                    "value": "'down_%d' % (d - j)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/script/network_segnet.py": {
        "tensorflow": {
            "variable_scope_8": {
                "name_or_scope": {
                    "value": "ocnn_segnet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_12": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_property(octree, property_name='feature', dtype=tf.float32, depth=depth, channel=channel_in)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, channel_in, -1, 1])",
                            "Call"
                        ],
                        [
                            "octree_conv_bn_relu(data, octree, d, channels[d], training)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, channel_in, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_32": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(logit, [0, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_9": {
                "name_or_scope": {
                    "value": "signal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_22": {
                "name_or_scope": {
                    "value": "deconv_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_30": {
                "name_or_scope": {
                    "value": "predict_label",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_17": {
                "name_or_scope": {
                    "value": "'conv_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_25": {
                "name_or_scope": {
                    "value": "'deconv_%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_32": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predict_module(deconv, flags.nout, 64, training)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(logit, [0, 3]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/script/network_unet.py": {
        "tensorflow": {
            "variable_scope_8": {
                "name_or_scope": {
                    "value": "ocnn_unet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_12": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_property(octree, property_name='feature', dtype=tf.float32, depth=depth, channel=flags.channel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, [1, flags.channel, -1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, flags.channel, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_9": {
                "name_or_scope": {
                    "value": "signal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "'encoder_d%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_33": {
                "name_or_scope": {
                    "value": "'decoder_d%d' % d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_50": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(logit, [0, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "'resblock_%d' % n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "'resblock_%d' % n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_48": {
                "name_or_scope": {
                    "value": "predict_label",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_50": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predict_module(deconv, flags.nout, 64, training)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(logit, [0, 3]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/script/ocnn.py": {
        "tensorflow": {
            "flatten_26": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(inputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(inputs, axis=[0, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_27": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(inputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(inputs, axis=[0, 3])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "nout",
                    "type": "variable",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_49": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(inputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(inputs, axis=[0, 3])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nout",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_transpose_90": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[8, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[8, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_93": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d_transpose(data, channel, kernel_size=[8, 1], strides=[8, 1], data_format='channels_first', use_bias=False, kernel_initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data, channel, kernel_size=[8, 1], strides=[8, 1], data_format='channels_first', use_bias=False, kernel_initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_98": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[8, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[8, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_101": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d_transpose(data, channel, kernel_size=[8, 1], strides=[8, 1], data_format='channels_first', use_bias=False, kernel_initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(data, channel, kernel_size=[8, 1], strides=[8, 1], data_format='channels_first', use_bias=False, kernel_initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_216": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv + link",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_232": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_conv1x1(conv, num_output, use_bias=True)",
                            "Call"
                        ],
                        [
                            "predict_module(data, num_output, num_hidden, training)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_233": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logit, axis=1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [-1])",
                            "Call"
                        ],
                        [
                            "octree_property(octree, property_name='label', dtype=tf.float32, depth=depth, channel=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(label, tf.int32), [-1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(label, label_mask)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_258": {
                "variable": {
                    "value": "label_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(label_gt, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(label_gt, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_259": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(tf.equal(label, label_gt))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_325": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_normalization_33": {
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(inputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(inputs, axis=[0, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[2, 3] if data_format == 'channels_first' else [1, 2]",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_39": {
                "features": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(fc, training)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(deconv, axis=1, training=training)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(deconv, axis=1, training=training)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_43": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(inputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(inputs, axis=[0, 3])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nout",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[3]",
                            "Method Argument"
                        ],
                        [
                            "[3]",
                            "Method Argument"
                        ],
                        [
                            "[3]",
                            "Method Argument"
                        ],
                        [
                            "[3]",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'channels_first'",
                            "Method Argument"
                        ],
                        [
                            "'NCHW'",
                            "Method Argument"
                        ],
                        [
                            "'channels_first'",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_57": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(inputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(inputs, axis=[0, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_58": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nout, int(inputs.shape[0])]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_60": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=[nout, int(inputs.shape[0])], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(inputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(inputs, axis=[0, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_65": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(weights, inputs)",
                            "Call"
                        ],
                        [
                            "bias + outputs",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(outputs, axis=0), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_76": {
                "features": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_conv1x1(inputs, nout, use_bias=False)",
                            "Call"
                        ],
                        [
                            "octree_conv1x1_bn(inputs, nout, training)",
                            "Call"
                        ],
                        [
                            "conv2d(inputs, nout, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "conv2d_bn(inputs, nout, kernel_size, stride, training)",
                            "Call"
                        ],
                        [
                            "octree_conv_fast(data, octree, depth, channel, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "octree_conv_memory(data, octree, depth, channel, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "octree_deconv_fast(data, octree, depth, channel, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "octree_deconv_memory(data, octree, depth, channel, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "octree_conv_bn_relu(data, octree, depth, num_out / 4, training)",
                            "Call"
                        ],
                        [
                            "octree_conv_bn(conv, octree, depth, num_out, training)",
                            "Call"
                        ],
                        [
                            "octree_conv1x1_bn_relu(data, num_hidden, training)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_86": {
                "features": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_conv1x1(inputs, nout, use_bias=False)",
                            "Call"
                        ],
                        [
                            "octree_conv1x1_bn(inputs, nout, training)",
                            "Call"
                        ],
                        [
                            "conv2d(inputs, nout, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "conv2d_bn(inputs, nout, kernel_size, stride, training)",
                            "Call"
                        ],
                        [
                            "octree_conv_fast(data, octree, depth, channel, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "octree_conv_memory(data, octree, depth, channel, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "octree_deconv_fast(data, octree, depth, channel, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "octree_deconv_memory(data, octree, depth, channel, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "octree_conv_bn_relu(data, octree, depth, num_out / 4, training)",
                            "Call"
                        ],
                        [
                            "octree_conv_bn(conv, octree, depth, num_out, training)",
                            "Call"
                        ],
                        [
                            "octree_conv1x1_bn_relu(data, num_hidden, training)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_94": {
                "features": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(fc, training)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(deconv, axis=1, training=training)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(deconv, axis=1, training=training)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_102": {
                "features": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm(fc, training)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(deconv, axis=1, training=training)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(deconv, axis=1, training=training)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool2d_106": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(inputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(inputs, axis=[0, 3])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'channels_first'",
                            "Method Argument"
                        ],
                        [
                            "'NCHW'",
                            "Method Argument"
                        ],
                        [
                            "'channels_first'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_112": {
                "input_tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(inputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(inputs, axis=[0, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[2, 3] if data_format == 'channels_first' else [1, 2]",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "batch_normalization_143": {
                "x": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_conv1x1(inputs, nout, use_bias=False)",
                            "Call"
                        ],
                        [
                            "octree_conv1x1_bn(inputs, nout, training)",
                            "Call"
                        ],
                        [
                            "conv2d(inputs, nout, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "conv2d_bn(inputs, nout, kernel_size, stride, training)",
                            "Call"
                        ],
                        [
                            "octree_conv_fast(data, octree, depth, channel, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "octree_conv_memory(data, octree, depth, channel, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "octree_deconv_fast(data, octree, depth, channel, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "octree_deconv_memory(data, octree, depth, channel, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "octree_conv_bn_relu(data, octree, depth, num_out / 4, training)",
                            "Call"
                        ],
                        [
                            "octree_conv_bn(conv, octree, depth, num_out, training)",
                            "Call"
                        ],
                        [
                            "octree_conv1x1_bn_relu(data, num_hidden, training)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_151": {
                "variable": {
                    "value": "rl",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_conv_bn(data, octree, depth, channel, training, kernel_size, stride, fast_mode)",
                            "Call"
                        ],
                        [
                            "octree_deconv_bn(data, octree, depth, channel, training, kernel_size, stride, fast_mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_157": {
                "features": {
                    "value": "cb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_conv_bn(data, octree, depth, channel, training)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "batch_normalization_168": {
                "x": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_conv1x1(inputs, nout, use_bias=False)",
                            "Call"
                        ],
                        [
                            "octree_conv1x1_bn(inputs, nout, training)",
                            "Call"
                        ],
                        [
                            "conv2d(inputs, nout, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "conv2d_bn(inputs, nout, kernel_size, stride, training)",
                            "Call"
                        ],
                        [
                            "octree_conv_fast(data, octree, depth, channel, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "octree_conv_memory(data, octree, depth, channel, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "octree_deconv_fast(data, octree, depth, channel, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "octree_deconv_memory(data, octree, depth, channel, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "octree_conv_bn_relu(data, octree, depth, num_out / 4, training)",
                            "Call"
                        ],
                        [
                            "octree_conv_bn(conv, octree, depth, num_out, training)",
                            "Call"
                        ],
                        [
                            "octree_conv1x1_bn_relu(data, num_hidden, training)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_176": {
                "variable": {
                    "value": "rl",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_conv_bn(data, octree, depth, channel, training, kernel_size, stride, fast_mode)",
                            "Call"
                        ],
                        [
                            "octree_deconv_bn(data, octree, depth, channel, training, kernel_size, stride, fast_mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_201": {
                "features": {
                    "value": "block3 + block4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_238": {
                "x": {
                    "value": "predict_module(data, num_output, num_hidden, training)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_243": {
                "variable": {
                    "value": "label_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(label_gt, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(label_gt, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_244": {
                "variable": {
                    "value": "onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(label_gt, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(label_gt, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_245": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "onehot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(label_gt, depth=num_class)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_conv1x1(conv, num_output, use_bias=True)",
                            "Call"
                        ],
                        [
                            "predict_module(data, num_output, num_hidden, training)",
                            "Call"
                        ]
                    ]
                },
                "label_smoothing": {
                    "value": "label_smoothing",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_265": {
                "variable": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_conv1x1(conv, num_output, use_bias=True)",
                            "Call"
                        ],
                        [
                            "predict_module(data, num_output, num_hidden, training)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_271": {
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.square(signal - signal_gt), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_301": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_351": {
                "variable": {
                    "value": "summ",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "merge_362": {
                "variable": {
                    "value": "summ",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "boolean_mask_377": {
                "variable": {
                    "value": "masked_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_conv1x1(conv, num_output, use_bias=True)",
                            "Call"
                        ],
                        [
                            "predict_module(data, num_output, num_hidden, training)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "label_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_gt > mask",
                            "Compare"
                        ],
                        [
                            "label > mask",
                            "Compare"
                        ]
                    ]
                }
            },
            "boolean_mask_378": {
                "variable": {
                    "value": "masked_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(label_gt, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(label_gt, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "label_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_gt > mask",
                            "Compare"
                        ],
                        [
                            "label > mask",
                            "Compare"
                        ]
                    ]
                }
            },
            "reshape_390": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(label, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "boolean_mask_410": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(pred, label_mask)",
                            "Call"
                        ],
                        [
                            "tf.argmax(pred, axis=1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "label_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_gt > mask",
                            "Compare"
                        ],
                        [
                            "label > mask",
                            "Compare"
                        ]
                    ]
                }
            },
            "boolean_mask_411": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logit, axis=1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [-1])",
                            "Call"
                        ],
                        [
                            "octree_property(octree, property_name='label', dtype=tf.float32, depth=depth, channel=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(label, tf.int32), [-1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(label, label_mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "label_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_gt > mask",
                            "Compare"
                        ],
                        [
                            "label > mask",
                            "Compare"
                        ]
                    ]
                }
            },
            "argmax_412": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(pred, label_mask)",
                            "Call"
                        ],
                        [
                            "tf.argmax(pred, axis=1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_448": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(signal, [0, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_450": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_xyz(octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.cast(xyz, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(xyz, mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "boolean_mask_453": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_signal(octree, depth, 4)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(signal, [0, 3]))",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(signal, mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_child(octree, depth) > -1",
                            "Compare"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "boolean_mask_454": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_xyz(octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.cast(xyz, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(xyz, mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_child(octree, depth) > -1",
                            "Compare"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_457": {
                "variable": {
                    "value": "(normal, dis)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_signal(octree, depth, 4)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(signal, [0, 3]))",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(signal, mask)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_458": {
                "variable": {
                    "value": "(pts, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_xyz(octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.cast(xyz, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(xyz, mask)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trainable_variables_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "all_variables_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "conv2d_1x1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_62": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nout, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_117": {
                "name_or_scope": {
                    "value": "octree_upsample",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_130": {
                "name_or_scope": {
                    "value": "octree_downsample",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_148": {
                "name_or_scope": {
                    "value": "conv_bn_relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_173": {
                "name_or_scope": {
                    "value": "deconv_bn_relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_187": {
                "name_or_scope": {
                    "value": "1x1x1_a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_190": {
                "name_or_scope": {
                    "value": "3x3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_193": {
                "name_or_scope": {
                    "value": "1x1x1_b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_206": {
                "name_or_scope": {
                    "value": "conv_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_208": {
                "name_or_scope": {
                    "value": "conv_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_222": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_224": {
                "name_or_scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_242": {
                "name": {
                    "value": "softmax_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_251": {
                "name": {
                    "value": "l2_regularizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_259": {
                "x": {
                    "value": "tf.equal(label, label_gt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_264": {
                "name": {
                    "value": "softmax_accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_271": {
                "input_tensor": {
                    "value": "tf.square(signal - signal_gt)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_277": {
                "name_or_scope": {
                    "value": "normalize",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_279": {
                "variable": {
                    "value": "normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, 3, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_280": {
                "variable": {
                    "value": "displacement",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 3, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, 1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_281": {
                "variable": {
                    "value": "normals",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "normals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(data, [0, 0, 0, 0], [1, 3, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(normals, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_282": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[normals, displacement]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_284": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_290": {
                "name": {
                    "value": "avg_tensors",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_293": {
                "variable": {
                    "value": "avg_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tower_tensors",
                            "variable"
                        ],
                        [
                            "[tf.expand_dims(tensor, 0) for tensor in tensors]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_294": {
                "variable": {
                    "value": "avg_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "avg_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(tensors, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(avg_tensor, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_300": {
                "name": {
                    "value": "solver",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_303": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_305": {
                "variable": {
                    "value": "solver",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate_handle(global_step)",
                            "Call"
                        ],
                        [
                            "learning_rate_handle(global_step)",
                            "Call"
                        ],
                        [
                            "learning_rate(global_step) * self.mul",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_312": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_314": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_316": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate_handle(global_step)",
                            "Call"
                        ],
                        [
                            "learning_rate_handle(global_step)",
                            "Call"
                        ],
                        [
                            "learning_rate(global_step) * self.mul",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_330": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_347": {
                "name": {
                    "value": "summary_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_356": {
                "name": {
                    "value": "summary_test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_367": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_375": {
                "name": {
                    "value": "loss_seg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_387": {
                "name": {
                    "value": "seg_label",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_408": {
                "name": {
                    "value": "IoU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_417": {
                "variable": {
                    "value": "intsc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(pk & lk, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_418": {
                "variable": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(pk | lk, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_419": {
                "variable": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_any(lk)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_434": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_446": {
                "name": {
                    "value": "octree2points",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_461": {
                "variable": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pts, idx]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "1x1x1_c",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_213": {
                "name_or_scope": {
                    "value": "conv_1x1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_253": {
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in var]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "equal_259": {
                "x": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logit, axis=1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [-1])",
                            "Call"
                        ],
                        [
                            "octree_property(octree, property_name='label', dtype=tf.float32, depth=depth, channel=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(label, tf.int32), [-1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(label, label_mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "label_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(label_gt, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(label_gt, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_266": {
                "x": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logit, axis=1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [-1])",
                            "Call"
                        ],
                        [
                            "octree_property(octree, property_name='label', dtype=tf.float32, depth=depth, channel=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(label, tf.int32), [-1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(label, label_mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_271": {
                "x": {
                    "value": "signal - signal_gt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_302": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ],
                        [
                            "[op for op in update_ops if 'device_0' in op.name]",
                            "ListComp"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_313": {
                "name_or_scope": {
                    "value": "solver",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_319": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_331": {
                "name": {
                    "value": "sync_and_apply_grad",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_390": {
                "x": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logit, axis=1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [-1])",
                            "Call"
                        ],
                        [
                            "octree_property(octree, property_name='label', dtype=tf.float32, depth=depth, channel=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(label, tf.int32), [-1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(label, label_mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_433": {
                "name": {
                    "value": "solver",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_436": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_438": {
                "variable": {
                    "value": "solver",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate_handle(global_step)",
                            "Call"
                        ],
                        [
                            "learning_rate_handle(global_step)",
                            "Call"
                        ],
                        [
                            "learning_rate(global_step) * self.mul",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "squeeze_448": {
                "input": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_signal(octree, depth, 4)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(signal, [0, 3]))",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(signal, mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_292": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_320": {
                "name": {
                    "value": "'device_b%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_332": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ],
                        [
                            "[op for op in update_ops if 'device_0' in op.name]",
                            "ListComp"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_350": {
                "name": {
                    "value": "it[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "it[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "placeholder_360": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_361": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "names",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "data": {
                    "value": "summ_placeholder[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_415": {
                "x": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logit, axis=1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [-1])",
                            "Call"
                        ],
                        [
                            "octree_property(octree, property_name='label', dtype=tf.float32, depth=depth, channel=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(label, tf.int32), [-1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(label, label_mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(class_num)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_417": {
                "x": {
                    "value": "pk & lk",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_418": {
                "x": {
                    "value": "pk | lk",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_any_419": {
                "input_tensor": {
                    "value": "lk",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_435": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ],
                        [
                            "[op for op in update_ops if 'device_0' in op.name]",
                            "ListComp"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_253": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/script/run_ae.py": {
        "tensorflow": {
            "add_n_26": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "loss + [reg]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Saver_44": {
                "variable": {
                    "value": "tf_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_47": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_24": {
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_49": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_54": {
                "logdir": {
                    "value": "logdir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.flags.logdir",
                            "Attribute"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/script/run_cls.py": {
        "tensorflow": {
            "device_17": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_23": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_24": {
                "name": {
                    "value": "'device_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/script/run_cls_finetune.py": {
        "tensorflow": {
            "group_27": {
                "variable": {
                    "value": "solver",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[solver1, solver2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_54": {
                "variable": {
                    "value": "tf_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variables_with_name('ocnn', without='fc2', verbose=self.flags.verbose, train_only=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tensorflow/script/run_completion.py": {
        "tensorflow": {
            "add_n_92": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "loss + [reg]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Saver_113": {
                "variable": {
                    "value": "tf_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_116": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TFRecordDataset_70": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "record_names",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "take_70": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "take",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "repeat_70": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_90": {
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_55": {
                "name": {
                    "value": "points_dataset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "py_func_61": {
                "variable": {
                    "value": "scan_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "self.gen_scan_axis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[label]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_118": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_124": {
                "logdir": {
                    "value": "logdir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.flags.logdir",
                            "Attribute"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/script/run_linear_cls.py": {
        "tensorflow": {
            "placeholder_22": {
                "variable": {
                    "value": "self.data_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_23": {
                "variable": {
                    "value": "self.label_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_46": {
                "name_or_scope": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_20": {
                "name": {
                    "value": "dataset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/script/run_mid.py": {
        "tensorflow": {
            "group_64": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[shape_update, point_update, solver]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_21": {
                "variable": {
                    "value": "point_segment",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "octree_property(octree, property_name='index', dtype=tf.int32, depth=depth, channel=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "boolean_mask_27": {
                "variable": {
                    "value": "point_id",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "point_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_seg_label(octree, depth)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(point_id, mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_id > -1",
                            "Compare"
                        ],
                        [
                            "tf.logical_and(mask, tf.random.uniform(mask_shape) > mask_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_28": {
                "variable": {
                    "value": "point_segment",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "point_segment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(octree_property(octree, property_name='index', dtype=tf.int32, depth=depth, channel=1), [-1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(point_segment, mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_id > -1",
                            "Compare"
                        ],
                        [
                            "tf.logical_and(mask, tf.random.uniform(mask_shape) > mask_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_19": {
                "name": {
                    "value": "points_info",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_25": {
                "variable": {
                    "value": "mask_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_id > -1",
                            "Compare"
                        ],
                        [
                            "tf.logical_and(mask, tf.random.uniform(mask_shape) > mask_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_26": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_id > -1",
                            "Compare"
                        ],
                        [
                            "tf.logical_and(mask, tf.random.uniform(mask_shape) > mask_ratio)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.random.uniform(mask_shape) > mask_ratio",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "name_scope_33": {
                "name": {
                    "value": "dataset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_78": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "uniform_26": {
                "shape": {
                    "value": "mask_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(mask)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tensorflow/script/run_seg_partnet.py": {
        "tensorflow": {
            "reshape_19": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points_property(points, property_name='label', channel=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [-1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(label, label_mask)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(label, label_mask)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "boolean_mask_24": {
                "variable": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points_property(points, property_name='xyz', channel=4)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(pts, label_mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "label_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label > mask",
                            "Compare"
                        ],
                        [
                            "tf.logical_and(label_mask, rnd_mask)",
                            "Call"
                        ],
                        [
                            "label > mask",
                            "Compare"
                        ]
                    ]
                }
            },
            "boolean_mask_25": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points_property(points, property_name='label', channel=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [-1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(label, label_mask)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(label, label_mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "label_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label > mask",
                            "Compare"
                        ],
                        [
                            "tf.logical_and(label_mask, rnd_mask)",
                            "Call"
                        ],
                        [
                            "label > mask",
                            "Compare"
                        ]
                    ]
                }
            },
            "boolean_mask_34": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(pred, label_mask)",
                            "Call"
                        ],
                        [
                            "tf.argmax(pred, axis=1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "label_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label > mask",
                            "Compare"
                        ],
                        [
                            "tf.logical_and(label_mask, rnd_mask)",
                            "Call"
                        ],
                        [
                            "label > mask",
                            "Compare"
                        ]
                    ]
                }
            },
            "boolean_mask_35": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points_property(points, property_name='label', channel=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [-1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(label, label_mask)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(label, label_mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "label_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label > mask",
                            "Compare"
                        ],
                        [
                            "tf.logical_and(label_mask, rnd_mask)",
                            "Call"
                        ],
                        [
                            "label > mask",
                            "Compare"
                        ]
                    ]
                }
            },
            "argmax_36": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(pred, label_mask)",
                            "Call"
                        ],
                        [
                            "tf.argmax(pred, axis=1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_16": {
                "name": {
                    "value": "points_info",
                    "type": "str",
                    "possible_values": []
                }
            },
            "logical_and_23": {
                "variable": {
                    "value": "label_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label > mask",
                            "Compare"
                        ],
                        [
                            "tf.logical_and(label_mask, rnd_mask)",
                            "Call"
                        ],
                        [
                            "label > mask",
                            "Compare"
                        ]
                    ]
                },
                "y": {
                    "value": "rnd_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(tf.shape(label_mask)) > mask_ratio",
                            "Compare"
                        ]
                    ]
                }
            },
            "name_scope_31": {
                "name": {
                    "value": "IoU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_41": {
                "variable": {
                    "value": "intsc[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(pk & lk, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_42": {
                "variable": {
                    "value": "union[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(pk | lk, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_56": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "uniform_22": {
                "shape": {
                    "value": "tf.shape(label_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_40": {
                "x": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points_property(points, property_name='label', channel=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [-1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(label, label_mask)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(label, label_mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(class_num)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_41": {
                "x": {
                    "value": "pk & lk",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_42": {
                "x": {
                    "value": "pk | lk",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_62": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_22": {
                "input": {
                    "value": "label_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label > mask",
                            "Compare"
                        ],
                        [
                            "tf.logical_and(label_mask, rnd_mask)",
                            "Call"
                        ],
                        [
                            "label > mask",
                            "Compare"
                        ]
                    ]
                }
            },
            "name_scope_63": {
                "name": {
                    "value": "'device_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_77": {
                "variable": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/script/run_seg_partnet_finetune.py": {
        "tensorflow": {
            "group_31": {
                "variable": {
                    "value": "solver",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[solver1, solver2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_58": {
                "variable": {
                    "value": "tf_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variables_with_name('ocnn', without='predict_6/conv2', verbose=self.flags.verbose, train_only=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tensorflow/script/run_seg_shapenet.py": {
        "tensorflow": {
            "reshape_19": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points_property(points, property_name='label', channel=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [-1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(label, label_mask)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "boolean_mask_24": {
                "variable": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points_property(points, property_name='xyz', channel=4)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(pts, label_mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "label_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label > mask",
                            "Compare"
                        ],
                        [
                            "tf.logical_and(label_mask, rnd_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_25": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points_property(points, property_name='label', channel=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [-1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(label, label_mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "label_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label > mask",
                            "Compare"
                        ],
                        [
                            "tf.logical_and(label_mask, rnd_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_16": {
                "name": {
                    "value": "points_info",
                    "type": "str",
                    "possible_values": []
                }
            },
            "logical_and_23": {
                "variable": {
                    "value": "label_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label > mask",
                            "Compare"
                        ],
                        [
                            "tf.logical_and(label_mask, rnd_mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "rnd_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(tf.shape(label_mask)) > mask_ratio",
                            "Compare"
                        ]
                    ]
                }
            },
            "uniform_22": {
                "shape": {
                    "value": "tf.shape(label_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_22": {
                "input": {
                    "value": "label_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label > mask",
                            "Compare"
                        ],
                        [
                            "tf.logical_and(label_mask, rnd_mask)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tensorflow/script/run_seg_shapenet_finetune.py": {
        "tensorflow": {
            "group_27": {
                "variable": {
                    "value": "solver",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[solver1, solver2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_54": {
                "variable": {
                    "value": "tf_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variables_with_name('ocnn', without='predict_6/conv2', verbose=self.flags.verbose, train_only=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tensorflow/script/tfsolver.py": {
        "tensorflow": {
            "set_verbosity_8": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_91": {
                "variable": {
                    "value": "self.tf_saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "self.flags.ckpt_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_100": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_137": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RunOptions_139": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunMetadata_140": {
                "variable": {
                    "value": "run_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_169": {
                "variable": {
                    "value": "train_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_187": {
                "variable": {
                    "value": "tf_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_192": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "latest_checkpoint_96": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.flags.logdir, 'model')",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_103": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.flags.logdir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_143": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.flags.logdir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_195": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.flags.logdir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_102": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_142": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_194": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_35": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_59": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/test/test_all.py": {
        "tensorflow": {
            "set_verbosity_3": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/test/test_octree2col.py": {
        "tensorflow": {
            "main_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_80": {
                "variable": {
                    "value": "data_in",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.data_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "compute_gradient_87": {
                "variable": {
                    "value": "(grad_nn, grad_nm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "data_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(self.data_in)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "shape_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.data_in.shape",
                            "Attribute"
                        ]
                    ]
                },
                "delta": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/test/test_octree2points.py": {
        "tensorflow": {
            "main_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/test/test_octree_align.py": {
        "tensorflow": {
            "constant_13": {
                "variable": {
                    "value": "data_in",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(0.0, 1.0, size=[1, 3, 16, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant(data_in, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0.0, 1.0, size=[1, 3, 8, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant(data_in, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0.0, 1.0, size=[1, 3, 16, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant(data_in, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_15": {
                "variable": {
                    "value": "idx_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_29": {
                "variable": {
                    "value": "data_in",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(0.0, 1.0, size=[1, 3, 16, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant(data_in, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0.0, 1.0, size=[1, 3, 8, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant(data_in, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0.0, 1.0, size=[1, 3, 16, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant(data_in, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_31": {
                "variable": {
                    "value": "data_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[data_in, np.zeros([1, 3, 8, 1], np.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_32": {
                "variable": {
                    "value": "idx_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_46": {
                "variable": {
                    "value": "data_in",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(0.0, 1.0, size=[1, 3, 16, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant(data_in, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0.0, 1.0, size=[1, 3, 8, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant(data_in, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0.0, 1.0, size=[1, 3, 16, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant(data_in, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_52": {
                "variable": {
                    "value": "grad_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[np.ones([1, 3, 8, 1]), np.zeros([1, 3, 8, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "main_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_17": {
                "ys": {
                    "value": "data_out",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "data_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(0.0, 1.0, size=[1, 3, 16, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant(data_in, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0.0, 1.0, size=[1, 3, 8, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant(data_in, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0.0, 1.0, size=[1, 3, 16, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant(data_in, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_34": {
                "ys": {
                    "value": "data_out",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "data_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(0.0, 1.0, size=[1, 3, 16, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant(data_in, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0.0, 1.0, size=[1, 3, 8, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant(data_in, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0.0, 1.0, size=[1, 3, 16, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant(data_in, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_51": {
                "ys": {
                    "value": "data_out",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "data_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(0.0, 1.0, size=[1, 3, 16, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant(data_in, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0.0, 1.0, size=[1, 3, 8, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant(data_in, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0.0, 1.0, size=[1, 3, 16, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant(data_in, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tensorflow/test/test_octree_conv.py": {
        "tensorflow": {
            "constant_19": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.uniform(-1.0, 1.0, [1, channel, height, 1]).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_28": {
                "variable": {
                    "value": "t_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_34": {
                "variable": {
                    "value": "(grad_fast, kernel_fast)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "conv_fast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_conv_fast(data, octree, depth, num_outputs, kernel_size, stride)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[data, kernel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_35": {
                "variable": {
                    "value": "(grad_mem, kernel_mem)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "conv_mem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_conv_memory(data, octree, depth, num_outputs, kernel_size, stride)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[data, kernel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_22": {
                "name_or_scope": {
                    "value": "'conv_%d' % idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/test/test_octree_deconv.py": {
        "tensorflow": {
            "constant_21": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.uniform(-1.0, 1.0, [1, channel, height, 1]).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_28": {
                "variable": {
                    "value": "kernel_deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()[0]",
                            "Subscript"
                        ],
                        [
                            "var",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "[channel, num_outputs, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_29": {
                "variable": {
                    "value": "kernel_deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "kernel_deconv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(kernel, [channel, num_outputs, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(kernel_deconv, [3, 2, 1, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[3, 2, 1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_31": {
                "variable": {
                    "value": "deconv_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_depad(data, octree, depth)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel_deconv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(kernel, [channel, num_outputs, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(kernel_deconv, [3, 2, 1, 0])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 8, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[1, num_outputs, 320, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_35": {
                "variable": {
                    "value": "(grad_fast, kernel_fast)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "deconv_fast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_deconv_fast(data, octree, depth, num_outputs, kernel_size, stride)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[data, kernel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_36": {
                "variable": {
                    "value": "(grad_gt, kernel_gt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "deconv_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_transpose(depad, kernel_deconv, strides=[1, 1, 8, 1], output_shape=[1, num_outputs, 320, 1], data_format='NCHW')",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[data, kernel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_53": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.uniform(-1.0, 1.0, [1, channel, height, 1]).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_62": {
                "variable": {
                    "value": "t_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_68": {
                "variable": {
                    "value": "(grad_fast, kernel_fast)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "conv_fast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_deconv_fast(data, octree, depth, num_outputs, kernel_size, stride)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[data, kernel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_69": {
                "variable": {
                    "value": "(grad_mem, kernel_mem)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "conv_mem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_deconv_memory(data, octree, depth, num_outputs, kernel_size, stride)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[data, kernel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "'deconv_%d' % idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/test/test_octree_gather.py": {
        "tensorflow": {
            "uniform_12": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, channel, height, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_15": {
                "variable": {
                    "value": "out1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform([1, channel, height, 1], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([0, 4, 2, -1, 2, 2, 4])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gradients_17": {
                "variable": {
                    "value": "grad1",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "out1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(data, index, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform([1, channel, height, 1], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_18": {
                "variable": {
                    "value": "grad2",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_gather(data, index)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform([1, channel, height, 1], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "main_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/test/test_octree_grow.py": {
        "tensorflow": {
            "decode_raw_17": {
                "variable": {
                    "value": "octree_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "octree_samples('octree_2')",
                    "type": "Call",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "enable_eager_execution_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_20": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "child > -1",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/test/test_octree_key.py": {
        "tensorflow": {
            "enable_eager_execution_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_16": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_property(octree, property_name='xyz', depth=5, channel=1, dtype=tf.uint64)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xyz, [-1])",
                            "Call"
                        ],
                        [
                            "octree_property(octree, property_name='xyz', depth=5, channel=1, dtype=tf.uint64)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xyz, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_20": {
                "variable": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[16, 16, 16, 0], [16, 16, 17, 0], [16, 17, 16, 0], [16, 17, 17, 0], [17, 16, 16, 0], [17, 16, 17, 0], [17, 17, 16, 0], [17, 17, 17, 0], [16, 16, 16, 1], [16, 16, 17, 1], [16, 17, 16, 1], [16, 17, 17, 1], [17, 16, 16, 1], [17, 16, 17, 1], [17, 17, 16, 1], [17, 17, 17, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_35": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_property(octree, property_name='xyz', depth=5, channel=1, dtype=tf.uint64)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xyz, [-1])",
                            "Call"
                        ],
                        [
                            "octree_property(octree, property_name='xyz', depth=5, channel=1, dtype=tf.uint64)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xyz, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_46": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[28673, 281474976739335, 10]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_47": {
                "variable": {
                    "value": "idx_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 15, -1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/test/test_octree_linear.py": {
        "tensorflow": {
            "ones_14": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, channel, 8, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_27": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(-1, 1.0, data_shape).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "main_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "compute_gradient_39": {
                "variable": {
                    "value": "(grad_nn, grad_nm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([1, channel, 8, 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(data_np)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "data_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, channel, nnum, 1)",
                            "Tuple"
                        ]
                    ]
                },
                "delta": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/test/test_octree_nearest.py": {
        "tensorflow": {
            "constant_16": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(-1, 1.0, data_shape).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_20": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "octree_decode_key(xyz)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_21": {
                "value": {
                    "value": "[0.5, 0.5, 0.5, 0.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_22": {
                "value": {
                    "value": "[0.5, 0.5, 0.5, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "compute_gradient_32": {
                "variable": {
                    "value": "(grad_nn, grad_nm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(data_np)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "data_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, channel, nnum, 1)",
                            "Tuple"
                        ]
                    ]
                },
                "delta": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/test/test_octree_property.py": {
        "tensorflow": {
            "reshape_18": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_property(octree, property_name='index', dtype=tf.int32, depth=5, channel=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_19": {
                "variable": {
                    "value": "out_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0] * 8 + [1] * 8 + [2] * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "main_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/test/test_octree_search.py": {
        "tensorflow": {
            "cast_30": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "data.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_uints",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_39": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "data.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_uints",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "main_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/test/test_points_property.py": {
        "tensorflow": {
            "reshape_31": {
                "variable": {
                    "value": "tf_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points_property([pts1, pts2], property_name='label', channel=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf_labels, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/test/test_transform_points.py": {
        "tensorflow": {
            "enable_eager_execution_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/util/convert_tfrecords.py": {
        "tensorflow": {
            "TFRecordWriter_37": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "records_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Feature_21": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_25": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_47": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_21": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_25": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Features_47": {
                "feature": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{file_type: _bytes_feature(octree_file), 'label': _int64_feature(label[i]), 'index': _int64_feature(index[i]), 'filename': _bytes_feature(('%06d_%s' % (i, data[i])).encode('utf8'))}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "tensorflow/util/octree_samples.py": {
        "tensorflow": {
            "enable_eager_execution_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/util/parse_ckpt.py": {
        "tensorflow": {
            "list_variables_29": {
                "variable": {
                    "value": "all_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_checkpoint_49": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_variable_24": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "varis",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "tensorflow/util/parse_tfevents.py": {
        "tensorflow": {
            "summary_iterator_17": {
                "path": {
                    "value": "args.event",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/util/revert_tfrecords.py": {
        "tensorflow": {
            "tf_record_iterator_19": {
                "variable": {
                    "value": "records_iterator",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "records_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Example_27": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/ocnn/__init__.py": {
        "torch": {}
    },
    "pytorch/ocnn/lenet.py": {
        "torch": {
            "ModuleList_13": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[octree_conv(d, channels[d + 1], channels[d]) for d in range(depth, 2, -1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_15": {
                "variable": {
                    "value": "self.pools",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[octree_pool(d) for d in range(depth, 2, -1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "self.header",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Dropout(p=0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_19": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_21": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "channels[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nout",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/ocnn/mlp.py": {
        "torch": {
            "Linear_8": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_21": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_6": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/ocnn/modules.py": {
        "torch": {
            "squeeze_217": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(data).t()",
                            "Call"
                        ],
                        [
                            "torch.squeeze(torch.squeeze(data, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(data, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.utils.checkpoint.checkpoint(self.resblks[i], data, octree)",
                            "Call"
                        ],
                        [
                            "self.resblks[i](data, octree)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_217": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_219": {
                "input": {
                    "value": "output.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_239": {
                "variable": {
                    "value": "(xyzf, ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([xyz, pts[:, 3:]], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "floor_241": {
                "variable": {
                    "value": "xyzi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xyzf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyzf - 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_244": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xyzi, ids]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_254": {
                "variable": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "npt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_257": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ids, idx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_261": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.prod(frac, dim=2).view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_269": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(data).t()",
                            "Call"
                        ],
                        [
                            "torch.squeeze(torch.squeeze(data, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(data, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.utils.checkpoint.checkpoint(self.resblks[i], data, octree)",
                            "Call"
                        ],
                        [
                            "self.resblks[i](data, octree)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_270": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(data).t()",
                            "Call"
                        ],
                        [
                            "torch.squeeze(torch.squeeze(data, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(data, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.utils.checkpoint.checkpoint(self.resblks[i], data, octree)",
                            "Call"
                        ],
                        [
                            "self.resblks[i](data, octree)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_271": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.FloatTensor(indices.t(), weight, torch.Size([npt, h])).cuda()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(data).t()",
                            "Call"
                        ],
                        [
                            "torch.squeeze(torch.squeeze(data, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(data, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.utils.checkpoint.checkpoint(self.resblks[i], data, octree)",
                            "Call"
                        ],
                        [
                            "self.resblks[i](data, octree)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_272": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.FloatTensor(indices.t(), weight, torch.Size([npt, h])).cuda()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.ones(h, 1).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_273": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[idx.long()] * flgs.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(torch.unsqueeze(output.t(), dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sparse.mm(mat, data)",
                            "Call"
                        ],
                        [
                            "torch.div(output, norm + 1e-10)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(torch.unsqueeze(output.t(), dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "octree_trilinear_pts(data, octree, depth, xyz)",
                            "Call"
                        ],
                        [
                            "ocnn.octree_property(octree, 'feature', depth)",
                            "Call"
                        ],
                        [
                            "ocnn.nn.octree_depad(output, octree, depth)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "norm + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_274": {
                "input": {
                    "value": "output.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channel_out",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "bn_momentum",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channel_out",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "bn_momentum",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channel_out",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "bn_momentum",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Flatten_58": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "channel_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel_out",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_60": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channel_out",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "bn_momentum",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_74": {
                "variable": {
                    "value": "self.conv1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_78": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.maxpool(data_in, octree)",
                            "Call"
                        ],
                        [
                            "self.conv1x1c(data_in)",
                            "Call"
                        ],
                        [
                            "self.maxpool(data_in, octree)",
                            "Call"
                        ],
                        [
                            "self.conv1x1(data_in)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_80": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(data_in, octree)",
                            "Call"
                        ],
                        [
                            "self.bn(out)",
                            "Call"
                        ],
                        [
                            "self.conv(data_in, octree)",
                            "Call"
                        ],
                        [
                            "self.bn(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv(data_in, octree)",
                            "Call"
                        ],
                        [
                            "self.bn(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.flatten(data_in)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "self.bn(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(data_in, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.conv1x1(out)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(out, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.conv1x1(data_in)",
                            "Call"
                        ],
                        [
                            "self.bn(out)",
                            "Call"
                        ],
                        [
                            "self.conv1x1(data_in)",
                            "Call"
                        ],
                        [
                            "self.bn(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.depad(data_in, octree)",
                            "Call"
                        ],
                        [
                            "out.repeat(1, 1, 1, 8)",
                            "Call"
                        ],
                        [
                            "out.view(1, channel, -1, 1)",
                            "Call"
                        ],
                        [
                            "octree_trilinear(data, octree, self.depth, self.depth + 1)",
                            "Call"
                        ],
                        [
                            "octree_nearest_pts(data, octree, self.depth, pts, self.nempty)",
                            "Call"
                        ],
                        [
                            "octree_trilinear_pts(data, octree, self.depth, pts, self.nempty)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_88": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channel_out",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "bn_momentum",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_100": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channel_out",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "bn_momentum",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_101": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_128": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_160": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_180": {
                "variable": {
                    "value": "self.resblks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[resblk(depth, channels[i], channels[i + 1], 1, bottleneck, nempty) for i in range(self.resblk_num)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_310": {
                "variable": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xyz, pts[:, 3:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_260": {
                "input": {
                    "value": "frac",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyzf - xyzi",
                            "BinOp"
                        ],
                        [
                            "maskc - torch.unsqueeze(frac, dim=1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "prod_261": {
                "input": {
                    "value": "frac",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyzf - xyzi",
                            "BinOp"
                        ],
                        [
                            "maskc - torch.unsqueeze(frac, dim=1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_272": {
                "*size": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_246": {
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts.short()",
                            "Call"
                        ],
                        [
                            "ocnn.octree_encode_key(key).long()",
                            "Call"
                        ],
                        [
                            "torch.cat([xyzi, ids], dim=1).short()",
                            "Call"
                        ],
                        [
                            "ocnn.octree_encode_key(key).long()",
                            "Call"
                        ],
                        [
                            "(torch.unsqueeze(key, dim=1) + masku).view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/ocnn/octree2col.py": {
        "torch": {}
    },
    "pytorch/ocnn/octree2voxel.py": {
        "torch": {}
    },
    "pytorch/ocnn/octree_align.py": {
        "torch": {}
    },
    "pytorch/ocnn/octree_conv.py": {
        "torch": {
            "Parameter_90": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(conv_out, self.cdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_138": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "col",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ocnn.octree2col(data, octree, depth, self.kernel_size, self.stride, False)",
                            "Call"
                        ],
                        [
                            "col.view([self.cdim, -1])",
                            "Call"
                        ],
                        [
                            "torch.mm(self.weights.t(), data)",
                            "Call"
                        ],
                        [
                            "col.view(self.channel_out, self.kdim, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_139": {
                "input": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "octree_conv(data, self.weights, octree, self.depth, self.channel_out, self.kernel_size, self.stride, self.nempty)",
                            "Call"
                        ],
                        [
                            "ocnn.octree_pad(conv, octree, self.depth - 1)",
                            "Call"
                        ],
                        [
                            "torch.mm(self.weights, col)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(torch.unsqueeze(conv, 0), -1)",
                            "Call"
                        ],
                        [
                            "ocnn.octree_pad(conv, octree, depth - 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_154": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ocnn.octree_depad(data, octree, self.depth)",
                            "Call"
                        ],
                        [
                            "ocnn.octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(torch.squeeze(data, dim=0), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_155": {
                "variable": {
                    "value": "col",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weights.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ocnn.octree_depad(data, octree, self.depth)",
                            "Call"
                        ],
                        [
                            "ocnn.octree_depad(data, octree, depth)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(torch.squeeze(data, dim=0), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch/ocnn/octree_pad.py": {
        "torch": {}
    },
    "pytorch/ocnn/octree_pool.py": {
        "torch": {}
    },
    "pytorch/ocnn/ounet.py": {
        "torch": {
            "ModuleList_21": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ocnn.OctreeResBlocks(d, self.channels[d], self.channels[d], self.resblk_num, nempty=self.nempty) for d in range(depth, full_depth - 1, -1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_25": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ocnn.OctreeConvBnRelu(d, self.channels[d], self.channels[d - 1], kernel_size=[2], stride=2, nempty=self.nempty) for d in range(depth, full_depth, -1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_31": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ocnn.OctreeDeConvBnRelu(d - 1, self.channels[d - 1], self.channels[d], kernel_size=[2], stride=2, nempty=self.nempty) for d in range(full_depth + 1, depth + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_35": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ocnn.OctreeResBlocks(d, self.channels[d], self.channels[d], self.resblk_num, nempty=self.nempty) for d in range(full_depth + 1, depth + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_41": {
                "variable": {
                    "value": "self.predict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self._make_predict_module(self.channels[d], 2) for d in range(full_depth, depth + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "*args": {
                    "value": "ocnn.OctreeConv1x1BnRelu(channel_in, num_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_87": {
                "variable": {
                    "value": "output[loss_%d % d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict[i](deconvs[d])",
                            "Call"
                        ],
                        [
                            "logit.squeeze().t()",
                            "Call"
                        ],
                        [
                            "self.predict[i](deconvs[d])",
                            "Call"
                        ],
                        [
                            "logit.squeeze().t()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ocnn.octree_property(octree_out, 'split', d).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_93": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.header(deconvs[d])",
                            "Call"
                        ],
                        [
                            "torch.tanh(signal)",
                            "Call"
                        ],
                        [
                            "self.header(deconvs[d])",
                            "Call"
                        ],
                        [
                            "torch.tanh(signal)",
                            "Call"
                        ],
                        [
                            "torch.cat([normal, signal[:, 3:]], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_97": {
                "variable": {
                    "value": "output[loss_reg%d % d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(signal_gt - signal) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_126": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.header(deconvs[d])",
                            "Call"
                        ],
                        [
                            "torch.tanh(signal)",
                            "Call"
                        ],
                        [
                            "self.header(deconvs[d])",
                            "Call"
                        ],
                        [
                            "torch.tanh(signal)",
                            "Call"
                        ],
                        [
                            "torch.cat([normal, signal[:, 3:]], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_127": {
                "variable": {
                    "value": "normal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "signal[:, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[normal, signal[:, 3:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/ocnn/resnet.py": {
        "torch": {
            "ModuleList_13": {
                "variable": {
                    "value": "self.resblocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ocnn.OctreeResBlocks(d, channels[d + 1], channels[d], resblk_num) for d in range(depth, 2, -1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_16": {
                "variable": {
                    "value": "self.pools",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ocnn.OctreeMaxPool(d) for d in range(depth, 2, -1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "self.header",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ocnn.FullOctreeGlobalPool(depth=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "channels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nout",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/ocnn/segnet.py": {
        "torch": {
            "ModuleList_14": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ocnn.OctreeConvBnRelu(d, channels[d + 1], channels[d]) for d in range(depth, 2, -1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_17": {
                "variable": {
                    "value": "self.pools",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ocnn.OctreeMaxPool(d, return_indices=True) for d in range(depth, 2, -1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_20": {
                "variable": {
                    "value": "self.deconvs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ocnn.OctreeConvBnRelu(d, channels[d], channels[d + 1]) for d in range(2, depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_23": {
                "variable": {
                    "value": "self.unpools",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ocnn.OctreeMaxUnpool(d) for d in range(2, depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.header",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ocnn.OctreeConv1x1BnRelu(channels[depth], 64)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/ocnn/transforms.py": {
        "torch": {
            "tensor_140": {
                "variable": {
                    "value": "outputs[label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/ocnn/unet.py": {
        "torch": {
            "ModuleList_20": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ocnn.OctreeConvBnRelu(depth - i, self.encoder_channel[i], self.encoder_channel[i + 1], kernel_size=[2], stride=2, nempty=nempty) for i in range(self.stages)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_24": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ocnn.OctreeResBlocks(depth - i - 1, self.encoder_channel[i + 1], self.encoder_channel[i + 1], self.encoder_blocks[i], self.bottleneck, nempty, self.resblk, self.use_checkpoint) for i in range(self.stages)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_33": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ocnn.OctreeDeConvBnRelu(depth + i, self.decoder_channel[i], self.decoder_channel[i + 1], kernel_size=[2], stride=2, nempty=nempty) for i in range(self.stages)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_37": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ocnn.OctreeResBlocks(depth + i + 1, channel[i], self.decoder_channel[i + 1], self.decoder_blocks[i], self.bottleneck, nempty, self.resblk, self.use_checkpoint) for i in range(self.stages)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "*args": {
                    "value": "ocnn.OctreeConv1x1BnRelu(channel_in, num_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[convd[depth_i], deconv]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/projects/classification.py": {
        "torch": {
            "log_softmax_26": {
                "variable": {
                    "value": "log_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(octree)",
                            "Call"
                        ],
                        [
                            "self.model(octree)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_27": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_softmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_33": {
                "variable": {
                    "value": "log_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(octree)",
                            "Call"
                        ],
                        [
                            "self.model(octree)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_34": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_softmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "argmax_35": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(octree)",
                            "Call"
                        ],
                        [
                            "self.model(octree)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/projects/completion.py": {
        "torch": {
            "sum_20": {
                "variable": {
                    "value": "output[loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(losses)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_20": {
                "tensors": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[val for (key, val) in output.items() if 'loss' in key]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch/projects/datasets/completion.py": {
        "torch": {
            "from_numpy_81": {
                "ndarray": {
                    "value": "normals",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_87": {
                "ndarray": {
                    "value": "points_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[rand_idx] + noise",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tensor_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_88": {
                "*size": {
                    "value": "self.points_number",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/projects/datasets/scannet.py": {
        "torch": {
            "from_numpy_23": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.fromfile(filename, dtype=np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_132": {
                "ndarray": {
                    "value": "normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack([vtx['nx'], vtx['ny'], vtx['nz']], axis=1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "ocnn.points_property(points, 'normal').numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_133": {
                "ndarray": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(vtx['label']).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "ocnn.points_property(points, 'label').squeeze().numpy()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch/projects/segmentation.py": {
        "torch": {
            "CrossEntropyLoss_11": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_29": {
                "variable": {
                    "value": "intsc[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.logical_and(pk, lk).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_30": {
                "variable": {
                    "value": "union[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.logical_or(pk, lk).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_105": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(octree, pts)",
                            "Call"
                        ],
                        [
                            "self.model(octree, pts)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_and_29": {
                "input": {
                    "value": "pk",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "lk",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "logical_or_30": {
                "input": {
                    "value": "pk",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "lk",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_32": {
                "input": {
                    "value": "lk.any()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/projects/solver/dataset.py": {
        "torch": {
            "from_numpy_10": {
                "ndarray": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.fromfile(filename, dtype=np.uint8)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch/projects/solver/sampler.py": {
        "torch": {
            "randperm_13": {
                "n": {
                    "value": "num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_13": {
                "start": {
                    "value": "num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.dataset)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch/projects/solver/solver.py": {
        "torch": {
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_72": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_119": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "flags.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "flags.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedInfSampler(dataset, shuffle=flags.shuffle)",
                            "Call"
                        ],
                        [
                            "InfSampler(dataset, shuffle=flags.shuffle)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_274": {
                "variable": {
                    "value": "trained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ckpts[:-self.FLAGS.SOLVER.ckpt_num]",
                            "Subscript"
                        ],
                        [
                            "self.FLAGS.SOLVER.ckpt",
                            "Attribute"
                        ],
                        [
                            "os.path.join(self.ckpt_dir, ckpts[-1])",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_45": {
                "variable": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tensors_gather",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.ones_like(tensor) for _ in range(torch.distributed.get_world_size())]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_46": {
                "variable": {
                    "value": "self.value[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(tensors_gather, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_130": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_model(self.FLAGS.MODEL)",
                            "Call"
                        ],
                        [
                            "torch.nn.SyncBatchNorm.convert_sync_batchnorm(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(module=model, device_ids=[self.device], output_device=self.device, broadcast_buffers=False, find_unused_parameters=False)",
                            "Call"
                        ],
                        [
                            "self.model.module if self.world_size > 1 else self.model",
                            "IfExp"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[self.device]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_143": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flags.lr * self.world_size",
                            "BinOp"
                        ],
                        [
                            "self.scheduler.get_last_lr()",
                            "Call"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "flags.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_153": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "milestones": {
                    "value": "flags.step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SummaryWriter_177": {
                "variable": {
                    "value": "self.summry_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self.logdir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "flush_secs": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_255": {
                "obj": {
                    "value": "model_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.module.state_dict() if self.world_size > 1 else self.model.state_dict()",
                            "IfExp"
                        ],
                        [
                            "trained_dict['model_dict']",
                            "Subscript"
                        ],
                        [
                            "trained_dict",
                            "variable"
                        ]
                    ]
                },
                "f": {
                    "value": "ckpt_name + '.model.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_256": {
                "obj": {
                    "value": "{'model_dict': model_dict, 'epoch': epoch, 'optimizer_dict': self.optimizer.state_dict(), 'scheduler_dict': self.scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_name + '.solver.tar'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_147": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flags.lr * self.world_size",
                            "BinOp"
                        ],
                        [
                            "self.scheduler.get_last_lr()",
                            "Call"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "flags.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_156": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "flags.max_epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "profile_351": {
                "use_cuda": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "profile_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "with_stack": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "record_shapes": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_device_373": {
                "device": {
                    "value": "gpu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_42": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LambdaLR_160": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "poly",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LambdaLR_163": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lambda epoch: 1",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/projects/tools/octree_samples.py": {
        "torch": {}
    },
    "pytorch/projects/tools/visualize_net.py": {
        "torch": {
            "SummaryWriter_5": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "logs/resnet",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/setup.py": {
        "torch": {}
    },
    "pytorch/test/test_octree2col.py": {
        "torch": {
            "rand_107": {
                "variable": {
                    "value": "data_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "node_num.item()",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "variable": {
                    "value": "data_in",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.data_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_77": {
                "variable": {
                    "value": "data_in",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.data_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradcheck_80": {
                "variable": {
                    "value": "succ",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "ocnn.octree2col",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[data_in, octree, self.depth, kernel_size[j], stride[i], False]",
                            "List"
                        ]
                    ]
                },
                "eps": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_91": {
                "variable": {
                    "value": "data_in",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.data_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_124": {
                "variable": {
                    "value": "pesudo_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out1.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "out1.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "out1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/test/test_octree_align.py": {
        "torch": {
            "rand_16": {
                "variable": {
                    "value": "data_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_18": {
                "variable": {
                    "value": "idx_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_36": {
                "variable": {
                    "value": "data_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "data_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data_in, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_40": {
                "variable": {
                    "value": "idx_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_57": {
                "variable": {
                    "value": "data_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "grad_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones(1, 3, 8, 1), torch.zeros(1, 3, 8, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_64": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/test/test_octree_conv.py": {
        "torch": {
            "from_numpy_33": {
                "variable": {
                    "value": "data1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(-1.0, 1.0, [1, channel, height, 1]).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_37": {
                "variable": {
                    "value": "data2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(-1.0, 1.0, [1, channel, height, 1]).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_43": {
                "variable": {
                    "value": "data3",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(-1.0, 1.0, [1, channel, height, 1]).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_50": {
                "variable": {
                    "value": "data4",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(-1.0, 1.0, [1, channel, height, 1]).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_56": {
                "variable": {
                    "value": "pesudo_grad1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out1.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "out1.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "out1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_60": {
                "variable": {
                    "value": "pesudo_grad2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out3.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "out3.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "out3.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/test/test_octree_deconv.py": {
        "torch": {
            "from_numpy_33": {
                "variable": {
                    "value": "data1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(-1.0, 1.0, [1, channel, height, 1]).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_37": {
                "variable": {
                    "value": "data2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(-1.0, 1.0, [1, channel, height, 1]).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_43": {
                "variable": {
                    "value": "data3",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(-1.0, 1.0, [1, channel, height, 1]).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_50": {
                "variable": {
                    "value": "data4",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(-1.0, 1.0, [1, channel, height, 1]).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_56": {
                "variable": {
                    "value": "pesudo_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out1.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "out1.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "out1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_60": {
                "variable": {
                    "value": "pesudo_grad2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out3.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "out3.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "out3.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/test/test_octree_grow.py": {
        "torch": {}
    },
    "pytorch/test/test_octree_key.py": {
        "torch": {}
    },
    "pytorch/test/test_octree_pool.py": {
        "torch": {
            "from_numpy_29": {
                "variable": {
                    "value": "data_in",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8], [8.1, 7.2, 6.3, 5.4, 4.5, 3.6, 2.7, 1.8]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.concatenate([data, data], axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(data, (1, channel, height, 1))",
                            "Call"
                        ],
                        [
                            "np.array([[1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8], [8.1, 7.2, 6.3, 5.4, 4.5, 3.6, 2.7, 1.8]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.concatenate([data, data], axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(data, (1, channel, height, 1))",
                            "Call"
                        ],
                        [
                            "np.array([[8.0, 2.2, 3.3, 4.4, 5.5, 6.6, 7.6, 0.8], [12.0, 7.0, 6.0, 5.0, 4.0, 3.0, 3.0, 8.0]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.concatenate([data, data], axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(data, (1, channel, height, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_33": {
                "variable": {
                    "value": "pesudo_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8], [8.1, 7.2, 6.3, 5.4, 4.5, 3.6, 2.7, 1.8]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.concatenate([data, data], axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(data, (1, channel, height, 1))",
                            "Call"
                        ],
                        [
                            "np.array([[1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8], [8.1, 7.2, 6.3, 5.4, 4.5, 3.6, 2.7, 1.8]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.concatenate([data, data], axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(data, (1, channel, height, 1))",
                            "Call"
                        ],
                        [
                            "np.array([[8.0, 2.2, 3.3, 4.4, 5.5, 6.6, 7.6, 0.8], [12.0, 7.0, 6.0, 5.0, 4.0, 3.0, 3.0, 8.0]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.concatenate([data, data], axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(data, (1, channel, height, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_60": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[[[1], [9]], [[2], [10]]]], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).to('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_61": {
                "variable": {
                    "value": "data_in",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8], [8.1, 7.2, 6.3, 5.4, 4.5, 3.6, 2.7, 1.8]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.concatenate([data, data], axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(data, (1, channel, height, 1))",
                            "Call"
                        ],
                        [
                            "np.array([[1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8], [8.1, 7.2, 6.3, 5.4, 4.5, 3.6, 2.7, 1.8]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.concatenate([data, data], axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(data, (1, channel, height, 1))",
                            "Call"
                        ],
                        [
                            "np.array([[8.0, 2.2, 3.3, 4.4, 5.5, 6.6, 7.6, 0.8], [12.0, 7.0, 6.0, 5.0, 4.0, 3.0, 3.0, 8.0]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.concatenate([data, data], axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(data, (1, channel, height, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "pesudo_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8], [8.1, 7.2, 6.3, 5.4, 4.5, 3.6, 2.7, 1.8]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.concatenate([data, data], axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(data, (1, channel, height, 1))",
                            "Call"
                        ],
                        [
                            "np.array([[1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8], [8.1, 7.2, 6.3, 5.4, 4.5, 3.6, 2.7, 1.8]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.concatenate([data, data], axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(data, (1, channel, height, 1))",
                            "Call"
                        ],
                        [
                            "np.array([[8.0, 2.2, 3.3, 4.4, 5.5, 6.6, 7.6, 0.8], [12.0, 7.0, 6.0, 5.0, 4.0, 3.0, 3.0, 8.0]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.concatenate([data, data], axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(data, (1, channel, height, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_92": {
                "variable": {
                    "value": "data_in",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8], [8.1, 7.2, 6.3, 5.4, 4.5, 3.6, 2.7, 1.8]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.concatenate([data, data], axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(data, (1, channel, height, 1))",
                            "Call"
                        ],
                        [
                            "np.array([[1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8], [8.1, 7.2, 6.3, 5.4, 4.5, 3.6, 2.7, 1.8]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.concatenate([data, data], axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(data, (1, channel, height, 1))",
                            "Call"
                        ],
                        [
                            "np.array([[8.0, 2.2, 3.3, 4.4, 5.5, 6.6, 7.6, 0.8], [12.0, 7.0, 6.0, 5.0, 4.0, 3.0, 3.0, 8.0]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.concatenate([data, data], axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(data, (1, channel, height, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_96": {
                "variable": {
                    "value": "pesudo_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8], [8.1, 7.2, 6.3, 5.4, 4.5, 3.6, 2.7, 1.8]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.concatenate([data, data], axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(data, (1, channel, height, 1))",
                            "Call"
                        ],
                        [
                            "np.array([[1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8], [8.1, 7.2, 6.3, 5.4, 4.5, 3.6, 2.7, 1.8]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.concatenate([data, data], axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(data, (1, channel, height, 1))",
                            "Call"
                        ],
                        [
                            "np.array([[8.0, 2.2, 3.3, 4.4, 5.5, 6.6, 7.6, 0.8], [12.0, 7.0, 6.0, 5.0, 4.0, 3.0, 3.0, 8.0]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.concatenate([data, data], axis=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(data, (1, channel, height, 1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch/test/test_octree_property.py": {
        "torch": {
            "cat_35": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ocnn.octree_property(octree, 'child', d) for d in range(1, 6)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/test/test_octree_trilinear.py": {
        "torch": {
            "ones_12": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, channel, nnum, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/test/test_points_property.py": {
        "torch": {
            "arange_11": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_11": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[-1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_12": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0], [0.0], [0.0], [1.0], [1.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_13": {
                "variable": {
                    "value": "points4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[points, index]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_14": {
                "variable": {
                    "value": "normals",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                },
                "step": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_14": {
                "variable": {
                    "value": "normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[-1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_15": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_16": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_16": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_47": {
                "start": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "input": {
                    "value": "[-1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_52": {
                "start": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_52": {
                "input": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}