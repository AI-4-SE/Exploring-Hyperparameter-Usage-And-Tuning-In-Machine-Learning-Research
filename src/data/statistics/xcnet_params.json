{
    "src/data/create_database.py": {
        "sklearn": {
            "StandardScaler_96": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PCA_107": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "self.feature_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_211": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_155": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "pos // 14 * 16",
                            "BinOp"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_75": {
                "obj": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx.tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/data/analogies_generator.py": {
        "torch": {
            "is_tensor_43": {
                "obj": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx.tolist()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/data/utils.py": {
        "torch": {
            "cat_28": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x[:, None, :, :], y[:, None, :, :], z[:, None, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_36": {
                "variable": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(r[:, None, :, :], g[:, None, :, :], b[:, None, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_37": {
                "variable": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((rgb + 0.055) / 1.055) ** 2.4 * mask + rgb / 12.92 * (1 - mask)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((r[:, None, :, :], g[:, None, :, :], b[:, None, :, :]), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.max(rgb, torch.zeros_like(rgb))",
                            "Call"
                        ],
                        [
                            "(1.055 * rgb ** (1.0 / 2.4) - 0.055) * mask + 12.92 * rgb * (1 - mask)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_57": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(L[:, None, :, :], a[:, None, :, :], b[:, None, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_int[:, None, :, :], y_int[:, None, :, :], z_int[:, None, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(l_rs, ab_rs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "lab",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(l, ab)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_66": {
                "variable": {
                    "value": "z_int",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor((0,)).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_68": {
                "variable": {
                    "value": "z_int",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor((0,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_37": {
                "input": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((rgb + 0.055) / 1.055) ** 2.4 * mask + rgb / 12.92 * (1 - mask)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((r[:, None, :, :], g[:, None, :, :], b[:, None, :, :]), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.max(rgb, torch.zeros_like(rgb))",
                            "Call"
                        ],
                        [
                            "(1.055 * rgb ** (1.0 / 2.4) - 0.055) * mask + 12.92 * rgb * (1 - mask)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/engine.py": {
        "torch": {
            "SummaryWriter_35": {
                "variable": {
                    "value": "self._writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "output_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "tgt_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tgt_luma_input, tgt_luma_input, tgt_luma_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "ref_luma_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ref_luma_input, ref_luma_input, ref_luma_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "tgt_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(luma_input, luma_input, luma_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_68": {
                "obj": {
                    "value": "{'epoch': self._epoch, 'step': self._step, 'model_state_dict': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "self.checkpoint_dir + '/epoch:%d-step:%d.pth' % (self._epoch, self._step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "tgt_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(luma_input, luma_input, luma_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "colour_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(luma_input, prediction)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/axial_attention.py": {
        "torch": {
            "Parameter_39": {
                "variable": {
                    "value": "self.in_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(2 * out_dim, in_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_48": {
                "variable": {
                    "value": "self.relative",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(self.head_dim * 2, kernel_size * 2 - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_49": {
                "variable": {
                    "value": "query_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_49": {
                "variable": {
                    "value": "query_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_50": {
                "variable": {
                    "value": "key_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_50": {
                "variable": {
                    "value": "key_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_114": {
                "variable": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.relative",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "self.flatten_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_117": {
                "variable": {
                    "value": "(q_embedding, k_embedding, v_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(self.relative, 1, self.flatten_index).view(self.head_dim * 2, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[self.head_dim // 2, self.head_dim // 2, self.head_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_125": {
                "variable": {
                    "value": "qr",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bgci,cij->bgij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "q.contiguous().view(bsz * width, height, self.num_heads, self.head_dim // 2).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "F.linear(query, _w, _b)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_126": {
                "variable": {
                    "value": "kr",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bgci,cij->bgij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "k.contiguous().view(bsz * width, height, self.num_heads, self.head_dim // 2).permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_126": {
                "variable": {
                    "value": "kr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_127": {
                "variable": {
                    "value": "qk",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bgci, bgcj->bgij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "q.contiguous().view(bsz * width, height, self.num_heads, self.head_dim // 2).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "F.linear(query, _w, _b)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_129": {
                "variable": {
                    "value": "stacked_similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[qk, qr, kr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_132": {
                "variable": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "stacked_similarity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([qk, qr, kr], dim=1)",
                            "Call"
                        ],
                        [
                            "stacked_similarity.view(bsz * width, 3, self.num_heads, height, height).sum(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_134": {
                "variable": {
                    "value": "sv",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bgij,bgcj->bgci",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(stacked_similarity, dim=3)",
                            "Call"
                        ],
                        [
                            "similarity.view(bsz, width, self.num_heads, height, height)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_135": {
                "variable": {
                    "value": "sve",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bgij,cij->bgci",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(stacked_similarity, dim=3)",
                            "Call"
                        ],
                        [
                            "similarity.view(bsz, width, self.num_heads, height, height)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_136": {
                "variable": {
                    "value": "stacked_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sv, sve]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linear_138": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stacked_output.view(bsz * width, self.out_dim, 2, height).sum(dim=-2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.linear(output, self.out_proj.weight, self.out_proj.bias)",
                            "Call"
                        ],
                        [
                            "output.view(bsz, width, height, self.out_dim).transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "output.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "output.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.out_proj.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.out_proj.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.in_proj_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(2 * out_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_77": {
                "variable": {
                    "value": "qkv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "query.contiguous().view(bsz * width, height, in_dim)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "query.contiguous().view(bsz * width, height, in_dim)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.in_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.in_proj_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_78": {
                "variable": {
                    "value": "(q, k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "qkv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(query, self.in_proj_weight, self.in_proj_bias)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[self.out_dim // 2, self.out_dim // 2, self.out_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_39": {
                "*size": {
                    "value": "2 * out_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_48": {
                "*size": {
                    "value": "self.head_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "kernel_size * 2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_70": {
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "key.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "key.contiguous().view(bsz * width, height, in_dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_80": {
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "key.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "key.contiguous().view(bsz * width, height, in_dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linear_93": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "query.contiguous().view(bsz * width, height, in_dim)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "query.contiguous().view(bsz * width, height, in_dim)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_weight[_start:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "linear_105": {
                "variable": {
                    "value": "kv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "key.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "key.contiguous().view(bsz * width, height, in_dim)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_weight[_start:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "split_106": {
                "variable": {
                    "value": "(k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "kv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(key, _w, _b)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[self.out_dim // 2, self.out_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_42": {
                "*size": {
                    "value": "2 * out_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/axial_attention_no_pos.py": {
        "torch": {
            "Parameter_39": {
                "variable": {
                    "value": "self.in_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(2 * out_dim, in_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_112": {
                "variable": {
                    "value": "qk",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bgci, bgcj->bgij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "q * scaling",
                            "BinOp"
                        ],
                        [
                            "q.contiguous().view(bsz * width, height, self.num_heads, self.head_dim // 2).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "F.linear(query, _w, _b)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_114": {
                "variable": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bgci, bgcj->bgij', q, k)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_115": {
                "variable": {
                    "value": "sv",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bgij,bgcj->bgci",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(qk, dim=3)",
                            "Call"
                        ],
                        [
                            "similarity.view(bsz, width, self.num_heads, height, height)",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_118": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sv.view(bsz * width, self.out_dim, height).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.linear(output, self.out_proj.weight, self.out_proj.bias)",
                            "Call"
                        ],
                        [
                            "output.view(bsz, width, height, self.out_dim).transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "output.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "output.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.out_proj.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.out_proj.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.in_proj_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(2 * out_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_68": {
                "variable": {
                    "value": "qkv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "query.contiguous().view(bsz * width, height, in_dim)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "query.contiguous().view(bsz * width, height, in_dim)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.in_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.in_proj_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_69": {
                "variable": {
                    "value": "(q, k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "qkv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(query, self.in_proj_weight, self.in_proj_bias)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[self.out_dim // 2, self.out_dim // 2, self.out_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_39": {
                "*size": {
                    "value": "2 * out_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_61": {
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "key.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "key.contiguous().view(bsz * width, height, in_dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_71": {
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "key.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "key.contiguous().view(bsz * width, height, in_dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linear_84": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "query.contiguous().view(bsz * width, height, in_dim)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "query.contiguous().view(bsz * width, height, in_dim)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_weight[_start:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "linear_96": {
                "variable": {
                    "value": "kv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "key.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "key.contiguous().view(bsz * width, height, in_dim)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_weight[_start:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "split_97": {
                "variable": {
                    "value": "(k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "kv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(key, _w, _b)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[self.out_dim // 2, self.out_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_42": {
                "*size": {
                    "value": "2 * out_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/criterion.py": {
        "torch": {
            "AvgPool2d_33": {
                "variable": {
                    "value": "self._pool_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_34": {
                "variable": {
                    "value": "self._hist_loss_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1 + self._hist_loss_d",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "self._hist_loss_d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SmoothL1Loss_47": {
                "variable": {
                    "value": "self._smoothL1Loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_48": {
                "variable": {
                    "value": "self._mseLoss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_72": {
                "variable": {
                    "value": "ha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.1 - torch.abs(pre_a)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_73": {
                "variable": {
                    "value": "hb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.1 - torch.abs(pre_b)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_73": {
                "variable": {
                    "value": "hb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_92": {
                "variable": {
                    "value": "h_tv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction[:, :, 1:, :] - prediction[:, :, :h_x - 1, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_92": {
                "variable": {
                    "value": "h_tv",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_93": {
                "variable": {
                    "value": "w_tv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction[:, :, :, 1:] - prediction[:, :, :, :w_x - 1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_93": {
                "variable": {
                    "value": "w_tv",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_165": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_81": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(th - rh) ** 2 / (th + rh + 1e-05)",
                            "BinOp"
                        ],
                        [
                            "2 * torch.sum(loss.flatten(1), 1)",
                            "BinOp"
                        ],
                        [
                            "self.weight_dict.keys()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_123": {
                "variable": {
                    "value": "predictions[head]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(target[:, [0], :, :], predictions[head])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_43": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "d.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cf.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_74": {
                "input": {
                    "value": "ha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(0.1 - torch.abs(pre_a), 0)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "hb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(0.1 - torch.abs(pre_b), 0).transpose(2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_80": {
                "input": {
                    "value": "loss.flatten(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_163": {
                "data": {
                    "value": "target_real_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_164": {
                "data": {
                    "value": "target_fake_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_72": {
                "input": {
                    "value": "pre_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(batch[:, 1].flatten(1) - self._hist_loss_z[:, None, None]).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_73": {
                "input": {
                    "value": "pre_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(batch[:, 2].flatten(1) - self._hist_loss_z[:, None, None]).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/discriminator.py": {
        "torch": {
            "Sequential_73": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*sequence",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "LeakyReLU_52": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_68": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_60": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/layers.py": {
        "torch": {
            "MultiheadAttention_36": {
                "variable": {
                    "value": "self.att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embed_dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "num_heads": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "variable": {
                    "value": "self.bn_tgt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_38": {
                "variable": {
                    "value": "self.bn_ref",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_39": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "variable": {
                    "value": "self.bn_tgt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "variable": {
                    "value": "self.bn_ref",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*sequence",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "variable": {
                    "value": "self.proj_tgt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_108": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim + dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_110": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_117": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.upsample(x1)",
                            "Call"
                        ],
                        [
                            "F.pad(x1, [diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x2, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_137": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_138": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_139": {
                "variable": {
                    "value": "self.out_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_153": {
                "variable": {
                    "value": "self.to_relu_1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_154": {
                "variable": {
                    "value": "self.to_relu_2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "variable": {
                    "value": "self.to_relu_3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_156": {
                "variable": {
                    "value": "self.to_relu_4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "self.to_relu_5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_158": {
                "variable": {
                    "value": "self.to_relu_5_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "variable": {
                    "value": "self.proj_ref",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/xcnet.py": {
        "torch": {}
    },
    "src/train.py": {
        "torch": {
            "device_41": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_56": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cf.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_68": {
                "variable": {
                    "value": "train_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AnalogiesImagenet(args.data_path + '/analogies/train/analogies.npy', root_dir=args.data_path + '/img', device=device, input_shape=cf.input_shape)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cf.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cf.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_71": {
                "variable": {
                    "value": "val_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AnalogiesImagenet(args.data_path + '/analogies/val/analogies.npy', root_dir=args.data_path + '/img', device=device, input_shape=cf.input_shape)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cf.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cf.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_43": {
                "seed": {
                    "value": "cf.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}