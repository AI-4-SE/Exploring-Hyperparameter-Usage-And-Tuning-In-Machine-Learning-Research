{
    "data/datasets.py": {
        "torch": {
            "from_numpy_288": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ],
                        [
                            "self.pull_photo(index)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "cv2.imread(style_file)",
                            "Call"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "permute_288": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_289": {
                "variable": {
                    "value": "style_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "style_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pull_style(index)",
                            "Call"
                        ],
                        [
                            "img",
                            "Name"
                        ],
                        [
                            "fix_size(style_img, height, width)",
                            "Call"
                        ],
                        [
                            "style_img[:, :, (2, 1, 0)].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(style_img).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "cv2.imread(style_file)",
                            "Call"
                        ],
                        [
                            "fix_size(style_img, height, width)",
                            "Call"
                        ],
                        [
                            "img",
                            "Name"
                        ],
                        [
                            "style_img[:, :, (2, 1, 0)].astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_289": {
                "variable": {
                    "value": "style_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_552": {
                "ndarray": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ],
                        [
                            "self.pull_photo(index)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "cv2.imread(style_file)",
                            "Call"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "permute_552": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_142": {
                "ndarray": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ],
                        [
                            "self.pull_photo(index)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "cv2.imread(style_file)",
                            "Call"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "permute_142": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_306": {
                "ndarray": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ],
                        [
                            "self.pull_photo(index)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "cv2.imread(style_file)",
                            "Call"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "permute_306": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_393": {
                "ndarray": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ],
                        [
                            "self.pull_photo(index)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "cv2.imread(style_file)",
                            "Call"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "permute_393": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_456": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_473": {
                "ndarray": {
                    "value": "style_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pull_style(index)",
                            "Call"
                        ],
                        [
                            "img",
                            "Name"
                        ],
                        [
                            "fix_size(style_img, height, width)",
                            "Call"
                        ],
                        [
                            "style_img[:, :, (2, 1, 0)].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(style_img).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "cv2.imread(style_file)",
                            "Call"
                        ],
                        [
                            "fix_size(style_img, height, width)",
                            "Call"
                        ],
                        [
                            "img",
                            "Name"
                        ],
                        [
                            "style_img[:, :, (2, 1, 0)].astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_473": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_490": {
                "ndarray": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ],
                        [
                            "self.pull_photo(index)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "cv2.imread(style_file)",
                            "Call"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "permute_490": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "eval.py": {
        "torch": {
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_default_tensor_type_30": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_32": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_367": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "masked_select_377": {
                "variable": {
                    "value": "dets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "all_boxes[cls_ind + 1][im_ind]",
                            "Subscript"
                        ],
                        [
                            "detections[0, j, :]",
                            "Subscript"
                        ],
                        [
                            "torch.masked_select(dets, mask).view(-1, 5)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dets[:, 0].gt(conf_thresh).expand(5, dets.size(0)).t()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "load_102": {
                "variable": {
                    "value": "state_dict_to_load",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_71": {
                "f": {
                    "value": "trained_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'weights/ssd300_mAP_77.43_v2.pth'",
                            "Constant"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "models/layers/box_utils.py": {
        "torch": {
            "min_42": {
                "variable": {
                    "value": "max_xy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_a[:, 2:].unsqueeze(1).expand(A, B, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_44": {
                "variable": {
                    "value": "min_xy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_a[:, :2].unsqueeze(1).expand(A, B, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_46": {
                "variable": {
                    "value": "inter",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_xy - min_xy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(priors[:, :2] + loc[:, :2] * variances[0] * priors[:, 2:], priors[:, 2:] * torch.exp(loc[:, 2:] * variances[1]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_194": {
                "variable": {
                    "value": "area",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2 - x1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "y2 - y1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_13": {
                "tensors": {
                    "value": "(boxes[:, :2] - boxes[:, 2:] / 2, boxes[:, :2] + boxes[:, 2:] / 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_25": {
                "tensors": {
                    "value": "(boxes[:, 2:] + boxes[:, :2]) / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "boxes[:, 2:] - boxes[:, :2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_136": {
                "tensors": {
                    "value": "[g_cxcy, g_wh]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_221": {
                "variable": {
                    "value": "xx1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xx1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(xx1, min=x1[i])",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "x1[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "boxes[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_222": {
                "variable": {
                    "value": "yy1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yy1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(yy1, min=y1[i])",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "y1[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "boxes[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_223": {
                "variable": {
                    "value": "xx2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xx2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(xx2, max=x2[i])",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "x2[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "boxes[:, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_224": {
                "variable": {
                    "value": "yy2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yy2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(yy2, max=y2[i])",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "y2[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "boxes[:, 3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_230": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "xx2 - xx1",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(w, min=0.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_231": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "yy2 - yy1",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(h, min=0.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "index_select_234": {
                "variable": {
                    "value": "rem_areas",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "area",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mul(x2 - x1, y2 - y1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "idx[-top_k:]",
                            "Subscript"
                        ],
                        [
                            "idx[:-1]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(overlap)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_134": {
                "input": {
                    "value": "g_wh",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(matched[:, 2:] - matched[:, :2]) / priors[:, 2:]",
                            "BinOp"
                        ],
                        [
                            "torch.log(g_wh) / variances[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_169": {
                "input": {
                    "value": "torch.sum(torch.exp(x - x_max), 1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_216": {
                "input": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "idx[-top_k:]",
                            "Subscript"
                        ],
                        [
                            "idx[:-1]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(overlap)]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "xx1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(xx1, min=x1[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_217": {
                "input": {
                    "value": "y1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes[:, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "idx[-top_k:]",
                            "Subscript"
                        ],
                        [
                            "idx[:-1]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(overlap)]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "yy1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(yy1, min=y1[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_218": {
                "input": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes[:, 2]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "idx[-top_k:]",
                            "Subscript"
                        ],
                        [
                            "idx[:-1]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(overlap)]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "xx2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(xx2, max=x2[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_219": {
                "input": {
                    "value": "y2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes[:, 3]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "idx[-top_k:]",
                            "Subscript"
                        ],
                        [
                            "idx[:-1]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(overlap)]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "yy2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(yy2, max=y2[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_169": {
                "input": {
                    "value": "torch.exp(x - x_max)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_155": {
                "input": {
                    "value": "loc[:, 2:] * variances[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_169": {
                "input": {
                    "value": "x - x_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/layers/functions/detection.py": {
        "torch": {
            "zeros_50": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loc_data.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.top_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "output[i, cl, :count]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(scores[ids[:count]].unsqueeze(1), boxes[ids[:count]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/layers/functions/detection_old.py": {
        "torch": {
            "zeros_37": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loc_data.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.top_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "output[i, cl, :count]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(scores[ids[:count]].unsqueeze(1), boxes[ids[:count]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/layers/functions/prior_box.py": {
        "torch": {
            "Tensor_55": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/layers/modules/feature_loss.py": {
        "torch": {
            "MaxPool2d_13": {
                "variable": {
                    "value": "self.max_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CosineEmbeddingLoss_10": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_12": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_17": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/layers/modules/l2norm.py": {
        "torch": {
            "Parameter_12": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_21": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.div(x, norm)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.pow(2).sum(dim=1, keepdim=True).sqrt() + self.eps",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "models/layers/modules/multibox_loss.py": {
        "torch": {
            "Tensor_68": {
                "variable": {
                    "value": "loc_t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_92": {
                "variable": {
                    "value": "loss_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loc_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loc_data[pos_idx].view(-1, 4)",
                            "Call"
                        ],
                        [
                            "loc_data[pos_idx].view(-1, 4)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "loc_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor(num, num_priors, 4)",
                            "Call"
                        ],
                        [
                            "loc_t.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(loc_t, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "loc_t[pos_idx].view(-1, 4)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(num, num_priors, 4)",
                            "Call"
                        ],
                        [
                            "loc_t.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(loc_t, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "loc_t[pos_idx].view(-1, 4)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_159": {
                "variable": {
                    "value": "loss_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conf_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conf_data[(pos_idx + neg_idx).gt(0)].view(-1, self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets_weighted",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conf_t[(pos + neg).gt(0)]",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tensor_228": {
                "variable": {
                    "value": "loc_t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_252": {
                "variable": {
                    "value": "loss_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loc_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loc_data[pos_idx].view(-1, 4)",
                            "Call"
                        ],
                        [
                            "loc_data[pos_idx].view(-1, 4)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "loc_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor(num, num_priors, 4)",
                            "Call"
                        ],
                        [
                            "loc_t.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(loc_t, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "loc_t[pos_idx].view(-1, 4)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(num, num_priors, 4)",
                            "Call"
                        ],
                        [
                            "loc_t.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(loc_t, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "loc_t[pos_idx].view(-1, 4)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_316": {
                "variable": {
                    "value": "loss_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conf_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conf_data[(pos_idx + neg_idx).gt(0)].view(-1, self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets_weighted",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conf_t[(pos + neg).gt(0)]",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clamp_105": {
                "variable": {
                    "value": "num_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.negpos_ratio * num_pos",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "pos.size(1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_114": {
                "variable": {
                    "value": "conf_neg_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conf_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_124": {
                "variable": {
                    "value": "num_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.negpos_ratio * num_pos",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "pos.size(1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_269": {
                "variable": {
                    "value": "num_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.negpos_ratio * num_pos",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "pos.size(1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_278": {
                "variable": {
                    "value": "conf_neg_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conf_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_288": {
                "variable": {
                    "value": "num_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.negpos_ratio * num_pos",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "pos.size(1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/vgg_ssd.py": {
        "torch": {
            "MaxPool2d_153": {
                "variable": {
                    "value": "pool5",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_154": {
                "variable": {
                    "value": "conv6",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_155": {
                "variable": {
                    "value": "conv7",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_38": {
                "variable": {
                    "value": "self.vgg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "base",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'300': [64, 64, 'M', 128, 128, 'M', 256, 256, 256, 'C', 512, 512, 512, 'M', 512, 512, 512], '512': []}",
                            "Dict"
                        ]
                    ]
                }
            },
            "ModuleList_42": {
                "variable": {
                    "value": "self.extras",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "extras",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'300': [256, 'S', 512, 128, 'S', 256, 128, 256, 128, 256], '512': []}",
                            "Dict"
                        ]
                    ]
                }
            },
            "ModuleList_44": {
                "variable": {
                    "value": "self.loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "head[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_45": {
                "variable": {
                    "value": "self.conf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "head[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Softmax_47": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[o.view(o.size(0), -1) for o in loc]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "conf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[o.view(o.size(0), -1) for o in conf]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_157": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_147": {
                "variable": {
                    "value": "conv2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i",
                            "Name"
                        ],
                        [
                            "v",
                            "Name"
                        ],
                        [
                            "i",
                            "Name"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_183": {
                "in_channels": {
                    "value": "vgg[v].out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cfg[k] * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_185": {
                "in_channels": {
                    "value": "vgg[v].out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cfg[k] * num_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_188": {
                "in_channels": {
                    "value": "v.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cfg[k] * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_190": {
                "in_channels": {
                    "value": "v.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cfg[k] * num_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_129": {
                "f": {
                    "value": "base_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "MaxPool2d_143": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_145": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_169": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i",
                            "Name"
                        ],
                        [
                            "v",
                            "Name"
                        ],
                        [
                            "i",
                            "Name"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "cfg[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3)[flag]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_172": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i",
                            "Name"
                        ],
                        [
                            "v",
                            "Name"
                        ],
                        [
                            "i",
                            "Name"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 3)[flag]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm2d_149": {
                "num_features": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_149": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_151": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/vgg_ssd_old.py": {
        "torch": {
            "MaxPool2d_152": {
                "variable": {
                    "value": "pool5",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_153": {
                "variable": {
                    "value": "conv6",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_154": {
                "variable": {
                    "value": "conv7",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_38": {
                "variable": {
                    "value": "self.vgg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "base",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'300': [64, 64, 'M', 128, 128, 'M', 256, 256, 256, 'C', 512, 512, 512, 'M', 512, 512, 512], '512': []}",
                            "Dict"
                        ]
                    ]
                }
            },
            "ModuleList_42": {
                "variable": {
                    "value": "self.extras",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "extras",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'300': [256, 'S', 512, 128, 'S', 256, 128, 256, 128, 256], '512': []}",
                            "Dict"
                        ]
                    ]
                }
            },
            "ModuleList_44": {
                "variable": {
                    "value": "self.loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "head[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_45": {
                "variable": {
                    "value": "self.conf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "head[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Softmax_47": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[o.view(o.size(0), -1) for o in loc]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "conf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[o.view(o.size(0), -1) for o in conf]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_93": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_156": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_146": {
                "variable": {
                    "value": "conv2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i",
                            "Name"
                        ],
                        [
                            "v",
                            "Name"
                        ],
                        [
                            "i",
                            "Name"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_182": {
                "in_channels": {
                    "value": "vgg[v].out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cfg[k] * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_184": {
                "in_channels": {
                    "value": "vgg[v].out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cfg[k] * num_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_187": {
                "in_channels": {
                    "value": "v.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cfg[k] * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_189": {
                "in_channels": {
                    "value": "v.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cfg[k] * num_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_128": {
                "f": {
                    "value": "base_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "MaxPool2d_142": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_144": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_168": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i",
                            "Name"
                        ],
                        [
                            "v",
                            "Name"
                        ],
                        [
                            "i",
                            "Name"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "cfg[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3)[flag]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_171": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i",
                            "Name"
                        ],
                        [
                            "v",
                            "Name"
                        ],
                        [
                            "i",
                            "Name"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 3)[flag]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm2d_148": {
                "num_features": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_148": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_150": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess.py": {
        "torch": {
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pseudolabel.py": {
        "torch": {}
    },
    "stylenet.py": {
        "torch": {
            "Sequential_6": {
                "variable": {
                    "value": "decoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d((1, 1, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "vgg",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 3, (1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_7": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_8": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_10": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_11": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_14": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_17": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_20": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_23": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_24": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_27": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_30": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_31": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_34": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_40": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_43": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_46": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_47": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_50": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_53": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_54": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_57": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_60": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_63": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_66": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_67": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_70": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_73": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_76": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_79": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_80": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_83": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_86": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_89": {
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "styletransfer.py": {
        "torch": {
            "mm_119": {
                "variable": {
                    "value": "source_f_norm_transfer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_mat_sqrt(target_f_cov_eye)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.mm(torch.inverse(_mat_sqrt(source_f_cov_eye)), source_f_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "svd_143": {
                "variable": {
                    "value": "(U, D, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.vgg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(self.vgg.children())[:31]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "mm_144": {
                "input": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "D.pow(0.5).diag()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "round_53": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output * 255",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_111": {
                "input": {
                    "value": "source_f_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(source_f - source_f_mean.expand_as(source_f)) / source_f_std.expand_as(source_f)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "source_f_norm.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_111": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_117": {
                "input": {
                    "value": "target_f_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(target_f - target_f_mean.expand_as(target_f)) / target_f_std.expand_as(target_f)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "target_f_norm.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_117": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_121": {
                "input": {
                    "value": "torch.inverse(_mat_sqrt(source_f_cov_eye))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "source_f_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(source_f - source_f_mean.expand_as(source_f)) / source_f_std.expand_as(source_f)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_22": {
                "f": {
                    "value": "decoder_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'style-models/decoder.pth'",
                            "Constant"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_23": {
                "f": {
                    "value": "vgg_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'style-models/vgg_normalised.pth'",
                            "Constant"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Constant"
                        ]
                    ]
                }
            },
            "randint_39": {
                "variable": {
                    "value": "preserve_colour",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(outputs, output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "inverse_121": {
                "input": {
                    "value": "_mat_sqrt(source_f_cov_eye)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_pseudolabel.py": {
        "torch": {
            "SGD_40": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_75": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.StylizedVOCDetection(args.voc_root, args.target_domain, image_sets=[('2007', 'trainval'), ('2012', 'trainval')], transform=train_transform, dataset_name='VOC0712', stylized_root=stylized_root, mode=args.mode)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "style_detection_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_89": {
                "variable": {
                    "value": "ps_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ps_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.PseudolabelDataset(pslabels, args.style_root, args.target_domain, transform=train_transform, stylized_root=stylized_root, mode=args.mode)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "style_detection_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SummaryWriter_113": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(output_path, 'logs-pseudolabel')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "images_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ps_images, ps_style_ims, sc_images, sc_style_ims)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_197": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(output_path, 'weights', 'iteraton-{}.pth'.format(iteration))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "trainer.py": {
        "torch": {
            "DataLoader_30": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.StylizedVOCDetection(args.voc_root, args.target_domain, image_sets=[('2007', 'trainval'), ('2012', 'trainval')], transform=train_transform, dataset_name='VOC0712', stylized_root=stylized_root, mode=args.mode)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "style_detection_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_43": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_75": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "output_path + '/logs'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(images, style_ims)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_122": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(output_path, 'weights', 'iteraton-{}.pth'.format(iteration))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_159": {
                "variable": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bboxes, lbls)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "bidx_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bidx_targets, bboxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "bidx_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bidx_scores, scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_158": {
                "*size": {
                    "value": "bboxes.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/augmentations.py": {
        "torch": {
            "from_numpy_616": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "image + delta",
                            "BinOp"
                        ],
                        [
                            "cv2.resize(image, (self.size, self.size))",
                            "Call"
                        ],
                        [
                            "shuffle(image)",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(image, cv2.COLOR_BGR2HSV)",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(image, cv2.COLOR_HSV2BGR)",
                            "Call"
                        ],
                        [
                            "image[dh:dh + min_d, dw:dw + min_d, :]",
                            "Subscript"
                        ],
                        [
                            "expand_image",
                            "Name"
                        ],
                        [
                            "image[:, ::-1]",
                            "Subscript"
                        ],
                        [
                            "image[:, :, self.swaps]",
                            "Subscript"
                        ],
                        [
                            "self.pull_item(idx)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image).permute(2, 0, 1).float()",
                            "Call"
                        ],
                        [
                            "image[bgr2rgb, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "permute_616": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_238": {
                "ndarray": {
                    "value": "cvimage.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_238": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "save_74": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'weights', 'ssd300-final{}.pth'.format('-withpseudolabels' if pseudolabel else ''))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_79": {
                "obj": {
                    "value": "best_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'weights', 'ssd300-best{}.pth'.format('-withpseudolabels' if pseudolabel else ''))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "visualise_detections.py": {
        "torch": {
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_default_tensor_type_32": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_34": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}