{
    "ParlAI/parlai/agents/tfidf_retriever/tfidf_retriever.py": {
        "sklearn": {}
    },
    "ParlAI/parlai/agents/tfidf_retriever/utils.py": {
        "sklearn": {
            "murmurhash3_32_70": {
                "positive": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_56": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_44": {
                "obj": {
                    "value": "data",
                    "type": "Dict",
                    "possible_values": [
                        [
                            "{'data': matrix.data, 'indices': matrix.indices, 'indptr': matrix.indptr, 'shape': matrix.shape, 'metadata': metadata}",
                            "Dict"
                        ],
                        [
                            "{'indices': matrix._indices(), 'values': matrix._values(), 'size': matrix.size(), 'metadata': metadata}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "Toxicity/toxic.py": {
        "sklearn": {
            "train_test_split_74": {
                "variable": {
                    "value": "(train, test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LogisticRegression_49": {
                "variable": {
                    "value": "self.regressor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "C": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "dual": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "accuracy_score_90": {
                "y_true": {
                    "value": "train['toxic']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "train_preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logistic.predict(train[COMMENT])",
                            "Call"
                        ]
                    ]
                }
            },
            "recall_score_91": {
                "y_true": {
                    "value": "train['toxic']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "train_preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logistic.predict(train[COMMENT])",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_score_92": {
                "y_true": {
                    "value": "train['toxic']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "train_preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logistic.predict(train[COMMENT])",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_93": {
                "y_true": {
                    "value": "train['toxic']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "train_preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logistic.predict(train[COMMENT])",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_97": {
                "y_true": {
                    "value": "test['toxic']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "test_preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logistic.predict(test[COMMENT])",
                            "Call"
                        ]
                    ]
                }
            },
            "recall_score_98": {
                "y_true": {
                    "value": "test['toxic']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "test_preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logistic.predict(test[COMMENT])",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_score_99": {
                "y_true": {
                    "value": "test['toxic']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "test_preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logistic.predict(test[COMMENT])",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_100": {
                "y_true": {
                    "value": "test['toxic']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "test_preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logistic.predict(test[COMMENT])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "inferSent/api/reduce_embeddings_dimension.py": {
        "sklearn": {
            "PCA_16": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "num_components",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "torchMoji/torchmoji/finetuning.py": {
        "sklearn": {
            "f1_score_194": {
                "variable": {
                    "value": "f1_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred_ind",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_pred_test > best_t",
                            "Compare"
                        ]
                    ]
                },
                "average": {
                    "value": "average",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'binary'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "f1_score_189": {
                "variable": {
                    "value": "f1_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred_val_ind",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_pred_val > t",
                            "Compare"
                        ]
                    ]
                },
                "average": {
                    "value": "average",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'binary'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "accuracy_score_370": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y.squeeze().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred.squeeze().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Adam_256": {
                "variable": {
                    "value": "adam",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "(p for p in model.parameters() if p.requires_grad)",
                    "type": "GeneratorExp",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "initial_lr",
                            "Name"
                        ],
                        [
                            "next_lr",
                            "Name"
                        ]
                    ]
                }
            },
            "Adam_478": {
                "variable": {
                    "value": "adam",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': base_params}, {'params': embed_parameters, 'weight_decay': embed_l2}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "initial_lr",
                            "Name"
                        ],
                        [
                            "next_lr",
                            "Name"
                        ]
                    ]
                }
            },
            "save_521": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'{}/torchmoji-checkpoint-{}.bin'.format(WEIGHTS_DIR, str(uuid.uuid4()))",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchSampler_584": {
                "variable": {
                    "value": "batch_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "SequentialSampler(y_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "250 if maxlen <= 100 else 50",
                            "IfExp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_586": {
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DeepMojiDataset(X_in, y_in)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "DeepMojiBatchSampler(y_in, batch_size, epoch_size=epoch_size, upsample=upsample, seed=seed)",
                            "Call"
                        ],
                        [
                            "BatchSampler(SequentialSampler(y_in), batch_size, drop_last=False)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_605": {
                "variable": {
                    "value": "self.X_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "X_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(X_in.astype('int64')).long()",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_606": {
                "variable": {
                    "value": "self.y_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_in.astype('int64')).long()",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_265": {
                "variable": {
                    "value": "adam",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': base_params}, {'params': embed_params, 'weight_decay': embed_l2}, {'params': output_layer_params, 'lr': 0.001}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "initial_lr",
                            "Name"
                        ],
                        [
                            "next_lr",
                            "Name"
                        ]
                    ]
                }
            },
            "load_322": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'{}/torchmoji-checkpoint-{}.bin'.format(WEIGHTS_DIR, str(uuid.uuid4()))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_601": {
                "variable": {
                    "value": "X_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_in.astype('int64')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_603": {
                "variable": {
                    "value": "y_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_in.astype('int64')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_489": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'{}/torchmoji-checkpoint-{}.bin'.format(WEIGHTS_DIR, str(uuid.uuid4()))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_557": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'{}/torchmoji-checkpoint-{}.bin'.format(WEIGHTS_DIR, str(uuid.uuid4()))",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_584": {
                "data_source": {
                    "value": "y_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_in.astype('int64')).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_369": {
                "input": {
                    "value": "outs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "torchMoji/torchmoji/sentence_tokenizer.py": {
        "sklearn": {
            "train_test_split_180": {
                "variable": {
                    "value": "(ind_train, ind_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "ind",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "split_parameter[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[0.7",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "train_test_split_181": {
                "variable": {
                    "value": "(ind_train, ind_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "ind_train",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "split_parameter[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[0.7",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "HierarchicalRL/hrl_rewards.py": {
        "tensorflow": {
            "Session_368": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_365": {
                "variable": {
                    "value": "sents",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "input_sents",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_363": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_369": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_369": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "UniversalSentenceEncoder/encoder_setup.py": {
        "tensorflow": {
            "Session_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "BatchRL/dbcq.py": {
        "torch": {
            "load_88": {
                "variable": {
                    "value": "q_ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.rl_config.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "new_sentences",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.cat([sentences, beams[i, :].unsqueeze(0)], 0) for i in range(len(beams))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "sent_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.cat([sent_lens, new_len], 0) for i in range(len(beams))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "is_available_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.cat([sentences[1:, :], beams[i, :].unsqueeze(0)], 0) for i in range(len(beams))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_251": {
                "variable": {
                    "value": "prior_dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prior_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "all_prior_logits[:, i, :].squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_207": {
                "tensors": {
                    "value": "[sentences, beams[i, :].unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_211": {
                "tensors": {
                    "value": "[sent_lens, new_len]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Categorical_255": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "prior_dists[b, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_259": {
                "variable": {
                    "value": "q_vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[q_logits[b, idx] for idx in sampled_idxs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "max_261": {
                "variable": {
                    "value": "(_, best_word_i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "q_vals",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack([q_logits[b, idx] for idx in sampled_idxs])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_195": {
                "tensors": {
                    "value": "[sentences[1:, :], beams[i, :].unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "BatchRL/model_averaging.py": {
        "torch": {
            "cumsum_296": {
                "variable": {
                    "value": "start",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((to_var(conv_lens.data.new(1).zero_()), conv_lens[:-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_298": {
                "variable": {
                    "value": "action_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[logits[s + l - 1, :, :] for (s, l) in zip(start.data.tolist(), conv_lens.data.tolist())]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_305": {
                "variable": {
                    "value": "word_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[action_logits[i, :l, :] for (i, l) in enumerate(action_lens)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_308": {
                "variable": {
                    "value": "word_actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[actions[i, :l] for (i, l) in enumerate(action_lens)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_314": {
                "variable": {
                    "value": "word_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([action_logits[i, :l, :] for (i, l) in enumerate(action_lens)], 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_282": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_296": {
                "tensors": {
                    "value": "(to_var(conv_lens.data.new(1).zero_()), conv_lens[:-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "BatchRL/way_off_policy_batch_rl.py": {
        "torch": {
            "Adam_59": {
                "variable": {
                    "value": "self.q_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.q_net.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_135": {
                "variable": {
                    "value": "start_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((to_var(conv_lens.data.new(1).zero_()), conv_lens[:-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_137": {
                "variable": {
                    "value": "conv_q_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[all_q_values[s + l - 1, :, :] for (s, l) in zip(start_q.data.tolist(), conv_lens.data.tolist())]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "word_q_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[conv_q_values[i, :l, :] for (i, l) in enumerate(batch['action_lens'])]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "word_actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[actions[i, :l] for (i, l) in enumerate(batch['action_lens'])]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_160": {
                "variable": {
                    "value": "q_dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_q_values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([conv_q_values[i, :l, :] for (i, l) in enumerate(batch['action_lens'])], 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_315": {
                "variable": {
                    "value": "mc_target_q_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "_mc_target_q_values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[]] * self.config.monte_carlo_count",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_560": {
                "variable": {
                    "value": "q_ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "q_ckpt_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(base_checkpoint_dir, 'q_net' + str(self.config.rl_ckpt_epoch) + '.pkl')",
                            "Call"
                        ],
                        [
                            "self.config.checkpoint",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_565": {
                "variable": {
                    "value": "target_q_ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "target_q_ckpt_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(base_checkpoint_dir, 'target_q_net' + str(self.config.rl_ckpt_epoch) + '.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(base_checkpoint_dir, 'target_q_net' + ckpt_num + '.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_value__91": {
                "parameters": {
                    "value": "self.q_net.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "self.config.gradient_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_172": {
                "variable": {
                    "value": "conv_prior",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[all_prior_logits[s + l - 1, :, :] for (s, l) in zip(start_q.data.tolist(), conv_lens.data.tolist())]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "word_prior_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[conv_prior[i, :l, :] for (i, l) in enumerate(batch['action_lens'])]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_184": {
                "variable": {
                    "value": "prior_dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_prior_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([conv_prior[i, :l, :] for (i, l) in enumerate(batch['action_lens'])], 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "kl_div_187": {
                "variable": {
                    "value": "kl_div",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_dists.log()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "prior_dists",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(word_prior_logits, 1)",
                            "Call"
                        ]
                    ]
                },
                "reduce": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cumsum_269": {
                "variable": {
                    "value": "start_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((to_var(next_conv_lens.data.new(1).zero_()), next_conv_lens[:-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_272": {
                "variable": {
                    "value": "conv_target_q_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[all_target_q_values[s + l - 3, 1:, :] for (s, l) in zip(start_t.data.tolist(), next_conv_lens.data.tolist())]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_281": {
                "variable": {
                    "value": "next_response_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[all_target_q_values[s + l - 1, 0, :] for (s, l) in zip(start_t.data.tolist(), next_conv_lens.data.tolist())]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_285": {
                "variable": {
                    "value": "next_response_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_response_targets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.stack([all_target_q_values[s + l - 1, 0, :] for (s, l) in zip(start_t.data.tolist(), next_conv_lens.data.tolist())], 0)",
                            "Call"
                        ],
                        [
                            "torch.reshape(next_response_targets, [self.config.rl_batch_size, 1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.config.rl_batch_size, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_289": {
                "variable": {
                    "value": "conv_target_q_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[conv_target_q_values, next_response_targets]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_533": {
                "obj": {
                    "value": "self.q_net.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, f'q_net{t}.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, f'target_q_net{t}.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_536": {
                "obj": {
                    "value": "self.target_q_net.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, f'q_net{t}.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, f'target_q_net{t}.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_570": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_135": {
                "tensors": {
                    "value": "(to_var(conv_lens.data.new(1).zero_()), conv_lens[:-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_198": {
                "variable": {
                    "value": "word_model_avg",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[to_var(torch.FloatTensor(m)) for m in model_avg_sentences]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_206": {
                "variable": {
                    "value": "prior_rewards",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prior_rewards",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "word_model_avg.log() - q_probs.log()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(prior_rewards, max=0.0)",
                            "Call"
                        ],
                        [
                            "-1.0 * torch.sum(kl_div, dim=1)",
                            "BinOp"
                        ],
                        [
                            "prior_rewards * self.config.kl_weight_c",
                            "BinOp"
                        ],
                        [
                            "logp_logq",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "max": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_230": {
                "input": {
                    "value": "rewards",
                    "type": "Name",
                    "possible_values": [
                        [
                            "to_var(torch.FloatTensor(batch['rewards']))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_301": {
                "variable": {
                    "value": "target_q_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rewards[i] + not_done[i] * self.config.gamma * c.squeeze() for (i, c) in enumerate(conv_max_targets)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_308": {
                "variable": {
                    "value": "word_target_q_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rewards[i] + not_done[i] * self.config.gamma * c for (i, c) in enumerate(limit_conv_targets)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_221": {
                "input": {
                    "value": "kl_div",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.kl_div(q_dists.log(), prior_dists, reduce=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_222": {
                "input": {
                    "value": "prior_probs.log()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_223": {
                "input": {
                    "value": "logp_logq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prior_probs.log() - q_probs.log()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_269": {
                "tensors": {
                    "value": "(to_var(next_conv_lens.data.new(1).zero_()), next_conv_lens[:-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_218": {
                "input": {
                    "value": "prior_rewards",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "word_model_avg.log() - q_probs.log()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(prior_rewards, max=0.0)",
                            "Call"
                        ],
                        [
                            "-1.0 * torch.sum(kl_div, dim=1)",
                            "BinOp"
                        ],
                        [
                            "prior_rewards * self.config.kl_weight_c",
                            "BinOp"
                        ],
                        [
                            "logp_logq",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_211": {
                "input": {
                    "value": "kl_div",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.kl_div(q_dists.log(), prior_dists, reduce=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "HierarchicalRL/hrl_tune.py": {
        "torch": {
            "load_387": {
                "variable": {
                    "value": "policy_ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "policy_ckpt_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(base_checkpoint_dir, 'policy_net' + str(self.config.rl_ckpt_epoch) + '.pkl')",
                            "Call"
                        ],
                        [
                            "self.config.checkpoint",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Adam_77": {
                "variable": {
                    "value": "self.optimizers[worker_manager]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "manager_worker_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[p for (name, p) in named_params]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_value__160": {
                "parameters": {
                    "value": "self.policy_net.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "self.config.gradient_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_368": {
                "obj": {
                    "value": "self.policy_net.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, f'policy_net{t}.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_392": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_83": {
                "variable": {
                    "value": "self.optimizers[manager]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "manager_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[p for (name, p) in named_params if 'decoder' not in name]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.config.manager_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_85": {
                "variable": {
                    "value": "self.optimizers[worker]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "worker_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[p for (name, p) in named_params if 'decoder' in name]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.config.worker_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_211": {
                "variable": {
                    "value": "log_p_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output[7][s + l - 1,] for (s, l) in zip(start_idx, conversation_length.tolist())]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_219": {
                "tensors": {
                    "value": "worker_actions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_203": {
                "input": {
                    "value": "torch.log(word_probs[i][:l])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_207": {
                "tensors": {
                    "value": "log_p_words",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.sum(torch.log(word_probs[i][:l])) for (i, l) in enumerate(response_len)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(log_p_words) / torch.cuda.FloatTensor(response_len)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_203": {
                "input": {
                    "value": "word_probs[i][:l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/agents/bert_classifier/bert_classifier.py": {
        "torch": {
            "cat_149": {
                "variable": {
                    "value": "new_text_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[start_tensor, obs['text_vec']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/agents/bert_ranker/bi_encoder_ranker.py": {
        "torch": {
            "CrossEntropyLoss_57": {
                "variable": {
                    "value": "self.rank_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduce": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_50": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_208": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding_ctxt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "embedding_ctxt.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.context_encoder(token_idx_ctxt, segment_idx_ctxt, mask_ctxt)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "embedding_cands",
                    "type": "Call",
                    "possible_values": [
                        [
                            "embedding_cands.view(csize[0], csize[1], -1)",
                            "Call"
                        ],
                        [
                            "embedding_cands.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.cand_encoder(token_idx_cands, segment_idx_cands, mask_cands)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_123": {
                "variable": {
                    "value": "self.vocab_candidate_encs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cand_encs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/agents/bert_ranker/cross_encoder_ranker.py": {
        "torch": {
            "cat_87": {
                "variable": {
                    "value": "all_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tokens_context, tokens_cands]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "all_segments",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[segments_context, segments_cands]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_45": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/agents/bert_ranker/helpers.py": {
        "torch": {
            "Linear_123": {
                "variable": {
                    "value": "self.additional_linear_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert_output_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bert_model.embeddings.word_embeddings.weight.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_177": {
                "tensors": {
                    "value": "[start_tensor, idx_vector, end_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_151": {
                "variable": {
                    "value": "sumed_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_of_interest * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_152": {
                "variable": {
                    "value": "nb_elems",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_mask[:, 1:].type(dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_152": {
                "variable": {
                    "value": "nb_elems",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_158": {
                "variable": {
                    "value": "(embeddings, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_of_interest + mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_169": {
                "input": {
                    "value": "output_pooler",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_308": {
                "variable": {
                    "value": "state[next_m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_310": {
                "variable": {
                    "value": "state[next_v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__317": {
                "parameters": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "group['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/agents/drqa/drqa.py": {
        "torch": {
            "load_156": {
                "variable": {
                    "value": "saved_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.opt.get('model_file', None) if fname is None else fname",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_137": {
                "device": {
                    "value": "opt['gpu']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/agents/drqa/layers.py": {
        "torch": {
            "ModuleList_35": {
                "variable": {
                    "value": "self.rnns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sort_93": {
                "variable": {
                    "value": "(_, idx_sort)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x_mask.data.eq(0).long().sum(1).squeeze()",
                            "Call"
                        ],
                        [
                            "list(lengths[idx_sort])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_94": {
                "variable": {
                    "value": "(_, idx_unsort)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_sort",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(idx_sort)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_107": {
                "variable": {
                    "value": "rnn_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x_mask.data.eq(0).long().sum(1).squeeze()",
                            "Call"
                        ],
                        [
                            "list(lengths[idx_sort])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_183": {
                "variable": {
                    "value": "alpha_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.view(-1, y.size(1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_235": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_size if i == 0 else 2 * hidden_size",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_245": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x_proj.bmm(y_proj.transpose(2, 1))",
                            "Call"
                        ],
                        [
                            "self.linear(x_flat).view(x.size(0), x.size(1))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_76": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_85": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat(outputs[1:], 2)",
                            "Call"
                        ],
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.dropout(output, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(outputs[1:], 2)",
                            "Call"
                        ],
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "output.index_select(0, idx_unsort)",
                            "Call"
                        ],
                        [
                            "F.dropout(output, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_140": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat(outputs[1:], 2)",
                            "Call"
                        ],
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.dropout(output, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(outputs[1:], 2)",
                            "Call"
                        ],
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "output.index_select(0, idx_unsort)",
                            "Call"
                        ],
                        [
                            "F.dropout(output, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_153": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_size if i == 0 else 2 * hidden_size",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_size if i == 0 else 2 * hidden_size",
                            "IfExp"
                        ]
                    ]
                }
            },
            "relu_168": {
                "variable": {
                    "value": "x_proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_proj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.linear(x.view(-1, x.size(2))).view(x.size())",
                            "Call"
                        ],
                        [
                            "F.relu(x_proj)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                }
            },
            "relu_170": {
                "variable": {
                    "value": "y_proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_proj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.linear(y.view(-1, y.size(2))).view(y.size())",
                            "Call"
                        ],
                        [
                            "F.relu(y_proj)",
                            "Call"
                        ],
                        [
                            "y",
                            "Name"
                        ]
                    ]
                }
            },
            "Linear_201": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "y_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "x_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_softmax_217": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xWy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.bmm(Wy.unsqueeze(2)).squeeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_256": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_67": {
                "variable": {
                    "value": "rnn_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rnn_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(rnn_input, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(x, lengths)",
                            "Call"
                        ],
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.PackedSequence(dropout_input, rnn_input.batch_sizes)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_116": {
                "variable": {
                    "value": "dropout_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rnn_input.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "PackedSequence_119": {
                "variable": {
                    "value": "rnn_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dropout_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.dropout(rnn_input.data, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "batch_sizes": {
                    "value": "rnn_input.batch_sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_126": {
                "sequence": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/agents/drqa/model.py": {
        "torch": {
            "SGD_44": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[p for p in self.network.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "opt['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ger_149": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_s[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "vec2": {
                    "value": "score_e[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adamax_51": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[p for p in self.network.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "opt['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nll_loss_104": {
                "input": {
                    "value": "score_e",
                    "type": "Name",
                    "possible_values": [
                        [
                            "score_e.data.cpu()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_e",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(ex[6].cuda(non_blocking=True))",
                            "Call"
                        ],
                        [
                            "Variable(ex[6])",
                            "Call"
                        ]
                    ]
                }
            },
            "save_175": {
                "obj": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'state_dict': {'network': self.network.state_dict()}, 'feature_dict': self.feature_dict, 'config': self.opt}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/agents/drqa/rnn_reader.py": {
        "torch": {
            "Embedding_22": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "opt['vocab_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "opt['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_102": {
                "variable": {
                    "value": "x1_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1_emb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embedding(x1)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(x1_emb, p=self.opt['dropout_emb'], training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.opt['dropout_emb']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_105": {
                "variable": {
                    "value": "x2_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2_emb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embedding(x2)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(x2_emb, p=self.opt['dropout_emb'], training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.opt['dropout_emb']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "drnn_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1_emb, x2_weighted_emb, x1_f]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "drnn_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1_emb, x1_f]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/agents/drqa/utils.py": {
        "torch": {
            "Tensor_24": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(ex['document'])",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "len(feature_dict)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "variable": {
                    "value": "x1_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(docs)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max_length",
                    "type": "Call",
                    "possible_values": [
                        [
                            "max([d.size(0) for d in docs])",
                            "Call"
                        ],
                        [
                            "max([q.size(0) for q in questions])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "features[0].size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "y_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ex[3] for ex in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "y_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ex[4] for ex in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Tensor_37": {
                "variable": {
                    "value": "vec",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/agents/example_seq2seq/example_seq2seq.py": {
        "torch": {
            "Embedding_31": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GRU_32": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size",
                    "type": null,
                    "possible_values": []
                },
                "num_layers": {
                    "value": "numlayers",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_60": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GRU_61": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size",
                    "type": null,
                    "possible_values": []
                },
                "num_layers": {
                    "value": "numlayers",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LogSoftmax_65": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_74": {
                "variable": {
                    "value": "rel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.embedding(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "NLLLoss_161": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "decoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[starts, y_in]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_301": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(predictions, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_166": {
                "params": {
                    "value": "self.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "opt['learningrate']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SGD_167": {
                "params": {
                    "value": "self.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "opt['learningrate']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "ParlAI/parlai/agents/fairseq/fairseq.py": {
        "torch": {
            "arange_687": {
                "variable": {
                    "value": "sample[id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "len(xs) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_341": {
                "seed": {
                    "value": "self.args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_device_capability_373": {
                "device": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/agents/ir_baseline/ir_baseline.py": {
        "torch": {
            "save_307": {
                "obj": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "handle",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/agents/language_model/language_model.py": {
        "torch": {
            "CrossEntropyLoss_248": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.NULL_IDX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_262": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_702": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.opt.get('model_file', None) if path is None else path",
                            "IfExp"
                        ],
                        [
                            "self.opt.get('model_file', None)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_268": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "factor": {
                    "value": "self.lr_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "patience": {
                    "value": "self.lr_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "self.lr_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__325": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_526": {
                "tensors": {
                    "value": "token_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_710": {
                "variable": {
                    "value": "self.states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.opt.get('model_file', None) if path is None else path",
                            "IfExp"
                        ],
                        [
                            "self.opt.get('model_file', None)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_497": {
                "variable": {
                    "value": "(_, word_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "word_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "output.squeeze().data.exp()",
                            "Call"
                        ],
                        [
                            "word_weights.div(10000000000.0)",
                            "Call"
                        ],
                        [
                            "word_weights.div(ww_norm)",
                            "Call"
                        ],
                        [
                            "torch.mul(word_weights, word_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_192": {
                "device": {
                    "value": "opt['gpu']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_505": {
                "variable": {
                    "value": "ww_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "output.squeeze().data.exp()",
                            "Call"
                        ],
                        [
                            "word_weights.div(10000000000.0)",
                            "Call"
                        ],
                        [
                            "word_weights.div(ww_norm)",
                            "Call"
                        ],
                        [
                            "torch.mul(word_weights, word_weights)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_508": {
                "variable": {
                    "value": "word_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "output.squeeze().data.exp()",
                            "Call"
                        ],
                        [
                            "word_weights.div(10000000000.0)",
                            "Call"
                        ],
                        [
                            "word_weights.div(ww_norm)",
                            "Call"
                        ],
                        [
                            "torch.mul(word_weights, word_weights)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "word_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "output.squeeze().data.exp()",
                            "Call"
                        ],
                        [
                            "word_weights.div(10000000000.0)",
                            "Call"
                        ],
                        [
                            "word_weights.div(ww_norm)",
                            "Call"
                        ],
                        [
                            "torch.mul(word_weights, word_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "multinomial_510": {
                "variable": {
                    "value": "word_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "output.squeeze().data.exp()",
                            "Call"
                        ],
                        [
                            "word_weights.div(10000000000.0)",
                            "Call"
                        ],
                        [
                            "word_weights.div(ww_norm)",
                            "Call"
                        ],
                        [
                            "torch.mul(word_weights, word_weights)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_515": {
                "variable": {
                    "value": "(_, word_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "word_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "output.squeeze().data.exp()",
                            "Call"
                        ],
                        [
                            "word_weights.div(10000000000.0)",
                            "Call"
                        ],
                        [
                            "word_weights.div(ww_norm)",
                            "Call"
                        ],
                        [
                            "torch.mul(word_weights, word_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_579": {
                "variable": {
                    "value": "source",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_684": {
                "obj": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "write",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "multinomial_513": {
                "variable": {
                    "value": "word_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "output.squeeze().data.exp()",
                            "Call"
                        ],
                        [
                            "word_weights.div(10000000000.0)",
                            "Call"
                        ],
                        [
                            "word_weights.div(ww_norm)",
                            "Call"
                        ],
                        [
                            "torch.mul(word_weights, word_weights)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/agents/language_model/modules.py": {
        "torch": {
            "Dropout_28": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "opt['dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Embedding_29": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "ninp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "opt['embeddingsize']",
                            "Subscript"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "opt['hiddensize']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "ntoken",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "RNN_40": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ninp",
                    "type": null,
                    "possible_values": []
                },
                "nonlinearity": {
                    "value": "nonlinearity",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'RNN_TANH': 'tanh', 'RNN_RELU': 'relu'}[rnn_type]",
                            "Subscript"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "opt['dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_75": {
                "variable": {
                    "value": "emb_packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.drop(self.encoder(input))",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "emb_lens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x for x in torch.sum((input > 0).int(), dim=0).data]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_77": {
                "variable": {
                    "value": "(output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_74": {
                "input": {
                    "value": "(input > 0).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/agents/legacy_agents/memnn/memnn_v0.py": {
        "torch": {
            "CrossEntropyLoss_146": {
                "variable": {
                    "value": "self.rank_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_147": {
                "variable": {
                    "value": "self.gen_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.NULL_IDX",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_358": {
                "variable": {
                    "value": "memory",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "memory",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.LongTensor(m) for m in memory]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(memory)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_377": {
                "variable": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[0] for x in parsed]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_378": {
                "variable": {
                    "value": "memories",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[1] for x in parsed]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_379": {
                "variable": {
                    "value": "query_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[2] for x in parsed]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "load_454": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.opt.get('model_file', None) if path is None else path",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "unsqueeze_391": {
                "variable": {
                    "value": "label_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_404": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "padded",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.cat((p, torch.LongTensor(self.longest_label - len(p)).fill_(self.END_TENSOR[0]))) for p in parsed]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "is_available_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_98": {
                "type": {
                    "value": "opt['gpu']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_num_threads_130": {
                "int": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_158": {
                "variable": {
                    "value": "self.optimizers[decoder]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "self.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "opt['learning_rate']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_394": {
                "tensors": {
                    "value": "(p, torch.LongTensor(self.longest_label - len(p)).fill_(self.END_TENSOR[0]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_451": {
                "obj": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(path, map_location=lambda cpu, _: cpu)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "write",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SGD_156": {
                "params": {
                    "value": "optim_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[p for p in self.model.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "opt['learning_rate']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_164": {
                "variable": {
                    "value": "self.optimizers[decoder]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "self.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "opt['learning_rate']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_162": {
                "params": {
                    "value": "optim_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[p for p in self.model.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "opt['learning_rate']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "ParlAI/parlai/agents/legacy_agents/memnn/modules_v0.py": {
        "torch": {
            "stack_139": {
                "variable": {
                    "value": "embs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "emb_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Tensor_150": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_158": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "embeddings.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_170": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_179": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_memory_embeddings",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.in_memory_embedder(memory_lengths, memories)",
                            "Call"
                        ],
                        [
                            "in_memory_embeddings.cuda()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "query_embeddings.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_179": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_188": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.bmm(in_memory_embeddings, query_embeddings.unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "attention_mask.float() * attention + (1 - attention_mask.float()) * -1e+20",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_188": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_189": {
                "variable": {
                    "value": "memory_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "softmax(attention, dim=1).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "out_memory_embeddings",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.out_memory_embedder(memory_lengths, memories)",
                            "Call"
                        ],
                        [
                            "out_memory_embeddings.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_189": {
                "variable": {
                    "value": "memory_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_199": {
                "variable": {
                    "value": "self.h2o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(dictionary)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_200": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "opt['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GRU_201": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_133": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "super().forward(input[i, :, :])",
                            "Call"
                        ],
                        [
                            "emb * self.position_tensor(row, emb)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(emb, dim=1).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_133": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_116": {
                "input": {
                    "value": "lengths_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lengths.data",
                            "Attribute"
                        ],
                        [
                            "lengths_mat.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ParlAI/parlai/agents/legacy_agents/seq2seq/modules_v0.py": {
        "torch": {
            "Dropout_374": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_457": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_462": {
                "variable": {
                    "value": "self.lt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sparse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_636": {
                "variable": {
                    "value": "cand_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pad(c, max_len).unsqueeze(0) for c in cand_scores]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_704": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_800": {
                "variable": {
                    "value": "attn_applied",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "enc_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "enc_out.unsqueeze(1).repeat(1, beam_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.unbeamize_enc_out(enc_out, beam_size, bsz)",
                            "Call"
                        ],
                        [
                            "enc_out.index_select(0, cand_indices)",
                            "Call"
                        ],
                        [
                            "enc_out.narrow(1, offset, self.max_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_801": {
                "variable": {
                    "value": "merged",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xes.squeeze(1), attn_applied.squeeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_802": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn_combine(merged).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_20": {
                "tensors": {
                    "value": "[tensor, tensor.new(*tensor.size()[:dim], length - tensor.size(dim), *tensor.size()[dim + 1:]).zero_()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_183": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[starts, y_in]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_342": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(predictions, 1)",
                            "Call"
                        ],
                        [
                            "beam_pred",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_344": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores, 1)",
                            "Call"
                        ],
                        [
                            "out[1]",
                            "Subscript"
                        ],
                        [
                            "scores.view(bsz, beam_size, -1)",
                            "Call"
                        ],
                        [
                            "beam_scores",
                            "Name"
                        ],
                        [
                            "probs.log()",
                            "Call"
                        ],
                        [
                            "self.e2s(e)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "(true_score.squeeze(2) * nonzero).sum(1)",
                            "Call"
                        ],
                        [
                            "scores + true_score.squeeze(2).squeeze(1) * nonzero",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_380": {
                "variable": {
                    "value": "self.lt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sparse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_407": {
                "variable": {
                    "value": "xes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xes",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.dropout(self.lt(xs))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(xes, x_lens, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.lt(xs))",
                            "Call"
                        ],
                        [
                            "self.attention(xes, hidden, encoder_output, attn_mask)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_lens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x for x in torch.sum((xs > 0).int(), dim=1).data]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_415": {
                "variable": {
                    "value": "(encoder_output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "encoder_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_473": {
                "variable": {
                    "value": "self.o2e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "hidden[0].size(-1)",
                            "Call"
                        ],
                        [
                            "hidden.size(-1)",
                            "Call"
                        ],
                        [
                            "enc_out.size(-1)",
                            "Call"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "emb_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_497": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_498": {
                "variable": {
                    "value": "self.prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "hidden[0].size(-1)",
                            "Call"
                        ],
                        [
                            "hidden.size(-1)",
                            "Call"
                        ],
                        [
                            "enc_out.size(-1)",
                            "Call"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numsoftmax",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_499": {
                "variable": {
                    "value": "self.latent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "hidden[0].size(-1)",
                            "Call"
                        ],
                        [
                            "hidden.size(-1)",
                            "Call"
                        ],
                        [
                            "enc_out.size(-1)",
                            "Call"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numsoftmax * emb_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tanh_500": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_654": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_665": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_684": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight.detach()",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_716": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_743": {
                "variable": {
                    "value": "self.attn_combine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hszXdirs + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb_size",
                            "Name"
                        ],
                        [
                            "hsz",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_773": {
                "variable": {
                    "value": "h_merged",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xes.squeeze(1), last_hidden)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_774": {
                "variable": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(h_merged)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_798": {
                "variable": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_w_premask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.attn_v(active).squeeze(2)",
                            "Call"
                        ],
                        [
                            "attn_w_premask - (1 - attn_mask) * 1e+20",
                            "BinOp"
                        ],
                        [
                            "torch.bmm(hid, enc_out.transpose(1, 2)).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(hid, enc_out.transpose(1, 2)).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "topk_535": {
                "variable": {
                    "value": "(max_score, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(scores.narrow(2, 1, scores.size(2) - 1), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "topk",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_541": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.narrow(2, 1, scores.size(2) - 1).gather(2, idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_541": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Categorical_544": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(prob * prior.unsqueeze(2)).sum(1).view(bsz, seqlen, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scores.narrow(2, 1, scores.size(2) - 1).gather(2, idx), 2).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_611": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[starts, c_in]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_616": {
                "variable": {
                    "value": "true_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_616": {
                "variable": {
                    "value": "true_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "curr_cs.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_751": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "attn_length",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_783": {
                "variable": {
                    "value": "h_merged",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(enc_out, hid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_784": {
                "variable": {
                    "value": "active",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(h_merged)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_301": {
                "variable": {
                    "value": "beam_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.get_top_hyp()[1] for b in beams]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_303": {
                "variable": {
                    "value": "beam_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pad(t, length=pad_length, dim=0) for t in beam_pred]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_625": {
                "variable": {
                    "value": "true_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_625": {
                "variable": {
                    "value": "true_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "ci.unsqueeze(1).unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_754": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz + hszXdirs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hsz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden.size(-1)",
                            "Call"
                        ],
                        [
                            "hidden[0].size(-1)",
                            "Call"
                        ],
                        [
                            "hidden_size",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_755": {
                "variable": {
                    "value": "self.attn_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden.size(-1)",
                            "Call"
                        ],
                        [
                            "hidden[0].size(-1)",
                            "Call"
                        ],
                        [
                            "hidden_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_790": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "hid.index_select(1, cand_indices)",
                            "Call"
                        ],
                        [
                            "last_hidden.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "hid.expand(last_hidden.size(0), enc_out.size(1), last_hidden.size(1))",
                            "Call"
                        ],
                        [
                            "torch.cat([hid, hid], 2)",
                            "Call"
                        ],
                        [
                            "self.attn(hid)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "enc_out.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_790": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_271": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.get_output_from_current_step() for b in beams]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unsqueeze_271": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_274": {
                "variable": {
                    "value": "permute_hidden_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[beam_size * i + b.get_backtrack_from_current_step() for (i, b) in enumerate(beams)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "softmax_536": {
                "input": {
                    "value": "scores.narrow(2, 1, scores.size(2) - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_758": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden.size(-1)",
                            "Call"
                        ],
                        [
                            "hidden[0].size(-1)",
                            "Call"
                        ],
                        [
                            "hidden_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hszXdirs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hsz * (2 if bidirectional else 1)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_789": {
                "variable": {
                    "value": "hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hid, hid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_793": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "hid.index_select(1, cand_indices)",
                            "Call"
                        ],
                        [
                            "last_hidden.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "hid.expand(last_hidden.size(0), enc_out.size(1), last_hidden.size(1))",
                            "Call"
                        ],
                        [
                            "torch.cat([hid, hid], 2)",
                            "Call"
                        ],
                        [
                            "self.attn(hid)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "enc_out.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_793": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_406": {
                "input": {
                    "value": "(xs > 0).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_270": {
                "input": {
                    "value": "scores[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/agents/legacy_agents/seq2seq/modules_v1.py": {
        "torch": {
            "cat_174": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._starts(bsz), y_in]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores, 1)",
                            "Call"
                        ],
                        [
                            "(true_score.squeeze(2) * nonzero).sum(1)",
                            "Call"
                        ],
                        [
                            "scores / seqlens",
                            "BinOp"
                        ],
                        [
                            "self._decode_forced(ys, encoder_states)",
                            "Call"
                        ],
                        [
                            "self._decode(encoder_states, maxlen or self.longest_label)",
                            "Call"
                        ],
                        [
                            "probs.log()",
                            "Call"
                        ],
                        [
                            "self.e2s(e)",
                            "Call"
                        ],
                        [
                            "torch.cat([pad_score, scores], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores, 1)",
                            "Call"
                        ],
                        [
                            "(true_score.squeeze(2) * nonzero).sum(1)",
                            "Call"
                        ],
                        [
                            "scores / seqlens",
                            "BinOp"
                        ],
                        [
                            "self._decode_forced(ys, encoder_states)",
                            "Call"
                        ],
                        [
                            "self._decode(encoder_states, maxlen or self.longest_label)",
                            "Call"
                        ],
                        [
                            "probs.log()",
                            "Call"
                        ],
                        [
                            "self.e2s(e)",
                            "Call"
                        ],
                        [
                            "torch.cat([pad_score, scores], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_290": {
                "variable": {
                    "value": "cand_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pad(c, max_len, pad=self.NULL_IDX).unsqueeze(0) for c in cand_scores]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_407": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_500": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_505": {
                "variable": {
                    "value": "self.lt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_features - 1",
                            "BinOp"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embeddingsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sparse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_595": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bmm_799": {
                "variable": {
                    "value": "attn_applied",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "enc_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "enc_out.index_select(0, cand_indices)",
                            "Call"
                        ],
                        [
                            "enc_out.narrow(1, offset, self.max_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_801": {
                "variable": {
                    "value": "merged",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xes.squeeze(1), attn_applied.squeeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_803": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn_combine(merged).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_50": {
                "tensors": {
                    "value": "[tensor, tensor.new(*tensor.size()[:dim], length - tensor.size(dim), *tensor.size()[dim + 1:]).fill_(pad)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_softmax_282": {
                "variable": {
                    "value": "true_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.output(output)",
                            "Call"
                        ],
                        [
                            "self.output(output)",
                            "Call"
                        ],
                        [
                            "self.output(output)",
                            "Call"
                        ],
                        [
                            "self._decode_forced(curr_cs, cur_enc_states)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_282": {
                "variable": {
                    "value": "true_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "curr_cs.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_417": {
                "variable": {
                    "value": "self.lt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_features - 1",
                            "BinOp"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embeddingsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sparse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_454": {
                "variable": {
                    "value": "x_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask.int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_455": {
                "variable": {
                    "value": "xes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xes",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.dropout(self.lt(xs))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(xes, x_lens, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.lt(xs))",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_lens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(attn_mask.int(), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_463": {
                "variable": {
                    "value": "(encoder_output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "encoder_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_602": {
                "variable": {
                    "value": "self.e2s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embeddingsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_features - 1",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_610": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "shared_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.decoder.lt.weight if lookuptable in ('dec_out', 'all') else None",
                            "IfExp"
                        ],
                        [
                            "shared_weight.narrow(0, 1, num_features)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_611": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_618": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_619": {
                "variable": {
                    "value": "self.prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hiddensize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "numsoftmax",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_620": {
                "variable": {
                    "value": "self.latent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hiddensize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "numsoftmax * embeddingsize",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tanh_621": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_675": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pad_score, scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_712": {
                "variable": {
                    "value": "self.attn_combine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hszXdirs + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embeddingsize",
                            "Name"
                        ],
                        [
                            "hsz",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_759": {
                "variable": {
                    "value": "h_merged",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xes.squeeze(1), last_hidden)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_760": {
                "variable": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(h_merged)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_796": {
                "variable": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_w_premask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.attn_v(active).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(hid, enc_t).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(hid, enc_t).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_348": {
                "variable": {
                    "value": "out_pad_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "encoder_states[0].size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "seq_len - encoder_states[0].size(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "encoder_states[0].size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_353": {
                "variable": {
                    "value": "new_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoder_states[0], out_pad_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_626": {
                "variable": {
                    "value": "self.o2e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hiddensize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embeddingsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_720": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "attn_length",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_774": {
                "variable": {
                    "value": "h_merged",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(enc_out, hid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_776": {
                "variable": {
                    "value": "active",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(h_merged)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_613": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_723": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz + hszXdirs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hsz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hiddensize",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_724": {
                "variable": {
                    "value": "self.attn_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hiddensize",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_784": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "hid.index_select(1, cand_indices)",
                            "Call"
                        ],
                        [
                            "last_hidden.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "hid.expand(bsz, seqlen, numlayersXnumdir)",
                            "Call"
                        ],
                        [
                            "torch.cat([hid, hid], 2)",
                            "Call"
                        ],
                        [
                            "self.attn(hid)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "enc_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "enc_out.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "enc_out.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_784": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_727": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hiddensize",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hszXdirs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hsz * (2 if bidirectional else 1)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_782": {
                "variable": {
                    "value": "hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hid, hid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_790": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "hid.index_select(1, cand_indices)",
                            "Call"
                        ],
                        [
                            "last_hidden.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "hid.expand(bsz, seqlen, numlayersXnumdir)",
                            "Call"
                        ],
                        [
                            "torch.cat([hid, hid], 2)",
                            "Call"
                        ],
                        [
                            "self.attn(hid)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "enc_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "enc_out.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "enc_out.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_790": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/agents/legacy_agents/seq2seq/seq2seq_v0.py": {
        "torch": {
            "load_919": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.opt.get('model_file', None) if path is None else path",
                            "IfExp"
                        ],
                        [
                            "self.opt.get('model_file', None)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "softmax_991": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.select(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_991": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_496": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.NULL_IDX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_498": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.NULL_IDX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_549": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "Constant",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "patience": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_367": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_num_threads_369": {
                "int": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_grad_norm__615": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_820": {
                "variable": {
                    "value": "dummy",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.opt.get('batchsize', batchsize)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "maxlen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.truncate or 180",
                            "BoolOp"
                        ]
                    ]
                }
            },
            "set_device_392": {
                "device": {
                    "value": "opt['gpu']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_904": {
                "obj": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "write",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_469": {
                "variable": {
                    "value": "rp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mm_470": {
                "input": {
                    "value": "x.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "rp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Tensor(pretrained_dim, opt['embeddingsize']).normal_()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ParlAI/parlai/agents/legacy_agents/seq2seq/seq2seq_v1.py": {
        "torch": {
            "cat_484": {
                "variable": {
                    "value": "cands",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cands",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[batch.candidate_vecs[i] for i in cand_inds]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(cands, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_558": {
                "variable": {
                    "value": "decoder_input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_657": {
                "variable": {
                    "value": "pad_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "batch.text_vec.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_658": {
                "variable": {
                    "value": "text_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch.text_vec, pad_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_792": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.opt.get('model_file', None) if path is None else path",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "softmax_889": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.select(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_889": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_257": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.NULL_IDX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_259": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.NULL_IDX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_611": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.output(output)",
                            "Call"
                        ],
                        [
                            "score.view(batch_size, beam_size, -1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(score, dim=-1)",
                            "Call"
                        ],
                        [
                            "hyp.score",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_615": {
                "variable": {
                    "value": "decoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.get_output_from_current_step() for b in beams]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unsqueeze_615": {
                "variable": {
                    "value": "decoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_618": {
                "variable": {
                    "value": "permute_hidden_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[beam_size * i + b.get_backtrack_from_current_step() for (i, b) in enumerate(beams)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_662": {
                "variable": {
                    "value": "pad_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "batch.label_vec.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_663": {
                "variable": {
                    "value": "label_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch.label_vec, pad_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_316": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__343": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_410": {
                "variable": {
                    "value": "dummy",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch.text_vec.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "maxlen",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_782": {
                "obj": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "write",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_671": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/agents/legacy_agents/seq2seq/torch_agent_v1.py": {
        "torch": {
            "ReduceLROnPlateau_379": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "Constant",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "patience": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_970": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.opt.get('model_file', None) if path is None else path",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "stack_1219": {
                "variable": {
                    "value": "hypothesis",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(reversed(hypothesis))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_1137": {
                "variable": {
                    "value": "(best_scores, best_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "flatten_beam_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "beam_scores.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.beam_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "set_num_threads_300": {
                "int": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_303": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_310": {
                "device": {
                    "value": "opt['gpu']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_456": {
                "variable": {
                    "value": "self.proj_rp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_460": {
                "input": {
                    "value": "vec.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.proj_rp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_1226": {},
            "save_957": {
                "obj": {
                    "value": "states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(path, map_location=lambda cpu, _: cpu)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "write",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/agents/legacy_agents/seq2seq/utils_v0.py": {
        "torch": {
            "stack_173": {
                "variable": {
                    "value": "hypothesis",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(reversed(hypothesis))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_98": {
                "variable": {
                    "value": "(best_scores, best_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "flatten_beam_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "beam_scores.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.beam_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_tensor_724": {
                "obj": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sys.intern(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_59": {},
            "no_grad_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/agents/legacy_agents/seq2seq/utils_v1.py": {
        "torch": {}
    },
    "ParlAI/parlai/agents/memnn/memnn.py": {
        "torch": {
            "matmul_109": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "cands.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_111": {
                "input": {
                    "value": "output.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "cands.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_111": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/agents/memnn/modules.py": {
        "torch": {
            "Tensor_186": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_212": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_235": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_embs.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "in_mem_embs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_235": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_239": {
                "variable": {
                    "value": "memory_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "out_mem_embs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_239": {
                "variable": {
                    "value": "memory_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_209": {
                "variable": {
                    "value": "self.rotate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/agents/seq2seq/modules.py": {
        "torch": {
            "Dropout_242": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_341": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_346": {
                "variable": {
                    "value": "self.lt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embeddingsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sparse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_475": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_479": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features).uniform_(-rng, rng)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_670": {
                "variable": {
                    "value": "attn_applied",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "enc_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "enc_out.index_select(0, indices)",
                            "Call"
                        ],
                        [
                            "enc_out.narrow(1, offset, self.max_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_672": {
                "variable": {
                    "value": "merged",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xes.squeeze(1), attn_applied.squeeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_674": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn_combine(merged).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_31": {
                "obj": {
                    "value": "hidden_state",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_184": {
                "obj": {
                    "value": "incremental_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_252": {
                "variable": {
                    "value": "self.lt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embeddingsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sparse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_289": {
                "variable": {
                    "value": "x_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask.int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_290": {
                "variable": {
                    "value": "xes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xes",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.dropout(self.lt(xs))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(xes, x_lens, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.lt(xs))",
                            "Call"
                        ],
                        [
                            "torch.cat(new_xes, 1).to(xes.device)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_lens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(attn_mask.int(), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_301": {
                "variable": {
                    "value": "(encoder_output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "encoder_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "total_length": {
                    "value": "xs.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_417": {
                "variable": {
                    "value": "xes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_xes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_431": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, dim=1).to(xes.device)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.attn_combine(merged).unsqueeze(1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_485": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features, embeddingsize).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_496": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_497": {
                "variable": {
                    "value": "self.prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hiddensize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "numsoftmax",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_498": {
                "variable": {
                    "value": "self.latent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hiddensize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "numsoftmax * embeddingsize",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tanh_499": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linear_527": {
                "variable": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "active.view(-1, self.esz)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_543": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dropout(self.o2e(input))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_583": {
                "variable": {
                    "value": "self.attn_combine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hszXdirs + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embeddingsize",
                            "Name"
                        ],
                        [
                            "hsz",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_630": {
                "variable": {
                    "value": "h_merged",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xes.squeeze(1), last_hidden)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_631": {
                "variable": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(h_merged)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_667": {
                "variable": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_w_premask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.attn_v(active).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(hid, enc_t).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(hid, enc_t).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_tensor_163": {
                "obj": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.LongTensor(indices).to(hid.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_186": {
                "input": {
                    "value": "incremental_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_504": {
                "variable": {
                    "value": "self.o2e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hiddensize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embeddingsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_591": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "attn_length",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_645": {
                "variable": {
                    "value": "h_merged",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(enc_out, hid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_647": {
                "variable": {
                    "value": "active",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(h_merged)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_594": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz + hszXdirs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hsz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hiddensize",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_595": {
                "variable": {
                    "value": "self.attn_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hiddensize",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_655": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "hid.index_select(1, indices)",
                            "Call"
                        ],
                        [
                            "last_hidden.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "hid.expand(bsz, seqlen, numlayersXnumdir)",
                            "Call"
                        ],
                        [
                            "torch.cat([hid, hid], 2)",
                            "Call"
                        ],
                        [
                            "self.attn(hid)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "enc_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "enc_out.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "enc_out.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_655": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_598": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hiddensize",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hszXdirs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hsz * (2 if bidirectional else 1)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_653": {
                "variable": {
                    "value": "hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hid, hid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_661": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "hid.index_select(1, indices)",
                            "Call"
                        ],
                        [
                            "last_hidden.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "hid.expand(bsz, seqlen, numlayersXnumdir)",
                            "Call"
                        ],
                        [
                            "torch.cat([hid, hid], 2)",
                            "Call"
                        ],
                        [
                            "self.attn(hid)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "enc_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "enc_out.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "enc_out.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_661": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/agents/seq2seq/seq2seq.py": {
        "torch": {
            "load_223": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "NLLLoss_202": {
                "ignore_index": {
                    "value": "self.NULL_IDX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_204": {
                "ignore_index": {
                    "value": "self.NULL_IDX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/agents/starspace/modules.py": {
        "torch": {
            "Embedding_15": {
                "variable": {
                    "value": "self.lt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "opt['embeddingsize']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "sparse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "opt['embeddingnorm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt['embeddingsize']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt['embeddingsize']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_26": {
                "variable": {
                    "value": "self.lt2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "opt['embeddingsize']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "sparse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "opt['embeddingnorm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_65": {
                "variable": {
                    "value": "freqs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_79": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_56": {
                "tensors": {
                    "value": "ys_enc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "ParlAI/parlai/agents/starspace/starspace.py": {
        "torch": {
            "CosineEmbeddingLoss_214": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "opt['margin']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.opt",
                            "Attribute"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_578": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.opt.get('model_file', None) if path is None else path",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "unsqueeze_301": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cosine_similarity_360": {
                "variable": {
                    "value": "score[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x1": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "W[input.data[0][0]]",
                            "Subscript"
                        ]
                    ]
                },
                "x2": {
                    "value": "W[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CosineSimilarity_452": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_num_threads_190": {
                "int": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_348": {
                "variable": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_391": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CosineSimilarity_428": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_571": {
                "obj": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(path, map_location=lambda cpu, _: cpu)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "handle",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_224": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_423": {
                "*size": {
                    "value": "xe.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_368": {},
            "unsqueeze_522": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/agents/test_agents/dummy_torch_agent.py": {
        "torch": {
            "Module_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/agents/tfidf_retriever/build_tfidf.py": {
        "torch": {
            "histc_286": {
                "input": {
                    "value": "cnts._indices()[0].float()",
                    "type": "Call",
                    "possible_values": []
                },
                "bins": {
                    "value": "cnts.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "cnts.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/agents/transformer/biencoder.py": {
        "torch": {}
    },
    "ParlAI/parlai/agents/transformer/crossencoder.py": {
        "torch": {
            "Embedding_115": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(dict)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "opt['embedding_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "null_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_139": {
                "variable": {
                    "value": "self.linear_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt['embedding_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_26": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_75": {
                "variable": {
                    "value": "non_nuls",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "text_idx[i, :] != null_idx",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/agents/transformer/modules.py": {
        "torch": {
            "Embedding_46": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(dictionary)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_297": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim, hdim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_377": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_406": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_positions",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "opt['n_positions']",
                            "Subscript"
                        ],
                        [
                            "max(opt.get('truncate') or 0, opt.get('text_truncate') or 0, opt.get('label_truncate') or 0)",
                            "Call"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "get_n_positions_from_options(opt)",
                            "Call"
                        ],
                        [
                            "opt['n_positions']",
                            "Subscript"
                        ],
                        [
                            "max(opt.get('truncate') or 0, opt.get('text_truncate') or 0, opt.get('label_truncate') or 0)",
                            "Call"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_426": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_524": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "LAYER_NORM_EPS",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-05",
                            "Constant"
                        ]
                    ]
                }
            },
            "LayerNorm_531": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "LAYER_NORM_EPS",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-05",
                            "Constant"
                        ]
                    ]
                }
            },
            "Dropout_532": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_597": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_615": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_positions",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "opt['n_positions']",
                            "Subscript"
                        ],
                        [
                            "max(opt.get('truncate') or 0, opt.get('text_truncate') or 0, opt.get('label_truncate') or 0)",
                            "Call"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "get_n_positions_from_options(opt)",
                            "Call"
                        ],
                        [
                            "opt['n_positions']",
                            "Subscript"
                        ],
                        [
                            "max(opt.get('truncate') or 0, opt.get('text_truncate') or 0, opt.get('label_truncate') or 0)",
                            "Call"
                        ],
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_624": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_654": {
                "variable": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "positions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(mask.cumsum(dim=1, dtype=torch.int64) - 1).clamp_(min=0)",
                            "Call"
                        ],
                        [
                            "input.new(seq_len).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(seq_len, out=positions).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_654": {
                "variable": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_702": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_707": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "LAYER_NORM_EPS",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-05",
                            "Constant"
                        ]
                    ]
                }
            },
            "LayerNorm_712": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "LAYER_NORM_EPS",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-05",
                            "Constant"
                        ]
                    ]
                }
            },
            "LayerNorm_717": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "LAYER_NORM_EPS",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-05",
                            "Constant"
                        ]
                    ]
                }
            },
            "tril_752": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.new(time, time).fill_(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_810": {
                "variable": {
                    "value": "enc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.index_select(enc, 0, indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.LongTensor(indices).to(enc.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_811": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input != self.padding_idx",
                            "Compare"
                        ],
                        [
                            "torch.tril(x.new(time, time).fill_(1))",
                            "Call"
                        ],
                        [
                            "mask.unsqueeze(0).expand(bsz, -1, -1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(mask, 0, indices)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.LongTensor(indices).to(enc.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_826": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embeddings(input)",
                            "Call"
                        ],
                        [
                            "tensor * np.sqrt(self.dim)",
                            "BinOp"
                        ],
                        [
                            "tensor + self.position_embeddings(positions).expand_as(tensor)",
                            "BinOp"
                        ],
                        [
                            "tensor + self.segment_embeddings(segments)",
                            "BinOp"
                        ],
                        [
                            "_normalize(tensor, self.norm_embeddings)",
                            "Call"
                        ],
                        [
                            "self.dropout(tensor)",
                            "Call"
                        ],
                        [
                            "tensor * mask.unsqueeze(-1).type_as(tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layers[i](tensor, mask)",
                            "Call"
                        ],
                        [
                            "tensor + self.dropout(self.attention(tensor, mask=mask))",
                            "BinOp"
                        ],
                        [
                            "_normalize(tensor, self.norm1)",
                            "Call"
                        ],
                        [
                            "tensor + self.dropout(self.ffn(tensor))",
                            "BinOp"
                        ],
                        [
                            "_normalize(tensor, self.norm2)",
                            "Call"
                        ],
                        [
                            "self.embeddings(input)",
                            "Call"
                        ],
                        [
                            "tensor * np.sqrt(self.dim)",
                            "BinOp"
                        ],
                        [
                            "_normalize(tensor, self.norm_embeddings)",
                            "Call"
                        ],
                        [
                            "tensor + self.position_embeddings(positions).expand_as(tensor)",
                            "BinOp"
                        ],
                        [
                            "self.dropout(tensor)",
                            "Call"
                        ],
                        [
                            "layer(tensor, encoder_output, encoder_mask)",
                            "Call"
                        ],
                        [
                            "tensor.view(batch_size, tensor.size(1), n_heads, dim_per_head)",
                            "Call"
                        ],
                        [
                            "tensor.transpose(1, 2).contiguous().view(batch_size * n_heads, seq_len, dim_per_head)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embeddings.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_835": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bmm_863": {
                "variable": {
                    "value": "lhs_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.softmax(l1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_887": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_888": {
                "variable": {
                    "value": "self.q_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_889": {
                "variable": {
                    "value": "self.k_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_890": {
                "variable": {
                    "value": "self.v_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_896": {
                "variable": {
                    "value": "self.out_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_953": {
                "variable": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot_prod",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q.div_(scale).bmm(k.transpose(1, 2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_975": {
                "variable": {
                    "value": "self.relu_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "relu_dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_984": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_985": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_400": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocabulary_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_416": {
                "variable": {
                    "value": "self.norm_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "LAYER_NORM_EPS",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-05",
                            "Constant"
                        ]
                    ]
                }
            },
            "Embedding_423": {
                "variable": {
                    "value": "self.segment_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_segments",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_608": {
                "variable": {
                    "value": "self.norm_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "LAYER_NORM_EPS",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-05",
                            "Constant"
                        ]
                    ]
                }
            },
            "CosineSimilarity_837": {
                "variable": {
                    "value": "self.cosine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bmm_854": {
                "variable": {
                    "value": "l1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "ys.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "erf_112": {
                "input": {
                    "value": "tensor / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_298": {
                "in_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hdim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_299": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_300": {
                "in_features": {
                    "value": "hdim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transformer.out_dim",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_471": {
                "variable": {
                    "value": "segments",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_808": {
                "obj": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.LongTensor(indices).to(enc.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ParlAI/parlai/agents/transformer/polyencoder.py": {
        "torch": {
            "CrossEntropyLoss_77": {
                "variable": {
                    "value": "self.rank_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduce": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_205": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(dict)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "opt['embedding_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "null_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_312": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ctxt_final_rep * cand_embed",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_86": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_175": {
                "variable": {
                    "value": "codes",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_codes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "opt['embedding_size']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Parameter_177": {
                "variable": {
                    "value": "self.codes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "codes",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.empty(self.n_codes, embed_dim)",
                            "Call"
                        ],
                        [
                            "torch.nn.init.uniform_(codes)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_287": {
                "variable": {
                    "value": "ctxt_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ctxt_out, extra_rep]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_289": {
                "variable": {
                    "value": "ctxt_rep_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ctxt_mask, extra_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/agents/transformer/transformer.py": {
        "torch": {
            "DataParallel_178": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_198": {
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_182": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "cands.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_184": {
                "input": {
                    "value": "output.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "cands.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_184": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/core/distributed_utils.py": {
        "torch": {
            "broadcast_213": {
                "tensor": {
                    "value": "buffer",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "all_gather_list._buffer",
                            "Attribute"
                        ],
                        [
                            "sync_object._buffer",
                            "Attribute"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/core/image_featurizers.py": {
        "torch": {
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_59": {
                "device": {
                    "value": "self.opt.get('gpu', -1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/core/pytorch_data_teacher.py": {
        "torch": {
            "DataLoader_384": {
                "variable": {
                    "value": "self.dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.bsz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler.SequentialSampler(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.collate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_456": {
                "variable": {
                    "value": "obj[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "val",
                    "type": "Name",
                    "possible_values": [
                        [
                            "obj[key]['value']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "STR_TO_TORCH_DTYPE[obj[key]['type']]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_655": {
                "variable": {
                    "value": "self.pytorch_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.bsz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "data_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sampler.SequentialSampler(self.dataset)",
                            "Call"
                        ],
                        [
                            "sampler.RandomSampler(self.dataset)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SequentialSampler_651": {
                "variable": {
                    "value": "data_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_653": {
                "variable": {
                    "value": "data_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_388": {
                "data_source": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/core/teachers.py": {
        "torch": {
            "load_1506": {
                "variable": {
                    "value": "self.image_features_dict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "image_mode_features_dict_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_image_mode_features_path(self.task, self.image_mode, self.datatype)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_1552": {
                "obj": {
                    "value": "image_features_dict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "store_dict_path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/core/testing_utils.py": {
        "torch": {
            "device_count_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/core/thread_utils.py": {
        "torch": {
            "is_tensor_175": {
                "obj": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sys.intern(v)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ParlAI/parlai/core/torch_agent.py": {
        "torch": {
            "load_1669": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.opt.get('model_file', None) if path is None else path",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "LambdaLR_915": {
                "variable": {
                    "value": "self.warmup_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.optimizer",
                            "Attribute"
                        ],
                        [
                            "optimizer.optimizer",
                            "Attribute"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "_warmup_lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "set_num_threads_689": {
                "int": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_692": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_1199": {
                "tensors": {
                    "value": "tensors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[vec]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_grad_norm__1814": {
                "variable": {
                    "value": "grad_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.opt['gradient_clip']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_device_697": {
                "device": {
                    "value": "opt['gpu']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_932": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.optimizer",
                            "Attribute"
                        ],
                        [
                            "optimizer.optimizer",
                            "Attribute"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "Constant",
                    "possible_values": []
                },
                "factor": {
                    "value": "decay",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.opt.get('lr_scheduler_decay', 0.5)",
                            "Call"
                        ]
                    ]
                },
                "patience": {
                    "value": "patience",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.opt.get('lr_scheduler_patience', 3)",
                            "Call"
                        ]
                    ]
                },
                "verbose": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_1125": {
                "variable": {
                    "value": "self.proj_rp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_1129": {
                "input": {
                    "value": "vec.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.proj_rp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_1725": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StepLR_936": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.optimizer",
                            "Attribute"
                        ],
                        [
                            "optimizer.optimizer",
                            "Attribute"
                        ]
                    ]
                },
                "step_size": {
                    "value": "patience",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.opt.get('lr_scheduler_patience', 3)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "decay",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.opt.get('lr_scheduler_decay', 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_1640": {
                "obj": {
                    "value": "states",
                    "type": "Dict",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "self.state_dict()",
                            "Call"
                        ],
                        [
                            "torch.load(path, map_location=lambda cpu, _: cpu)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "f": {
                    "value": "write",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LambdaLR_948": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.optimizer",
                            "Attribute"
                        ],
                        [
                            "optimizer.optimizer",
                            "Attribute"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "_invsqrt_lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LambdaLR_962": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.optimizer",
                            "Attribute"
                        ],
                        [
                            "optimizer.optimizer",
                            "Attribute"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "_lr",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/core/torch_classifier_agent.py": {
        "torch": {
            "max_235": {
                "variable": {
                    "value": "(_, prediction_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_248": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.score(batch)",
                            "Call"
                        ],
                        [
                            "self.score(batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_162": {
                "weight": {
                    "value": "weight_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.FloatTensor(self.class_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_250": {
                "variable": {
                    "value": "(_, prediction_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "probs.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_150": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/core/torch_generator_agent.py": {
        "torch": {
            "cat_92": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.START.detach().expand(bsz, 1), inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_697": {
                "variable": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bsz",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ys.size(0)",
                            "Call"
                        ],
                        [
                            "batch.text_vec.size(0)",
                            "Call"
                        ],
                        [
                            "len(batch.text_lengths)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_697": {
                "variable": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_996": {
                "variable": {
                    "value": "hyp_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "logprobs.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_1008": {
                "variable": {
                    "value": "(best_scores, best_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_beam_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "beam_scores.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.beam_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_1037": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_1039": {
                "variable": {
                    "value": "hyp_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "logprobs.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_1065": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_1074": {
                "variable": {
                    "value": "hyp_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "logprobs.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_370": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[self.opt['gpu']]",
                    "type": "List",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_384": {
                "ignore_index": {
                    "value": "self.NULL_IDX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_712": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "score[:, -1:, :]",
                            "Subscript"
                        ],
                        [
                            "model.output(score)",
                            "Call"
                        ],
                        [
                            "score.view(bsz, beam_size, -1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(score, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_716": {
                "variable": {
                    "value": "incr_state_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[beam_size * i + b.get_backtrack_from_current_step() for (i, b) in enumerate(beams)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "index_select_725": {
                "variable": {
                    "value": "decoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoder_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.LongTensor([self.START_IDX]).expand(bsz * beam_size, 1).to(dev)",
                            "Call"
                        ],
                        [
                            "torch.index_select(decoder_input, 0, incr_state_inds)",
                            "Call"
                        ],
                        [
                            "torch.cat([decoder_input, selection], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "incr_state_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([beam_size * i + b.get_backtrack_from_current_step() for (i, b) in enumerate(beams)])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_726": {
                "variable": {
                    "value": "selection",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.get_output_from_current_step() for b in beams]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unsqueeze_726": {
                "variable": {
                    "value": "selection",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_729": {
                "variable": {
                    "value": "decoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[decoder_input, selection]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_854": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_926": {
                "tensors": {
                    "value": "[ht.tokenid for ht in reversed(list_of_hypotails)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cross_entropy_597": {
                "variable": {
                    "value": "cand_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.view(num_cands * cands.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "cands.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multinomial_1038": {
                "input": {
                    "value": "probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.softmax(values, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(logprobs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multinomial_1073": {
                "input": {
                    "value": "sprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_417": {
                "*size": {
                    "value": "batchsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch.text_vec.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "maxlen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.label_truncate or 256",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_418": {
                "*size": {
                    "value": "batchsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch.text_vec.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/core/torch_ranker_agent.py": {
        "torch": {
            "arange_261": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batchsize",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "scores.size(0)",
                            "Call"
                        ],
                        [
                            "scores.size(0)",
                            "Call"
                        ],
                        [
                            "batch.text_vec.size(0) if batch.text_vec is not None else batch.image.size(0)",
                            "IfExp"
                        ],
                        [
                            "batch.text_vec.size(0) if batch.text_vec is not None else batch.image.size(0)",
                            "IfExp"
                        ],
                        [
                            "batch.text_vec.size(0) if batch.text_vec is not None else batch.image.size(0)",
                            "IfExp"
                        ]
                    ]
                },
                "out": {
                    "value": "targets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "scores.new_empty(batchsize).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(batchsize, out=targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_187": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[self.opt['gpu']]",
                    "type": "List",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_197": {
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_268": {
                "input": {
                    "value": "ranks",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(above_dot_prods > 0).float().sum(dim=1) + 1",
                            "BinOp"
                        ],
                        [
                            "ranks.cpu()",
                            "Call"
                        ],
                        [
                            "ranks.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_269": {
                "input": {
                    "value": "mrr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 / (ranks + 1e-05)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_874": {
                "f": {
                    "value": "path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.get_task_candidates_path()",
                            "Call"
                        ],
                        [
                            "self.opt['model_file'] + '.cands-' + self.opt['task'] + '.cands'",
                            "BinOp"
                        ],
                        [
                            "self.get_task_candidates_path()",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cat_927": {
                "tensors": {
                    "value": "cand_encs",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.fixed_candidate_encs",
                            "Attribute"
                        ],
                        [
                            "self.vocab_candidate_encs",
                            "Attribute"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_760": {
                "variable": {
                    "value": "self.vocab_candidate_vecs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_892": {
                "obj": {
                    "value": "vecs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.load_candidates(vecs_path)",
                            "Call"
                        ],
                        [
                            "self.load_candidates(vecs_path)",
                            "Call"
                        ],
                        [
                            "self._make_candidate_vecs(cands)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_924": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_326": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ordering",
                            "Name"
                        ]
                    ]
                },
                "other": {
                    "value": "label_vec",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "obs['labels_vec']",
                            "Subscript"
                        ],
                        [
                            "label_vec[0:cand_vecs[i].size(1)]",
                            "Subscript"
                        ],
                        [
                            "label_vec[0:max_c_len]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "ParlAI/parlai/core/utils.py": {
        "torch": {
            "full_1195": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(a, b, c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "pad_idx",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TORCH_LONG",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tensor_1202": {
                "variable": {
                    "value": "item",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TORCH_LONG",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "ParlAI/parlai/core/worlds.py": {
        "torch": {}
    },
    "ParlAI/parlai/scripts/build_pytorch_data.py": {
        "torch": {
            "is_tensor_61": {
                "obj": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/scripts/extract_image_feature.py": {
        "torch": {
            "DataLoader_153": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sp[1]",
                            "Subscript"
                        ],
                        [
                            "'DefaultDataset'",
                            "Constant"
                        ],
                        [
                            "get_dataset_class(opt)(opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bsz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "opt.get('batchsize', 1)",
                            "Call"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "nw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "opt.get('numworkers', 1)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "lambda batch: batch[0]",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/scripts/multiprocessing_train.py": {
        "torch": {
            "set_device_77": {
                "device": {
                    "value": "opt['gpu']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "init_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_89": {
                "seed": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_count_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/parlai/scripts/profile_train.py": {
        "torch": {
            "profile_67": {
                "use_cuda": {
                    "value": "opt['torch_cuda']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "opt.parse_args()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ParlAI/parlai/tasks/coco_caption/agents.py": {
        "torch": {}
    },
    "ParlAI/parlai/tasks/flickr30k/agents.py": {
        "torch": {}
    },
    "ParlAI/parlai/tasks/image_chat/agents.py": {
        "torch": {
            "load_263": {
                "variable": {
                    "value": "self.image_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "image_features_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.opt['datapath'], 'models/image_chat/transresnet_multimodal/test_image_feats')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ParlAI/parlai/tasks/integration_tests/agents.py": {
        "torch": {}
    },
    "ParlAI/parlai/tasks/personality_captions/agents.py": {
        "torch": {
            "load_300": {
                "variable": {
                    "value": "self.image_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "image_features_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.opt['datapath'], 'models/personality_captions/transresnet/test_image_feats')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ParlAI/parlai/tasks/vqa_v1/agents.py": {
        "torch": {}
    },
    "ParlAI/parlai/zoo/pretrained_transformers/build.py": {
        "torch": {}
    },
    "ParlAI/projects/controllable_dialogue/controllable_seq2seq/arora.py": {
        "torch": {
            "mm_237": {
                "variable": {
                    "value": "dot_prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.unsqueeze(emb, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.unsqueeze(first_sv, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "variable": {
                    "value": "sims",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sims",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.cache_sent2sims[sent]",
                            "Subscript"
                        ],
                        [
                            "np.divide(dotted, norms)",
                            "Call"
                        ],
                        [
                            "torch.tensor(sims)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "self.first_sv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.first_sv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_106": {
                "variable": {
                    "value": "word_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.glove_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_237": {
                "input": {
                    "value": "first_sv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "V[0, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/projects/controllable_dialogue/controllable_seq2seq/controllable_seq2seq.py": {
        "torch": {
            "cat_775": {
                "variable": {
                    "value": "cands",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cands",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[batch.candidate_vecs[i] for i in cand_inds]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(cands, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_1009": {
                "variable": {
                    "value": "pad_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "batch.text_vec.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1010": {
                "variable": {
                    "value": "text_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch.text_vec, pad_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_1166": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.opt.get('model_file', None) if path is None else path",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Tensor_1224": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_1382": {
                "variable": {
                    "value": "hypothesis",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(reversed(hypothesis))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "NLLLoss_345": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.NULL_IDX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_347": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.NULL_IDX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_377": {
                "variable": {
                    "value": "init_control_embs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_softmax_932": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.output(output)",
                            "Call"
                        ],
                        [
                            "score.view(batch_size, beam_size, -1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(score, dim=-1)",
                            "Call"
                        ],
                        [
                            "hyp.score",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_966": {
                "variable": {
                    "value": "decoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.get_output_from_current_step() for b in beams]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unsqueeze_966": {
                "variable": {
                    "value": "decoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_969": {
                "variable": {
                    "value": "permute_hidden_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[beam_size * i + b.get_backtrack_from_current_step() for (i, b) in enumerate(beams)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_1014": {
                "variable": {
                    "value": "pad_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "batch.label_vec.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1015": {
                "variable": {
                    "value": "label_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch.label_vec, pad_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "topk_1297": {
                "variable": {
                    "value": "(best_scores, best_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "flatten_beam_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "beam_scores.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.beam_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__575": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.opt['gradient_clip']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_693": {
                "variable": {
                    "value": "dummy",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch.text_vec.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "maxlen",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_1226": {},
            "Tensor_1231": {},
            "no_grad_1296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_337": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_696": {
                "variable": {
                    "value": "ctrl_dummy",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch.text_vec.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "len(self.control_settings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_1156": {
                "obj": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Seq2seq(len(self.dict), opt['embeddingsize'], opt['hiddensize'], padding_idx=self.NULL_IDX, start_idx=self.START_IDX, unknown_idx=self.dict[self.dict.unk_token], longest_label=states.get('longest_label', 1), control_settings=self.control_settings, **kwargs)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "write",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_942": {
                "variable": {
                    "value": "wd_feat_vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(beam_size, vocab_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_1023": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/projects/controllable_dialogue/controllable_seq2seq/controls.py": {
        "torch": {
            "zeros_457": {
                "variable": {
                    "value": "wd_feat_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(dict)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cosine_similarity_620": {
                "variable": {
                    "value": "sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "last_utt_emb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent_embedder.embed_sent(dict.tokenize(last_utt))",
                            "Call"
                        ],
                        [
                            "sent_embedder.embed_sent(last_utt.split())",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "response_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sent_embedder.embed_sent(utt.split())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "self.NIDF_FEATS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(dict)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_934": {
                "*size": {
                    "value": "(len(exs), len(control_settings))",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/projects/controllable_dialogue/controllable_seq2seq/modules.py": {
        "torch": {
            "cat_181": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._starts(bsz), y_in]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores, 1)",
                            "Call"
                        ],
                        [
                            "(true_score.squeeze(2) * nonzero).sum(1)",
                            "Call"
                        ],
                        [
                            "scores / seqlens",
                            "BinOp"
                        ],
                        [
                            "self._decode_forced(ys, ctrl_inputs, encoder_states)",
                            "Call"
                        ],
                        [
                            "self._decode(ctrl_inputs, encoder_states, maxlen or self.longest_label)",
                            "Call"
                        ],
                        [
                            "probs.log()",
                            "Call"
                        ],
                        [
                            "self.e2s(e)",
                            "Call"
                        ],
                        [
                            "torch.cat([pad_score, scores], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores, 1)",
                            "Call"
                        ],
                        [
                            "(true_score.squeeze(2) * nonzero).sum(1)",
                            "Call"
                        ],
                        [
                            "scores / seqlens",
                            "BinOp"
                        ],
                        [
                            "self._decode_forced(ys, ctrl_inputs, encoder_states)",
                            "Call"
                        ],
                        [
                            "self._decode(ctrl_inputs, encoder_states, maxlen or self.longest_label)",
                            "Call"
                        ],
                        [
                            "probs.log()",
                            "Call"
                        ],
                        [
                            "self.e2s(e)",
                            "Call"
                        ],
                        [
                            "torch.cat([pad_score, scores], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_295": {
                "variable": {
                    "value": "cand_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pad(c, max_len, pad=self.NULL_IDX).unsqueeze(0) for c in cand_scores]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleDict_394": {
                "variable": {
                    "value": "self.control_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{c: nn.Embedding(d['num_buckets'], d['embsize'], sparse=False) for (c, d) in control_settings.items()}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "split_412": {
                "variable": {
                    "value": "control_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "control_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.split(control_inputs, 1, dim=1)",
                            "Call"
                        ],
                        [
                            "[torch.squeeze(t, 1) for t in control_inputs]",
                            "ListComp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_424": {
                "variable": {
                    "value": "control_embs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "control_embs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(control_embs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_477": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_573": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_578": {
                "variable": {
                    "value": "self.lt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_features - 1",
                            "BinOp"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embeddingsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sparse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_688": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bmm_892": {
                "variable": {
                    "value": "attn_applied",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "enc_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "enc_out.index_select(0, cand_indices)",
                            "Call"
                        ],
                        [
                            "enc_out.narrow(1, offset, self.max_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_894": {
                "variable": {
                    "value": "merged",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xes.squeeze(1), attn_applied.squeeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_896": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn_combine(merged).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_51": {
                "tensors": {
                    "value": "[tensor, tensor.new(*tensor.size()[:dim], length - tensor.size(dim), *tensor.size()[dim + 1:]).fill_(pad)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_softmax_287": {
                "variable": {
                    "value": "true_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.output(output)",
                            "Call"
                        ],
                        [
                            "self.output(output)",
                            "Call"
                        ],
                        [
                            "self.output(output)",
                            "Call"
                        ],
                        [
                            "self._decode_forced(curr_cs, None, cur_enc_states)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_287": {
                "variable": {
                    "value": "true_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "curr_cs.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_487": {
                "variable": {
                    "value": "self.lt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_features - 1",
                            "BinOp"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embeddingsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sparse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_524": {
                "variable": {
                    "value": "x_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask.int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_525": {
                "variable": {
                    "value": "xes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xes",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.dropout(self.lt(xs))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(xes, x_lens, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.lt(xs))",
                            "Call"
                        ],
                        [
                            "torch.cat([xes, ctrl_embs_tiled], 2)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_lens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(attn_mask.int(), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_533": {
                "variable": {
                    "value": "(encoder_output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "encoder_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_636": {
                "variable": {
                    "value": "xes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xes, ctrl_embs_tiled]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_695": {
                "variable": {
                    "value": "self.e2s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embeddingsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_features - 1",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_703": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "shared_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.decoder.lt.weight if lookuptable in ('dec_out', 'all') else None",
                            "IfExp"
                        ],
                        [
                            "shared_weight.narrow(0, 1, num_features)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_704": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_711": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_712": {
                "variable": {
                    "value": "self.prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hiddensize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "numsoftmax",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_713": {
                "variable": {
                    "value": "self.latent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hiddensize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "numsoftmax * embeddingsize",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tanh_714": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_768": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pad_score, scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_805": {
                "variable": {
                    "value": "self.attn_combine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hszXdirs + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embeddingsize",
                            "Name"
                        ],
                        [
                            "hsz",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_852": {
                "variable": {
                    "value": "h_merged",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xes.squeeze(1), last_hidden)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_853": {
                "variable": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(h_merged)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_889": {
                "variable": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_w_premask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.attn_v(active).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(hid, enc_t).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(hid, enc_t).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_370": {
                "variable": {
                    "value": "out_pad_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "encoder_states[0].size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "seq_len - encoder_states[0].size(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "encoder_states[0].size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_375": {
                "variable": {
                    "value": "new_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoder_states[0], out_pad_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_415": {
                "input": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_719": {
                "variable": {
                    "value": "self.o2e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hiddensize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embeddingsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_813": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "attn_length",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_867": {
                "variable": {
                    "value": "h_merged",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(enc_out, hid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_869": {
                "variable": {
                    "value": "active",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(h_merged)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_396": {
                "num_embeddings": {
                    "value": "d['num_buckets']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d['embsize']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "sparse": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linear_706": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_816": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz + hszXdirs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hsz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hiddensize",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_817": {
                "variable": {
                    "value": "self.attn_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hiddensize",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_877": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "hid.index_select(1, cand_indices)",
                            "Call"
                        ],
                        [
                            "last_hidden.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "hid.expand(bsz, seqlen, numlayersXnumdir)",
                            "Call"
                        ],
                        [
                            "torch.cat([hid, hid], 2)",
                            "Call"
                        ],
                        [
                            "self.attn(hid)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "enc_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "enc_out.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "enc_out.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_877": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_820": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hiddensize",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hszXdirs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hsz * (2 if bidirectional else 1)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_875": {
                "variable": {
                    "value": "hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hid, hid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_883": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "hid.index_select(1, cand_indices)",
                            "Call"
                        ],
                        [
                            "last_hidden.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "hid.expand(bsz, seqlen, numlayersXnumdir)",
                            "Call"
                        ],
                        [
                            "torch.cat([hid, hid], 2)",
                            "Call"
                        ],
                        [
                            "self.attn(hid)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "enc_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "enc_out.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "enc_out.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_883": {
                "variable": {
                    "value": "attn_w_premask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/projects/controllable_dialogue/mturk/worlds.py": {
        "torch": {
            "is_tensor_154": {
                "obj": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/projects/convai2/baselines/language_model/eval_ppl.py": {
        "torch": {
            "softmax_91": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "output.view(-1, len(self.dict))",
                            "Call"
                        ],
                        [
                            "output.view(-1, len(self.dict))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_91": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/projects/image_chat/transresnet_multimodal/modules.py": {
        "torch": {
            "Tensor_98": {
                "variable": {
                    "value": "self.blank_encoding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_410": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "candidates_encoded[idx] if not one_cand_set else candidates_encoded",
                    "type": "IfExp",
                    "possible_values": []
                },
                "mat2": {
                    "value": "encoding.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_514": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_positions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_522": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_545": {
                "variable": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tensor.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "positions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tensor.new(seq_len).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(seq_len, out=positions).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_545": {
                "variable": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_324": {
                "variable": {
                    "value": "all_one_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "encodings.size()[:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_329": {
                "variable": {
                    "value": "rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.blank_encoding for _ in range(batchsize)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "topk_415": {
                "variable": {
                    "value": "(_, index_top)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(candidates_encoded[idx] if not one_cand_set else candidates_encoded, encoding.transpose(0, 1))",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "topk_417": {
                "variable": {
                    "value": "(_, index_top)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(candidates_encoded[idx] if not one_cand_set else candidates_encoded, encoding.transpose(0, 1))",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "scores.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_441": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot_products",
                    "type": "Name",
                    "possible_values": [
                        [
                            "total_encoded.mm(labels_encoded.t())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_442": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "len(total_encoded)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_445": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(dot_products, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.arange(0, len(total_encoded), dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_460": {
                "tensors": {
                    "value": "[t.unsqueeze(1) for t in tensors]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_465": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "state_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.opt.get('load_encoder_from')",
                            "Call"
                        ],
                        [
                            "self.opt.get('load_context_encoder_from')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_479": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "state_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.opt.get('load_encoder_from')",
                            "Call"
                        ],
                        [
                            "self.opt.get('load_context_encoder_from')",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_160": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(self.dictionary)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.opt['embedding_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_273": {
                "variable": {
                    "value": "texts_encoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.blank_encoding for _ in range(batchsize)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/projects/image_chat/transresnet_multimodal/transresnet_multimodal.py": {
        "torch": {
            "Adam_68": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.opt['learningrate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_105": {
                "variable": {
                    "value": "self.fixed_cands_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "cands_enc_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'{}.cands_enc'.format(self.fcp)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "self.fixed_cands_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fixed_cands_enc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_128": {
                "obj": {
                    "value": "self.fixed_cands_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "cands_enc_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'{}.cands_enc'.format(self.fcp)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ParlAI/projects/mastering_the_dungeon/agents/graph_world2/agents.py": {
        "torch": {
            "Adam_501": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "filter(lambda p: p.requires_grad, self.model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt['lr']",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.opt",
                            "Attribute"
                        ],
                        [
                            "self.opt",
                            "Attribute"
                        ],
                        [
                            "self.opt",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_519": {
                "ndarray": {
                    "value": "np_a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_518": {
                "ndarray": {
                    "value": "np_a",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/projects/mastering_the_dungeon/agents/graph_world2/models.py": {
        "torch": {
            "Embedding_27": {
                "variable": {
                    "value": "self.input_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "data_agent.wordcnt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "opt['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_30": {
                "variable": {
                    "value": "self.action_type_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "data_agent.get_num_actions()",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "opt['action_type_emb_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GRU_33": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "opt['embedding_dim']",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "opt['bidir']",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.opt",
                            "Attribute"
                        ],
                        [
                            "self.opt",
                            "Attribute"
                        ],
                        [
                            "self.opt",
                            "Attribute"
                        ],
                        [
                            "self.opt",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(opt['rnn_h'], 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogSoftmax_41": {
                "variable": {
                    "value": "self.log_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.trans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(opt['rnn_h'] * (2 if opt['bidir'] else 1), opt['embedding_dim'])",
                    "type": null,
                    "possible_values": []
                }
            },
            "GRU_49": {
                "variable": {
                    "value": "self.dec_gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "opt['rnn_h'] * (2 if opt['bidir'] else 1) + counter_emb + (opt['embedding_dim'] if not opt['room_ablation'] else 0) + opt['action_type_emb_dim'] + opt['action_type_emb_dim'] + opt['embedding_dim'] + opt['embedding_dim'] + opt['rnn_h'] * (2 if opt['bidir'] else 1)",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.merge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(opt['rnn_h'] * 2, opt['rnn_h'])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_63": {
                "variable": {
                    "value": "self.counter_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "opt['counter_max'] + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "opt['counter_emb_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_124": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bmm(emb_out, action_emb).transpose(1, 2).contiguous().view(-1, seq_in) + torch.bmm(self.trans(enc_out.contiguous().view(batch_size * seq_in, -1)).contiguous().view(batch_size, seq_in, -1), action_emb).transpose(1, 2).contiguous().view(-1, seq_in)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_136": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha.view(batch_size, y_dim, seq_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "enc_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_140": {
                "variable": {
                    "value": "second_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bmm(emb_out, second_action_emb).transpose(1, 2).contiguous().view(-1, seq_in) + torch.bmm(self.trans(enc_out.view(batch_size * seq_in, -1)).view(batch_size, seq_in, -1), second_action_emb).transpose(1, 2).contiguous().view(-1, seq_in)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_155": {
                "variable": {
                    "value": "second_attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "second_alpha.view(batch_size, y_dim, seq_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "enc_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_289": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bmm(emb_out, action_emb).transpose(1, 2).contiguous().view(-1, seq_in) + torch.bmm(self.trans(enc_out.contiguous().view(batch_size * seq_in, -1)).contiguous().view(batch_size, seq_in, -1), action_emb).transpose(1, 2).contiguous().view(-1, seq_in)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_301": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha.view(batch_size, y_dim, seq_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "enc_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_305": {
                "variable": {
                    "value": "second_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bmm(emb_out, second_action_emb).transpose(1, 2).contiguous().view(-1, seq_in) + torch.bmm(self.trans(enc_out.view(batch_size * seq_in, -1)).view(batch_size, seq_in, -1), second_action_emb).transpose(1, 2).contiguous().view(-1, seq_in)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_320": {
                "variable": {
                    "value": "second_attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "second_alpha.view(batch_size, y_dim, seq_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "enc_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_446": {
                "variable": {
                    "value": "self.input_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "data_agent.wordcnt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "opt['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GRU_449": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "opt['embedding_dim']",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GRU_452": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.y_dim",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_455": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(opt['rnn_h'] * 2, self.y_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_19": {
                "input": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_19": {
                "min": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-12",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mm_191": {
                "variable": {
                    "value": "y_second_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_in",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(torch.zeros(batch_size, y_dim))",
                            "Call"
                        ],
                        [
                            "y[:, i - 1]",
                            "Subscript"
                        ],
                        [
                            "y_in.cuda()",
                            "Call"
                        ],
                        [
                            "torch.mm(y_in, action_emb_ori).unsqueeze(1).expand(batch_size, y_dim, emb_dim)",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_size, y_dim))",
                            "Call"
                        ],
                        [
                            "y_onehot",
                            "Name"
                        ],
                        [
                            "y_in.cuda()",
                            "Call"
                        ],
                        [
                            "torch.mm(y_in, action_emb_ori).unsqueeze(1).expand(batch_size, y_dim, emb_dim)",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_size, 1, y.size(2)))",
                            "Call"
                        ],
                        [
                            "y[:, i - 1].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "y_in.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_size, 1, self.y_dim))",
                            "Call"
                        ],
                        [
                            "y_onehot.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "y_in.cuda()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "second_action_emb_ori",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.input_emb(second_action_key.unsqueeze(1)).squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.input_emb(second_action_key.unsqueeze(1)).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_191": {
                "variable": {
                    "value": "y_second_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_196": {
                "variable": {
                    "value": "y_type_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_in",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(torch.zeros(batch_size, y_dim))",
                            "Call"
                        ],
                        [
                            "y[:, i - 1]",
                            "Subscript"
                        ],
                        [
                            "y_in.cuda()",
                            "Call"
                        ],
                        [
                            "torch.mm(y_in, action_emb_ori).unsqueeze(1).expand(batch_size, y_dim, emb_dim)",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_size, y_dim))",
                            "Call"
                        ],
                        [
                            "y_onehot",
                            "Name"
                        ],
                        [
                            "y_in.cuda()",
                            "Call"
                        ],
                        [
                            "torch.mm(y_in, action_emb_ori).unsqueeze(1).expand(batch_size, y_dim, emb_dim)",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_size, 1, y.size(2)))",
                            "Call"
                        ],
                        [
                            "y[:, i - 1].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "y_in.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_size, 1, self.y_dim))",
                            "Call"
                        ],
                        [
                            "y_onehot.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "y_in.cuda()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "action_type_out_ori",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.action_type_emb(action_type)",
                            "Call"
                        ],
                        [
                            "self.action_type_emb(action_type.unsqueeze(1)).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_196": {
                "variable": {
                    "value": "y_type_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_201": {
                "variable": {
                    "value": "y_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_in",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(torch.zeros(batch_size, y_dim))",
                            "Call"
                        ],
                        [
                            "y[:, i - 1]",
                            "Subscript"
                        ],
                        [
                            "y_in.cuda()",
                            "Call"
                        ],
                        [
                            "torch.mm(y_in, action_emb_ori).unsqueeze(1).expand(batch_size, y_dim, emb_dim)",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_size, y_dim))",
                            "Call"
                        ],
                        [
                            "y_onehot",
                            "Name"
                        ],
                        [
                            "y_in.cuda()",
                            "Call"
                        ],
                        [
                            "torch.mm(y_in, action_emb_ori).unsqueeze(1).expand(batch_size, y_dim, emb_dim)",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_size, 1, y.size(2)))",
                            "Call"
                        ],
                        [
                            "y[:, i - 1].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "y_in.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_size, 1, self.y_dim))",
                            "Call"
                        ],
                        [
                            "y_onehot.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "y_in.cuda()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "action_emb_ori",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.input_emb(action_key.unsqueeze(1)).squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.input_emb(action_key.unsqueeze(1)).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_201": {
                "variable": {
                    "value": "y_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "dec_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dec_in_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[attention]",
                            "List"
                        ],
                        [
                            "[attention]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_348": {
                "variable": {
                    "value": "room_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_366": {
                "variable": {
                    "value": "y_second_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_in",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(torch.zeros(batch_size, y_dim))",
                            "Call"
                        ],
                        [
                            "y[:, i - 1]",
                            "Subscript"
                        ],
                        [
                            "y_in.cuda()",
                            "Call"
                        ],
                        [
                            "torch.mm(y_in, action_emb_ori).unsqueeze(1).expand(batch_size, y_dim, emb_dim)",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_size, y_dim))",
                            "Call"
                        ],
                        [
                            "y_onehot",
                            "Name"
                        ],
                        [
                            "y_in.cuda()",
                            "Call"
                        ],
                        [
                            "torch.mm(y_in, action_emb_ori).unsqueeze(1).expand(batch_size, y_dim, emb_dim)",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_size, 1, y.size(2)))",
                            "Call"
                        ],
                        [
                            "y[:, i - 1].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "y_in.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_size, 1, self.y_dim))",
                            "Call"
                        ],
                        [
                            "y_onehot.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "y_in.cuda()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "second_action_emb_ori",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.input_emb(second_action_key.unsqueeze(1)).squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.input_emb(second_action_key.unsqueeze(1)).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_366": {
                "variable": {
                    "value": "y_second_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_371": {
                "variable": {
                    "value": "y_type_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_in",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(torch.zeros(batch_size, y_dim))",
                            "Call"
                        ],
                        [
                            "y[:, i - 1]",
                            "Subscript"
                        ],
                        [
                            "y_in.cuda()",
                            "Call"
                        ],
                        [
                            "torch.mm(y_in, action_emb_ori).unsqueeze(1).expand(batch_size, y_dim, emb_dim)",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_size, y_dim))",
                            "Call"
                        ],
                        [
                            "y_onehot",
                            "Name"
                        ],
                        [
                            "y_in.cuda()",
                            "Call"
                        ],
                        [
                            "torch.mm(y_in, action_emb_ori).unsqueeze(1).expand(batch_size, y_dim, emb_dim)",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_size, 1, y.size(2)))",
                            "Call"
                        ],
                        [
                            "y[:, i - 1].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "y_in.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_size, 1, self.y_dim))",
                            "Call"
                        ],
                        [
                            "y_onehot.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "y_in.cuda()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "action_type_out_ori",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.action_type_emb(action_type)",
                            "Call"
                        ],
                        [
                            "self.action_type_emb(action_type.unsqueeze(1)).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_371": {
                "variable": {
                    "value": "y_type_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_376": {
                "variable": {
                    "value": "y_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_in",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(torch.zeros(batch_size, y_dim))",
                            "Call"
                        ],
                        [
                            "y[:, i - 1]",
                            "Subscript"
                        ],
                        [
                            "y_in.cuda()",
                            "Call"
                        ],
                        [
                            "torch.mm(y_in, action_emb_ori).unsqueeze(1).expand(batch_size, y_dim, emb_dim)",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_size, y_dim))",
                            "Call"
                        ],
                        [
                            "y_onehot",
                            "Name"
                        ],
                        [
                            "y_in.cuda()",
                            "Call"
                        ],
                        [
                            "torch.mm(y_in, action_emb_ori).unsqueeze(1).expand(batch_size, y_dim, emb_dim)",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_size, 1, y.size(2)))",
                            "Call"
                        ],
                        [
                            "y[:, i - 1].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "y_in.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_size, 1, self.y_dim))",
                            "Call"
                        ],
                        [
                            "y_onehot.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "y_in.cuda()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "action_emb_ori",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.input_emb(action_key.unsqueeze(1)).squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.input_emb(action_key.unsqueeze(1)).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_376": {
                "variable": {
                    "value": "y_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_393": {
                "variable": {
                    "value": "dec_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dec_in_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[attention]",
                            "List"
                        ],
                        [
                            "[attention]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_399": {
                "variable": {
                    "value": "y_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "y_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_413": {
                "variable": {
                    "value": "y_onehot",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "y_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_485": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bmm(enc_out, hidden[-1].unsqueeze(2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_488": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc_out.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(torch.bmm(emb_out, action_emb).transpose(1, 2).contiguous().view(-1, seq_in) + torch.bmm(self.trans(enc_out.contiguous().view(batch_size * seq_in, -1)).contiguous().view(batch_size, seq_in, -1), action_emb).transpose(1, 2).contiguous().view(-1, seq_in))",
                            "Call"
                        ],
                        [
                            "F.softmax(torch.bmm(emb_out, action_emb).transpose(1, 2).contiguous().view(-1, seq_in) + torch.bmm(self.trans(enc_out.contiguous().view(batch_size * seq_in, -1)).contiguous().view(batch_size, seq_in, -1), action_emb).transpose(1, 2).contiguous().view(-1, seq_in))",
                            "Call"
                        ],
                        [
                            "F.softmax(torch.bmm(enc_out, hidden[-1].unsqueeze(2)))",
                            "Call"
                        ],
                        [
                            "F.softmax(torch.bmm(enc_out, hidden[-1].unsqueeze(2)))",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_488": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_531": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bmm(enc_out, hidden[-1].unsqueeze(2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_532": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc_out.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(torch.bmm(emb_out, action_emb).transpose(1, 2).contiguous().view(-1, seq_in) + torch.bmm(self.trans(enc_out.contiguous().view(batch_size * seq_in, -1)).contiguous().view(batch_size, seq_in, -1), action_emb).transpose(1, 2).contiguous().view(-1, seq_in))",
                            "Call"
                        ],
                        [
                            "F.softmax(torch.bmm(emb_out, action_emb).transpose(1, 2).contiguous().view(-1, seq_in) + torch.bmm(self.trans(enc_out.contiguous().view(batch_size * seq_in, -1)).contiguous().view(batch_size, seq_in, -1), action_emb).transpose(1, 2).contiguous().view(-1, seq_in))",
                            "Call"
                        ],
                        [
                            "F.softmax(torch.bmm(enc_out, hidden[-1].unsqueeze(2)))",
                            "Call"
                        ],
                        [
                            "F.softmax(torch.bmm(enc_out, hidden[-1].unsqueeze(2)))",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_532": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_537": {
                "variable": {
                    "value": "y_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.y_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_547": {
                "variable": {
                    "value": "y_onehot",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.y_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "opt['rnn_h']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "opt['rnn_h'] * (2 if opt['bidir'] else 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt['embedding_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tanh_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_62": {
                "in_features": {
                    "value": "opt['rnn_h'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt['rnn_h']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tanh_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_93": {
                "*size": {
                    "value": "opt['rnn_layers'] * (2 if opt['bidir'] else 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "opt['rnn_h']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_259": {
                "*size": {
                    "value": "opt['rnn_layers'] * (2 if opt['bidir'] else 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "opt['rnn_h']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_332": {
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "y_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_456": {
                "in_features": {
                    "value": "opt['rnn_h'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.y_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogSoftmax_456": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_467": {
                "*size": {
                    "value": "opt['rnn_layers']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "opt['rnn_h']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_513": {
                "*size": {
                    "value": "opt['rnn_layers']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "opt['rnn_h']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bmm_125": {
                "input": {
                    "value": "emb_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.input_emb(x)",
                            "Call"
                        ],
                        [
                            "self.input_emb(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "action_emb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "action_emb_ori.unsqueeze(0).expand(batch_size, y_dim, emb_dim).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "action_emb_ori.unsqueeze(0).expand(batch_size, y_dim, emb_dim).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_125": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_126": {
                "input": {
                    "value": "self.trans(enc_out.contiguous().view(batch_size * seq_in, -1)).contiguous().view(batch_size, seq_in, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "action_emb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "action_emb_ori.unsqueeze(0).expand(batch_size, y_dim, emb_dim).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "action_emb_ori.unsqueeze(0).expand(batch_size, y_dim, emb_dim).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_126": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_141": {
                "input": {
                    "value": "emb_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.input_emb(x)",
                            "Call"
                        ],
                        [
                            "self.input_emb(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "second_action_emb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "second_action_emb_ori.unsqueeze(0).expand(batch_size, y_dim, emb_dim).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "second_action_emb_ori.unsqueeze(0).expand(batch_size, y_dim, emb_dim).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_141": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_145": {
                "input": {
                    "value": "self.trans(enc_out.view(batch_size * seq_in, -1)).view(batch_size, seq_in, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "second_action_emb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "second_action_emb_ori.unsqueeze(0).expand(batch_size, y_dim, emb_dim).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "second_action_emb_ori.unsqueeze(0).expand(batch_size, y_dim, emb_dim).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_145": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_290": {
                "input": {
                    "value": "emb_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.input_emb(x)",
                            "Call"
                        ],
                        [
                            "self.input_emb(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "action_emb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "action_emb_ori.unsqueeze(0).expand(batch_size, y_dim, emb_dim).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "action_emb_ori.unsqueeze(0).expand(batch_size, y_dim, emb_dim).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_290": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_291": {
                "input": {
                    "value": "self.trans(enc_out.contiguous().view(batch_size * seq_in, -1)).contiguous().view(batch_size, seq_in, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "action_emb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "action_emb_ori.unsqueeze(0).expand(batch_size, y_dim, emb_dim).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "action_emb_ori.unsqueeze(0).expand(batch_size, y_dim, emb_dim).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_291": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_306": {
                "input": {
                    "value": "emb_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.input_emb(x)",
                            "Call"
                        ],
                        [
                            "self.input_emb(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "second_action_emb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "second_action_emb_ori.unsqueeze(0).expand(batch_size, y_dim, emb_dim).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "second_action_emb_ori.unsqueeze(0).expand(batch_size, y_dim, emb_dim).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_306": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_310": {
                "input": {
                    "value": "self.trans(enc_out.view(batch_size * seq_in, -1)).view(batch_size, seq_in, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "second_action_emb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "second_action_emb_ori.unsqueeze(0).expand(batch_size, y_dim, emb_dim).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "second_action_emb_ori.unsqueeze(0).expand(batch_size, y_dim, emb_dim).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_310": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_486": {
                "input": {
                    "value": "enc_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "hidden[-1].unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_492": {
                "tensors": {
                    "value": "[attention, dec_out.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_531": {
                "input": {
                    "value": "enc_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "hidden[-1].unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_534": {
                "tensors": {
                    "value": "[attention, dec_out.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_184": {
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "y_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_359": {
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "y_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_412": {
                "input": {
                    "value": "dec_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dec_out.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.log_softmax(self.decoder(dec_out).view(batch_size, y_dim))",
                            "Call"
                        ],
                        [
                            "dec_out.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.decoder(dec_out).view(batch_size, y_dim)",
                            "Call"
                        ],
                        [
                            "dec_out * y_mask + -10000000.0 * (1 - y_mask)",
                            "BinOp"
                        ],
                        [
                            "self.mapping(torch.cat([attention, dec_out.squeeze(1)], dim=1))",
                            "Call"
                        ],
                        [
                            "self.mapping(torch.cat([attention, dec_out.squeeze(1)], dim=1))",
                            "Call"
                        ],
                        [
                            "dec_out * y_mask + -10000000.0 * (1 - y_mask)",
                            "BinOp"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_477": {
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_524": {
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.y_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_546": {
                "input": {
                    "value": "dec_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dec_out.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.log_softmax(self.decoder(dec_out).view(batch_size, y_dim))",
                            "Call"
                        ],
                        [
                            "dec_out.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.decoder(dec_out).view(batch_size, y_dim)",
                            "Call"
                        ],
                        [
                            "dec_out * y_mask + -10000000.0 * (1 - y_mask)",
                            "BinOp"
                        ],
                        [
                            "self.mapping(torch.cat([attention, dec_out.squeeze(1)], dim=1))",
                            "Call"
                        ],
                        [
                            "self.mapping(torch.cat([attention, dec_out.squeeze(1)], dim=1))",
                            "Call"
                        ],
                        [
                            "dec_out * y_mask + -10000000.0 * (1 - y_mask)",
                            "BinOp"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/projects/mastering_the_dungeon/projects/graph_world2/train.py": {
        "torch": {
            "from_numpy_114": {
                "ndarray": {
                    "value": "np_a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_113": {
                "ndarray": {
                    "value": "np_a",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/projects/mastering_the_dungeon/tasks/graph_world2/graph.py": {
        "torch": {
            "load_159": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "read",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_139": {
                "obj": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(read)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "write",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/projects/memnn_feedback/agent/memnn_feedback.py": {
        "torch": {
            "cat_271": {
                "variable": {
                    "value": "cand_answers_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[1] for x in parsed_cands]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_485": {
                "variable": {
                    "value": "memory",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "memory",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[self.dict.txt2vec(s) for s in memory_sentences]",
                            "ListComp"
                        ],
                        [
                            "[torch.LongTensor(m) for m in memory]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(memory)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_508": {
                "variable": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[0] for x in parsed]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_509": {
                "variable": {
                    "value": "memories",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[1] for x in parsed]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_510": {
                "variable": {
                    "value": "query_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[2] for x in parsed]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_186": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_523": {
                "variable": {
                    "value": "label_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_536": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "padded",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.cat((p, torch.LongTensor(self.longest_label - len(p)).fill_(self.END_TENSOR[0]))) for p in parsed]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "load_609": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "read",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_124": {
                "type": {
                    "value": "opt['gpu']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SGD_153": {
                "variable": {
                    "value": "self.optimizers[decoder]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "self.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "opt['learning_rate']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_526": {
                "tensors": {
                    "value": "(p, torch.LongTensor(self.longest_label - len(p)).fill_(self.END_TENSOR[0]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_605": {
                "obj": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(read)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "write",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SGD_151": {
                "params": {
                    "value": "optim_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[p for p in self.model.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "opt['learning_rate']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_159": {
                "variable": {
                    "value": "self.optimizers[decoder]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "self.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "opt['learning_rate']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_157": {
                "params": {
                    "value": "optim_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[p for p in self.model.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "opt['learning_rate']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "ParlAI/projects/memnn_feedback/agent/modules.py": {
        "torch": {
            "Linear_51": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt['embedding_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt['embedding_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_158": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(output_embeddings.data.new(len(cands), max_len).zero_())",
                            "Call"
                        ],
                        [
                            "self.get_score(cand_answers, query_embeddings)",
                            "Call"
                        ],
                        [
                            "self.h2o(hidden)",
                            "Call"
                        ],
                        [
                            "self.dropout(scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_158": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_160": {
                "variable": {
                    "value": "forward_prediction_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(scores).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "softmax(attention).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "cands_embeddings_with_beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_160": {
                "variable": {
                    "value": "forward_prediction_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_202": {
                "variable": {
                    "value": "embs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "emb_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Tensor_213": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_221": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "embeddings.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_233": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_242": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_memory_embeddings",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.answer_embedder(memory_lengths, memories)",
                            "Call"
                        ],
                        [
                            "self.in_memory_embedder(memory_lengths, memories)",
                            "Call"
                        ],
                        [
                            "in_memory_embeddings.cuda()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "query_embeddings.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_242": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_251": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.bmm(in_memory_embeddings, query_embeddings.unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "attention_mask.float() * attention + (1 - attention_mask.float()) * -1e+20",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_251": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_252": {
                "variable": {
                    "value": "memory_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(scores).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "softmax(attention).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "out_memory_embeddings",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.answer_embedder(memory_lengths, memories)",
                            "Call"
                        ],
                        [
                            "self.out_memory_embedder(memory_lengths, memories)",
                            "Call"
                        ],
                        [
                            "out_memory_embeddings.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_252": {
                "variable": {
                    "value": "memory_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_262": {
                "variable": {
                    "value": "self.h2o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(dictionary)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_263": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "opt['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GRU_264": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_197": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "super().forward(input[i, :, :])",
                            "Call"
                        ],
                        [
                            "emb * Variable(self.position_tensor(row, emb))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(emb, dim=1).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_197": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_180": {
                "input": {
                    "value": "lengths_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lengths.data",
                            "Attribute"
                        ],
                        [
                            "lengths_mat.squeeze().unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ParlAI/projects/personachat/kvmemnn/kvmemnn.py": {
        "torch": {
            "CosineEmbeddingLoss_362": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "opt['margin']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.opt",
                            "Attribute"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_904": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "read",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "set_num_threads_303": {
                "int": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_num_threads_322": {
                "int": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_366": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-100",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_426": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CosineSimilarity_680": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineSimilarity_628": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_708": {
                "variable": {
                    "value": "xs2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "zq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CosineSimilarity_721": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineSimilarity_767": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_896": {
                "obj": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(read)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "handle",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_575": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CosineSimilarity_750": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineSimilarity_752": {
                "variable": {
                    "value": "origpred",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_82": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cosine_similarity_587": {
                "x1": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "W[input[0].item()]",
                            "Subscript"
                        ]
                    ]
                },
                "x2": {
                    "value": "W[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_595": {},
            "unsqueeze_346": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_352": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_614": {
                "*size": {
                    "value": "xe.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_843": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/projects/personachat/kvmemnn/modules.py": {
        "torch": {
            "Embedding_16": {
                "variable": {
                    "value": "self.lt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "opt['embeddingsize']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "sparse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "opt['embeddingnorm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Softmax_38": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CosineSimilarity_39": {
                "variable": {
                    "value": "self.cosine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt['embeddingsize']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt['embeddingsize']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt['embeddingsize']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt['embeddingsize']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_27": {
                "variable": {
                    "value": "self.lt2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "opt['embeddingsize']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "sparse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "opt['embeddingnorm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "mems_enc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mem_enc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mm_68": {
                "variable": {
                    "value": "lhs_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.softmax(layer2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "mems_enc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(mem_enc)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_76": {
                "variable": {
                    "value": "lhs_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer5",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.softmax(layer4)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "mems_enc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(mem_enc)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_114": {
                "tensors": {
                    "value": "xs_enc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_112": {
                "tensors": {
                    "value": "ys_enc",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Tensor_137": {}
        }
    },
    "ParlAI/projects/personality_captions/transresnet/modules.py": {
        "torch": {
            "Embedding_566": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(dic)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_120": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.opt['learningrate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Embedding_143": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(self.dictionary)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.opt['embedding_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_197": {
                "variable": {
                    "value": "self.image_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*image_layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_205": {
                "variable": {
                    "value": "self.personality_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*personality_layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_461": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot_products",
                    "type": "Name",
                    "possible_values": [
                        [
                            "context_encoded.mm(captions_encoded.t())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_462": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "len(context_encoded)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_465": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(dot_products, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.arange(0, len(context_encoded), dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_581": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_582": {
                "variable": {
                    "value": "self.dp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_290": {
                "variable": {
                    "value": "stacked",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "image_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mm_395": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "candidates_encoded[img_index] if not one_cand_set else candidates_encoded",
                    "type": "IfExp",
                    "possible_values": []
                },
                "mat2": {
                    "value": "context_encoding.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_542": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "state_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.opt.get('load_encoder_from')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_187": {
                "num_features": {
                    "value": "self.opt['image_features_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_188": {
                "p": {
                    "value": "self.opt['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_189": {
                "in_features": {
                    "value": "self.opt['image_features_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.opt['hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_201": {
                "num_features": {
                    "value": "self.num_personalities",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_202": {
                "p": {
                    "value": "self.opt['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_203": {
                "in_features": {
                    "value": "self.num_personalities",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.opt['hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "topk_402": {
                "variable": {
                    "value": "(_, index_top)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(candidates_encoded[img_index] if not one_cand_set else candidates_encoded, context_encoding.transpose(0, 1))",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "topk_404": {
                "variable": {
                    "value": "(_, index_top)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(candidates_encoded[img_index] if not one_cand_set else candidates_encoded, context_encoding.transpose(0, 1))",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "scores.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_194": {
                "p": {
                    "value": "self.opt['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_195": {
                "in_features": {
                    "value": "self.opt['hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.opt['hidden_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/projects/personality_captions/transresnet/transresnet.py": {
        "torch": {
            "load_495": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.opt.get('model_file', None) if path is None else path",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_482": {
                "obj": {
                    "value": "states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(path, map_location=lambda cpu, _: cpu)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.opt.get('model_file', None) if path is None else path",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_149": {
                "variable": {
                    "value": "self.fixed_cands_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "cands_enc_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'{}.cands_enc'.format(self.fcp)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cat_171": {
                "variable": {
                    "value": "self.fixed_cands_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fixed_cands_enc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_172": {
                "obj": {
                    "value": "self.fixed_cands_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "cands_enc_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'{}.cands_enc'.format(self.fcp)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ParlAI/projects/self_feeding/feedback_classifier/feedback_classifier.py": {
        "torch": {}
    },
    "ParlAI/projects/self_feeding/modules.py": {
        "torch": {
            "Dropout_71": {
                "variable": {
                    "value": "self.x_dia_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_74": {
                "variable": {
                    "value": "self.y_dia_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_170": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.opt['embedding_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.pad_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_88": {
                "variable": {
                    "value": "self.x_fee_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_94": {
                "variable": {
                    "value": "self.y_fee_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_148": {
                "input": {
                    "value": "self.x_sat_head(self.x_sat_encoder(x_vecs))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_148": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_157": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "context_h / context_h.norm(2, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "cand_h.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_201": {
                "*args": {
                    "value": "*modules",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_159": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context_h.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "cand_h.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_159": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_200": {
                "in_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.opt['embedding_size']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_198": {
                "in_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.opt['embedding_size']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.opt['embedding_size']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/projects/self_feeding/self_feeding_agent.py": {
        "torch": {
            "BCELoss_271": {
                "variable": {
                    "value": "self.satisfaction_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduce": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_736": {
                "variable": {
                    "value": "confidences",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model.score_dialog(batch.text_vec, cand_vecs)",
                            "Call"
                        ],
                        [
                            "self.model.score_feedback(batch.text_vec, cand_vecs)",
                            "Call"
                        ],
                        [
                            "self.model.score_dialog(text_padded, cand_padded)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_753": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_819": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/projects/taskntalk/coopgame_agent.py": {
        "torch": {
            "is_available_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_97": {
                "device": {
                    "value": "opt['gpuid']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "token_embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(token_embeds, observation['image'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_187": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.opt['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_188": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.opt['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/projects/taskntalk/modules.py": {
        "torch": {
            "Embedding_36": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embeds.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_52": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LSTMCell_67": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "embed_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "state_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_83": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTMCell_98": {
                "variable": {
                    "value": "self.net_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "embed_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "state_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.net_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_100": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/projects/wizard_of_wikipedia/generator/agents.py": {
        "torch": {
            "zeros_111": {
                "variable": {
                    "value": "batch[know_vec]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "Call",
                    "possible_values": [
                        [
                            "max(self.metrics['bsz'], 1)",
                            "Call"
                        ],
                        [
                            "len(reordered_observations)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "variable": {
                    "value": "batch[cs_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "Call",
                    "possible_values": [
                        [
                            "max(self.metrics['bsz'], 1)",
                            "Call"
                        ],
                        [
                            "len(reordered_observations)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_265": {
                "variable": {
                    "value": "ck_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "Call",
                    "possible_values": [
                        [
                            "max(self.metrics['bsz'], 1)",
                            "Call"
                        ],
                        [
                            "len(reordered_observations)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "max(knowledge_counts)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "th.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_137": {
                "variable": {
                    "value": "know_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ctx_know_attn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoder_states[2]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "batch.cs_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_113": {
                "*size": {
                    "value": "bsz",
                    "type": "Call",
                    "possible_values": [
                        [
                            "max(self.metrics['bsz'], 1)",
                            "Call"
                        ],
                        [
                            "len(reordered_observations)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "th.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/projects/wizard_of_wikipedia/generator/modules.py": {
        "torch": {
            "bmm_29": {
                "variable": {
                    "value": "sentence_sums",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentences.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "mask.float().unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_29": {
                "variable": {
                    "value": "sentence_sums",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_49": {
                "variable": {
                    "value": "enc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "th.index_select(enc, 0, indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "th.LongTensor(indices).to(enc.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_50": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "th.index_select(mask, 0, indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "th.LongTensor(indices).to(enc.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_51": {
                "variable": {
                    "value": "ckattn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ckattn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "th.index_select(ckattn, 0, indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "th.LongTensor(indices).to(enc.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_82": {
                "variable": {
                    "value": "ck_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "know_use",
                    "type": "Call",
                    "possible_values": [
                        [
                            "universal_sentence_embedding(know_encoded, know_mask)",
                            "Call"
                        ],
                        [
                            "know_use.reshape(N, know_tokens.size(1), self.embed_dim)",
                            "Call"
                        ],
                        [
                            "know_use / np.sqrt(self.embed_dim)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "context_use.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_82": {
                "variable": {
                    "value": "ck_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "full_enc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cs_encoded, context_encoded]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "full_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cs_mask, context_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_tensor_47": {
                "obj": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "th.LongTensor(indices).to(enc.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_96": {
                "start": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cs_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/projects/wizard_of_wikipedia/wizard_transformer_ranker/wizard_transformer_ranker.py": {
        "torch": {
            "load_135": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda cpu, _: cpu",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cat_83": {
                "tensors": {
                    "value": "[soc_tensor, obs['text_vec']]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/tests/test_distributed.py": {
        "torch": {}
    },
    "ParlAI/tests/test_pytorch_data_teacher.py": {
        "torch": {
            "all_151": {
                "input": {
                    "value": "torch.eq(val1, val2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_151": {
                "input": {
                    "value": "val1",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "agent_processed_observation[key]",
                            "Subscript"
                        ],
                        [
                            "act1[key]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "val2",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "teacher_processed_act[key]",
                            "Subscript"
                        ],
                        [
                            "act2[key]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "all_198": {
                "input": {
                    "value": "torch.eq(val1, val2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_198": {
                "input": {
                    "value": "val1",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "agent_processed_observation[key]",
                            "Subscript"
                        ],
                        [
                            "act1[key]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "val2",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "teacher_processed_act[key]",
                            "Subscript"
                        ],
                        [
                            "act2[key]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "ParlAI/tests/test_threadutils.py": {
        "torch": {
            "is_available_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ParlAI/tests/test_torch_agent.py": {
        "torch": {}
    },
    "ParlAI/tests/test_utils.py": {
        "torch": {}
    },
    "data.py": {
        "torch": {
            "from_numpy_23": {
                "ndarray": {
                    "value": "embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((max_len, len(batch), emb_dim))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "encoder/extract_features.py": {
        "torch": {
            "load_37": {
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "encoder/models.py": {
        "torch": {
            "LSTM_33": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dpout_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_67": {
                "variable": {
                    "value": "sent_packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, idx_sort)",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else self.tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[[self.bos] + [word for word in sent if word in self.word_vec] + [self.eos]]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len_sorted",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sent_len_sorted.copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_253": {
                "variable": {
                    "value": "(output, idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "self.classifier(features)",
                            "Call"
                        ],
                        [
                            "self.classifier(u)",
                            "Call"
                        ]
                    ]
                }
            },
            "GRU_284": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dpout_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_298": {
                "variable": {
                    "value": "sent_packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, idx_sort)",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else self.tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[[self.bos] + [word for word in sent if word in self.word_vec] + [self.eos]]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.FloatTensor(sent_len.copy()).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(sent_len).unsqueeze(1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_300": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hn[0], hn[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTM_323": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dpout_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_325": {
                "variable": {
                    "value": "self.proj_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_339": {
                "variable": {
                    "value": "sent_packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, idx_sort)",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else self.tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[[self.bos] + [word for word in sent if word in self.word_vec] + [self.eos]]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.FloatTensor(sent_len.copy()).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(sent_len).unsqueeze(1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTM_374": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dpout_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_388": {
                "variable": {
                    "value": "sent_packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, idx_sort)",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else self.tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[[self.bos] + [word for word in sent if word in self.word_vec] + [self.eos]]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.FloatTensor(sent_len.copy()).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(sent_len).unsqueeze(1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "GRU_412": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dpout_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_426": {
                "variable": {
                    "value": "sent_packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, idx_sort)",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else self.tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[[self.bos] + [word for word in sent if word in self.word_vec] + [self.eos]]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.FloatTensor(sent_len.copy()).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(sent_len).unsqueeze(1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTM_452": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_454": {
                "variable": {
                    "value": "self.proj_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_455": {
                "variable": {
                    "value": "self.proj_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_456": {
                "variable": {
                    "value": "self.query_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_457": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pack_padded_sequence_470": {
                "variable": {
                    "value": "sent_packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, idx_sort)",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else self.tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[[self.bos] + [word for word in sent if word in self.word_vec] + [self.eos]]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.FloatTensor(sent_len.copy()).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(sent_len).unsqueeze(1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_486": {
                "variable": {
                    "value": "sent_key_proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent_key_proj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.proj_key(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(bsize, -1, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "torch.tanh(sent_key_proj)",
                            "Call"
                        ],
                        [
                            "self.proj_key(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(bsize, -1, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "torch.tanh(sent_key_proj)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_501": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alphas * sent_output_proj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_501": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTM_519": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_521": {
                "variable": {
                    "value": "self.proj_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_522": {
                "variable": {
                    "value": "self.proj_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_523": {
                "variable": {
                    "value": "self.query_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_524": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pack_padded_sequence_537": {
                "variable": {
                    "value": "sent_packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, idx_sort)",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else self.tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[[self.bos] + [word for word in sent if word in self.word_vec] + [self.eos]]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.FloatTensor(sent_len.copy()).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(sent_len).unsqueeze(1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_550": {
                "variable": {
                    "value": "sent_key_proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent_key_proj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.proj_key(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(bsize, -1, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "torch.tanh(sent_key_proj)",
                            "Call"
                        ],
                        [
                            "self.proj_key(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(bsize, -1, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "torch.tanh(sent_key_proj)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_560": {
                "variable": {
                    "value": "emb1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alphas1 * sent_output_proj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_560": {
                "variable": {
                    "value": "emb1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_567": {
                "variable": {
                    "value": "emb2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alphas2 * sent_output_proj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_567": {
                "variable": {
                    "value": "emb2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_573": {
                "variable": {
                    "value": "emb3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alphas3 * sent_output_proj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_573": {
                "variable": {
                    "value": "emb3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_579": {
                "variable": {
                    "value": "emb4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alphas4 * sent_output_proj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_579": {
                "variable": {
                    "value": "emb4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_588": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(emb1, emb2, emb3, emb4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTM_605": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_608": {
                "variable": {
                    "value": "self.proj_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_610": {
                "variable": {
                    "value": "self.proj_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_612": {
                "variable": {
                    "value": "self.proj_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_615": {
                "variable": {
                    "value": "self.query_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_616": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pack_padded_sequence_629": {
                "variable": {
                    "value": "sent_packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, idx_sort)",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else self.tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[[self.bos] + [word for word in sent if word in self.word_vec] + [self.eos]]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.FloatTensor(sent_len.copy()).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(sent_len).unsqueeze(1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_645": {
                "variable": {
                    "value": "sent_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_649": {
                "variable": {
                    "value": "sent_M",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent_keys + sent_summary",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_679": {
                "variable": {
                    "value": "self.convnet1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(self.word_emb_dim, 2 * self.enc_lstm_dim, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_684": {
                "variable": {
                    "value": "self.convnet2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(2 * self.enc_lstm_dim, 2 * self.enc_lstm_dim, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_689": {
                "variable": {
                    "value": "self.convnet3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(2 * self.enc_lstm_dim, 2 * self.enc_lstm_dim, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_694": {
                "variable": {
                    "value": "self.convnet4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(2 * self.enc_lstm_dim, 2 * self.enc_lstm_dim, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_723": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(u1, u2, u3, u4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_774": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(u, v, torch.abs(u - v), u * v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_804": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.inputdim, 512)",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_78": {
                "variable": {
                    "value": "sent_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_79": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, idx_unsort)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_79": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_351": {
                "variable": {
                    "value": "sent_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_352": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, idx_unsort)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_352": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_752": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=self.dpout_fc)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_763": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.inputdim, self.fc_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "ndarray": {
                    "value": "idx_sort",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(idx_sort).cuda() if self.is_cuda() else torch.from_numpy(idx_sort)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "from_numpy_63": {
                "ndarray": {
                    "value": "idx_sort",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(idx_sort).cuda() if self.is_cuda() else torch.from_numpy(idx_sort)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_69": {
                "sequence": {
                    "value": "sent_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, idx_unsort)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_72": {
                "ndarray": {
                    "value": "idx_unsort",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(idx_unsort).cuda() if self.is_cuda() else torch.from_numpy(idx_unsort)",
                            "IfExp"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_73": {
                "ndarray": {
                    "value": "idx_unsort",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(idx_unsort).cuda() if self.is_cuda() else torch.from_numpy(idx_unsort)",
                            "IfExp"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_342": {
                "sequence": {
                    "value": "sent_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, idx_unsort)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_355": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_473": {
                "sequence": {
                    "value": "sent_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, idx_unsort)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_540": {
                "sequence": {
                    "value": "sent_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, idx_unsort)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_632": {
                "sequence": {
                    "value": "sent_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, idx_unsort)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_680": {
                "in_channels": {
                    "value": "self.word_emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_682": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_685": {
                "in_channels": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_687": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_690": {
                "in_channels": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_692": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_695": {
                "in_channels": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_697": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_712": {
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, idx_sort)",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else self.tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[[self.bos] + [word for word in sent if word in self.word_vec] + [self.eos]]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_715": {
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, idx_sort)",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else self.tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[[self.bos] + [word for word in sent if word in self.word_vec] + [self.eos]]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_718": {
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, idx_sort)",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else self.tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[[self.bos] + [word for word in sent if word in self.word_vec] + [self.eos]]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_721": {
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, idx_sort)",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else self.tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[[self.bos] + [word for word in sent if word in self.word_vec] + [self.eos]]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_805": {
                "in_features": {
                    "value": "self.inputdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_806": {
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_499": {
                "input": {
                    "value": "sent_w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.query_embedding(torch.LongTensor(bsize * [0]).cuda()).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "self.query_embedding(torch.LongTensor(bsize * [0]).cuda()).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_499": {
                "input": {
                    "value": "sent_w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.query_embedding(torch.LongTensor(bsize * [0]).cuda()).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "self.query_embedding(torch.LongTensor(bsize * [0]).cuda()).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_583": {
                "tensors": {
                    "value": "(alphas1.data[0, :, 0], alphas2.data[0, :, 0], torch.abs(alphas1.data[0, :, 0] - alphas2.data[0, :, 0]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_658": {
                "input": {
                    "value": "sent_w[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_658": {
                "input": {
                    "value": "sent_w[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_753": {
                "p": {
                    "value": "self.dpout_fc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_754": {
                "in_features": {
                    "value": "self.inputdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_755": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_756": {
                "p": {
                    "value": "self.dpout_fc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_757": {
                "in_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_758": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_759": {
                "p": {
                    "value": "self.dpout_fc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_760": {
                "in_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_764": {
                "in_features": {
                    "value": "self.inputdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_765": {
                "in_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_766": {
                "in_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_774": {
                "input": {
                    "value": "u - v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_84": {
                "input": {
                    "value": "sent_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, idx_unsort)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_645": {
                "input": {
                    "value": "sent_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, idx_unsort)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_585": {
                "input": {
                    "value": "alphas1.data[0, :, 0] - alphas2.data[0, :, 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_355": {
                "input": {
                    "value": "sent_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, idx_unsort)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "inferSent/api/export_dataset_embeddings.py": {
        "torch": {
            "load_16": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "inferSent/data.py": {
        "torch": {
            "from_numpy_23": {
                "ndarray": {
                    "value": "embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((max_len, len(batch), emb_dim))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "inferSent/encoder/extract_features.py": {
        "torch": {
            "load_37": {
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "inferSent/encoder/models.py": {
        "torch": {
            "LSTM_37": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dpout_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_62": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dpout_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_100": {
                "variable": {
                    "value": "sent_packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, idx_sort)",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else self.tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[[self.bos] + [word for word in sent if word in self.word_vec] + [self.eos]]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len_sorted",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sent_len_sorted.copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_286": {
                "variable": {
                    "value": "(output, idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "self.classifier(features)",
                            "Call"
                        ],
                        [
                            "self.classifier(u)",
                            "Call"
                        ]
                    ]
                }
            },
            "GRU_319": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dpout_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_333": {
                "variable": {
                    "value": "sent_packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, idx_sort)",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else self.tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[[self.bos] + [word for word in sent if word in self.word_vec] + [self.eos]]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.FloatTensor(sent_len.copy()).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(sent_len).unsqueeze(1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_335": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hn[0], hn[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTM_358": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dpout_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_360": {
                "variable": {
                    "value": "self.proj_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_374": {
                "variable": {
                    "value": "sent_packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, idx_sort)",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else self.tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[[self.bos] + [word for word in sent if word in self.word_vec] + [self.eos]]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.FloatTensor(sent_len.copy()).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(sent_len).unsqueeze(1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTM_409": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dpout_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_423": {
                "variable": {
                    "value": "sent_packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, idx_sort)",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else self.tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[[self.bos] + [word for word in sent if word in self.word_vec] + [self.eos]]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.FloatTensor(sent_len.copy()).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(sent_len).unsqueeze(1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "GRU_447": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dpout_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_461": {
                "variable": {
                    "value": "sent_packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, idx_sort)",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else self.tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[[self.bos] + [word for word in sent if word in self.word_vec] + [self.eos]]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.FloatTensor(sent_len.copy()).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(sent_len).unsqueeze(1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTM_487": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_489": {
                "variable": {
                    "value": "self.proj_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_490": {
                "variable": {
                    "value": "self.proj_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_491": {
                "variable": {
                    "value": "self.query_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_492": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pack_padded_sequence_505": {
                "variable": {
                    "value": "sent_packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, idx_sort)",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else self.tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[[self.bos] + [word for word in sent if word in self.word_vec] + [self.eos]]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.FloatTensor(sent_len.copy()).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(sent_len).unsqueeze(1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_521": {
                "variable": {
                    "value": "sent_key_proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent_key_proj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.proj_key(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(bsize, -1, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "torch.tanh(sent_key_proj)",
                            "Call"
                        ],
                        [
                            "self.proj_key(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(bsize, -1, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "torch.tanh(sent_key_proj)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_536": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alphas * sent_output_proj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_536": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTM_554": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_556": {
                "variable": {
                    "value": "self.proj_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_557": {
                "variable": {
                    "value": "self.proj_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_558": {
                "variable": {
                    "value": "self.query_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_559": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pack_padded_sequence_572": {
                "variable": {
                    "value": "sent_packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, idx_sort)",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else self.tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[[self.bos] + [word for word in sent if word in self.word_vec] + [self.eos]]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.FloatTensor(sent_len.copy()).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(sent_len).unsqueeze(1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_585": {
                "variable": {
                    "value": "sent_key_proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent_key_proj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.proj_key(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(bsize, -1, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "torch.tanh(sent_key_proj)",
                            "Call"
                        ],
                        [
                            "self.proj_key(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(bsize, -1, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "torch.tanh(sent_key_proj)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_595": {
                "variable": {
                    "value": "emb1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alphas1 * sent_output_proj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_595": {
                "variable": {
                    "value": "emb1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_602": {
                "variable": {
                    "value": "emb2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alphas2 * sent_output_proj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_602": {
                "variable": {
                    "value": "emb2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_608": {
                "variable": {
                    "value": "emb3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alphas3 * sent_output_proj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_608": {
                "variable": {
                    "value": "emb3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_614": {
                "variable": {
                    "value": "emb4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alphas4 * sent_output_proj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_614": {
                "variable": {
                    "value": "emb4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_623": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(emb1, emb2, emb3, emb4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTM_640": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_643": {
                "variable": {
                    "value": "self.proj_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_645": {
                "variable": {
                    "value": "self.proj_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_647": {
                "variable": {
                    "value": "self.proj_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_650": {
                "variable": {
                    "value": "self.query_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_651": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pack_padded_sequence_664": {
                "variable": {
                    "value": "sent_packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, idx_sort)",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else self.tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[[self.bos] + [word for word in sent if word in self.word_vec] + [self.eos]]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.FloatTensor(sent_len.copy()).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(sent_len).unsqueeze(1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_680": {
                "variable": {
                    "value": "sent_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_684": {
                "variable": {
                    "value": "sent_M",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent_keys + sent_summary",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_714": {
                "variable": {
                    "value": "self.convnet1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(self.word_emb_dim, 2 * self.enc_lstm_dim, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_719": {
                "variable": {
                    "value": "self.convnet2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(2 * self.enc_lstm_dim, 2 * self.enc_lstm_dim, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_724": {
                "variable": {
                    "value": "self.convnet3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(2 * self.enc_lstm_dim, 2 * self.enc_lstm_dim, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_729": {
                "variable": {
                    "value": "self.convnet4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(2 * self.enc_lstm_dim, 2 * self.enc_lstm_dim, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_758": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(u1, u2, u3, u4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_809": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(u, v, torch.abs(u - v), u * v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_839": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.inputdim, 512)",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_111": {
                "variable": {
                    "value": "sent_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_112": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, idx_unsort)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_112": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_386": {
                "variable": {
                    "value": "sent_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_387": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, idx_unsort)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_387": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_787": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=self.dpout_fc)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_798": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.inputdim, self.fc_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_95": {
                "ndarray": {
                    "value": "idx_sort",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(idx_sort).cuda() if self.is_cuda() else torch.from_numpy(idx_sort)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "from_numpy_96": {
                "ndarray": {
                    "value": "idx_sort",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(idx_sort).cuda() if self.is_cuda() else torch.from_numpy(idx_sort)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_102": {
                "sequence": {
                    "value": "sent_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, idx_unsort)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_105": {
                "ndarray": {
                    "value": "idx_unsort",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(idx_unsort).cuda() if self.is_cuda() else torch.from_numpy(idx_unsort)",
                            "IfExp"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_106": {
                "ndarray": {
                    "value": "idx_unsort",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(idx_unsort).cuda() if self.is_cuda() else torch.from_numpy(idx_unsort)",
                            "IfExp"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_377": {
                "sequence": {
                    "value": "sent_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, idx_unsort)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_390": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_508": {
                "sequence": {
                    "value": "sent_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, idx_unsort)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_575": {
                "sequence": {
                    "value": "sent_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, idx_unsort)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_667": {
                "sequence": {
                    "value": "sent_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, idx_unsort)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_715": {
                "in_channels": {
                    "value": "self.word_emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_717": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_720": {
                "in_channels": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_722": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_725": {
                "in_channels": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_727": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_730": {
                "in_channels": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_732": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_747": {
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, idx_sort)",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else self.tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[[self.bos] + [word for word in sent if word in self.word_vec] + [self.eos]]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_750": {
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, idx_sort)",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else self.tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[[self.bos] + [word for word in sent if word in self.word_vec] + [self.eos]]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_753": {
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, idx_sort)",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else self.tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[[self.bos] + [word for word in sent if word in self.word_vec] + [self.eos]]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_756": {
                "input": {
                    "value": "sent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sent.index_select(1, idx_sort)",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else self.tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[[self.bos] + [word for word in sent if word in self.word_vec] + [self.eos]]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, torch.cuda.LongTensor(idx_sort))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_840": {
                "in_features": {
                    "value": "self.inputdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_841": {
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_534": {
                "input": {
                    "value": "sent_w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.query_embedding(torch.LongTensor(bsize * [0]).cuda()).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "self.query_embedding(torch.LongTensor(bsize * [0]).cuda()).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_534": {
                "input": {
                    "value": "sent_w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.query_embedding(torch.LongTensor(bsize * [0]).cuda()).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "self.query_embedding(torch.LongTensor(bsize * [0]).cuda()).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_618": {
                "tensors": {
                    "value": "(alphas1.data[0, :, 0], alphas2.data[0, :, 0], torch.abs(alphas1.data[0, :, 0] - alphas2.data[0, :, 0]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_693": {
                "input": {
                    "value": "sent_w[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_693": {
                "input": {
                    "value": "sent_w[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_788": {
                "p": {
                    "value": "self.dpout_fc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_789": {
                "in_features": {
                    "value": "self.inputdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_790": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_791": {
                "p": {
                    "value": "self.dpout_fc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_792": {
                "in_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_793": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_794": {
                "p": {
                    "value": "self.dpout_fc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_795": {
                "in_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_799": {
                "in_features": {
                    "value": "self.inputdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_800": {
                "in_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_801": {
                "in_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_809": {
                "input": {
                    "value": "u - v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_117": {
                "input": {
                    "value": "sent_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, idx_unsort)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_680": {
                "input": {
                    "value": "sent_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, idx_unsort)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_620": {
                "input": {
                    "value": "alphas1.data[0, :, 0] - alphas2.data[0, :, 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_390": {
                "input": {
                    "value": "sent_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, idx_unsort)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, torch.cuda.LongTensor(idx_unsort))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "inferSent/mutils.py": {
        "torch": {}
    },
    "inferSent/train_nli.py": {
        "torch": {
            "CrossEntropyLoss_123": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.FloatTensor(params.n_classes).fill_(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_62": {
                "device": {
                    "value": "params.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_73": {
                "seed": {
                    "value": "params.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_74": {
                "seed": {
                    "value": "params.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_300": {
                "obj": {
                    "value": "nli_net.encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(params.outputdir, params.outputmodelname + '.encoder.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_293": {
                "f": {
                    "value": "os.path.join(params.outputdir, params.outputmodelname)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_264": {
                "obj": {
                    "value": "nli_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(params.outputdir, params.outputmodelname)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model/configs.py": {
        "torch": {}
    },
    "model/data_loader.py": {
        "torch": {
            "DataLoader_151": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DialogDataset(sentences, conversation_length, sentence_length, vocab, data=data, emojis=emojis, infersent=infersent)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "model/layers/beam_search.py": {
        "torch": {
            "stack_142": {
                "variable": {
                    "value": "prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "prediction",
                    "type": "Call",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "[step.index_select(0, top_k_idx).view(self.batch_size, self.beam_size) for step in reversed(prediction)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(prediction, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/layers/decoder.py": {
        "torch": {
            "gather_81": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.softmax(out / self.temperature)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "x.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_233": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_239": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_240": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multinomial_73": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.softmax(out / self.temperature)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_158": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.out(last_h)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_135": {
                "*size": {
                    "value": "batch_size * self.beam_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_315": {
                "tensors": {
                    "value": "out_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "h[0].size(1)",
                            "Call"
                        ],
                        [
                            "h.size(1)",
                            "Call"
                        ],
                        [
                            "self.batch_size(h=init_h)",
                            "Call"
                        ],
                        [
                            "self.batch_size(inputs, init_h)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_129": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "h[0].size(1)",
                            "Call"
                        ],
                        [
                            "h.size(1)",
                            "Call"
                        ],
                        [
                            "self.batch_size(h=init_h)",
                            "Call"
                        ],
                        [
                            "self.batch_size(inputs, init_h)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_136": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "h[0].size(1)",
                            "Call"
                        ],
                        [
                            "h.size(1)",
                            "Call"
                        ],
                        [
                            "self.batch_size(h=init_h)",
                            "Call"
                        ],
                        [
                            "self.batch_size(inputs, init_h)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_337": {
                "tensors": {
                    "value": "x_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "h[0].size(1)",
                            "Call"
                        ],
                        [
                            "h.size(1)",
                            "Call"
                        ],
                        [
                            "self.batch_size(h=init_h)",
                            "Call"
                        ],
                        [
                            "self.batch_size(inputs, init_h)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "h[0].size(1)",
                            "Call"
                        ],
                        [
                            "h.size(1)",
                            "Call"
                        ],
                        [
                            "self.batch_size(h=init_h)",
                            "Call"
                        ],
                        [
                            "self.batch_size(inputs, init_h)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_335": {
                "tensors": {
                    "value": "x_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/layers/encoder.py": {
        "torch": {
            "Embedding_81": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "PAD_ID",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_118": {
                "variable": {
                    "value": "rnn_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.embedding(inputs_sorted)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_length_sorted",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_length_sorted.data.tolist()",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "self.batch_first",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_127": {
                "variable": {
                    "value": "(outputs, outputs_lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "outputs.index_select(0, inverse_indices)",
                            "Call"
                        ],
                        [
                            "outputs.index_select(0, inverse_indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "self.batch_first",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_188": {
                "variable": {
                    "value": "rnn_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoder_hidden_sorted",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "conv_length_sorted",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_length_sorted.data.tolist()",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_196": {
                "variable": {
                    "value": "(outputs, outputs_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "outputs.index_select(0, inverse_indices)",
                            "Call"
                        ],
                        [
                            "outputs.index_select(0, inverse_indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_216": {
                "variable": {
                    "value": "encoder_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoder_hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.unsqueeze(encoder_hidden, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "self.num_layers * self.num_directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "h[0].size(1)",
                            "Call"
                        ],
                        [
                            "h.size(1)",
                            "Call"
                        ],
                        [
                            "encoder_hidden.size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_28": {
                "*size": {
                    "value": "self.num_layers * self.num_directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "h[0].size(1)",
                            "Call"
                        ],
                        [
                            "h.size(1)",
                            "Call"
                        ],
                        [
                            "encoder_hidden.size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "*size": {
                    "value": "self.num_layers * self.num_directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "h[0].size(1)",
                            "Call"
                        ],
                        [
                            "h.size(1)",
                            "Call"
                        ],
                        [
                            "encoder_hidden.size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/layers/feedforward.py": {
        "torch": {
            "ModuleList_17": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(n_in, n_out, bias=bias) for (n_in, n_out) in zip(n_inputs, n_outputs)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "n_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "model/layers/loss.py": {
        "torch": {
            "log_softmax_27": {
                "variable": {
                    "value": "log_probs_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits.view(-1, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LogSoftmax_58": {
                "variable": {
                    "value": "logsoftmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_59": {
                "input": {
                    "value": "torch.sum(-soft_targets * logsoftmax(logits), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_62": {
                "input": {
                    "value": "(preds - true) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_34": {
                "input": {
                    "value": "log_probs_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.log_softmax(logits_flat, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "target_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_59": {
                "input": {
                    "value": "-soft_targets * logsoftmax(logits)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/layers/rnncells.py": {
        "torch": {
            "Dropout_14": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_17": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_45": {
                "variable": {
                    "value": "h_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_list",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.stack(h_list)",
                            "Call"
                        ],
                        [
                            "h_list + [h_i]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(h_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_46": {
                "variable": {
                    "value": "c_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "c_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(c_list)",
                            "Call"
                        ],
                        [
                            "c_list + [c_i]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Dropout_56": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_59": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_86": {
                "variable": {
                    "value": "h_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_list",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.stack(h_list)",
                            "Call"
                        ],
                        [
                            "h_list + [h_i]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(h_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTMCell_19": {
                "input_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rnn_size",
                            "Name"
                        ],
                        [
                            "rnn_size",
                            "Name"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "rnn_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GRUCell_61": {
                "input_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rnn_size",
                            "Name"
                        ],
                        [
                            "rnn_size",
                            "Name"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "rnn_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "model/models.py": {
        "torch": {
            "cumsum_101": {
                "variable": {
                    "value": "start",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((to_var(input_conversation_length.data.new(1).zero_()), input_conversation_length[:-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_105": {
                "variable": {
                    "value": "context_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pad(context_inputs_2d.narrow(0, s, l), max_len) for (s, l) in zip(start.data.tolist(), input_conversation_length.data.tolist())]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "context_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context_outputs[i, :l, :] for (i, l) in enumerate(input_conversation_length.data)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_222": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "samples",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(samples, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(samples, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(samples, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softplus_276": {
                "variable": {
                    "value": "self.softplus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_282": {
                "variable": {
                    "value": "self.prior_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.context_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.z_sent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_284": {
                "variable": {
                    "value": "self.prior_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.context_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.z_sent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_292": {
                "variable": {
                    "value": "self.posterior_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.context_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.z_sent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_294": {
                "variable": {
                    "value": "self.posterior_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.context_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.z_sent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_372": {
                "variable": {
                    "value": "start",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((to_var(input_conversation_length.data.new(1).zero_()), input_conversation_length[:-1] + 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_376": {
                "variable": {
                    "value": "context_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pad(context_inputs_2d.narrow(0, s, l + 1), max_len + 1) for (s, l) in zip(start.data.tolist(), input_conversation_length.data.tolist())]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_382": {
                "variable": {
                    "value": "context_inputs_inference_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context_inputs_inference[i, :l, :] for (i, l) in enumerate(input_conversation_length.data)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_393": {
                "variable": {
                    "value": "context_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context_outputs_with_targets[i, :l, :] for (i, l) in enumerate(input_conversation_length.data)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_435": {
                "variable": {
                    "value": "latent_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context_outputs, z_sent]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_545": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "samples",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(samples, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(samples, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(samples, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_585": {
                "variable": {
                    "value": "self.unk_sent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(context_encoder_size - config.z_conv_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softplus_617": {
                "variable": {
                    "value": "self.softplus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_625": {
                "variable": {
                    "value": "self.conv_posterior_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.context_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.z_conv_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_627": {
                "variable": {
                    "value": "self.conv_posterior_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.context_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.z_conv_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_635": {
                "variable": {
                    "value": "self.sent_prior_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.context_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.z_sent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_637": {
                "variable": {
                    "value": "self.sent_prior_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.context_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.z_sent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_646": {
                "variable": {
                    "value": "self.sent_posterior_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.context_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.z_sent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_648": {
                "variable": {
                    "value": "self.sent_posterior_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.context_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.z_sent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_722": {
                "variable": {
                    "value": "start",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((to_var(input_conversation_length.data.new(1).zero_()), input_conversation_length[:-1] + 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_725": {
                "variable": {
                    "value": "context_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pad(context_inputs_2d.narrow(0, s, l + 1), max_len + 1) for (s, l) in zip(start.data.tolist(), input_conversation_length.data.tolist())]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_731": {
                "variable": {
                    "value": "context_inputs_inference_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context_inputs_inference[i, :l, :] for (i, l) in enumerate(input_conversation_length.data)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_836": {
                "variable": {
                    "value": "z_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z.view(1, -1).expand(m.item(), self.config.z_conv_size) for (z, m) in zip(z_conv, input_conversation_length)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_841": {
                "variable": {
                    "value": "latent_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context_outputs, z_sent, z_conv]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_895": {
                "variable": {
                    "value": "context_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "context_inputs_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_972": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "samples",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(samples, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(samples, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(samples, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_995": {
                "tensors": {
                    "value": "(emoji_sentences, infersent_sentences)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "context_inputs_2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(context_inputs_2d, extra_context_inputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_305": {
                "variable": {
                    "value": "self.bow_predict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.decoder_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_368": {
                "variable": {
                    "value": "context_inputs_2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(context_inputs_2d, extra_context_inputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_424": {
                "variable": {
                    "value": "kl_div",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kl_div",
                    "type": "Call",
                    "possible_values": [
                        [
                            "normal_kl_div(mu_posterior, var_posterior, mu_prior, var_prior)",
                            "Call"
                        ],
                        [
                            "torch.sum(kl_div)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "kl_div_conv + kl_div_sent",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_510": {
                "variable": {
                    "value": "latent_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context_outputs, z_sent]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_718": {
                "variable": {
                    "value": "context_inputs_2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(context_inputs_2d, extra_context_inputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_775": {
                "variable": {
                    "value": "context_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context_outputs[i, :l, :] for (i, l) in enumerate(input_conversation_length.data)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_778": {
                "variable": {
                    "value": "z_conv_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_conv_expand[i, :l, :] for (i, l) in enumerate(input_conversation_length.data)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_810": {
                "variable": {
                    "value": "context_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context_outputs[i, :l, :] for (i, l) in enumerate(input_conversation_length.data)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_814": {
                "variable": {
                    "value": "z_conv_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_conv_expand[i, :l, :] for (i, l) in enumerate(input_conversation_length.data)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_937": {
                "variable": {
                    "value": "latent_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context_outputs, z_sent, z_conv]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_101": {
                "tensors": {
                    "value": "(to_var(input_conversation_length.data.new(1).zero_()), input_conversation_length[:-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_182": {
                "variable": {
                    "value": "context_inputs_2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(context_inputs_2d, extra_context_inputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "context_inputs_2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(context_inputs_2d, dynamic_context_inputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_330": {
                "tensors": {
                    "value": "[context_outputs, encoder_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_372": {
                "tensors": {
                    "value": "(to_var(input_conversation_length.data.new(1).zero_()), input_conversation_length[:-1] + 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_413": {
                "*size": {
                    "value": "(num_sentences, self.config.z_sent_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_493": {
                "variable": {
                    "value": "context_inputs_2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(context_inputs_2d, extra_context_inputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_517": {
                "variable": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.where(p == EOS_ID)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_539": {
                "variable": {
                    "value": "context_inputs_2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(context_inputs_2d, dynamic_context_inputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_585": {
                "*size": {
                    "value": "context_encoder_size - config.z_conv_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_681": {
                "tensors": {
                    "value": "[context_outputs, z_conv]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_687": {
                "tensors": {
                    "value": "[context_outputs, encoder_hidden, z_conv]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_722": {
                "tensors": {
                    "value": "(to_var(input_conversation_length.data.new(1).zero_()), input_conversation_length[:-1] + 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_738": {
                "*size": {
                    "value": "[batch_size, self.config.z_conv_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_874": {
                "*size": {
                    "value": "[batch_size, self.config.z_conv_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_890": {
                "variable": {
                    "value": "context_inputs_2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(context_inputs_2d, extra_context_inputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_919": {
                "variable": {
                    "value": "context_inputs_2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(context_inputs_2d, extra_context_inputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_944": {
                "variable": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.where(p == EOS_ID)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_966": {
                "variable": {
                    "value": "context_inputs_2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(context_inputs_2d, dynamic_context_inputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_507": {
                "*size": {
                    "value": "(batch_size, self.config.z_sent_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_769": {
                "tensors": {
                    "value": "[context_inputs_input, z_conv_expand]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_781": {
                "*size": {
                    "value": "(num_sentences, self.config.z_sent_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_805": {
                "tensors": {
                    "value": "[context_inputs_input, z_conv_expand]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_817": {
                "*size": {
                    "value": "(num_sentences, self.config.z_sent_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_902": {
                "input": {
                    "value": "conv_var_posterior",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_926": {
                "tensors": {
                    "value": "[context_inputs_2d, z_conv]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_934": {
                "*size": {
                    "value": "(batch_size, self.config.z_sent_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_970": {
                "tensors": {
                    "value": "[context_inputs_2d, z_conv]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_417": {
                "input": {
                    "value": "var_posterior",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.softplus(self.posterior_var(h_posterior))",
                            "Call"
                        ],
                        [
                            "self.softplus(self.conv_posterior_var(h_posterior))",
                            "Call"
                        ],
                        [
                            "self.softplus(self.sent_posterior_var(h_posterior))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_426": {
                "input": {
                    "value": "var_prior",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.softplus(self.prior_var(h_prior))",
                            "Call"
                        ],
                        [
                            "self.softplus(self.sent_prior_var(h_prior))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_508": {
                "input": {
                    "value": "var_prior",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.softplus(self.prior_var(h_prior))",
                            "Call"
                        ],
                        [
                            "self.softplus(self.sent_prior_var(h_prior))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_756": {
                "input": {
                    "value": "conv_var_posterior",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_785": {
                "input": {
                    "value": "sent_var_posterior",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_797": {
                "input": {
                    "value": "conv_var_prior",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_819": {
                "input": {
                    "value": "sent_var_prior",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_935": {
                "input": {
                    "value": "var_prior",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.softplus(self.prior_var(h_prior))",
                            "Call"
                        ],
                        [
                            "self.softplus(self.sent_prior_var(h_prior))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/solver.py": {
        "torch": {
            "load_131": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_117": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.config.save_path, f'{epoch}.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_290": {
                "variable": {
                    "value": "extra_context_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(emoji_sentences, infersent_sentences)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_561": {
                "variable": {
                    "value": "extra_context_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(emoji_sentences, infersent_sentences)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_1313": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(weights, 0)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.exp(weights - m).sum())",
                            "Call"
                        ],
                        [
                            "m + weights - np.log(self.config.importance_sample)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "floor_1314": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights.max()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_1315": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(weights - m).sum()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__194": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.config.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_688": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_701": {
                "variable": {
                    "value": "extra_context_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(emojis_input, infersent_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_789": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_798": {
                "variable": {
                    "value": "extra_context_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(emojis_input, infersent_pca_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_grad_norm__942": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.config.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_1048": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_1315": {
                "input": {
                    "value": "weights - m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_1315": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_698": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_795": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1019": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1031": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1044": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1059": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/utils/bow.py": {
        "torch": {
            "log_softmax_35": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bow_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_37": {
                "input": {
                    "value": "target_distribution",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target_bow / (target_bow.sum(1).view(-1, 1) + 1e-23) + 1e-23",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "model/utils/convert.py": {
        "torch": {}
    },
    "model/utils/mask.py": {
        "torch": {
            "arange_38": {
                "variable": {
                    "value": "seq_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sequence_length.max()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "model/utils/pad.py": {
        "torch": {
            "stack_29": {
                "variable": {
                    "value": "packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "padded",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[pad(t, max_len) for t in tensor_list]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_11": {
                "tensors": {
                    "value": "[var, torch.zeros(length - var.size(0), *var.size()[1:], dtype=dtype).cuda()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_18": {
                "tensors": {
                    "value": "[tensor, torch.zeros(length - tensor.size(0), *tensor.size()[1:], dtype=dtype).cuda()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_12": {
                "*size": {
                    "value": "length - var.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "*var.size()[1:]",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_19": {
                "*size": {
                    "value": "length - tensor.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "*tensor.size()[1:]",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "model/utils/probability.py": {
        "torch": {
            "sum_24": {
                "input": {
                    "value": "0.5 * (torch.log(var2) - torch.log(var1) + (var1 + (mu1 - mu2).pow(2)) / var2 - one)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_17": {
                "input": {
                    "value": "-torch.log(2.0 * pi) - torch.log(var) - (x - mean).pow(2) / var",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_17": {
                "input": {
                    "value": "2.0 * pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_24": {
                "input": {
                    "value": "var1",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "model/utils/vocab.py": {
        "torch": {}
    },
    "torchMoji/torchmoji/attlayer.py": {
        "torch": {
            "Parameter_31": {
                "variable": {
                    "value": "self.attention_vector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(attention_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_54": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "unnorm_ai.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "torch.LongTensor(max_len)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_54": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_63": {
                "variable": {
                    "value": "weighted",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "attentions.unsqueeze(-1).expand_as(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "torchMoji/torchmoji/class_avg_finetuning.py": {
        "torch": {
            "BCEWithLogitsLoss_96": {
                "variable": {
                    "value": "loss_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_104": {
                "variable": {
                    "value": "adam",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "(p for p in model.parameters() if p.requires_grad)",
                    "type": "GeneratorExp",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "save_200": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "init_weight_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_278": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f1_init_weight_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_110": {
                "variable": {
                    "value": "adam",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': base_params}, {'params': embed_parameters, 'weight_decay': embed_l2}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_205": {
                "f": {
                    "value": "init_weight_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_220": {
                "f": {
                    "value": "checkpoint_weight_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_284": {
                "f": {
                    "value": "f1_init_weight_path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "torchMoji/torchmoji/lstm.py": {
        "torch": {
            "tanh_340": {
                "variable": {
                    "value": "cellgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cellgate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.tanh(cellgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "threshold_354": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-x",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "threshold": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "threshold_355": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-x",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "output.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0).view(input.size(0), *output[0].size())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0)",
                            "Call"
                        ],
                        [
                            "PackedSequence(output, batch_sizes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "output.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0).view(input.size(0), *output[0].size())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0)",
                            "Call"
                        ],
                        [
                            "PackedSequence(output, batch_sizes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_282": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "output.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0).view(input.size(0), *output[0].size())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0)",
                            "Call"
                        ],
                        [
                            "PackedSequence(output, batch_sizes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "PackedSequence_113": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "output.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0).view(input.size(0), *output[0].size())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0)",
                            "Call"
                        ],
                        [
                            "PackedSequence(output, batch_sizes)",
                            "Call"
                        ]
                    ]
                },
                "batch_sizes": {
                    "value": "batch_sizes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_310": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "input.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_322": {
                "variable": {
                    "value": "next_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(total_layers, *next_h[0].size()), torch.cat(next_c, 0).view(total_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(total_layers, *next_hidden[0].size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linear_334": {
                "input": {
                    "value": "hx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(input.data.new(self.num_layers * num_directions, max_batch_size, self.hidden_size).zero_(), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "(hx, hx)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Parameter(torch.Tensor(gate_size, hidden_size))",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b_hh",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Parameter(torch.Tensor(gate_size))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_344": {
                "input": {
                    "value": "cy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "forgetgate * cx + ingate * cellgate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "w_ih",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(gate_size, layer_input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "w_hh",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(gate_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_41": {
                "variable": {
                    "value": "b_ih",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(gate_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "b_hh",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(gate_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_313": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(all_output, input.dim() - 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(input, p=dropout, training=train, inplace=False)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "training": {
                    "value": "train",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_244": {
                "tensors": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_318": {
                "tensors": {
                    "value": "next_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_319": {
                "tensors": {
                    "value": "next_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_269": {
                "tensors": {
                    "value": "(h, ih[last_batch_size:batch_size])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "torchMoji/torchmoji/model_def.py": {
        "torch": {
            "load_285": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weight_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "PackedSequence_218": {
                "variable": {
                    "value": "packed_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embed(packed_input.data)",
                            "Call"
                        ],
                        [
                            "nn.Tanh()(x)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(x)",
                            "Call"
                        ],
                        [
                            "self.final_dropout(x)",
                            "Call"
                        ]
                    ]
                },
                "batch_sizes": {
                    "value": "packed_input.batch_sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "PackedSequence_226": {
                "variable": {
                    "value": "packed_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.cat((lstm_1_output.data, lstm_0_output.data, packed_input.data), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_sizes": {
                    "value": "packed_input.batch_sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_231": {
                "variable": {
                    "value": "(input_seqs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pack_padded_sequence(input_seqs, input_lengths.cpu().numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "input_seqs",
                            "Name"
                        ],
                        [
                            "PackedSequence(x, packed_input.batch_sizes)",
                            "Call"
                        ],
                        [
                            "PackedSequence(torch.cat((lstm_1_output.data, lstm_0_output.data, packed_input.data), dim=1), packed_input.batch_sizes)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_58": {
                "f": {
                    "value": "weight_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_200": {
                "variable": {
                    "value": "packed_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_seqs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(input_seqs)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(input_seqs.astype('int64')).long())",
                            "Call"
                        ],
                        [
                            "input_seqs[perm_idx][:, :input_lengths.max()]",
                            "Subscript"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lengths.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_304": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(weight, model_w[NB_TOKENS:, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_134": {
                "num_embeddings": {
                    "value": "nb_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                }
            },
            "Dropout2d_137": {
                "p": {
                    "value": "embed_dropout_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "orthogonal_163": {
                "module": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ih",
                            "Name"
                        ],
                        [
                            "hh",
                            "Name"
                        ],
                        [
                            "b",
                            "Name"
                        ]
                    ]
                }
            },
            "Tanh_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_226": {
                "tensors": {
                    "value": "(lstm_1_output.data, lstm_0_output.data, packed_input.data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_142": {
                "p": {
                    "value": "final_dropout_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_144": {
                "*args": {
                    "value": "nn.Linear(attention_size, nb_classes if self.nb_classes > 2 else 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "*args": {
                    "value": "nn.Linear(attention_size, nb_classes if self.nb_classes > 2 else 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_185": {
                "ndarray": {
                    "value": "input_seqs.astype('int64')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_144": {
                "in_features": {
                    "value": "attention_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4 * hidden_size + embedding_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nb_classes if self.nb_classes > 2 else 1",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_146": {
                "in_features": {
                    "value": "attention_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4 * hidden_size + embedding_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nb_classes if self.nb_classes > 2 else 1",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "max_195": {
                "input": {
                    "value": "input_seqs[i, :].data.nonzero()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}