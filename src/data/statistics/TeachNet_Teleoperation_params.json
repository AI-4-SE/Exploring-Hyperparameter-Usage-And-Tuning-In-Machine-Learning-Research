{
    "demo_teachnet.py": {
        "torch": {
            "tensor_49": {
                "variable": {
                    "value": "joint_upper_range",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.349, 1.571, 1.571, 1.571, 0.785, 0.349, 1.571, 1.571, 1.571, 0.349, 1.571, 1.571, 1.571, 0.349, 1.571, 1.571, 1.571, 1.047, 1.222, 0.209, 0.524, 1.571]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "joint_lower_range",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-0.349, 0, 0, 0, 0, -0.349, 0, 0, 0, -0.349, 0, 0, 0, -0.349, 0, 0, 0, -1.047, 0, -0.209, -0.524, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_63": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tensor_85": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_41": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_74": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(args.model_path, map_location='cuda')",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_id).cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0]",
                            "List"
                        ]
                    ]
                }
            },
            "set_grad_enabled_81": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_device_69": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_73": {
                "device": {
                    "value": "device_id[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "tensor_55": {
                "variable": {
                    "value": "joint_upper_range",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.349, 1.571, 1.571, 1.571, 0.785, 0.349, 1.571, 1.571, 1.571, 0.349, 1.571, 1.571, 1.571, 0.349, 1.571, 1.571, 1.571, 1.047, 1.222, 0.209, 0.524, 1.571]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "joint_lower_range",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-0.349, 0, 0, 0, 0, -0.349, 0, 0, 0, -0.349, 0, 0, 0, -0.349, 0, 0, 0, -1.047, 0, -0.209, -0.524, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_61": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ShadowPairedDataset(path=args.data_path, input_size=input_size, input_viewpoint=input_viewpoint, is_train=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_collate",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ShadowPairedDataset(path=args.data_path, input_size=input_size, input_viewpoint=input_viewpoint, is_train=False, with_name=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_collate",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_115": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_116": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_97": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "'cuda:{}'.format(args.gpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_38": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_111": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(args.load_model, map_location='cuda:{}'.format(args.gpu))",
                            "Call"
                        ],
                        [
                            "NewTeachingTeleModel(input_size=input_size, embedding_size=embedding_size, joint_size=joint_size)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_id).cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "set_grad_enabled_121": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mse_loss_134": {
                "variable": {
                    "value": "loss_shadow_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "joint_shadow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(shadow, is_human=False)",
                            "Call"
                        ],
                        [
                            "joint_shadow * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ],
                        [
                            "model(shadow, is_human=False)",
                            "Call"
                        ],
                        [
                            "joint_shadow * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_141": {
                "variable": {
                    "value": "loss_human_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "joint_human",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(human, is_human=True)",
                            "Call"
                        ],
                        [
                            "joint_human * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ],
                        [
                            "model(human, is_human=True)",
                            "Call"
                        ],
                        [
                            "joint_human * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_142": {
                "variable": {
                    "value": "loss_align",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding_human",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(human, is_human=True)",
                            "Call"
                        ],
                        [
                            "model(human, is_human=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "embedding_shadow.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_grad_enabled_200": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_device_106": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_110": {
                "device": {
                    "value": "device_id[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mse_loss_217": {
                "input": {
                    "value": "joint_shadow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(shadow, is_human=False)",
                            "Call"
                        ],
                        [
                            "joint_shadow * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ],
                        [
                            "model(shadow, is_human=False)",
                            "Call"
                        ],
                        [
                            "joint_shadow * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mse_loss_225": {
                "input": {
                    "value": "joint_human",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(human, is_human=True)",
                            "Call"
                        ],
                        [
                            "joint_human * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ],
                        [
                            "model(human, is_human=True)",
                            "Call"
                        ],
                        [
                            "joint_human * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mse_loss_226": {
                "input": {
                    "value": "embedding_human",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(human, is_human=True)",
                            "Call"
                        ],
                        [
                            "model(human, is_human=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "embedding_shadow.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "initial_seed_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_loss_160": {
                "input": {
                    "value": "joint_shadow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(shadow, is_human=False)",
                            "Call"
                        ],
                        [
                            "joint_shadow * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ],
                        [
                            "model(shadow, is_human=False)",
                            "Call"
                        ],
                        [
                            "joint_shadow * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "l1_loss_161": {
                "input": {
                    "value": "joint_human",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(human, is_human=True)",
                            "Call"
                        ],
                        [
                            "joint_human * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ],
                        [
                            "model(human, is_human=True)",
                            "Call"
                        ],
                        [
                            "joint_human * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_165": {
                "variable": {
                    "value": "loss_shadow_cons",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_167": {
                "variable": {
                    "value": "loss_human_cons",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l1_loss_240": {
                "input": {
                    "value": "joint_shadow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(shadow, is_human=False)",
                            "Call"
                        ],
                        [
                            "joint_shadow * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ],
                        [
                            "model(shadow, is_human=False)",
                            "Call"
                        ],
                        [
                            "joint_shadow * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "l1_loss_241": {
                "input": {
                    "value": "joint_human",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(human, is_human=True)",
                            "Call"
                        ],
                        [
                            "joint_human * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ],
                        [
                            "model(human, is_human=True)",
                            "Call"
                        ],
                        [
                            "joint_human * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_336": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(args.load_model, map_location='cuda:{}'.format(args.gpu))",
                            "Call"
                        ],
                        [
                            "NewTeachingTeleModel(input_size=input_size, embedding_size=embedding_size, joint_size=joint_size)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_id).cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.model_path, args.tag + '_{}.model'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "main_baseline_human.py": {
        "torch": {
            "tensor_55": {
                "variable": {
                    "value": "joint_upper_range",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.349, 1.571, 1.571, 1.571, 0.785, 0.349, 1.571, 1.571, 1.571, 0.349, 1.571, 1.571, 1.571, 0.349, 1.571, 1.571, 1.571, 1.047, 1.222, 0.209, 0.524, 1.571]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "joint_lower_range",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-0.349, 0, 0, 0, 0, -0.349, 0, 0, 0, -0.349, 0, 0, 0, -0.349, 0, 0, 0, -1.047, 0, -0.209, -0.524, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_61": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ShadowPairedDataset(path=args.data_path, input_size=input_size, input_viewpoint=input_viewpoint, is_train=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_collate",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ShadowPairedDataset(path=args.data_path, input_size=input_size, input_viewpoint=input_viewpoint, is_train=False, with_name=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_collate",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_116": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_117": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_97": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "'cuda:{}'.format(args.gpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_38": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_112": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(args.load_model, map_location='cuda:{}'.format(args.gpu))",
                            "Call"
                        ],
                        [
                            "NaiveRENModel(input_size=input_size, embedding_size=embedding_size, joint_size=joint_size)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_id).cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "set_grad_enabled_122": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mse_loss_133": {
                "variable": {
                    "value": "loss_human_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "joint_human",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(human, is_human=True)",
                            "Call"
                        ],
                        [
                            "joint_human * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ],
                        [
                            "model(human, is_human=True)",
                            "Call"
                        ],
                        [
                            "joint_human * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_174": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_device_107": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_111": {
                "device": {
                    "value": "device_id[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mse_loss_187": {
                "input": {
                    "value": "joint_human",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(human, is_human=True)",
                            "Call"
                        ],
                        [
                            "joint_human * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ],
                        [
                            "model(human, is_human=True)",
                            "Call"
                        ],
                        [
                            "joint_human * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "initial_seed_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_loss_147": {
                "input": {
                    "value": "joint_human",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(human, is_human=True)",
                            "Call"
                        ],
                        [
                            "joint_human * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ],
                        [
                            "model(human, is_human=True)",
                            "Call"
                        ],
                        [
                            "joint_human * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_151": {
                "variable": {
                    "value": "loss_human_cons",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l1_loss_198": {
                "input": {
                    "value": "joint_human",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(human, is_human=True)",
                            "Call"
                        ],
                        [
                            "joint_human * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ],
                        [
                            "model(human, is_human=True)",
                            "Call"
                        ],
                        [
                            "joint_human * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_267": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(args.load_model, map_location='cuda:{}'.format(args.gpu))",
                            "Call"
                        ],
                        [
                            "NaiveRENModel(input_size=input_size, embedding_size=embedding_size, joint_size=joint_size)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_id).cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.model_path, args.tag + '_{}.model'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "main_baseline_shadow.py": {
        "torch": {
            "tensor_55": {
                "variable": {
                    "value": "joint_upper_range",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.349, 1.571, 1.571, 1.571, 0.785, 0.349, 1.571, 1.571, 1.571, 0.349, 1.571, 1.571, 1.571, 0.349, 1.571, 1.571, 1.571, 1.047, 1.222, 0.209, 0.524, 1.571]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "joint_lower_range",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-0.349, 0, 0, 0, 0, -0.349, 0, 0, 0, -0.349, 0, 0, 0, -0.349, 0, 0, 0, -1.047, 0, -0.209, -0.524, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_61": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ShadowPairedDataset(path=args.data_path, input_size=input_size, input_viewpoint=input_viewpoint, is_train=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_collate",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ShadowPairedDataset(path=args.data_path, input_size=input_size, input_viewpoint=input_viewpoint, is_train=False, with_name=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_collate",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_116": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_117": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_97": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "'cuda:{}'.format(args.gpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_38": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_112": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(args.load_model, map_location='cuda:{}'.format(args.gpu))",
                            "Call"
                        ],
                        [
                            "NaiveTeleModel(input_size=input_size, embedding_size=embedding_size, joint_size=joint_size)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_id).cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "set_grad_enabled_122": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mse_loss_133": {
                "variable": {
                    "value": "loss_shadow_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "joint_shadow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(shadow, is_human=True)",
                            "Call"
                        ],
                        [
                            "joint_shadow * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ],
                        [
                            "model(shadow, is_human=True)",
                            "Call"
                        ],
                        [
                            "joint_shadow * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_174": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_device_107": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_111": {
                "device": {
                    "value": "device_id[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mse_loss_187": {
                "input": {
                    "value": "joint_shadow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(shadow, is_human=True)",
                            "Call"
                        ],
                        [
                            "joint_shadow * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ],
                        [
                            "model(shadow, is_human=True)",
                            "Call"
                        ],
                        [
                            "joint_shadow * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "initial_seed_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_loss_147": {
                "input": {
                    "value": "joint_shadow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(shadow, is_human=True)",
                            "Call"
                        ],
                        [
                            "joint_shadow * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ],
                        [
                            "model(shadow, is_human=True)",
                            "Call"
                        ],
                        [
                            "joint_shadow * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_151": {
                "variable": {
                    "value": "loss_shadow_cons",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l1_loss_198": {
                "input": {
                    "value": "joint_shadow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(shadow, is_human=True)",
                            "Call"
                        ],
                        [
                            "joint_shadow * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ],
                        [
                            "model(shadow, is_human=True)",
                            "Call"
                        ],
                        [
                            "joint_shadow * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_267": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(args.load_model, map_location='cuda:{}'.format(args.gpu))",
                            "Call"
                        ],
                        [
                            "NaiveTeleModel(input_size=input_size, embedding_size=embedding_size, joint_size=joint_size)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_id).cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.model_path, args.tag + '_{}.model'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "main_gan.py": {
        "torch": {
            "tensor_55": {
                "variable": {
                    "value": "joint_upper_range",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.349, 1.571, 1.571, 1.571, 0.785, 0.349, 1.571, 1.571, 1.571, 0.349, 1.571, 1.571, 1.571, 0.349, 1.571, 1.571, 1.571, 1.047, 1.222, 0.209, 0.524, 1.571]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "joint_lower_range",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-0.349, 0, 0, 0, 0, -0.349, 0, 0, 0, -0.349, 0, 0, 0, -0.349, 0, 0, 0, -1.047, 0, -0.209, -0.524, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_61": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ShadowPairedDataset(path=args.data_path, input_size=input_size, input_viewpoint=input_viewpoint, is_train=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_collate",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ShadowPairedDataset(path=args.data_path, input_size=input_size, input_viewpoint=input_viewpoint, is_train=False, with_name=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_collate",
                            "Call"
                        ]
                    ]
                }
            },
            "BCELoss_104": {
                "variable": {
                    "value": "discrim_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_118": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(set(model.parameters()) - set(model.discriminator.parameters()))",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_119": {
                "variable": {
                    "value": "optimizer_gan",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_120": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(list(set(model.parameters()) - set(model.discriminator.parameters())), lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_121": {
                "variable": {
                    "value": "scheduler_gan",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_gan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.discriminator.parameters(), lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_97": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "'cuda:{}'.format(args.gpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_38": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_113": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(args.load_model, map_location='cuda:{}'.format(args.gpu))",
                            "Call"
                        ],
                        [
                            "TeachingTeleGANModel(input_size=input_size, embedding_size=embedding_size, joint_size=joint_size)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_id).cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "set_grad_enabled_127": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_132": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(shadow.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_133": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(shadow.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mse_loss_153": {
                "variable": {
                    "value": "loss_shadow_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "joint_shadow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(shadow, is_human=False)",
                            "Call"
                        ],
                        [
                            "joint_shadow * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ],
                        [
                            "model(shadow, is_human=False)",
                            "Call"
                        ],
                        [
                            "joint_shadow * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_159": {
                "variable": {
                    "value": "loss_human_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "joint_human",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(human, is_human=True)",
                            "Call"
                        ],
                        [
                            "joint_human * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ],
                        [
                            "model(human, is_human=True)",
                            "Call"
                        ],
                        [
                            "joint_human * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_222": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_234": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(shadow.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_235": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(shadow.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_device_108": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_112": {
                "device": {
                    "value": "device_id[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mse_loss_252": {
                "input": {
                    "value": "joint_shadow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(shadow, is_human=False)",
                            "Call"
                        ],
                        [
                            "joint_shadow * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ],
                        [
                            "model(shadow, is_human=False)",
                            "Call"
                        ],
                        [
                            "joint_shadow * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mse_loss_259": {
                "input": {
                    "value": "joint_human",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(human, is_human=True)",
                            "Call"
                        ],
                        [
                            "joint_human * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ],
                        [
                            "model(human, is_human=True)",
                            "Call"
                        ],
                        [
                            "joint_human * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "initial_seed_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_loss_178": {
                "input": {
                    "value": "joint_shadow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(shadow, is_human=False)",
                            "Call"
                        ],
                        [
                            "joint_shadow * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ],
                        [
                            "model(shadow, is_human=False)",
                            "Call"
                        ],
                        [
                            "joint_shadow * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "l1_loss_179": {
                "input": {
                    "value": "joint_human",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(human, is_human=True)",
                            "Call"
                        ],
                        [
                            "joint_human * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ],
                        [
                            "model(human, is_human=True)",
                            "Call"
                        ],
                        [
                            "joint_human * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_183": {
                "variable": {
                    "value": "loss_shadow_cons",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_185": {
                "variable": {
                    "value": "loss_human_cons",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l1_loss_275": {
                "input": {
                    "value": "joint_shadow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(shadow, is_human=False)",
                            "Call"
                        ],
                        [
                            "joint_shadow * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ],
                        [
                            "model(shadow, is_human=False)",
                            "Call"
                        ],
                        [
                            "joint_shadow * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "l1_loss_276": {
                "input": {
                    "value": "joint_human",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(human, is_human=True)",
                            "Call"
                        ],
                        [
                            "joint_human * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ],
                        [
                            "model(human, is_human=True)",
                            "Call"
                        ],
                        [
                            "joint_human * (joint_upper_range - joint_lower_range) + joint_lower_range",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_368": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(args.load_model, map_location='cuda:{}'.format(args.gpu))",
                            "Call"
                        ],
                        [
                            "TeachingTeleGANModel(input_size=input_size, embedding_size=embedding_size, joint_size=joint_size)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_id).cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.model_path, args.tag + '_{}.model'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/dataset.py": {
        "torch": {}
    },
    "model/model.py": {
        "torch": {
            "ones_544": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_chann",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_chann",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_44": {
                "variable": {
                    "value": "self.pool0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "variable": {
                    "value": "self.bn6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self.bn7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "variable": {
                    "value": "self.bn8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "variable": {
                    "value": "self.bn9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "variable": {
                    "value": "self.bn10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.conv11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "variable": {
                    "value": "self.bn11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.conv12",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "variable": {
                    "value": "self.bn12",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_chann",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_102": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_103": {
                "variable": {
                    "value": "self.pool0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_107": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_109": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_111": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_113": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_117": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_119": {
                "variable": {
                    "value": "self.bn6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "variable": {
                    "value": "self.conv7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_121": {
                "variable": {
                    "value": "self.bn7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "variable": {
                    "value": "self.conv8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_123": {
                "variable": {
                    "value": "self.bn8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_125": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_145": {
                "variable": {
                    "value": "self.deconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_chann",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_146": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_147": {
                "variable": {
                    "value": "self.deconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_148": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_149": {
                "variable": {
                    "value": "self.deconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_150": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_152": {
                "variable": {
                    "value": "self.deconv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_153": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_154": {
                "variable": {
                    "value": "self.deconv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_155": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_156": {
                "variable": {
                    "value": "self.deconv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_157": {
                "variable": {
                    "value": "self.bn6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_159": {
                "variable": {
                    "value": "self.deconv7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_160": {
                "variable": {
                    "value": "self.bn7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_161": {
                "variable": {
                    "value": "self.deconv8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_162": {
                "variable": {
                    "value": "self.bn8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_163": {
                "variable": {
                    "value": "self.deconv9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_164": {
                "variable": {
                    "value": "self.bn9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_166": {
                "variable": {
                    "value": "self.deconv10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_167": {
                "variable": {
                    "value": "self.bn10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_168": {
                "variable": {
                    "value": "self.deconv11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_169": {
                "variable": {
                    "value": "self.bn11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_170": {
                "variable": {
                    "value": "self.deconv12",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_171": {
                "variable": {
                    "value": "self.bn12",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_173": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_195": {
                "variable": {
                    "value": "self.deconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_chann",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_196": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_197": {
                "variable": {
                    "value": "self.deconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_198": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_199": {
                "variable": {
                    "value": "self.deconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_200": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_202": {
                "variable": {
                    "value": "self.deconv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_203": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_204": {
                "variable": {
                    "value": "self.deconv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_205": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_206": {
                "variable": {
                    "value": "self.deconv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_207": {
                "variable": {
                    "value": "self.bn6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_209": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_227": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size // 2",
                            "BinOp"
                        ],
                        [
                            "input_size // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm1d_228": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size // 2",
                            "BinOp"
                        ],
                        [
                            "input_size // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_229": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size // 2",
                            "BinOp"
                        ],
                        [
                            "input_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size // 2",
                            "BinOp"
                        ],
                        [
                            "input_size // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm1d_230": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size // 2",
                            "BinOp"
                        ],
                        [
                            "input_size // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_231": {
                "variable": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size // 2",
                            "BinOp"
                        ],
                        [
                            "input_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "24",
                            "Method Argument"
                        ],
                        [
                            "24",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_232": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_245": {
                "variable": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "24",
                            "Method Argument"
                        ],
                        [
                            "24",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_258": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size // 2",
                            "BinOp"
                        ],
                        [
                            "input_size // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm1d_259": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size // 2",
                            "BinOp"
                        ],
                        [
                            "input_size // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_260": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size // 2",
                            "BinOp"
                        ],
                        [
                            "input_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size // 2",
                            "BinOp"
                        ],
                        [
                            "input_size // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm1d_261": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size // 2",
                            "BinOp"
                        ],
                        [
                            "input_size // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_262": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size // 2",
                            "BinOp"
                        ],
                        [
                            "input_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_263": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_268": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_287": {
                "variable": {
                    "value": "self.encoder_human",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.feature_size, self.embedding_size * 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_294": {
                "variable": {
                    "value": "self.encoder_shadow",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.feature_size, self.embedding_size * 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_332": {
                "variable": {
                    "value": "self.encoder_human",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.feature_size, self.embedding_size * 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_345": {
                "variable": {
                    "value": "self.encoder_shadow",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.feature_size, self.embedding_size * 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_389": {
                "variable": {
                    "value": "self.encoder_human",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.feature_size, self.embedding_size * 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_396": {
                "variable": {
                    "value": "self.encoder_shadow",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.feature_size, self.embedding_size * 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_435": {
                "variable": {
                    "value": "self.encoder_human",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.feature_size, self.embedding_size * 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_448": {
                "variable": {
                    "value": "self.encoder_shadow",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.feature_size, self.embedding_size * 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_490": {
                "variable": {
                    "value": "self.encoder_human",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.feature_size, self.embedding_size * 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_520": {
                "variable": {
                    "value": "self.encoder_human",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.feature_size, self.embedding_size * 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_288": {
                "in_features": {
                    "value": "self.feature_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_289": {
                "num_features": {
                    "value": "self.embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_291": {
                "in_features": {
                    "value": "self.embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_295": {
                "in_features": {
                    "value": "self.feature_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_296": {
                "num_features": {
                    "value": "self.embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_298": {
                "in_features": {
                    "value": "self.embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_333": {
                "in_features": {
                    "value": "self.feature_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_334": {
                "num_features": {
                    "value": "self.embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_335": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_336": {
                "in_features": {
                    "value": "self.embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_337": {
                "num_features": {
                    "value": "self.embedding_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_338": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_339": {
                "in_features": {
                    "value": "self.embedding_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_340": {
                "num_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_341": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_342": {
                "in_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_346": {
                "in_features": {
                    "value": "self.feature_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_347": {
                "num_features": {
                    "value": "self.embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_349": {
                "in_features": {
                    "value": "self.embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_350": {
                "num_features": {
                    "value": "self.embedding_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_351": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_352": {
                "in_features": {
                    "value": "self.embedding_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_353": {
                "num_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_354": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_355": {
                "in_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_390": {
                "in_features": {
                    "value": "self.feature_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_391": {
                "num_features": {
                    "value": "self.embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_392": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_393": {
                "in_features": {
                    "value": "self.embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_397": {
                "in_features": {
                    "value": "self.feature_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_398": {
                "num_features": {
                    "value": "self.embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_399": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_400": {
                "in_features": {
                    "value": "self.embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_436": {
                "in_features": {
                    "value": "self.feature_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_437": {
                "num_features": {
                    "value": "self.embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_438": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_439": {
                "in_features": {
                    "value": "self.embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_440": {
                "num_features": {
                    "value": "self.embedding_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_441": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_442": {
                "in_features": {
                    "value": "self.embedding_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_443": {
                "num_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_444": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_445": {
                "in_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_449": {
                "in_features": {
                    "value": "self.feature_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_450": {
                "num_features": {
                    "value": "self.embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_451": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_452": {
                "in_features": {
                    "value": "self.embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_453": {
                "num_features": {
                    "value": "self.embedding_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_454": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_455": {
                "in_features": {
                    "value": "self.embedding_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_456": {
                "num_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_457": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_458": {
                "in_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_491": {
                "in_features": {
                    "value": "self.feature_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_492": {
                "num_features": {
                    "value": "self.embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_493": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_494": {
                "in_features": {
                    "value": "self.embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_521": {
                "in_features": {
                    "value": "self.feature_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_522": {
                "num_features": {
                    "value": "self.embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_523": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_524": {
                "in_features": {
                    "value": "self.embedding_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_525": {
                "num_features": {
                    "value": "self.embedding_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_526": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_527": {
                "in_features": {
                    "value": "self.embedding_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_528": {
                "num_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_529": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_530": {
                "in_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "shadow_demo_moveit.py": {
        "torch": {
            "tensor_52": {
                "variable": {
                    "value": "joint_upper_range",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.349, 1.571, 1.571, 1.571, 0.785, 0.349, 1.571, 1.571, 1.571, 0.349, 1.571, 1.571, 1.571, 0.349, 1.571, 1.571, 1.571, 1.047, 1.222, 0.209, 0.524, 1.571]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "joint_lower_range",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-0.349, 0, 0, 0, 0, -0.349, 0, 0, 0, -0.349, 0, 0, 0, -0.349, 0, 0, 0, -1.047, 0, -0.209, -0.524, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_60": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tensor_83": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_44": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_71": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(args.model_path, map_location='cpu')",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=device_id).cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0]",
                            "List"
                        ]
                    ]
                }
            },
            "set_grad_enabled_78": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_device_66": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_70": {
                "device": {
                    "value": "device_id[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "DataLoader_66": {
                "dataset": {
                    "value": "EnvDataset(config=config, train=train)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.batch_size_train if train else config.batch_size_test",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.multi_threads if train else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True if train else False",
                    "type": "IfExp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn_env",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn_env",
                            "Call"
                        ]
                    ]
                },
                "worker_init_fn": {
                    "value": "worker_init_fn_env",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn_env",
                            "Call"
                        ]
                    ]
                }
            },
            "initial_seed_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}