{
    "diagnostics/plots.py": {
        "sklearn": {
            "GaussianMixture_382": {
                "variable": {
                    "value": "self.gmm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_components": {
                    "value": "self.args.numModes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "covariance_type": {
                    "value": "diag",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GridSearchCV_447": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "KernelDensity(kernel='gaussian')",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "{'bandwidth': bandwidths}",
                    "type": "Dict",
                    "possible_values": []
                },
                "cv": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KernelDensity_447": {
                "kernel": {
                    "value": "gaussian",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GridSearchCV_238": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "KernelDensity(kernel='gaussian')",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "{'bandwidth': bandwidths}",
                    "type": "Dict",
                    "possible_values": []
                },
                "cv": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KernelDensity_238": {
                "kernel": {
                    "value": "gaussian",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "exp_222": {
                "variable": {
                    "value": "estimated_posterior",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "netPosterior.log_prob(self.test_thetas)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "self.thetaDomain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.thetaDomain, torch.Tensor([[simulation.min[i].item(), simulation.max[i].item()]]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_154": {
                "variable": {
                    "value": "self.estimatedLikelihood",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "netLikelihood.log_prob(x=self.observation[:self.args.xDim].repeat(self.test_thetas.shape[0], 1), theta=self.test_thetas)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_198": {
                "variable": {
                    "value": "self.true_likelihood",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sim.simulator.log_prob(self.observation.reshape(1, -1), self.test_thetas)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_276": {
                "variable": {
                    "value": "order",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_trials, self.args.thetaDim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tril_indices_308": {
                "variable": {
                    "value": "ix",
                    "type": "variable",
                    "possible_values": []
                },
                "row": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "col": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "offset": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_361": {
                "variable": {
                    "value": "self.order",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_trials, self.args.thetaDim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_365": {
                "variable": {
                    "value": "samples_from_prior",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_273": {
                "input": {
                    "value": "true_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_theta",
                            "Method Argument"
                        ],
                        [
                            "true_theta",
                            "Method Argument"
                        ],
                        [
                            "true_theta",
                            "Method Argument"
                        ],
                        [
                            "true_theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_305": {
                "input": {
                    "value": "(a[None, ...] - b[:, None, :]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_305": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_309": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_358": {
                "input": {
                    "value": "true_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_theta",
                            "Method Argument"
                        ],
                        [
                            "true_theta",
                            "Method Argument"
                        ],
                        [
                            "true_theta",
                            "Method Argument"
                        ],
                        [
                            "true_theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_158": {
                "variable": {
                    "value": "self.estimatedLikelihood",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "netLikelihood.log_prob(context=self.test_thetas.to(device), inputs=self.observation[:self.args.xDim].repeat(self.test_thetas.shape[0], 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_431": {
                "input": {
                    "value": "netPosterior.log_prob(self.true_thetas)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_434": {},
            "sum_437": {
                "input": {
                    "value": "netPosterior.log_prob(self.true_thetas)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_49": {},
            "Tensor_98": {
                "variable": {
                    "value": "self.true_thetas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "variable": {
                    "value": "self.true_thetas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "self.true_thetas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.true_thetas, torch.Tensor(theta).reshape(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_106": {
                "variable": {
                    "value": "self.true_thetas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_127": {
                "variable": {
                    "value": "self.true_thetas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_161": {
                "variable": {
                    "value": "self.estimatedLikelihood",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "netLikelihood(context=self.test_thetas.to(device), inputs=self.observation[:self.args.xDim].repeat(self.test_thetas.shape[0], 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_115": {
                "variable": {
                    "value": "self.true_thetas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_309": {
                "input": {
                    "value": "(a[None, ...] - b[:, None, :]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_323": {},
            "reshape_323": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_131": {
                "variable": {
                    "value": "self.true_thetas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_207": {
                "low": {
                    "value": "teacher_theta.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "high": {
                    "value": "[1000]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_100": {},
            "reshape_100": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_133": {
                "variable": {
                    "value": "self.true_thetas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_211": {
                "*size": {
                    "value": "[1000, self.args.thetaDim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_136": {
                "variable": {
                    "value": "self.true_thetas",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "diagnostics/plots_SBI.py": {
        "sklearn": {
            "GaussianMixture_335": {
                "variable": {
                    "value": "self.gmm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_components": {
                    "value": "self.args.numModes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "covariance_type": {
                    "value": "diag",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GridSearchCV_419": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "KernelDensity(kernel='gaussian')",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "{'bandwidth': bandwidths}",
                    "type": "Dict",
                    "possible_values": []
                },
                "cv": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KernelDensity_419": {
                "kernel": {
                    "value": "gaussian",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GridSearchCV_221": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "KernelDensity(kernel='gaussian')",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "{'bandwidth': bandwidths}",
                    "type": "Dict",
                    "possible_values": []
                },
                "cv": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KernelDensity_221": {
                "kernel": {
                    "value": "gaussian",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Tensor_154": {
                "variable": {
                    "value": "self.thetaDomain",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_268": {
                "variable": {
                    "value": "self.fake",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_28": {
                "variable": {
                    "value": "self.thetaDomain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.thetaDomain, torch.Tensor([[simulation.min[i].item(), simulation.max[i].item()]]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "self.thetaDomain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.thetaDomain, torch.Tensor([[simulation.min[i].item(), simulation.max[i].item()]]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_171": {
                "variable": {
                    "value": "self.estimatedLikelihood",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "netLikelihood.log_prob(observation.to(device), test_thetas.to(device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_311": {
                "variable": {
                    "value": "self.order",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_trials, self.args.thetaDim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_315": {
                "variable": {
                    "value": "samples_from_prior",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_174": {
                "variable": {
                    "value": "self.estimatedLikelihood",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "netLikelihood.log_prob(test_thetas.to(device), observation.to(device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_308": {
                "input": {
                    "value": "true_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_theta",
                            "Method Argument"
                        ],
                        [
                            "true_theta",
                            "Method Argument"
                        ],
                        [
                            "true_theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_386": {
                "input": {
                    "value": "netPosterior.log_prob(self.true_thetas, observation).detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_408": {},
            "sum_409": {
                "input": {
                    "value": "netPosterior.log_prob(self.true_thetas)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_82": {
                "variable": {
                    "value": "self.true_thetas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_376": {
                "variable": {
                    "value": "self.true_likelihood",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sim.simulator.log_prob(observation.reshape(1, -1), self.test_thetas)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_29": {},
            "Tensor_86": {
                "variable": {
                    "value": "self.true_thetas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_94": {
                "variable": {
                    "value": "self.true_thetas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_156": {},
            "exp_378": {
                "variable": {
                    "value": "self.true_likelihood",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sim.simulator.log_prob(self.test_thetas, observation.reshape(1, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_89": {
                "variable": {
                    "value": "self.true_thetas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_105": {
                "variable": {
                    "value": "self.true_thetas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_119": {
                "variable": {
                    "value": "self.true_thetas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_121": {
                "variable": {
                    "value": "self.true_thetas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_152": {
                "variable": {
                    "value": "self.true_thetas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_145": {
                "variable": {
                    "value": "self.true_thetas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_145": {
                "variable": {
                    "value": "self.true_thetas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "self.true_thetas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.true_thetas, torch.Tensor(theta).reshape(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_147": {},
            "reshape_147": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/utils/metrics.py": {
        "sklearn": {
            "MLPClassifier_54": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "hidden_layer_sizes": {
                    "value": "(10 * ndim, 10 * ndim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "solver": {
                    "value": "adam",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "KFold_65": {
                "variable": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "n_folds",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cross_val_score_66": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MLPClassifier(activation='relu', hidden_layer_sizes=(10 * ndim, 10 * ndim), max_iter=1000, solver='adam', random_state=seed)",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((X, Y))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((np.zeros((X.shape[0],)), np.ones((Y.shape[0],))))",
                            "Call"
                        ]
                    ]
                },
                "cv": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KFold(n_splits=n_folds, shuffle=True, random_state=seed)",
                            "Call"
                        ]
                    ]
                },
                "scoring": {
                    "value": "scoring",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "median_89": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(torch.cat((xx, xy, yy)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "median_115": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(torch.cat((xx, xy, yy)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_40": {
                "variable": {
                    "value": "X_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(X - X_mean) / X_std",
                            "BinOp"
                        ],
                        [
                            "X + noise_scale * torch.randn(X.shape)",
                            "BinOp"
                        ],
                        [
                            "X.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_41": {
                "variable": {
                    "value": "X_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(X - X_mean) / X_std",
                            "BinOp"
                        ],
                        [
                            "X + noise_scale * torch.randn(X.shape)",
                            "BinOp"
                        ],
                        [
                            "X.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_69": {
                "ndarray": {
                    "value": "np.atleast_1d(scores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_130": {
                "input": {
                    "value": "mmd_square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * (kxx + kyy - kxy)",
                            "BinOp"
                        ],
                        [
                            "kxx - 2 * kxy + kyy",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tril_indices_80": {
                "variable": {
                    "value": "ix",
                    "type": "variable",
                    "possible_values": []
                },
                "row": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "col": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b.shape[0]",
                            "Subscript"
                        ],
                        [
                            "2500",
                            "int"
                        ]
                    ]
                },
                "offset": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_89": {
                "input": {
                    "value": "torch.cat((xx, xy, yy))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_92": {
                "input": {
                    "value": "torch.exp(c * a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_109": {
                "input": {
                    "value": "(a[None, ...] - b[:, None, :]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_109": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_115": {
                "input": {
                    "value": "torch.cat((xx, xy, yy))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_118": {
                "input": {
                    "value": "torch.exp(c * a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_151": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b.shape[0]",
                            "Subscript"
                        ],
                        [
                            "2500",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_46": {
                "*size": {
                    "value": "X.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_47": {
                "*size": {
                    "value": "Y.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_77": {
                "input": {
                    "value": "(a[None, ...] - b[:, None, :]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_77": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_81": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_89": {
                "tensors": {
                    "value": "(xx, xy, yy)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_92": {
                "input": {
                    "value": "c * a",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_115": {
                "tensors": {
                    "value": "(xx, xy, yy)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_118": {
                "input": {
                    "value": "c * a",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_81": {
                "input": {
                    "value": "(a[None, ...] - b[:, None, :]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "umnn/lib/toy_data.py": {
        "sklearn": {
            "make_swiss_roll_17": {
                "n_samples": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                },
                "noise": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "make_circles_23": {
                "n_samples": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "noise": {
                    "value": "0.08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "make_moons_29": {
                "n_samples": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                },
                "noise": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Normal_124": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "scale": {
                    "value": "4.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_127": {
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Normal_125": {
                "loc": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "scale": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "AALR.py": {
        "torch": {}
    },
    "SBI.py": {
        "torch": {}
    },
    "SNL.py": {
        "torch": {}
    },
    "diagnostics/logs.py": {
        "torch": {
            "save_25": {
                "obj": {
                    "value": "netLikelihood.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.dir + '/likelihood_' + str(round) + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_27": {
                "obj": {
                    "value": "netPosterior.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.dir + '/posterior_' + str(round) + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "diagnostics/logs_SBI.py": {
        "torch": {
            "Tensor_30": {
                "variable": {
                    "value": "self.true_parameter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_53": {
                "obj": {
                    "value": "netLikelihood.net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.dir + '/likelihood_' + str(round) + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_37": {
                "variable": {
                    "value": "self.true_parameter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_55": {
                "obj": {
                    "value": "netLikelihood.net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.dir + '/posterior_' + str(round) + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/distributions/base.py": {
        "torch": {
            "as_tensor_33": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_tensor_35": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(context)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(context)",
                            "Call"
                        ],
                        [
                            "torchutils.repeat_rows(context, num_reps=num_samples)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(context)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "context",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "context",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "context",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_tensor_63": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(context)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(context)",
                            "Call"
                        ],
                        [
                            "torchutils.repeat_rows(context, num_reps=num_samples)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(context)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "context",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "context",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "context",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_tensor_116": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(context)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(context)",
                            "Call"
                        ],
                        [
                            "torchutils.repeat_rows(context, num_reps=num_samples)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(context)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "context",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "context",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "context",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self._sample(batch_size, context) for _ in range(num_batches)]",
                            "ListComp"
                        ],
                        [
                            "self.sample(num_samples, context=context)",
                            "Call"
                        ],
                        [
                            "torchutils.merge_leading_dims(samples, num_dims=2)",
                            "Call"
                        ],
                        [
                            "torchutils.split_leading_dim(samples, shape=[-1, num_samples])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/distributions/discrete.py": {
        "torch": {
            "sigmoid_61": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._context_encoder(context)",
                            "Call"
                        ],
                        [
                            "self._compute_params(context)",
                            "Call"
                        ],
                        [
                            "self._compute_params(context)",
                            "Call"
                        ],
                        [
                            "self._compute_params(context)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_66": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "context_size * num_samples",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "*self._shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sigmoid_72": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._context_encoder(context)",
                            "Call"
                        ],
                        [
                            "self._compute_params(context)",
                            "Call"
                        ],
                        [
                            "self._compute_params(context)",
                            "Call"
                        ],
                        [
                            "self._compute_params(context)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_54": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._context_encoder(context)",
                            "Call"
                        ],
                        [
                            "self._compute_params(context)",
                            "Call"
                        ],
                        [
                            "self._compute_params(context)",
                            "Call"
                        ],
                        [
                            "self._compute_params(context)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nflows/distributions/mixture.py": {
        "torch": {}
    },
    "nflows/distributions/normal.py": {
        "torch": {
            "exp_112": {
                "variable": {
                    "value": "stds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_stds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[..., split:].reshape(params.shape[0], *self._shape)",
                            "Call"
                        ],
                        [
                            "self._compute_params(context)",
                            "Call"
                        ],
                        [
                            "self._compute_params(context)",
                            "Call"
                        ],
                        [
                            "self.log_std_.to(self.device)",
                            "Call"
                        ],
                        [
                            "self._compute_params(context)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_118": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "context_size * num_samples",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "*self._shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_145": {
                "variable": {
                    "value": "self.mean_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(shape).reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_146": {
                "variable": {
                    "value": "self.log_std_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(shape).reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_192": {
                "variable": {
                    "value": "stds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_stds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[..., split:].reshape(params.shape[0], *self._shape)",
                            "Call"
                        ],
                        [
                            "self._compute_params(context)",
                            "Call"
                        ],
                        [
                            "self._compute_params(context)",
                            "Call"
                        ],
                        [
                            "self.log_std_.to(self.device)",
                            "Call"
                        ],
                        [
                            "self._compute_params(context)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_198": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "context_size * num_samples",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "*self._shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_37": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "context_size * num_samples",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "*self._shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_33": {
                "*size": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_samples",
                            "Method Argument"
                        ],
                        [
                            "num_samples",
                            "Method Argument"
                        ],
                        [
                            "num_samples",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "*self._shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "*size": {
                    "value": "self._shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_45": {
                "*size": {
                    "value": "context.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "*self._shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "exp_101": {
                "input": {
                    "value": "-log_stds",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_145": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_145": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_146": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_146": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_181": {
                "input": {
                    "value": "-log_stds",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/distributions/uniform.py": {
        "torch": {
            "tensor_40": {
                "variable": {
                    "value": "A_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 1, 0], [0, 1, 0], [0, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, -1, 0], [0, 1, 0], [0, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_50": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([0.01, 0.5, 1, 0.01])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultivariateNormal_53": {
                "variable": {
                    "value": "self._gaussian",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(torch.tensor([0.01, 0.5, 1, 0.01]))",
                            "Call"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "covariance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigma ** 2 * torch.eye(4)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_83": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(samples)",
                            "Call"
                        ],
                        [
                            "samples[:sample_shape[0], ...]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Uniform_28": {
                "low": {
                    "value": "low",
                    "type": "variable",
                    "possible_values": []
                },
                "high": {
                    "value": "high",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "data": {
                    "value": "[0.01, 0.5, 1, 0.01]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_52": {
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_57": {
                "input": {
                    "value": "torch.erf((2 - mean) / sigma) - torch.erf((-5 - mean) / sigma)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_56": {
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isinf_76": {
                "input": {
                    "value": "uniform_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._uniform.log_prob(candidate_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "erf_58": {
                "input": {
                    "value": "(-5 - mean) / sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isinf_79": {
                "input": {
                    "value": "uniform_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._uniform.log_prob(candidate_samples)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nflows/flows/autoregressive.py": {
        "torch": {}
    },
    "nflows/flows/base.py": {
        "torch": {}
    },
    "nflows/flows/realnvp.py": {
        "torch": {
            "ones_44": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nflows/nn/nde/made.py": {
        "torch": {
            "arange_16": {
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "in_features + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_116": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_probability",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_173": {
                "variable": {
                    "value": "self.linear_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[linear_0, linear_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dropout_183": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_probability",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_263": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "blocks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "log_softmax_337": {
                "variable": {
                    "value": "log_mixture_coefficients",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[..., 0]",
                            "Subscript"
                        ],
                        [
                            "outputs[:, feature, :, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.log_softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_340": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.logsumexp(log_mixture_coefficients - 0.5 * (np.log(2 * np.pi) + 2 * torch.log(stds) + ((inputs[..., None] - means) / stds) ** 2), dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linear_74": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_100": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(in_degrees)",
                            "Call"
                        ],
                        [
                            "len(in_degrees)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "variable": {
                    "value": "self.context_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(in_degrees)",
                            "Call"
                        ],
                        [
                            "len(in_degrees)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_154": {
                "variable": {
                    "value": "self.batch_norm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.BatchNorm1d(features, eps=0.001) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_240": {
                "variable": {
                    "value": "self.context_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features",
                            "Method Argument"
                        ],
                        [
                            "hidden_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_362": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "context.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_57": {
                "variable": {
                    "value": "min_in_degree",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_degrees",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_degrees",
                            "Method Argument"
                        ],
                        [
                            "in_degrees",
                            "Method Argument"
                        ],
                        [
                            "in_degrees",
                            "Method Argument"
                        ],
                        [
                            "in_degrees",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randint_59": {
                "variable": {
                    "value": "out_degrees",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "min_in_degree",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(in_degrees).item()",
                            "Call"
                        ],
                        [
                            "min(min_in_degree, autoregressive_features - 1)",
                            "Call"
                        ]
                    ]
                },
                "high": {
                    "value": "autoregressive_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "autoregressive_features",
                            "Method Argument"
                        ],
                        [
                            "autoregressive_features",
                            "Method Argument"
                        ],
                        [
                            "autoregressive_features",
                            "Method Argument"
                        ],
                        [
                            "autoregressive_features",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "[out_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "all_175": {
                "input": {
                    "value": "self.degrees >= in_degrees",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "softplus_338": {
                "input": {
                    "value": "unconstrained_stds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[..., 2]",
                            "Subscript"
                        ],
                        [
                            "outputs[:, feature, :, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "logsumexp_341": {
                "input": {
                    "value": "log_mixture_coefficients - 0.5 * (np.log(2 * np.pi) + 2 * torch.log(stds) + ((inputs[..., None] - means) / stds) ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_360": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_375": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[..., 0]",
                            "Subscript"
                        ],
                        [
                            "outputs[:, feature, :, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.log_softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Categorical_378": {
                "variable": {
                    "value": "component_distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[..., 0]",
                            "Subscript"
                        ],
                        [
                            "outputs[:, feature, :, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.log_softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_393": {
                "*size": {
                    "value": "self.features * self.num_mixture_components",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_396": {
                "*size": {
                    "value": "self.features * self.num_mixture_components",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_410": {
                "*size": {
                    "value": "self.features * self.num_mixture_components",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_413": {
                "input": {
                    "value": "torch.exp(torch.Tensor([1 - self.epsilon])) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_415": {
                "*size": {
                    "value": "self.features * self.num_mixture_components",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_417": {
                "*size": {
                    "value": "self.features * self.num_mixture_components",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_155": {
                "num_features": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(in_degrees)",
                            "Call"
                        ],
                        [
                            "len(in_degrees)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softplus_376": {
                "input": {
                    "value": "unconstrained_stds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[..., 2]",
                            "Subscript"
                        ],
                        [
                            "outputs[:, feature, :, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_68": {
                "start": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ],
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_414": {
                "input": {
                    "value": "torch.Tensor([1 - self.epsilon])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_385": {
                "*size": {
                    "value": "context.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_346": {
                "input": {
                    "value": "stds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softplus(unconstrained_stds) + self.epsilon",
                            "BinOp"
                        ],
                        [
                            "F.softplus(unconstrained_stds) + self.epsilon",
                            "BinOp"
                        ],
                        [
                            "stds.gather(1, components).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nflows/nn/nets/mlp.py": {
        "torch": {
            "Linear_39": {
                "variable": {
                    "value": "self._input_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "np.prod(in_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_sizes[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_40": {
                "variable": {
                    "value": "self._hidden_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(in_size, out_size) for (in_size, out_size) in zip(hidden_sizes[:-1], hidden_sizes[1:])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self._output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "np.prod(out_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/nn/nets/resnet.py": {
        "torch": {
            "rand_212": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "int"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                }
            },
            "rand_213": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                }
            },
            "ModuleList_31": {
                "variable": {
                    "value": "self.linear_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(features, features) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_34": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_probability",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_80": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ResidualBlock(features=hidden_features, context_features=context_features, activation=activation, dropout_probability=dropout_probability, use_batch_norm=use_batch_norm) for _ in range(num_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.final_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_130": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(channels, channels, kernel_size=3, padding=1) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_133": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_probability",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_183": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConvResidualBlock(channels=hidden_channels, context_channels=context_channels, activation=activation, dropout_probability=dropout_probability, use_batch_norm=use_batch_norm) for _ in range(num_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_195": {
                "variable": {
                    "value": "self.final_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_26": {
                "variable": {
                    "value": "self.batch_norm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.BatchNorm1d(features, eps=0.001) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.context_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context_features",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "glu_51": {
                "variable": {
                    "value": "temps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((temps, self.context_layer(context)), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.initial_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features + context_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.initial_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_119": {
                "variable": {
                    "value": "self.context_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "context_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "int"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_127": {
                "variable": {
                    "value": "self.batch_norm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.BatchNorm2d(channels, eps=0.001) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "glu_150": {
                "variable": {
                    "value": "temps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((temps, self.context_layer(context)), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_170": {
                "variable": {
                    "value": "self.initial_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels + context_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_177": {
                "variable": {
                    "value": "self.initial_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_51": {
                "tensors": {
                    "value": "(temps, self.context_layer(context))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_98": {
                "tensors": {
                    "value": "(inputs, context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "int"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "int"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_150": {
                "tensors": {
                    "value": "(temps, self.context_layer(context))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_203": {
                "tensors": {
                    "value": "(inputs, context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_27": {
                "num_features": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_128": {
                "num_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "int"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/transforms/autoregressive.py": {
        "torch": {
            "randn_439": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_440": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_48": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(16, 10)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_107": {
                "variable": {
                    "value": "log_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softplus(unconstrained_scale) + self._epsilon",
                            "BinOp"
                        ],
                        [
                            "F.softplus(unconstrained_scale) + self._epsilon",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_118": {
                "variable": {
                    "value": "log_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softplus(unconstrained_scale) + self._epsilon",
                            "BinOp"
                        ],
                        [
                            "F.softplus(unconstrained_scale) + self._epsilon",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softplus_106": {
                "input": {
                    "value": "unconstrained_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._unconstrained_scale_and_shift(autoregressive_params)",
                            "Call"
                        ],
                        [
                            "self._unconstrained_scale_and_shift(autoregressive_params)",
                            "Call"
                        ],
                        [
                            "autoregressive_params[..., 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softplus_117": {
                "input": {
                    "value": "unconstrained_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._unconstrained_scale_and_shift(autoregressive_params)",
                            "Call"
                        ],
                        [
                            "self._unconstrained_scale_and_shift(autoregressive_params)",
                            "Call"
                        ],
                        [
                            "autoregressive_params[..., 0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "nflows/transforms/base.py": {
        "torch": {
            "ModuleList_42": {
                "variable": {
                    "value": "self._transforms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "transforms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transforms",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_53": {
                "variable": {
                    "value": "total_logabsdet",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ModuleList_91": {
                "variable": {
                    "value": "self._transforms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_171": {
                "variable": {
                    "value": "total_logabsdet",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_177": {
                "variable": {
                    "value": "all_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_outputs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_202": {
                "variable": {
                    "value": "total_logabsdet",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_211": {
                "variable": {
                    "value": "tmp_concat_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_chunk, hiddens]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "self._split_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_160": {
                "variable": {
                    "value": "(outputs, hiddens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "transform_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transform(hiddens, context)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "self._split_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/transforms/coupling.py": {
        "torch": {
            "as_tensor_32": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(mask)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_44": {
                "variable": {
                    "value": "features_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_like_98": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_like_128": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_166": {
                "variable": {
                    "value": "log_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(unconstrained_scale + 2) + 0.001",
                            "BinOp"
                        ],
                        [
                            "self._scale_and_shift(transform_params)",
                            "Call"
                        ],
                        [
                            "self._scale_and_shift(transform_params)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(shift)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_173": {
                "variable": {
                    "value": "log_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(unconstrained_scale + 2) + 0.001",
                            "BinOp"
                        ],
                        [
                            "self._scale_and_shift(transform_params)",
                            "Call"
                        ],
                        [
                            "self._scale_and_shift(transform_params)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(shift)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_192": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shift",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transform_params[:, :self.num_transform_features, ...]",
                            "Subscript"
                        ],
                        [
                            "self._scale_and_shift(transform_params)",
                            "Call"
                        ],
                        [
                            "self._scale_and_shift(transform_params)",
                            "Call"
                        ],
                        [
                            "transform_params",
                            "variable"
                        ]
                    ]
                }
            },
            "sigmoid_161": {
                "input": {
                    "value": "unconstrained_scale + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/transforms/linear.py": {
        "torch": {
            "Parameter_40": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_168": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self._weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "solve_183": {
                "variable": {
                    "value": "(outputs, lu)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "A": {
                    "value": "self._weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_215": {
                "variable": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "m": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "solve_216": {
                "variable": {
                    "value": "(weight_inv, lu)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(self.features, self.features)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "self._weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_217": {
                "variable": {
                    "value": "logabsdet",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(torch.abs(torch.diag(lu)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_49": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.cache.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_68": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs - self.bias",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.cache.inverse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_153": {
                "variable": {
                    "value": "self._weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torchutils.random_orthogonal(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_155": {
                "variable": {
                    "value": "self._weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(features, features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_204": {
                "input": {
                    "value": "self._weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_170": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_187": {
                "input": {
                    "value": "torch.log(torch.abs(torch.diag(lu)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_188": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_217": {
                "input": {
                    "value": "torch.abs(torch.diag(lu))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_50": {
                "*size": {
                    "value": "outputs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_69": {
                "*size": {
                    "value": "outputs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "empty_155": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_187": {
                "input": {
                    "value": "torch.abs(torch.diag(lu))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_217": {
                "input": {
                    "value": "torch.diag(lu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_187": {
                "input": {
                    "value": "torch.diag(lu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_217": {
                "input": {
                    "value": "lu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.solve(outputs.t(), self._weight)",
                            "Call"
                        ],
                        [
                            "torch.solve(identity, self._weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_187": {
                "input": {
                    "value": "lu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.solve(outputs.t(), self._weight)",
                            "Call"
                        ],
                        [
                            "torch.solve(identity, self._weight)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nflows/transforms/lu.py": {
        "torch": {
            "Parameter_24": {
                "variable": {
                    "value": "self.lower_entries",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n_triangular_entries)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.upper_entries",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n_triangular_entries)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.unconstrained_upper_diag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_65": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.upper_entries.new_zeros(self.features, self.features)",
                            "Call"
                        ],
                        [
                            "self._create_lower_upper()",
                            "Call"
                        ],
                        [
                            "self._create_lower_upper()",
                            "Call"
                        ],
                        [
                            "self._create_lower_upper()",
                            "Call"
                        ],
                        [
                            "self._create_lower_upper()",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_66": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(inputs, upper)",
                            "Call"
                        ],
                        [
                            "F.linear(outputs, lower, self.bias)",
                            "Call"
                        ],
                        [
                            "inputs - self.bias",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(outputs.t(), lower, upper=False, unitriangular=True)",
                            "Call"
                        ],
                        [
                            "torch.triangular_solve(outputs, upper, upper=True, unitriangular=False)",
                            "Call"
                        ],
                        [
                            "outputs.t()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lower_entries.new_zeros(self.features, self.features)",
                            "Call"
                        ],
                        [
                            "self._create_lower_upper()",
                            "Call"
                        ],
                        [
                            "self._create_lower_upper()",
                            "Call"
                        ],
                        [
                            "self._create_lower_upper()",
                            "Call"
                        ],
                        [
                            "self._create_lower_upper()",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "triangular_solve_80": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "b": {
                    "value": "outputs.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "A": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lower_entries.new_zeros(self.features, self.features)",
                            "Call"
                        ],
                        [
                            "self._create_lower_upper()",
                            "Call"
                        ],
                        [
                            "self._create_lower_upper()",
                            "Call"
                        ],
                        [
                            "self._create_lower_upper()",
                            "Call"
                        ],
                        [
                            "self._create_lower_upper()",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "unitriangular": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "triangular_solve_83": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "b": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(inputs, upper)",
                            "Call"
                        ],
                        [
                            "F.linear(outputs, lower, self.bias)",
                            "Call"
                        ],
                        [
                            "inputs - self.bias",
                            "BinOp"
                        ],
                        [
                            "torch.triangular_solve(outputs.t(), lower, upper=False, unitriangular=True)",
                            "Call"
                        ],
                        [
                            "torch.triangular_solve(outputs, upper, upper=True, unitriangular=False)",
                            "Call"
                        ],
                        [
                            "outputs.t()",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.upper_entries.new_zeros(self.features, self.features)",
                            "Call"
                        ],
                        [
                            "self._create_lower_upper()",
                            "Call"
                        ],
                        [
                            "self._create_lower_upper()",
                            "Call"
                        ],
                        [
                            "self._create_lower_upper()",
                            "Call"
                        ],
                        [
                            "self._create_lower_upper()",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "unitriangular": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eye_109": {
                "variable": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "m": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "triangular_solve_110": {
                "variable": {
                    "value": "(lower_inverse, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "b": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(self.features, self.features)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lower_entries.new_zeros(self.features, self.features)",
                            "Call"
                        ],
                        [
                            "self._create_lower_upper()",
                            "Call"
                        ],
                        [
                            "self._create_lower_upper()",
                            "Call"
                        ],
                        [
                            "self._create_lower_upper()",
                            "Call"
                        ],
                        [
                            "self._create_lower_upper()",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "unitriangular": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "triangular_solve_113": {
                "variable": {
                    "value": "(weight_inverse, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "b": {
                    "value": "lower_inverse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.triangular_solve(identity, lower, upper=False, unitriangular=True)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.upper_entries.new_zeros(self.features, self.features)",
                            "Call"
                        ],
                        [
                            "self._create_lower_upper()",
                            "Call"
                        ],
                        [
                            "self._create_lower_upper()",
                            "Call"
                        ],
                        [
                            "self._create_lower_upper()",
                            "Call"
                        ],
                        [
                            "self._create_lower_upper()",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "unitriangular": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_128": {
                "input": {
                    "value": "torch.log(self.upper_diag)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "*size": {
                    "value": "n_triangular_entries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(features - 1) * features // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_25": {
                "*size": {
                    "value": "n_triangular_entries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(features - 1) * features // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_26": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softplus_120": {
                "input": {
                    "value": "self.unconstrained_upper_diag",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_128": {
                "input": {
                    "value": "self.upper_diag",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/transforms/made.py": {
        "torch": {
            "arange_14": {
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "in_features + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_113": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_probability",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_170": {
                "variable": {
                    "value": "self.linear_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[linear_0, linear_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dropout_180": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_probability",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_264": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "blocks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "linear_72": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_97": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(in_degrees)",
                            "Call"
                        ],
                        [
                            "len(in_degrees)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_146": {
                "variable": {
                    "value": "self.context_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(in_degrees)",
                            "Call"
                        ],
                        [
                            "len(in_degrees)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_151": {
                "variable": {
                    "value": "self.batch_norm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.BatchNorm1d(features, eps=0.001) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_240": {
                "variable": {
                    "value": "self.context_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_55": {
                "variable": {
                    "value": "min_in_degree",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_degrees",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_degrees",
                            "Method Argument"
                        ],
                        [
                            "in_degrees",
                            "Method Argument"
                        ],
                        [
                            "in_degrees",
                            "Method Argument"
                        ],
                        [
                            "in_degrees",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randint_57": {
                "variable": {
                    "value": "out_degrees",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "min_in_degree",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(in_degrees).item()",
                            "Call"
                        ],
                        [
                            "min(min_in_degree, autoregressive_features - 1)",
                            "Call"
                        ]
                    ]
                },
                "high": {
                    "value": "autoregressive_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "autoregressive_features",
                            "Method Argument"
                        ],
                        [
                            "autoregressive_features",
                            "Method Argument"
                        ],
                        [
                            "autoregressive_features",
                            "Method Argument"
                        ],
                        [
                            "autoregressive_features",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "[out_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "all_172": {
                "input": {
                    "value": "self.degrees >= in_degrees",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "BatchNorm1d_152": {
                "num_features": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(in_degrees)",
                            "Call"
                        ],
                        [
                            "len(in_degrees)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_66": {
                "start": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ],
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nflows/transforms/nonlinearities.py": {
        "torch": {
            "tanh_20": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_21": {
                "variable": {
                    "value": "logabsdet",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - outputs ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_60": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_61": {
                "variable": {
                    "value": "outputs[mask_middle]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs[mask_middle]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_65": {
                "variable": {
                    "value": "logabsdet",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_66": {
                "variable": {
                    "value": "logabsdet[mask_middle]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - outputs[mask_middle] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_67": {
                "variable": {
                    "value": "logabsdet[mask_right]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alpha / inputs[mask_right]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_68": {
                "variable": {
                    "value": "logabsdet[mask_left]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "-self.alpha / inputs[mask_left]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_79": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_86": {
                "variable": {
                    "value": "logabsdet",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_105": {
                "variable": {
                    "value": "self.log_negative_slope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.as_tensor(self.negative_slope)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_108": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "self.negative_slope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_115": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "1 / self.negative_slope",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_133": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_143": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_164": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_169": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tan_189": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "np.pi * (inputs - 0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_219": {
                "variable": {
                    "value": "self.unnormalized_pdf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*shape, num_bins)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_264": {
                "variable": {
                    "value": "self.unnormalized_widths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*shape, num_bins)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_321": {
                "variable": {
                    "value": "self.unnormalized_widths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*shape, num_bins)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_322": {
                "variable": {
                    "value": "self.unnormalized_heights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*shape, num_bins)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_323": {
                "variable": {
                    "value": "self.unnorm_derivatives_left",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*shape, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_324": {
                "variable": {
                    "value": "self.unnorm_derivatives_right",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*shape, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_127": {
                "variable": {
                    "value": "self.temperature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([temperature])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_266": {
                "variable": {
                    "value": "self.unnormalized_heights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*shape, num_bins + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_268": {
                "variable": {
                    "value": "self.unnormalized_heights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*shape, num_bins - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_392": {
                "variable": {
                    "value": "self.unnormalized_widths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(*shape, num_bins)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_393": {
                "variable": {
                    "value": "self.unnormalized_heights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(*shape, num_bins)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_399": {
                "variable": {
                    "value": "self.unnormalized_derivatives",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "constant * torch.ones(*shape, num_derivatives)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_403": {
                "variable": {
                    "value": "self.unnormalized_widths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(*shape, num_bins)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_404": {
                "variable": {
                    "value": "self.unnormalized_heights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(*shape, num_bins)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_409": {
                "variable": {
                    "value": "self.unnormalized_derivatives",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(*shape, num_derivatives)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_28": {
                "input": {
                    "value": "(1 + inputs) / (1 - inputs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_29": {
                "input": {
                    "value": "1 - inputs ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_62": {
                "input": {
                    "value": "self.beta * inputs[mask_right]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_80": {
                "input": {
                    "value": "(1 + inputs[mask_middle]) / (1 - inputs[mask_middle])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_83": {
                "input": {
                    "value": "inputs[mask_right] / self.alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_87": {
                "input": {
                    "value": "1 - inputs[mask_middle] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "as_tensor_105": {
                "data": {
                    "value": "self.negative_slope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_166": {
                "input": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(context)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(context)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_166": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_219": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "num_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_264": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "num_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_321": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "num_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_322": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "num_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_323": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_324": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_26": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_26": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_63": {
                "input": {
                    "value": "-self.beta * inputs[mask_left]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_84": {
                "input": {
                    "value": "-inputs[mask_left] / self.alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_127": {},
            "softplus_135": {
                "input": {
                    "value": "-inputs",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_140": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_140": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_145": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log1p_145": {
                "input": {
                    "value": "-inputs",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_171": {
                "input": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(context)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(context)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_171": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "atan_179": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_181": {
                "input": {
                    "value": "1 + inputs ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_186": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_186": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_266": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "num_bins + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_268": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "num_bins - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_392": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "num_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_393": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "num_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_403": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "num_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_404": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "num_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_410": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "num_derivatives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_bins - 1 if self.tails == 'linear' else num_bins + 1",
                            "IfExp"
                        ],
                        [
                            "num_bins - 1 if self.tails == 'linear' else num_bins + 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "log_135": {
                "input": {
                    "value": "self.temperature",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_149": {
                "input": {
                    "value": "self.temperature * outputs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_191": {
                "input": {
                    "value": "1 + outputs ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_400": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "num_derivatives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_bins - 1 if self.tails == 'linear' else num_bins + 1",
                            "IfExp"
                        ],
                        [
                            "num_bins - 1 if self.tails == 'linear' else num_bins + 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "log_147": {
                "input": {
                    "value": "self.temperature",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_148": {
                "input": {
                    "value": "-self.temperature * outputs",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/transforms/normalization.py": {
        "torch": {
            "Parameter_88": {
                "variable": {
                    "value": "self.unconstrained_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "constant * torch.ones(features)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_89": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_158": {
                "variable": {
                    "value": "self.log_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_159": {
                "variable": {
                    "value": "self.shift",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_163": {
                "input": {
                    "value": "self.log_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_218": {
                "variable": {
                    "value": "self.initialized.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_91": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_92": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softplus_96": {
                "input": {
                    "value": "self.unconstrained_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_115": {
                "input": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_116": {
                "input": {
                    "value": "logabsdet_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(self.weight) - 0.5 * torch.log(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "-torch.log(self.weight) + 0.5 * torch.log(self.running_var + self.eps)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_116": {
                "*size": {
                    "value": "inputs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_139": {
                "input": {
                    "value": "logabsdet_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(self.weight) - 0.5 * torch.log(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "-torch.log(self.weight) + 0.5 * torch.log(self.running_var + self.eps)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_139": {
                "*size": {
                    "value": "inputs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "data": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_158": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_159": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_88": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_131": {
                "input": {
                    "value": "self.running_var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_136": {
                "input": {
                    "value": "self.running_var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_183": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_186": {
                "input": {
                    "value": "self.log_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_186": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_199": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_202": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_216": {
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.std(dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_112": {
                "input": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_183": {
                "input": {
                    "value": "self.log_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_199": {
                "input": {
                    "value": "self.log_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_202": {
                "input": {
                    "value": "self.log_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/transforms/orthogonal.py": {
        "torch": {
            "Parameter_59": {
                "variable": {
                    "value": "self.q_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "qv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tile(torch.eye(num_transforms // 2, features), 0, 2)",
                            "Call"
                        ],
                        [
                            "torch.cat((qv, torch.zeros(1, features)))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_79": {
                "variable": {
                    "value": "squared_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_vectors ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_86": {
                "variable": {
                    "value": "logabsdet",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_95": {
                "variable": {
                    "value": "reverse_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_transforms - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_108": {
                "variable": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "m": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_48": {
                "variable": {
                    "value": "order_index",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "qv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(qv, torch.zeros(1, features))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ger_83": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs @ q_vector",
                            "BinOp"
                        ],
                        [
                            "torch.ger(temp, 2.0 / squared_norm * q_vector)",
                            "Call"
                        ]
                    ]
                },
                "vec2": {
                    "value": "2.0 / squared_norm * q_vector",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "index_select_53": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.repeat(*repeat_idx)",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "index": {
                    "value": "order_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(np.concatenate([init_dim * np.arange(n_tile) + i for i in range(init_dim)])).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_55": {
                "n": {
                    "value": "num_transforms // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "m": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_57": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nflows/transforms/permutations.py": {
        "torch": {
            "index_select_37": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "index": {
                    "value": "permutation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "permutation",
                            "Method Argument"
                        ],
                        [
                            "permutation",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_38": {
                "variable": {
                    "value": "logabsdet",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "argsort_24": {
                "input": {
                    "value": "self._permutation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_54": {
                "n": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_63": {
                "start": {
                    "value": "features - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/transforms/qr.py": {
        "torch": {
            "Parameter_21": {
                "variable": {
                    "value": "self.upper_entries",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n_triangular_entries)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_22": {
                "variable": {
                    "value": "self.log_upper_diag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "variable": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_40": {
                "variable": {
                    "value": "upper[self.diag_indices[0], self.diag_indices[1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.log_upper_diag",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_56": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(self.features, self.features)",
                            "Call"
                        ],
                        [
                            "self._create_upper()",
                            "Call"
                        ],
                        [
                            "self._create_upper()",
                            "Call"
                        ],
                        [
                            "self._create_upper()",
                            "Call"
                        ],
                        [
                            "self._create_upper()",
                            "Call"
                        ]
                    ]
                }
            },
            "triangular_solve_78": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "b": {
                    "value": "outputs.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "A": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(self.features, self.features)",
                            "Call"
                        ],
                        [
                            "self._create_upper()",
                            "Call"
                        ],
                        [
                            "self._create_upper()",
                            "Call"
                        ],
                        [
                            "self._create_upper()",
                            "Call"
                        ],
                        [
                            "self._create_upper()",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eye_103": {
                "variable": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "m": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "triangular_solve_104": {
                "variable": {
                    "value": "(upper_inv, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "b": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(self.features, self.features)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(self.features, self.features)",
                            "Call"
                        ],
                        [
                            "self._create_upper()",
                            "Call"
                        ],
                        [
                            "self._create_upper()",
                            "Call"
                        ],
                        [
                            "self._create_upper()",
                            "Call"
                        ],
                        [
                            "self._create_upper()",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_114": {
                "input": {
                    "value": "self.log_upper_diag",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "*size": {
                    "value": "n_triangular_entries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(features - 1) * features // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_22": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_60": {
                "*size": {
                    "value": "outputs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_81": {
                "*size": {
                    "value": "outputs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/transforms/reshape.py": {
        "torch": {
            "zeros_49": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()",
                            "Call"
                        ],
                        [
                            "inputs.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_68": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()",
                            "Call"
                        ],
                        [
                            "inputs.size()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nflows/transforms/splines/cubic.py": {
        "torch": {
            "zeros_like_33": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inputs - bottom) / (top - bottom)",
                            "BinOp"
                        ],
                        [
                            "(inputs - left) / (right - left)",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_34": {
                "variable": {
                    "value": "logabsdet",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inputs - bottom) / (top - bottom)",
                            "BinOp"
                        ],
                        [
                            "(inputs - left) / (right - left)",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_98": {
                "variable": {
                    "value": "widths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unnormalized_widths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unnormalized_widths",
                            "Method Argument"
                        ],
                        [
                            "unnormalized_widths",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cumsum_101": {
                "variable": {
                    "value": "cumwidths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "widths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(unnormalized_widths, dim=-1)",
                            "Call"
                        ],
                        [
                            "min_bin_width + (1 - min_bin_width * num_bins) * widths",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_103": {
                "variable": {
                    "value": "cumwidths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cumwidths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cumsum(widths, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.pad(cumwidths, pad=(1, 0), mode='constant', value=0.0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_105": {
                "variable": {
                    "value": "heights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unnormalized_heights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unnormalized_heights",
                            "Method Argument"
                        ],
                        [
                            "unnormalized_heights",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cumsum_108": {
                "variable": {
                    "value": "cumheights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "heights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(unnormalized_heights, dim=-1)",
                            "Call"
                        ],
                        [
                            "min_bin_height + (1 - min_bin_height * num_bins) * heights",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_110": {
                "variable": {
                    "value": "cumheights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cumheights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cumsum(heights, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.pad(cumheights, pad=(1, 0), mode='constant', value=0.0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_113": {
                "variable": {
                    "value": "min_something_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(slopes[..., :-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_119": {
                "variable": {
                    "value": "min_something",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "min_something_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(torch.abs(slopes[..., :-1]), torch.abs(slopes[..., 1:]))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_131": {
                "variable": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[derivatives_left, derivatives, derivatives_right]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_171": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inputs - bottom) / (top - bottom)",
                            "BinOp"
                        ],
                        [
                            "(inputs - left) / (right - left)",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "atan2_190": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(discriminant[three_roots_mask])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "-depressed_1[three_roots_mask]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_195": {
                "variable": {
                    "value": "cubic_root_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.atan2(torch.sqrt(discriminant[three_roots_mask]), -depressed_1[three_roots_mask])",
                            "Call"
                        ],
                        [
                            "theta / 3.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_196": {
                "variable": {
                    "value": "cubic_root_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.atan2(torch.sqrt(discriminant[three_roots_mask]), -depressed_1[three_roots_mask])",
                            "Call"
                        ],
                        [
                            "theta / 3.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_220": {
                "variable": {
                    "value": "roots",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[root_1, root_2, root_3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_221": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[root1_mask, root2_mask, root3_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_223": {
                "variable": {
                    "value": "outputs[three_roots_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "roots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([root_1, root_2, root_3], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "mask_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argsort(masks, dim=-1, descending=True)[..., 0][..., None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_253": {
                "variable": {
                    "value": "logabsdet",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3 * inputs_a * shifted_inputs.pow(2) + 2 * inputs_b * shifted_inputs + inputs_c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_113": {
                "input": {
                    "value": "slopes[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_83": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inputs - bottom) / (top - bottom)",
                            "BinOp"
                        ],
                        [
                            "(inputs - left) / (right - left)",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_83": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inputs - bottom) / (top - bottom)",
                            "BinOp"
                        ],
                        [
                            "(inputs - left) / (right - left)",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_122": {
                "input": {
                    "value": "unnorm_derivatives_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unnorm_derivatives_left",
                            "Method Argument"
                        ],
                        [
                            "unnorm_derivatives_left",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_125": {
                "input": {
                    "value": "unnorm_derivatives_right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unnorm_derivatives_right",
                            "Method Argument"
                        ],
                        [
                            "unnorm_derivatives_right",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sign_129": {
                "input": {
                    "value": "slopes[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_191": {
                "input": {
                    "value": "discriminant[three_roots_mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_202": {
                "input": {
                    "value": "-depressed_2[three_roots_mask]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_237": {
                "input": {
                    "value": "3 * inputs_a * shifted_outputs.pow(2) + 2 * inputs_b * shifted_outputs + inputs_c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argsort_222": {
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([root1_mask, root2_mask, root3_mask], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_233": {
                "input": {
                    "value": "b.pow(2) - 4 * a * c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_176": {
                "input": {
                    "value": "-discriminant[one_root_mask]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_180": {
                "input": {
                    "value": "-discriminant[one_root_mask]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/transforms/splines/linear.py": {
        "torch": {
            "zeros_like_15": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inputs - bottom) / (top - bottom)",
                            "BinOp"
                        ],
                        [
                            "(inputs - left) / (right - left)",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_16": {
                "variable": {
                    "value": "logabsdet",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inputs - bottom) / (top - bottom)",
                            "BinOp"
                        ],
                        [
                            "(inputs - left) / (right - left)",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_54": {
                "variable": {
                    "value": "pdf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unnormalized_pdf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unnormalized_pdf",
                            "Method Argument"
                        ],
                        [
                            "unnormalized_pdf",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cumsum_56": {
                "variable": {
                    "value": "cdf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pdf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(unnormalized_pdf, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_58": {
                "variable": {
                    "value": "cdf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cdf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cumsum(pdf, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.pad(cdf, pad=(1, 0), mode='constant', value=0.0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "linspace_64": {
                "variable": {
                    "value": "bin_boundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "num_bins + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_79": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(inputs)",
                            "Call"
                        ],
                        [
                            "(inputs - input_offsets) / input_slopes",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(outputs, 0, 1)",
                            "Call"
                        ],
                        [
                            "cdf.gather(-1, bin_idx[..., None])[..., 0]",
                            "Subscript"
                        ],
                        [
                            "outputs + alpha * input_pdfs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(outputs, 0, 1)",
                            "Call"
                        ],
                        [
                            "outputs * (right - left) + left",
                            "BinOp"
                        ],
                        [
                            "outputs * (top - bottom) + bottom",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "floor_85": {
                "variable": {
                    "value": "bin_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bin_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs * num_bins",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_94": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(inputs)",
                            "Call"
                        ],
                        [
                            "(inputs - input_offsets) / input_slopes",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(outputs, 0, 1)",
                            "Call"
                        ],
                        [
                            "cdf.gather(-1, bin_idx[..., None])[..., 0]",
                            "Subscript"
                        ],
                        [
                            "outputs + alpha * input_pdfs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(outputs, 0, 1)",
                            "Call"
                        ],
                        [
                            "outputs * (right - left) + left",
                            "BinOp"
                        ],
                        [
                            "outputs * (top - bottom) + bottom",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_44": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inputs - bottom) / (top - bottom)",
                            "BinOp"
                        ],
                        [
                            "(inputs - left) / (right - left)",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_44": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inputs - bottom) / (top - bottom)",
                            "BinOp"
                        ],
                        [
                            "(inputs - left) / (right - left)",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_81": {
                "input": {
                    "value": "input_slopes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slopes.gather(-1, inv_bin_idx)[..., 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_97": {
                "input": {
                    "value": "input_pdfs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pdf.gather(-1, bin_idx[..., None])[..., 0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "nflows/transforms/splines/quadratic.py": {
        "torch": {
            "zeros_like_25": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inputs - bottom) / (top - bottom)",
                            "BinOp"
                        ],
                        [
                            "(inputs - left) / (right - left)",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_26": {
                "variable": {
                    "value": "logabsdet",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inputs - bottom) / (top - bottom)",
                            "BinOp"
                        ],
                        [
                            "(inputs - left) / (right - left)",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_81": {
                "variable": {
                    "value": "widths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unnormalized_widths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unnormalized_widths",
                            "Method Argument"
                        ],
                        [
                            "unnormalized_widths",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cumsum_110": {
                "variable": {
                    "value": "bin_left_cdf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(heights[..., :-1] + heights[..., 1:]) / 2 * widths",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_114": {
                "variable": {
                    "value": "bin_left_cdf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bin_left_cdf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cumsum((heights[..., :-1] + heights[..., 1:]) / 2 * widths, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.pad(bin_left_cdf, pad=(1, 0), mode='constant', value=0.0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cumsum_116": {
                "variable": {
                    "value": "bin_locations",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "widths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(unnormalized_widths, dim=-1)",
                            "Call"
                        ],
                        [
                            "min_bin_width + (1 - min_bin_width * num_bins) * widths",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_118": {
                "variable": {
                    "value": "bin_locations",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bin_locations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cumsum(widths, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.pad(bin_locations, pad=(1, 0), mode='constant', value=0.0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "unnorm_heights_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[constant, unnorm_heights_exp, constant]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_141": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(inputs)",
                            "Call"
                        ],
                        [
                            "alpha * input_bin_widths + input_bin_locations",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(outputs, 0, 1)",
                            "Call"
                        ],
                        [
                            "a * alpha.pow(2) + b * alpha + c",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(outputs, 0, 1)",
                            "Call"
                        ],
                        [
                            "outputs * (right - left) + left",
                            "BinOp"
                        ],
                        [
                            "outputs * (top - bottom) + bottom",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_148": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(inputs)",
                            "Call"
                        ],
                        [
                            "alpha * input_bin_widths + input_bin_locations",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(outputs, 0, 1)",
                            "Call"
                        ],
                        [
                            "a * alpha.pow(2) + b * alpha + c",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(outputs, 0, 1)",
                            "Call"
                        ],
                        [
                            "outputs * (right - left) + left",
                            "BinOp"
                        ],
                        [
                            "outputs * (top - bottom) + bottom",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_149": {
                "variable": {
                    "value": "logabsdet",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha * (input_right_heights - input_left_heights) + input_left_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_84": {
                "input": {
                    "value": "unnormalized_heights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unnormalized_heights",
                            "Method Argument"
                        ],
                        [
                            "unnormalized_heights",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_103": {
                "input": {
                    "value": "(unnorm_heights_exp[..., :-1] + unnorm_heights_exp[..., 1:]) / 2 * widths",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_66": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inputs - bottom) / (top - bottom)",
                            "BinOp"
                        ],
                        [
                            "(inputs - left) / (right - left)",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_66": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inputs - bottom) / (top - bottom)",
                            "BinOp"
                        ],
                        [
                            "(inputs - left) / (right - left)",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_93": {
                "input": {
                    "value": "(unnorm_heights_exp[..., :-1] + unnorm_heights_exp[..., 1:]) / 2 * widths[..., 1:-1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_142": {
                "input": {
                    "value": "alpha * (input_right_heights - input_left_heights) + input_left_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_139": {
                "input": {
                    "value": "b.pow(2) - 4 * a * c_",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/transforms/splines/rational_quadratic.py": {
        "torch": {
            "zeros_like_28": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_29": {
                "variable": {
                    "value": "logabsdet",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_87": {
                "variable": {
                    "value": "widths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unnormalized_widths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unnormalized_widths",
                            "Method Argument"
                        ],
                        [
                            "unnormalized_widths",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cumsum_89": {
                "variable": {
                    "value": "cumwidths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "widths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(unnormalized_widths, dim=-1)",
                            "Call"
                        ],
                        [
                            "min_bin_width + (1 - min_bin_width * num_bins) * widths",
                            "BinOp"
                        ],
                        [
                            "cumwidths[..., 1:] - cumwidths[..., :-1]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_90": {
                "variable": {
                    "value": "cumwidths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cumwidths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cumsum(widths, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.pad(cumwidths, pad=(1, 0), mode='constant', value=0.0)",
                            "Call"
                        ],
                        [
                            "(right - left) * cumwidths + left",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_98": {
                "variable": {
                    "value": "heights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unnormalized_heights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unnormalized_heights",
                            "Method Argument"
                        ],
                        [
                            "unnormalized_heights",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cumsum_100": {
                "variable": {
                    "value": "cumheights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "heights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(unnormalized_heights, dim=-1)",
                            "Call"
                        ],
                        [
                            "min_bin_height + (1 - min_bin_height * num_bins) * heights",
                            "BinOp"
                        ],
                        [
                            "cumheights[..., 1:] - cumheights[..., :-1]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_101": {
                "variable": {
                    "value": "cumheights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cumheights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cumsum(heights, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.pad(cumheights, pad=(1, 0), mode='constant', value=0.0)",
                            "Call"
                        ],
                        [
                            "(top - bottom) * cumheights + bottom",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pad_32": {
                "variable": {
                    "value": "unnormalized_derivatives",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unnormalized_derivatives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(unnormalized_derivatives, pad=(1, 1))",
                            "Call"
                        ],
                        [
                            "unnormalized_derivatives",
                            "Method Argument"
                        ],
                        [
                            "unnormalized_derivatives",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softplus_96": {
                "input": {
                    "value": "unnormalized_derivatives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(unnormalized_derivatives, pad=(1, 1))",
                            "Call"
                        ],
                        [
                            "unnormalized_derivatives",
                            "Method Argument"
                        ],
                        [
                            "unnormalized_derivatives",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_77": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_77": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_150": {
                "input": {
                    "value": "denominator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_delta + (input_derivatives + input_derivatives_plus_one - 2 * input_delta) * theta_one_minus_theta",
                            "BinOp"
                        ],
                        [
                            "input_delta + (input_derivatives + input_derivatives_plus_one - 2 * input_delta) * theta_one_minus_theta",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_171": {
                "input": {
                    "value": "denominator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_delta + (input_derivatives + input_derivatives_plus_one - 2 * input_delta) * theta_one_minus_theta",
                            "BinOp"
                        ],
                        [
                            "input_delta + (input_derivatives + input_derivatives_plus_one - 2 * input_delta) * theta_one_minus_theta",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_136": {
                "input": {
                    "value": "discriminant",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b.pow(2) - 4 * a * c",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "nflows/transforms/standard.py": {
        "torch": {
            "zeros_17": {
                "variable": {
                    "value": "logabsdet",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "inputs.size()",
                            "Call"
                        ],
                        [
                            "inputs.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "log_41": {
                "input": {
                    "value": "self._scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "numel_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nflows/transforms/svd.py": {
        "torch": {
            "randn_133": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "self.unconstrained_diagonal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_104": {
                "variable": {
                    "value": "diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.diagonal",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_116": {
                "variable": {
                    "value": "diagonal_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.reciprocal(self.diagonal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_45": {
                "input": {
                    "value": "self.diagonal",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_127": {
                "input": {
                    "value": "self.log_diagonal",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softplus_41": {
                "input": {
                    "value": "self.unconstrained_diagonal",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_72": {
                "*size": {
                    "value": "outputs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_94": {
                "*size": {
                    "value": "outputs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reciprocal_116": {
                "input": {
                    "value": "self.diagonal",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/utils/torchutils.py": {
        "torch": {
            "slogdet_62": {
                "variable": {
                    "value": "(_, res)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x.expand(shape[0], num_reps, *shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.randn(size, size)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_72": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "qr_73": {
                "variable": {
                    "value": "(q, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x.expand(shape[0], num_reps, *shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.randn(size, size)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_97": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_110": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_124": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_125": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multinomial_127": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(features).float()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features // 2 if features % 2 == 0 else features // 2 + 1",
                            "IfExp"
                        ]
                    ]
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_156": {
                "variable": {
                    "value": "max_value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_157": {
                "variable": {
                    "value": "bound",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_24": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x.expand(shape[0], num_reps, *shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.randn(size, size)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "reduce_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(num_batch_dims, x.ndimension()))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_30": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x.expand(shape[0], num_reps, *shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.randn(size, size)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Size(shape) + x.shape[1:]",
                            "BinOp"
                        ],
                        [
                            "torch.Size([-1]) + x.shape[num_dims:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_42": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x.expand(shape[0], num_reps, *shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.randn(size, size)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Size(shape) + x.shape[1:]",
                            "BinOp"
                        ],
                        [
                            "torch.Size([-1]) + x.shape[num_dims:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "logsumexp_171": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.5 * torch.sum(a * b, dim=-1)",
                            "BinOp"
                        ],
                        [
                            "c + d",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "numel_85": {
                "input": {
                    "value": "parameter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_136": {
                "input": {
                    "value": "inputs[..., None] >= bin_locations",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sign_141": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x.expand(shape[0], num_reps, *shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.randn(size, size)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_141": {
                "input": {
                    "value": "torch.log(torch.abs(x)) / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_165": {
                "n": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_168": {
                "input": {
                    "value": "a * b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_141": {
                "input": {
                    "value": "torch.abs(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log1p_158": {
                "input": {
                    "value": "-bound",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_158": {
                "input": {
                    "value": "bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([bound])",
                            "Call"
                        ],
                        [
                            "1 - 0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_141": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x.expand(shape[0], num_reps, *shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.randn(size, size)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "sample/sample.py": {
        "torch": {
            "rand_96": {
                "variable": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_sample, args.thetaDim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_128": {
                "variable": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_chains, args.thetaDim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_477": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "all_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(all_samples).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_350": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(theta, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "next(iter(theta.values()))",
                            "Call"
                        ],
                        [
                            "torch.Tensor(theta.numpy()).to(self.args.device)",
                            "Call"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_494": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "prior.lower.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_77": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[int(args.samplerExploitationRatio * num_samples), dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(thetas, torch.Tensor(simulator.min.cpu().detach().numpy() + (simulator.max - simulator.min).cpu().detach().numpy() * prior.gen(num_samples - int(args.samplerExploitationRatio * num_samples))).to(device))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_100": {
                "variable": {
                    "value": "thetas_intermediate",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_sample, args.thetaDim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_101": {
                "variable": {
                    "value": "rand",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_sample",
                            "Method Argument"
                        ],
                        [
                            "n_sample",
                            "Method Argument"
                        ],
                        [
                            "n_sample",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_101": {
                "variable": {
                    "value": "rand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "mcmc_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mcmc_samples, thetas)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_134": {
                "variable": {
                    "value": "rand",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_chains",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_mcmc_init_params.shape[0]",
                            "Subscript"
                        ],
                        [
                            "mp.cpu_count - 1 if num_chains is None else num_chains",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "25",
                            "Method Argument"
                        ],
                        [
                            "25",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_134": {
                "variable": {
                    "value": "rand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_171": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(masks, mask.reshape(1, -1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "mcmc_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mcmc_samples, thetas)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_241": {
                "variable": {
                    "value": "_mcmc_init_params",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "prior.lower.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_grad_enabled_246": {
                "mode": {
                    "value": "track_gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mcmc_method != 'slice' and mcmc_method != 'slice_np'",
                            "BoolOp"
                        ]
                    ]
                }
            },
            "reshape_281": {
                "variable": {
                    "value": "_mcmc_init_params",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "prior.lower.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sampler(args, int(args.samplerExploitationRatio * num_samples), netLikelihood, observation, prior, simulator, mcmc_method, num_chains=numChains).detach(), torch.Tensor(prior.gen(num_samples - int(args.samplerExploitationRatio * num_samples))).to(device))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sampler(args, netLikelihood, prior, int(args.samplerExploitationRatio * num_samples), observation, mcmc_method, num_chains=numChains, warmup_steps=args.burnInMCMC, thin=args.thinning).detach(), torch.Tensor(prior.gen(num_samples - int(args.samplerExploitationRatio * num_samples))).to(device))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_107": {
                "variable": {
                    "value": "thetas_intermediate",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_sample, args.thetaDim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_108": {
                "variable": {
                    "value": "rand",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_sample",
                            "Method Argument"
                        ],
                        [
                            "n_sample",
                            "Method Argument"
                        ],
                        [
                            "n_sample",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_108": {
                "variable": {
                    "value": "rand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_144": {
                "variable": {
                    "value": "rand",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_chains",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_mcmc_init_params.shape[0]",
                            "Subscript"
                        ],
                        [
                            "mp.cpu_count - 1 if num_chains is None else num_chains",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "25",
                            "Method Argument"
                        ],
                        [
                            "25",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_144": {
                "variable": {
                    "value": "rand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_133": {
                "*size": {
                    "value": "(num_chains, args.thetaDim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_153": {
                "variable": {
                    "value": "rand",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_chains",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_mcmc_init_params.shape[0]",
                            "Subscript"
                        ],
                        [
                            "mp.cpu_count - 1 if num_chains is None else num_chains",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "25",
                            "Method Argument"
                        ],
                        [
                            "25",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_153": {
                "variable": {
                    "value": "rand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_184": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_191": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_143": {
                "*size": {
                    "value": "(num_chains, args.thetaDim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_173": {
                "input": {
                    "value": "masks[-100:, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_69": {},
            "exp_102": {
                "input": {
                    "value": "torch.min(netLikelihood.log_probs(observation, simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1) - netLikelihood.log_probs(observation, simulator.min + (simulator.max - simulator.min) * thetas).reshape(-1), torch.Tensor([0.0] * n_sample).to(args.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_135": {
                "input": {
                    "value": "torch.min(netLikelihood.log_prob(x=observation, theta=simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1) + torch.Tensor(prior.eval(simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1)).to(args.device) - netLikelihood.log_probs(x=observation, theta=simulator.min + (simulator.max - simulator.min) * thetas).reshape(-1) - torch.Tensor(prior.eval(simulator.min + (simulator.max - simulator.min) * thetas).reshape(-1)).to(args.device), torch.Tensor([0.0] * num_chains).to(args.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_152": {
                "*size": {
                    "value": "(num_chains, args.thetaDim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "min_103": {
                "input": {
                    "value": "netLikelihood.log_probs(observation, simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1) - netLikelihood.log_probs(observation, simulator.min + (simulator.max - simulator.min) * thetas).reshape(-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_109": {
                "input": {
                    "value": "torch.min(netLikelihood.log_prob(observation, simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1) - netLikelihood.log_prob(observation, simulator.min + (simulator.max - simulator.min) * thetas.to(args.device)).reshape(-1), torch.Tensor([0.0] * n_sample).to(args.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_136": {
                "input": {
                    "value": "netLikelihood.log_prob(x=observation, theta=simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1) + torch.Tensor(prior.eval(simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1)).to(args.device) - netLikelihood.log_probs(x=observation, theta=simulator.min + (simulator.max - simulator.min) * thetas).reshape(-1) - torch.Tensor(prior.eval(simulator.min + (simulator.max - simulator.min) * thetas).reshape(-1)).to(args.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_105": {},
            "min_110": {
                "input": {
                    "value": "netLikelihood.log_prob(observation, simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1) - netLikelihood.log_prob(observation, simulator.min + (simulator.max - simulator.min) * thetas.to(args.device)).reshape(-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_140": {},
            "exp_145": {
                "input": {
                    "value": "torch.min(netLikelihood.log_prob(context=simulator.min + (simulator.max - simulator.min) * thetas_intermediate, inputs=observation).reshape(-1) + torch.Tensor(prior.eval(simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1)).to(args.device) - netLikelihood.log_prob(context=simulator.min + (simulator.max - simulator.min) * thetas.to(args.device), inputs=observation).reshape(-1) - torch.Tensor(prior.eval(simulator.min + (simulator.max - simulator.min) * thetas).reshape(-1)).to(args.device), torch.Tensor([0.0] * num_chains).to(args.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_112": {},
            "Tensor_139": {},
            "min_146": {
                "input": {
                    "value": "netLikelihood.log_prob(context=simulator.min + (simulator.max - simulator.min) * thetas_intermediate, inputs=observation).reshape(-1) + torch.Tensor(prior.eval(simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1)).to(args.device) - netLikelihood.log_prob(context=simulator.min + (simulator.max - simulator.min) * thetas.to(args.device), inputs=observation).reshape(-1) - torch.Tensor(prior.eval(simulator.min + (simulator.max - simulator.min) * thetas).reshape(-1)).to(args.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_154": {
                "input": {
                    "value": "torch.min(netLikelihood(context=simulator.min + (simulator.max - simulator.min) * thetas_intermediate, inputs=observation).reshape(-1) + torch.Tensor(prior.eval(simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1)).to(args.device) - netLikelihood(context=simulator.min + (simulator.max - simulator.min) * thetas.to(args.device), inputs=observation).reshape(-1) - torch.Tensor(prior.eval(simulator.min + (simulator.max - simulator.min) * thetas).reshape(-1)).to(args.device), torch.Tensor([0.0] * num_chains).to(args.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_150": {},
            "min_155": {
                "input": {
                    "value": "netLikelihood(context=simulator.min + (simulator.max - simulator.min) * thetas_intermediate, inputs=observation).reshape(-1) + torch.Tensor(prior.eval(simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1)).to(args.device) - netLikelihood(context=simulator.min + (simulator.max - simulator.min) * thetas.to(args.device), inputs=observation).reshape(-1) - torch.Tensor(prior.eval(simulator.min + (simulator.max - simulator.min) * thetas).reshape(-1)).to(args.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_137": {},
            "Tensor_149": {},
            "Tensor_167": {},
            "Tensor_164": {},
            "Tensor_147": {},
            "Tensor_158": {}
        }
    },
    "sample/sample_SBI.py": {
        "torch": {
            "rand_81": {
                "variable": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_sample, args.thetaDim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clamp_106": {
                "variable": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand((n_sample, args.thetaDim)).to(args.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_139": {
                "variable": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_chains, args.thetaDim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_57": {
                "variable": {
                    "value": "rand",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_sample",
                            "Method Argument"
                        ],
                        [
                            "n_sample",
                            "Method Argument"
                        ],
                        [
                            "n_sample",
                            "Method Argument"
                        ],
                        [
                            "n_sample",
                            "Method Argument"
                        ],
                        [
                            "n_sample",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "rand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_144": {
                "variable": {
                    "value": "rand",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_chains",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_144": {
                "variable": {
                    "value": "rand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_23": {
                "variable": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sampler(args, int(args.samplerExploitationRatio * num_samples), netLikelihood, observation, prior, simulator, mcmc_method, num_chains=numChains).detach(), prior.sample((num_samples - int(args.samplerExploitationRatio * num_samples),)).to(device))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(thetas, prior.sample((num_samples - int(args.samplerExploitationRatio * num_samples),)).to(device))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_85": {
                "variable": {
                    "value": "thetas_intermediate",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_sample, args.thetaDim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_86": {
                "variable": {
                    "value": "rand",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_sample",
                            "Method Argument"
                        ],
                        [
                            "n_sample",
                            "Method Argument"
                        ],
                        [
                            "n_sample",
                            "Method Argument"
                        ],
                        [
                            "n_sample",
                            "Method Argument"
                        ],
                        [
                            "n_sample",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_86": {
                "variable": {
                    "value": "rand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "mcmc_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mcmc_samples, thetas)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_106": {
                "*size": {
                    "value": "(n_sample, args.thetaDim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clamp_110": {
                "variable": {
                    "value": "thetas_intermediate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "thetas + 0.1 * torch.randn((n_sample, args.thetaDim)).to(args.device)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_111": {
                "variable": {
                    "value": "rand",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_sample",
                            "Method Argument"
                        ],
                        [
                            "n_sample",
                            "Method Argument"
                        ],
                        [
                            "n_sample",
                            "Method Argument"
                        ],
                        [
                            "n_sample",
                            "Method Argument"
                        ],
                        [
                            "n_sample",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_111": {
                "variable": {
                    "value": "rand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "mcmc_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mcmc_samples, thetas)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(masks, mask.reshape(1, -1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "mcmc_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mcmc_samples, thetas)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_50": {
                "*size": {
                    "value": "(n_sample, args.thetaDim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_92": {
                "variable": {
                    "value": "thetas_intermediate",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_sample, args.thetaDim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_93": {
                "variable": {
                    "value": "rand",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_sample",
                            "Method Argument"
                        ],
                        [
                            "n_sample",
                            "Method Argument"
                        ],
                        [
                            "n_sample",
                            "Method Argument"
                        ],
                        [
                            "n_sample",
                            "Method Argument"
                        ],
                        [
                            "n_sample",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_93": {
                "variable": {
                    "value": "rand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_117": {
                "variable": {
                    "value": "thetas_intermediate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "thetas + 0.1 * torch.randn((n_sample, args.thetaDim)).to(args.device)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_118": {
                "variable": {
                    "value": "rand",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_sample",
                            "Method Argument"
                        ],
                        [
                            "n_sample",
                            "Method Argument"
                        ],
                        [
                            "n_sample",
                            "Method Argument"
                        ],
                        [
                            "n_sample",
                            "Method Argument"
                        ],
                        [
                            "n_sample",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_118": {
                "variable": {
                    "value": "rand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_56": {
                "*size": {
                    "value": "(n_sample, args.thetaDim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_143": {
                "*size": {
                    "value": "(num_chains, args.thetaDim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_110": {
                "*size": {
                    "value": "(n_sample, args.thetaDim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_117": {
                "*size": {
                    "value": "(n_sample, args.thetaDim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_211": {
                "input": {
                    "value": "masks[-100:, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_59": {
                "input": {
                    "value": "torch.min(netLikelihood.log_prob(thetas_intermediate, observation).reshape(-1) - netLikelihood.log_prob(thetas, observation).reshape(-1), torch.Tensor([0.0] * n_sample).to(args.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_87": {
                "input": {
                    "value": "torch.min(netLikelihood.log_probs(observation, simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1) - netLikelihood.log_probs(observation, simulator.min + (simulator.max - simulator.min) * thetas).reshape(-1), torch.Tensor([0.0] * n_sample).to(args.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_112": {
                "input": {
                    "value": "torch.min(netLikelihood.log_probs(observation, simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1) - netLikelihood.log_probs(observation, simulator.min + (simulator.max - simulator.min) * thetas).reshape(-1), torch.Tensor([0.0] * n_sample).to(args.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_60": {
                "input": {
                    "value": "netLikelihood.log_prob(thetas_intermediate, observation).reshape(-1) - netLikelihood.log_prob(thetas, observation).reshape(-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_64": {
                "input": {
                    "value": "torch.min(netLikelihood.log_prob(observation, thetas_intermediate).reshape(-1) - netLikelihood.log_prob(observation, thetas).reshape(-1), torch.Tensor([0.0] * n_sample).to(args.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_88": {
                "input": {
                    "value": "netLikelihood.log_probs(observation, simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1) - netLikelihood.log_probs(observation, simulator.min + (simulator.max - simulator.min) * thetas).reshape(-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_94": {
                "input": {
                    "value": "torch.min(netLikelihood.log_prob(observation, simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1) - netLikelihood.log_prob(observation, simulator.min + (simulator.max - simulator.min) * thetas.to(args.device)).reshape(-1), torch.Tensor([0.0] * n_sample).to(args.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_113": {
                "input": {
                    "value": "netLikelihood.log_probs(observation, simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1) - netLikelihood.log_probs(observation, simulator.min + (simulator.max - simulator.min) * thetas).reshape(-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_119": {
                "input": {
                    "value": "torch.min(netLikelihood.log_prob(observation, simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1) - netLikelihood.log_prob(observation, simulator.min + (simulator.max - simulator.min) * thetas.to(args.device)).reshape(-1), torch.Tensor([0.0] * n_sample).to(args.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_147": {
                "input": {
                    "value": "torch.min(netLikelihood.log_prob(x=observation, theta=simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1) + prior.log_prob(simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1).to(args.device) - netLikelihood.log_prob(x=observation, theta=simulator.min + (simulator.max - simulator.min) * thetas.to(args.device)).reshape(-1) - prior.log_prob(simulator.min + (simulator.max - simulator.min) * thetas).reshape(-1).to(args.device), torch.Tensor([0.0] * num_chains).to(args.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_182": {
                "input": {
                    "value": "torch.min(netLikelihood.log_prob(theta=simulator.min + (simulator.max - simulator.min) * thetas_intermediate, x=observation).reshape(-1) + prior.log_prob(simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1).to(args.device) - netLikelihood.log_prob(theta=simulator.min + (simulator.max - simulator.min) * thetas.to(args.device), x=observation).reshape(-1) - prior.log_prob(simulator.min + (simulator.max - simulator.min) * thetas).reshape(-1).to(args.device), torch.Tensor([0.0] * num_chains).to(args.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_65": {
                "input": {
                    "value": "netLikelihood.log_prob(observation, thetas_intermediate).reshape(-1) - netLikelihood.log_prob(observation, thetas).reshape(-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_95": {
                "input": {
                    "value": "netLikelihood.log_prob(observation, simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1) - netLikelihood.log_prob(observation, simulator.min + (simulator.max - simulator.min) * thetas.to(args.device)).reshape(-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_120": {
                "input": {
                    "value": "netLikelihood.log_prob(observation, simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1) - netLikelihood.log_prob(observation, simulator.min + (simulator.max - simulator.min) * thetas.to(args.device)).reshape(-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_148": {
                "input": {
                    "value": "netLikelihood.log_prob(x=observation, theta=simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1) + prior.log_prob(simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1).to(args.device) - netLikelihood.log_prob(x=observation, theta=simulator.min + (simulator.max - simulator.min) * thetas.to(args.device)).reshape(-1) - prior.log_prob(simulator.min + (simulator.max - simulator.min) * thetas).reshape(-1).to(args.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_183": {
                "input": {
                    "value": "netLikelihood.log_prob(theta=simulator.min + (simulator.max - simulator.min) * thetas_intermediate, x=observation).reshape(-1) + prior.log_prob(simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1).to(args.device) - netLikelihood.log_prob(theta=simulator.min + (simulator.max - simulator.min) * thetas.to(args.device), x=observation).reshape(-1) - prior.log_prob(simulator.min + (simulator.max - simulator.min) * thetas).reshape(-1).to(args.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_193": {
                "input": {
                    "value": "torch.min(netLikelihood.log_prob(simulator.min + (simulator.max - simulator.min) * thetas_intermediate, observation).reshape(-1) + prior.log_prob(simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1).to(args.device) - netLikelihood.log_prob(simulator.min + (simulator.max - simulator.min) * thetas.to(args.device), observation).reshape(-1) - prior.log_prob(simulator.min + (simulator.max - simulator.min) * thetas).reshape(-1).to(args.device), torch.Tensor([0.0] * num_chains).to(args.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_152": {},
            "exp_155": {
                "input": {
                    "value": "torch.min(netLikelihood.log_prob(observation, simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1) + prior.log_prob(simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1).to(args.device) - netLikelihood.log_prob(observation, simulator.min + (simulator.max - simulator.min) * thetas.to(args.device)).reshape(-1) - prior.log_prob(simulator.min + (simulator.max - simulator.min) * thetas).reshape(-1).to(args.device), torch.Tensor([0.0] * num_chains).to(args.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_191": {},
            "min_194": {
                "input": {
                    "value": "netLikelihood.log_prob(simulator.min + (simulator.max - simulator.min) * thetas_intermediate, observation).reshape(-1) + prior.log_prob(simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1).to(args.device) - netLikelihood.log_prob(simulator.min + (simulator.max - simulator.min) * thetas.to(args.device), observation).reshape(-1) - prior.log_prob(simulator.min + (simulator.max - simulator.min) * thetas).reshape(-1).to(args.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_156": {
                "input": {
                    "value": "netLikelihood.log_prob(observation, simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1) + prior.log_prob(simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1).to(args.device) - netLikelihood.log_prob(observation, simulator.min + (simulator.max - simulator.min) * thetas.to(args.device)).reshape(-1) - prior.log_prob(simulator.min + (simulator.max - simulator.min) * thetas).reshape(-1).to(args.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_167": {
                "input": {
                    "value": "torch.min(netLikelihood.log_prob(inputs=observation, context=simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1) + prior.log_prob(simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1).to(args.device) - netLikelihood.log_prob(inputs=observation, context=simulator.min + (simulator.max - simulator.min) * thetas.to(args.device)).reshape(-1) - prior.log_prob(simulator.min + (simulator.max - simulator.min) * thetas).reshape(-1).to(args.device), torch.Tensor([0.0] * num_chains).to(args.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_205": {},
            "Tensor_165": {},
            "min_168": {
                "input": {
                    "value": "netLikelihood.log_prob(inputs=observation, context=simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1) + prior.log_prob(simulator.min + (simulator.max - simulator.min) * thetas_intermediate).reshape(-1).to(args.device) - netLikelihood.log_prob(inputs=observation, context=simulator.min + (simulator.max - simulator.min) * thetas.to(args.device)).reshape(-1) - prior.log_prob(simulator.min + (simulator.max - simulator.min) * thetas).reshape(-1).to(args.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_179": {}
        }
    },
    "sample/slice.py": {
        "torch": {
            "full_92": {
                "variable": {
                    "value": "self._width",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(self._num_dimensions,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self._initial_width",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_126": {
                "n": {
                    "value": "self._num_dimensions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_167": {
                "input": {
                    "value": "torch.rand(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_168": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_172": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_190": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_198": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_149": {
                "tensors": {
                    "value": "(params[self._site_name].view(-1)[:dim], x.reshape(1), params[self._site_name].view(-1)[dim + 1:])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_149": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/examples/minimal.py": {
        "torch": {
            "ones_9": {
                "variable": {
                    "value": "x_o",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "zeros_10": {
                "variable": {
                    "value": "prior_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "eye_11": {
                "variable": {
                    "value": "prior_cov",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "MultivariateNormal_14": {
                "variable": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "prior_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(num_dim)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_dim)",
                            "Call"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "prior_cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(num_dim)",
                            "Call"
                        ],
                        [
                            "torch.eye(num_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_27": {
                "variable": {
                    "value": "x_o",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "zeros_28": {
                "variable": {
                    "value": "prior_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "eye_29": {
                "variable": {
                    "value": "prior_cov",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "MultivariateNormal_32": {
                "variable": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "prior_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(num_dim)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_dim)",
                            "Call"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "prior_cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(num_dim)",
                            "Call"
                        ],
                        [
                            "torch.eye(num_dim)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "sbi/inference/abc/abc_base.py": {
        "torch": {
            "mean_68": {
                "input": {
                    "value": "(xo - x) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_70": {
                "input": {
                    "value": "xo - x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_72": {
                "input": {
                    "value": "abs(xo - x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/inference/abc/mcabc.py": {
        "torch": {
            "argsort_110": {
                "variable": {
                    "value": "sort_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.distance(self.x_o, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_117": {
                "*size": {
                    "value": "theta_accepted.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/inference/abc/smcabc.py": {
        "torch": {
            "log_146": {
                "variable": {
                    "value": "log_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / num_particles * ones(num_particles)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argsort_241": {
                "variable": {
                    "value": "sortidx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._set_xo_and_sample_initial_population(x_o, num_particles, num_initial_pop)",
                            "Call"
                        ],
                        [
                            "self._sample_next_population(particles=all_particles[pop_idx - 1], log_weights=all_log_weights[pop_idx - 1], distances=all_distances[pop_idx - 1], epsilon=epsilon, use_last_pop_samples=use_last_pop_samples)",
                            "Call"
                        ],
                        [
                            "self.distance(self.x_o, x)",
                            "Call"
                        ],
                        [
                            "torch.unique(distances)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_329": {
                "variable": {
                    "value": "new_particles",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_particles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(new_particles)",
                            "Call"
                        ],
                        [
                            "[particles]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_330": {
                "variable": {
                    "value": "new_log_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_log_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(new_log_weights)",
                            "Call"
                        ],
                        [
                            "new_log_weights - torch.logsumexp(new_log_weights, dim=0)",
                            "BinOp"
                        ],
                        [
                            "[self._calculate_new_log_weights(torch.cat(new_particles), particles, log_weights)]",
                            "List"
                        ],
                        [
                            "[log_weights]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_331": {
                "variable": {
                    "value": "new_distances",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(new_distances)",
                            "Call"
                        ],
                        [
                            "[distances]",
                            "List"
                        ]
                    ]
                }
            },
            "unique_352": {
                "variable": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._set_xo_and_sample_initial_population(x_o, num_particles, num_initial_pop)",
                            "Call"
                        ],
                        [
                            "self._sample_next_population(particles=all_particles[pop_idx - 1], log_weights=all_log_weights[pop_idx - 1], distances=all_distances[pop_idx - 1], epsilon=epsilon, use_last_pop_samples=use_last_pop_samples)",
                            "Call"
                        ],
                        [
                            "self.distance(self.x_o, x)",
                            "Call"
                        ],
                        [
                            "torch.unique(distances)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_385": {
                "variable": {
                    "value": "log_weighted_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[torch.logsumexp(old_log_weights + kernel_log_prob(new_particle), dim=0) for new_particle in new_particles]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Multinomial_402": {
                "variable": {
                    "value": "multi",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "logsumexp_334": {
                "input": {
                    "value": "new_log_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(new_log_weights)",
                            "Call"
                        ],
                        [
                            "new_log_weights - torch.logsumexp(new_log_weights, dim=0)",
                            "BinOp"
                        ],
                        [
                            "[self._calculate_new_log_weights(torch.cat(new_particles), particles, log_weights)]",
                            "List"
                        ],
                        [
                            "[log_weights]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isfinite_428": {
                "variable": {
                    "value": "is_within_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.prior.log_prob(parms_perturbed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_434": {
                "tensors": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "log_521": {
                "variable": {
                    "value": "log_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / num_particles * ones(num_particles)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isfinite_246": {
                "input": {
                    "value": "initial_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distances[sortidx][num_particles - 1]",
                            "Subscript"
                        ],
                        [
                            "100000000.0",
                            "float"
                        ]
                    ]
                }
            },
            "cumsum_354": {
                "input": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._set_xo_and_sample_initial_population(x_o, num_particles, num_initial_pop)",
                            "Call"
                        ],
                        [
                            "self._sample_next_population(particles=all_particles[pop_idx - 1], log_weights=all_log_weights[pop_idx - 1], distances=all_distances[pop_idx - 1], epsilon=epsilon, use_last_pop_samples=use_last_pop_samples)",
                            "Call"
                        ],
                        [
                            "self.distance(self.x_o, x)",
                            "Call"
                        ],
                        [
                            "torch.unique(distances)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_406": {
                "condition": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi.sample(sample_shape=(num_samples,))",
                            "Call"
                        ],
                        [
                            "self.sample_from_population_with_weights(particles, weights, num_samples=num_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_453": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi.sample(sample_shape=(num_samples,))",
                            "Call"
                        ],
                        [
                            "self.sample_from_population_with_weights(particles, weights, num_samples=num_samples)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_453": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultivariateNormal_488": {
                "loc": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "self.kernel_variance",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_146": {
                "*size": {
                    "value": "num_particles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "particles.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_176": {
                "input": {
                    "value": "all_log_weights[pop_idx - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_278": {
                "input": {
                    "value": "log_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(1 / num_particles * ones(num_particles))",
                            "Call"
                        ],
                        [
                            "self._sample_next_population(particles=all_particles[pop_idx - 1], log_weights=all_log_weights[pop_idx - 1], distances=all_distances[pop_idx - 1], epsilon=epsilon, use_last_pop_samples=use_last_pop_samples)",
                            "Call"
                        ],
                        [
                            "self.resample_if_ess_too_small(particles, log_weights, num_particles, ess_min, pop_idx)",
                            "Call"
                        ],
                        [
                            "torch.log(1 / num_particles * ones(num_particles))",
                            "Call"
                        ]
                    ]
                }
            },
            "logsumexp_387": {
                "input": {
                    "value": "old_log_weights + kernel_log_prob(new_particle)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_464": {
                "variable": {
                    "value": "parameter_ranges",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[max(theta_column) - min(theta_column) for theta_column in samples.T]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_513": {
                "input": {
                    "value": "torch.exp(2.0 * log_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_519": {
                "input": {
                    "value": "log_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(1 / num_particles * ones(num_particles))",
                            "Call"
                        ],
                        [
                            "self._sample_next_population(particles=all_particles[pop_idx - 1], log_weights=all_log_weights[pop_idx - 1], distances=all_distances[pop_idx - 1], epsilon=epsilon, use_last_pop_samples=use_last_pop_samples)",
                            "Call"
                        ],
                        [
                            "self.resample_if_ess_too_small(particles, log_weights, num_particles, ess_min, pop_idx)",
                            "Call"
                        ],
                        [
                            "torch.log(1 / num_particles * ones(num_particles))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_357": {
                "condition": {
                    "value": "distances_cdf >= quantile",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "matmul_458": {
                "input": {
                    "value": "mean.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(samples, dim=0).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_477": {
                "data": {
                    "value": "[max(theta_column) - min(theta_column) for theta_column in samples.T]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "exp_513": {
                "input": {
                    "value": "2.0 * log_weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_521": {
                "*size": {
                    "value": "num_particles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "particles.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_456": {
                "input": {
                    "value": "samples.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi.sample(sample_shape=(num_samples,))",
                            "Call"
                        ],
                        [
                            "self.sample_from_population_with_weights(particles, weights, num_samples=num_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_471": {
                "input": {
                    "value": "parameter_ranges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor([max(theta_column) - min(theta_column) for theta_column in samples.T])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_314": {
                "tensors": {
                    "value": "new_particles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(new_particles)",
                            "Call"
                        ],
                        [
                            "[particles]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "sbi/inference/base.py": {
        "torch": {
            "SummaryWriter_314": {
                "log_dir": {
                    "value": "logdir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path(get_log_root(), simulator, method, datetime.now().isoformat().replace(':', '_'))",
                            "Call"
                        ]
                    ]
                }
            },
            "isfinite_381": {
                "input": {
                    "value": "quantity",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "all_381": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "median_403": {
                "variable": {
                    "value": "median_observation_distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(torch.sum((x_bank - x_o.reshape(1, -1)) ** 2, dim=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_404": {
                "input": {
                    "value": "torch.sum((x_bank - x_o.reshape(1, -1)) ** 2, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_404": {
                "input": {
                    "value": "(x_bank - x_o.reshape(1, -1)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/inference/posteriors/base_posterior.py": {
        "torch": {
            "numel_265": {
                "variable": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_314": {
                "variable": {
                    "value": "initial_params",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[init_fn() for _ in range(num_chains)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "from_numpy_378": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "all_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(all_samples).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_769": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ensure_theta_batched(torch.as_tensor(theta))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(theta, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "next(iter(theta.values()))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_216": {
                "data": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ensure_theta_batched(torch.as_tensor(theta))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(theta, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "next(iter(theta.values()))",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_317": {
                "mode": {
                    "value": "track_gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mcmc_method != 'slice' and mcmc_method != 'slice_np'",
                            "BoolOp"
                        ]
                    ]
                }
            }
        }
    },
    "sbi/inference/posteriors/direct_posterior.py": {
        "torch": {
            "no_grad_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_tensor_433": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._prepare_theta_and_x_for_log_prob_(theta, x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(theta, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "next(iter(theta.values()))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isfinite_435": {
                "variable": {
                    "value": "is_within_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.prior.log_prob(theta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isfinite_461": {
                "variable": {
                    "value": "within_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_prob_prior",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.prior.log_prob(theta)",
                            "Call"
                        ]
                    ]
                }
            },
            "isfinite_168": {
                "variable": {
                    "value": "is_prior_finite",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._prior.log_prob(theta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_170": {
                "variable": {
                    "value": "masked_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "is_prior_finite",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.isfinite(self._prior.log_prob(theta))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "unnorm_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net.log_prob(theta, x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.tensor(float('-inf'), dtype=torch.float32).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_463": {
                "condition": {
                    "value": "within_prior",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.isfinite(log_prob_prior)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "log_prob_posterior",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-self.posterior_nn.log_prob(inputs=theta, context=self.x)",
                            "UnaryOp"
                        ]
                    ]
                },
                "y": {
                    "value": "log_prob_prior",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.prior.log_prob(theta)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_164": {
                "mode": {
                    "value": "track_gradients",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_173": {
                "data": {
                    "value": "float('-inf')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_177": {
                "input": {
                    "value": "self.leakage_correction(x=batched_first_of_batch(x))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/inference/posteriors/likelihood_based_posterior.py": {
        "torch": {
            "as_tensor_289": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._prepare_theta_and_x_for_log_prob_(theta, x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(theta, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "next(iter(theta.values()))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_113": {
                "mode": {
                    "value": "track_gradients",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/inference/posteriors/ratio_based_posterior.py": {
        "torch": {
            "as_tensor_333": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._prepare_theta_and_x_for_log_prob_(theta, x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(theta, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "ensure_theta_batched(theta)",
                            "Call"
                        ],
                        [
                            "next(iter(theta.values()))",
                            "Call"
                        ],
                        [
                            "ensure_theta_batched(theta)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_114": {
                "mode": {
                    "value": "track_gradients",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_339": {
                "tensors": {
                    "value": "(theta, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_339": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_367": {
                "tensors": {
                    "value": "(theta, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_367": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_115": {
                "tensors": {
                    "value": "(theta, x.to(device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/inference/snle/snle_base.py": {
        "torch": {
            "randperm_218": {
                "variable": {
                    "value": "permuted_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(theta)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_227": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_230": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.TensorDataset(x, theta)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "min(training_batch_size, num_training_examples)",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "SubsetRandomSampler(train_indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_236": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.TensorDataset(x, theta)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "min(training_batch_size, num_validation_examples)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "SubsetRandomSampler(val_indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_244": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self._posterior.net.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_234": {
                "indices": {
                    "value": "train_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "permuted_indices[:num_training_examples]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SubsetRandomSampler_241": {
                "indices": {
                    "value": "val_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "permuted_indices[num_training_examples:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_260": {
                "input": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._posterior.net.log_prob(theta_batch, context=x_batch)",
                            "Call"
                        ],
                        [
                            "self._posterior.net.log_prob(theta_batch, context=x_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__263": {
                "parameters": {
                    "value": "self._posterior.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip_max_norm",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/inference/snpe/snpe_a.py": {
        "torch": {}
    },
    "sbi/inference/snpe/snpe_b.py": {
        "torch": {
            "exp_91": {
                "input": {
                    "value": "log_prob_prior - log_prob_proposal",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/inference/snpe/snpe_base.py": {
        "torch": {
            "randperm_288": {
                "variable": {
                    "value": "permuted_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_total_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(theta)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_297": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "theta.to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_300": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.TensorDataset(theta.to(device), x.to(device), prior_masks.to(device))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "min(training_batch_size, num_training_examples)",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "SubsetRandomSampler(train_indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_306": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.TensorDataset(theta.to(device), x.to(device), prior_masks.to(device))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "min(training_batch_size, num_validation_examples)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "SubsetRandomSampler(val_indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_314": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self._posterior.net.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_222": {
                "variable": {
                    "value": "acceptance_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "float('nan')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_331": {
                "variable": {
                    "value": "batch_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._loss(theta_batch, x_batch, masks_batch, proposal, calibration_kernel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_156": {
                "*size": {
                    "value": "[len(x)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_304": {
                "indices": {
                    "value": "train_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "permuted_indices[:num_training_examples]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SubsetRandomSampler_311": {
                "indices": {
                    "value": "val_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "permuted_indices[num_training_examples:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__338": {
                "parameters": {
                    "value": "self._posterior.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip_max_norm",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/inference/snpe/snpe_c.py": {
        "torch": {
            "multinomial_351": {
                "variable": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ones(batch_size, batch_size) * (1 - eye(batch_size)) / (batch_size - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "num_atoms - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_356": {
                "variable": {
                    "value": "atomic_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(theta[:, None, :], contrasting_theta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_356": {
                "variable": {
                    "value": "atomic_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_size * num_atoms",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "inverse_536": {
                "variable": {
                    "value": "covariances_pp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "precisions_pp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._precisions_proposal_posterior(precisions_p, precisions_d)",
                            "Call"
                        ],
                        [
                            "precisions_p_rep + precisions_d_rep",
                            "BinOp"
                        ],
                        [
                            "precisions_pp - self._maybe_z_scored_prior.precision_matrix",
                            "BinOp"
                        ]
                    ]
                }
            },
            "logdet_621": {
                "variable": {
                    "value": "logdet_covariances_pp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "covariances_pp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._precisions_proposal_posterior(precisions_p, precisions_d)",
                            "Call"
                        ],
                        [
                            "torch.inverse(precisions_pp)",
                            "Call"
                        ]
                    ]
                }
            },
            "logsumexp_697": {
                "input": {
                    "value": "weights + constant + log_det + exponent",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mv_230": {
                "variable": {
                    "value": "self.prec_m_prod_prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self._maybe_z_scored_prior.precision_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "vec": {
                    "value": "self._maybe_z_scored_prior.loc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logsumexp_691": {
                "input": {
                    "value": "logits_pp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._automatic_posterior_transformation(norm_logits_p, m_p, prec_p, norm_logits_d, m_d, prec_d)",
                            "Call"
                        ],
                        [
                            "self._logits_proposal_posterior(means_pp, precisions_pp, covariances_pp, logits_p, means_p, precisions_p, logits_d, means_d, precisions_d)",
                            "Call"
                        ],
                        [
                            "logit_factors + log_sqrt_det_ratio + exponent",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_692": {
                "input": {
                    "value": "torch.tensor([2 * pi])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_693": {
                "input": {
                    "value": "torch.det(precisions_pp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultivariateNormal_276": {
                "variable": {
                    "value": "self._maybe_z_scored_prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "almost_zero_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self._prior.mean - estim_prior_mean) / estim_prior_std",
                            "BinOp"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "torch.diag(almost_one_std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_280": {
                "variable": {
                    "value": "range_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "almost_one_std * 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logsumexp_374": {
                "input": {
                    "value": "unnormalized_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_prob_posterior - log_prob_prior",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsumexp_425": {
                "input": {
                    "value": "logits_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.get_mixture_components(encoded_x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logsumexp_431": {
                "input": {
                    "value": "logits_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.get_mixture_components(encoded_x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logdet_622": {
                "input": {
                    "value": "precisions_p",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "logdet_623": {
                "input": {
                    "value": "precisions_d",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_692": {
                "data": {
                    "value": "[2 * pi]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "det_693": {
                "input": {
                    "value": "precisions_pp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._precisions_proposal_posterior(precisions_p, precisions_d)",
                            "Call"
                        ],
                        [
                            "precisions_p_rep + precisions_d_rep",
                            "BinOp"
                        ],
                        [
                            "precisions_pp - self._maybe_z_scored_prior.precision_matrix",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_273": {
                "input": {
                    "value": "self._prior.variance",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_349": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "diag_277": {
                "input": {
                    "value": "almost_one_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(self._prior.variance) / estim_prior_std",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_349": {
                "n": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "sbi/inference/snre/snre_a.py": {
        "torch": {
            "sigmoid_144": {
                "variable": {
                    "value": "likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._classifier_logits(theta, x, num_atoms)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_144": {
                "variable": {
                    "value": "likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_155": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BCELoss_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sbi/inference/snre/snre_b.py": {
        "torch": {
            "logsumexp_150": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._classifier_logits(theta, x, num_atoms)",
                            "Call"
                        ],
                        [
                            "logits.reshape(batch_size, num_atoms)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_152": {
                "input": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[:, 0] - torch.logsumexp(logits, dim=-1)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "sbi/inference/snre/snre_base.py": {
        "torch": {
            "randperm_231": {
                "variable": {
                    "value": "permuted_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(theta)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_245": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_248": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.TensorDataset(theta, x)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "clipped_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(training_batch_size, num_validation_examples)",
                            "Call"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "SubsetRandomSampler(train_indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_254": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.TensorDataset(theta, x)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "clipped_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(training_batch_size, num_validation_examples)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "SubsetRandomSampler(val_indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_262": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self._posterior.net.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multinomial_321": {
                "variable": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ones(batch_size, batch_size) * (1 - eye(batch_size)) / (batch_size - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "num_atoms - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_325": {
                "variable": {
                    "value": "atomic_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(theta[:, None, :], contrasting_theta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_325": {
                "variable": {
                    "value": "atomic_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_size * num_atoms",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_329": {
                "variable": {
                    "value": "theta_and_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(atomic_theta, repeated_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_252": {
                "indices": {
                    "value": "train_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "permuted_indices[:num_training_examples]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SubsetRandomSampler_259": {
                "indices": {
                    "value": "val_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "permuted_indices[num_training_examples:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_292": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_319": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clip_grad_norm__282": {
                "parameters": {
                    "value": "self._posterior.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip_max_norm",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eye_319": {
                "n": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "sbi/mcmc/init_strategy.py": {
        "torch": {
            "cat_34": {
                "variable": {
                    "value": "log_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[potential_fn(init_param_candidates[i, :]).detach() for i in range(init_strategy_num_candidates)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "from_numpy_47": {
                "ndarray": {
                    "value": "idxs.astype(int)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/mcmc/slice.py": {
        "torch": {
            "full_92": {
                "variable": {
                    "value": "self._width",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(self._num_dimensions,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self._initial_width",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_126": {
                "n": {
                    "value": "self._num_dimensions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_166": {
                "input": {
                    "value": "torch.rand(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_166": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_169": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_187": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_195": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_148": {
                "tensors": {
                    "value": "(params[self._site_name].view(-1)[:dim], x.reshape(1), params[self._site_name].view(-1)[dim + 1:])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_148": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/neural_nets/classifier.py": {
        "torch": {
            "Linear_99": {
                "variable": {
                    "value": "neural_net",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x_numel + y_numel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "neural_net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "neural_net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(x_numel + y_numel, hidden_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_154": {
                "variable": {
                    "value": "neural_net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_206": {
                "variable": {
                    "value": "neural_net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_21": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.embedding_net_x(t[:, :self.dim_x]), self.embedding_net_y(t[:, self.dim_x:self.dim_x + self.dim_y])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "embedding_net_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "standardizing_net(batch_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "embedding_net_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "standardizing_net(batch_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_141": {
                "in_features": {
                    "value": "x_numel + y_numel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_142": {
                "num_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_144": {
                "in_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_145": {
                "num_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_147": {
                "in_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/neural_nets/flow.py": {
        "torch": {
            "Identity_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "embedding_net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "standardizing_net(batch_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "variable": {
                    "value": "embedding_net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "standardizing_net(batch_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_220": {
                "variable": {
                    "value": "embedding_net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "standardizing_net(batch_y)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/neural_nets/mdn.py": {
        "torch": {
            "Identity_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "embedding_net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "standardizing_net(batch_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "*args": {
                    "value": "nn.Linear(y_numel, hidden_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "y_numel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_net(batch_y[:1]).numel()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_58": {
                "p": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sbi/simulators/linear_gaussian.py": {
        "torch": {
            "cholesky_54": {
                "variable": {
                    "value": "chol_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "likelihood_cov",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MultivariateNormal_95": {
                "variable": {
                    "value": "posterior_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "product_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multiply_gaussian_pdfs(likelihood_mean, likelihood_cov, prior_mean, prior_cov)",
                            "Call"
                        ],
                        [
                            "torch.mv(torch.mm(s2, inv_s1s2), mu1) + torch.mv(torch.mm(s1, inv_s1s2), mu2)",
                            "BinOp"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "product_cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multiply_gaussian_pdfs(likelihood_mean, likelihood_cov, prior_mean, prior_cov)",
                            "Call"
                        ],
                        [
                            "torch.mm(torch.mm(s1, inv_s1s2), s2)",
                            "Call"
                        ]
                    ]
                }
            },
            "MultivariateNormal_139": {
                "variable": {
                    "value": "prior_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "prior_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "prior_cov",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "posterior_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(posterior_samples, relevant_prior_samples)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultivariateNormal_175": {
                "variable": {
                    "value": "posterior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "likelihood_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_o - likelihood_shift",
                            "BinOp"
                        ],
                        [
                            "x_o - likelihood_shift",
                            "BinOp"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "likelihood_cov",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "inverse_207": {
                "variable": {
                    "value": "inv_s1s2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s1 + s2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_215": {
                "input": {
                    "value": "s1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s1",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "inv_s1s2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(s1 + s2)",
                            "Call"
                        ]
                    ]
                }
            },
            "isfinite_185": {
                "variable": {
                    "value": "is_in_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prior.log_prob(candidate_samples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_191": {
                "tensors": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mv_210": {
                "input": {
                    "value": "torch.mm(s1, inv_s1s2)",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "mu2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_like_23": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta[:, :-num_discarded_dims]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mm_56": {
                "input": {
                    "value": "chol_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cholesky(likelihood_cov)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.randn_like(theta).T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_210": {
                "input": {
                    "value": "s2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s2",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "inv_s1s2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(s1 + s2)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_211": {
                "input": {
                    "value": "s1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s1",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "inv_s1s2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(s1 + s2)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_56": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta[:, :-num_discarded_dims]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "sbi/simulators/simutils.py": {
        "torch": {
            "tensor_54": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_58": {
                "variable": {
                    "value": "batches",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "sim_batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "simulation_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Parallel(n_jobs=num_workers)((delayed(simulator)(batch) for batch in tqdm(batches, disable=not show_progress_bars, desc=f'Running {num_sims} simulations in {len(batches)} batches.', total=len(batches))))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/types.py": {
        "torch": {}
    },
    "sbi/user_input/user_input_checks.py": {
        "torch": {
            "as_tensor_449": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "atleast_2d(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_tensor_388": {
                "data": {
                    "value": "simulator(theta.numpy())",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_tensor_393": {
                "data": {
                    "value": "simulator(theta)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/user_input/user_input_checks_utils.py": {
        "torch": {
            "as_tensor_179": {
                "variable": {
                    "value": "self.dims_per_dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[d.sample().numel() for d in self.dists]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_180": {
                "variable": {
                    "value": "self.ndims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.as_tensor(self.dims_per_dist)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_227": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[d.sample(sample_shape) for d in self.dists]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "as_tensor_41": {
                "data": {
                    "value": "self.custom_prior.log_prob(value)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.return_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_46": {
                "data": {
                    "value": "self.custom_prior.sample(sample_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.return_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_56": {
                "variable": {
                    "value": "self.custom_prior.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.as_tensor(self.custom_prior.sample((1000,)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_77": {
                "data": {
                    "value": "self.custom_prior.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.return_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_81": {
                "data": {
                    "value": "self.custom_prior.variance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.return_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_105": {
                "data": {
                    "value": "self.prior_scipy.logpdf(x=value)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.return_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_108": {
                "data": {
                    "value": "self.prior_scipy.rvs(size=sample_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.return_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_142": {
                "data": {
                    "value": "self.prior.log_prob(value)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.return_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_145": {
                "data": {
                    "value": "self.prior.sample(sample_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.return_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_149": {
                "data": {
                    "value": "self.prior.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.return_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_153": {
                "data": {
                    "value": "self.prior.variance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.return_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_254": {
                "tensors": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_254": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_281": {
                "tensors": {
                    "value": "[d.mean for d in self.dists]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_285": {
                "tensors": {
                    "value": "[d.variance for d in self.dists]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "as_tensor_57": {
                "data": {
                    "value": "self.custom_prior.sample((1000,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "std_67": {
                "input": {
                    "value": "torch.as_tensor(self.custom_prior.sample((1000,)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_67": {
                "data": {
                    "value": "self.custom_prior.sample((1000,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_180": {
                "data": {
                    "value": "self.dims_per_dist",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/utils/conditional_density.py": {
        "torch": {
            "linspace_49": {
                "variable": {
                    "value": "theta_grid_dim1",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "float(limits[dim1, 0] + eps_margins1)",
                    "type": "Call",
                    "possible_values": []
                },
                "end": {
                    "value": "float(limits[dim1, 1] - eps_margins1)",
                    "type": "Call",
                    "possible_values": []
                },
                "steps": {
                    "value": "resolution",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_54": {
                "variable": {
                    "value": "theta_grid_dim2",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "float(limits[dim2, 0] + eps_margins2)",
                    "type": "Call",
                    "possible_values": []
                },
                "end": {
                    "value": "float(limits[dim2, 1] - eps_margins2)",
                    "type": "Call",
                    "possible_values": []
                },
                "steps": {
                    "value": "resolution",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_143": {
                "variable": {
                    "value": "average_correlations",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(correlation_matrices)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_147": {
                "variable": {
                    "value": "av_correlation_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(subset), len(subset))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "triu_indices_148": {
                "variable": {
                    "value": "triu_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "row": {
                    "value": "len(subset)",
                    "type": "Call",
                    "possible_values": []
                },
                "col": {
                    "value": "len(subset)",
                    "type": "Call",
                    "possible_values": []
                },
                "offset": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_251": {
                "variable": {
                    "value": "expected_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f(*grids) * probs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "prod_253": {
                "variable": {
                    "value": "limits_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "limits[:, 1] - limits[:, 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "prod_294": {
                "variable": {
                    "value": "limits_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "limits[:, 1] - limits[:, 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "repeat_interleave_68": {
                "variable": {
                    "value": "repeated_condition[:, dim2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_grid_dim2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(float(limits[dim2, 0] + eps_margins2), float(limits[dim2, 1] - eps_margins2), resolution)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "resolution",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_73": {
                "variable": {
                    "value": "log_probs_on_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs_on_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "density.log_prob(repeated_condition)",
                            "Call"
                        ],
                        [
                            "density.log_prob(repeated_condition)",
                            "Call"
                        ],
                        [
                            "torch.reshape(log_probs_on_grid, (resolution, resolution))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(resolution, resolution)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_76": {
                "input": {
                    "value": "log_probs_on_grid - torch.max(log_probs_on_grid)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_272": {
                "variable": {
                    "value": "marginal_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ensure_theta_batched(probs)",
                            "Call"
                        ],
                        [
                            "ensure_theta_batched(probs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_273": {
                "variable": {
                    "value": "marginal_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ensure_theta_batched(probs)",
                            "Call"
                        ],
                        [
                            "ensure_theta_batched(probs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_143": {
                "tensors": {
                    "value": "correlation_matrices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "triu_152": {
                "input": {
                    "value": "av_correlation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((len(subset), len(subset)))",
                            "Call"
                        ],
                        [
                            "torch.triu(av_correlation_matrix) + torch.tril(av_correlation_matrix.T)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tril_152": {
                "input": {
                    "value": "av_correlation_matrix.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_178": {
                "input": {
                    "value": "variance_x * variance_y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_247": {
                "start": {
                    "value": "lim[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "lim[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps": {
                    "value": "prob.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "meshgrid_250": {
                "*tensors": {
                    "value": "x_values_over_which_we_integrate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.linspace(lim[0], lim[1], prob.shape[0]) for (lim, prob) in zip(limits, probs)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "sum_295": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ensure_theta_batched(probs)",
                            "Call"
                        ],
                        [
                            "ensure_theta_batched(probs)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_76": {
                "input": {
                    "value": "log_probs_on_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "density.log_prob(repeated_condition)",
                            "Call"
                        ],
                        [
                            "density.log_prob(repeated_condition)",
                            "Call"
                        ],
                        [
                            "torch.reshape(log_probs_on_grid, (resolution, resolution))",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_123": {
                "tensors": {
                    "value": "[_compute_corrcoeff(eval_conditional_density(density, cond, limits, dim1=dim1, dim2=dim2, resolution=resolution), limits[[dim1, dim2]]) for dim1 in subset for dim2 in subset if dim1 < dim2]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/utils/get_nn_models.py": {
        "torch": {
            "Identity_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sbi/utils/plot.py": {
        "torch": {
            "as_tensor_222": {
                "variable": {
                    "value": "limits",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "limits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[limits[0] for _ in range(dim)]",
                            "ListComp"
                        ],
                        [
                            "limits",
                            "variable"
                        ],
                        [
                            "torch.as_tensor(limits)",
                            "Call"
                        ],
                        [
                            "[opts['limits'][0] for _ in range(dim)]",
                            "ListComp"
                        ],
                        [
                            "opts['limits']",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(limits)",
                            "Call"
                        ],
                        [
                            "limits.cpu().detach()",
                            "Call"
                        ],
                        [
                            "limits",
                            "Method Argument"
                        ],
                        [
                            "limits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_tensor_413": {
                "variable": {
                    "value": "limits",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "limits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[limits[0] for _ in range(dim)]",
                            "ListComp"
                        ],
                        [
                            "limits",
                            "variable"
                        ],
                        [
                            "torch.as_tensor(limits)",
                            "Call"
                        ],
                        [
                            "[opts['limits'][0] for _ in range(dim)]",
                            "ListComp"
                        ],
                        [
                            "opts['limits']",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(limits)",
                            "Call"
                        ],
                        [
                            "limits.cpu().detach()",
                            "Call"
                        ],
                        [
                            "limits",
                            "Method Argument"
                        ],
                        [
                            "limits",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "sbi/utils/pyroutils.py": {
        "torch": {}
    },
    "sbi/utils/sbiutils.py": {
        "torch": {
            "mean_76": {
                "variable": {
                    "value": "t_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_t[is_valid_t]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_77": {
                "variable": {
                    "value": "t_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_t[is_valid_t]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_115": {
                "variable": {
                    "value": "t_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_t[is_valid_t]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_250": {
                "variable": {
                    "value": "x_is_nan",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(batch_size, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_250": {
                "variable": {
                    "value": "x_is_nan",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isinf_251": {
                "variable": {
                    "value": "x_is_inf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(batch_size, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_251": {
                "variable": {
                    "value": "x_is_inf",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_117": {
                "variable": {
                    "value": "t_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_t[is_valid_t]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isfinite_190": {
                "variable": {
                    "value": "are_within_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prior.log_prob(candidates)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_258": {
                "variable": {
                    "value": "is_valid_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_323": {
                "tensors": {
                    "value": "[t for (t, r) in zip(data, data_round_indices) if r >= starting_round_index]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "einsum_358": {
                "equation": {
                    "value": "bci, bci -> bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "einsum_377": {
                "equation": {
                    "value": "bcij,bcj -> bci",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_231": {
                "tensors": {
                    "value": "accepted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "as_tensor_231": {
                "data": {
                    "value": "acceptance_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float('Nan')",
                            "Call"
                        ],
                        [
                            "(num_samples - num_remaining) / num_sampled_total",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "sbi/utils/torchutils.py": {
        "torch": {
            "slogdet_104": {
                "variable": {
                    "value": "(_, res)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x.expand(shape[0], num_reps, *shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.randn(size, size)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_114": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "qr_115": {
                "variable": {
                    "value": "(q, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x.expand(shape[0], num_reps, *shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.randn(size, size)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_139": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_152": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_166": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_167": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multinomial_169": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(features).float()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features // 2 if features % 2 == 0 else features // 2 + 1",
                            "IfExp"
                        ]
                    ]
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_198": {
                "variable": {
                    "value": "max_value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_199": {
                "variable": {
                    "value": "bound",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_66": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x.expand(shape[0], num_reps, *shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.randn(size, size)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "reduce_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(num_batch_dims, x.ndimension()))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_72": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x.expand(shape[0], num_reps, *shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.randn(size, size)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Size(shape) + x.shape[1:]",
                            "BinOp"
                        ],
                        [
                            "torch.Size([-1]) + x.shape[num_dims:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_84": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x.expand(shape[0], num_reps, *shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.randn(size, size)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Size(shape) + x.shape[1:]",
                            "BinOp"
                        ],
                        [
                            "torch.Size([-1]) + x.shape[num_dims:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "logsumexp_213": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.5 * torch.sum(a * b, dim=-1)",
                            "BinOp"
                        ],
                        [
                            "c + d",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_33": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_47": {
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "numel_127": {
                "input": {
                    "value": "parameter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_178": {
                "input": {
                    "value": "inputs[..., None] >= bin_locations",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sign_183": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x.expand(shape[0], num_reps, *shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.randn(size, size)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_183": {
                "input": {
                    "value": "torch.log(torch.abs(x)) / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_207": {
                "n": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_210": {
                "input": {
                    "value": "a * b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_290": {
                "variable": {
                    "value": "arr",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arys[0]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(arr)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_319": {
                "data": {
                    "value": "arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arys[0]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(arr)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_41": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Uniform_239": {
                "low": {
                    "value": "low",
                    "type": "variable",
                    "possible_values": []
                },
                "high": {
                    "value": "high",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_43": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_183": {
                "input": {
                    "value": "torch.abs(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log1p_200": {
                "input": {
                    "value": "-bound",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_200": {
                "input": {
                    "value": "bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([bound])",
                            "Call"
                        ],
                        [
                            "1 - 0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_183": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x.expand(shape[0], num_reps, *shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.randn(size, size)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "simulations/MG1Model.py": {
        "torch": {
            "reshape_12": {
                "variable": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.thetas.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_13": {
                "variable": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.thetas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "thetas.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_16": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "thetas.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_17": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "thetas.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "t_28": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(np.quantile(y_t.cpu().detach().numpy(), 0.25 * np.arange(5), axis=0)).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultivariateNormal_31": {
                "variable": {
                    "value": "distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.t(torch.Tensor(np.quantile(y_t.cpu().detach().numpy(), 0.25 * np.arange(5), axis=0)).to(self.device))",
                            "Call"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "Sigma",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_25": {
                "variable": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_t, obs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_28": {},
            "eye_30": {
                "n": {
                    "value": "mean.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_30": {
                "input": {
                    "value": "mean.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "mean.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Exponential_20": {
                "rate": {
                    "value": "thetas[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_20": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_22": {
                "input": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(1, length).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "simulations/SLCP_16.py": {
        "torch": {
            "reshape_49": {
                "variable": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_50": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_19": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(diag1 ** 2, corr * diag1 * diag2, corr * diag1 * diag2, diag2 ** 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_19": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultivariateNormal_20": {
                "variable": {
                    "value": "distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.thetas[:, :2] ** 2",
                            "BinOp"
                        ],
                        [
                            "context[:, :2] ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "cov + 1e-06 * torch.eye(2).to(device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(diag1 ** 2, corr * diag1 * diag2, corr * diag1 * diag2, diag2 ** 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_37": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultivariateNormal_38": {
                "variable": {
                    "value": "distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.thetas[:, :2] ** 2",
                            "BinOp"
                        ],
                        [
                            "context[:, :2] ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "cov + 1e-06 * torch.eye(2).to(device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "variable": {
                    "value": "ll",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "context.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_14": {
                "variable": {
                    "value": "corr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.thetas[:, 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_14": {
                "variable": {
                    "value": "corr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_18": {
                "variable": {
                    "value": "corr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor([-0.6] * self.thetas.shape[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_18": {
                "variable": {
                    "value": "corr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_32": {
                "variable": {
                    "value": "corr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context[:, 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_32": {
                "variable": {
                    "value": "corr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_36": {
                "variable": {
                    "value": "corr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor([-0.6] * context.shape[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_16": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_17": {},
            "reshape_17": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_36": {},
            "eye_20": {
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_38": {
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_18": {}
        }
    },
    "simulations/SLCP_256.py": {
        "torch": {
            "Tensor_31": {
                "variable": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_31": {
                "variable": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_32": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "eye_12": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.thetas.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MultivariateNormal_13": {
                "variable": {
                    "value": "distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.thetas ** 2",
                            "BinOp"
                        ],
                        [
                            "context ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(self.thetas.shape[1]).to(device)",
                            "Call"
                        ],
                        [
                            "torch.eye(context.shape[1]).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_18": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "context.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MultivariateNormal_19": {
                "variable": {
                    "value": "distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.thetas ** 2",
                            "BinOp"
                        ],
                        [
                            "context ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(self.thetas.shape[1]).to(device)",
                            "Call"
                        ],
                        [
                            "torch.eye(context.shape[1]).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_20": {
                "variable": {
                    "value": "ll",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "context.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "simulations/ShubertModel.py": {
        "torch": {
            "Tensor_44": {
                "variable": {
                    "value": "observation",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_53": {
                "variable": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "variable": {
                    "value": "term1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(5, thetas.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "variable": {
                    "value": "term2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(5, thetas.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MultivariateNormal_70": {
                "variable": {
                    "value": "distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val.reshape(-1, 1).repeat(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "49 * torch.eye(2).repeat(thetas.shape[0], 1).reshape(thetas.shape[0], 2, 2)",
                            "BinOp"
                        ],
                        [
                            "49.0 * torch.eye(xDim).repeat(thetas.shape[0], 1).reshape(thetas.shape[0], xDim, xDim).to(device)",
                            "BinOp"
                        ],
                        [
                            "49.0 * torch.eye(self.xDim).repeat(thetas.shape[0], 1).reshape(thetas.shape[0], self.xDim, self.xDim).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_71": {
                "variable": {
                    "value": "ll",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distribution.log_prob(observation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_95": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_12": {
                "variable": {
                    "value": "term1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(5, self.thetas.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_13": {
                "variable": {
                    "value": "term2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(5, self.thetas.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MultivariateNormal_21": {
                "variable": {
                    "value": "distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.Tensor(thetas)",
                            "Call"
                        ],
                        [
                            "-10.0 + 20.0 * torch.linspace(0, 1, 1000).to(device)",
                            "BinOp"
                        ],
                        [
                            "-10.0 + 20.0 * torch.rand((1000, 2)).to(device)",
                            "BinOp"
                        ],
                        [
                            "val.reshape(-1, 1).repeat(1, xDim)",
                            "Call"
                        ],
                        [
                            "val.reshape(-1, 1).repeat(1, self.xDim)",
                            "Call"
                        ],
                        [
                            "thetas",
                            "Method Argument"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "49 * torch.eye(2).repeat(thetas.shape[0], 1).reshape(thetas.shape[0], 2, 2)",
                            "BinOp"
                        ],
                        [
                            "49.0 * torch.eye(xDim).repeat(thetas.shape[0], 1).reshape(thetas.shape[0], xDim, xDim).to(device)",
                            "BinOp"
                        ],
                        [
                            "49.0 * torch.eye(self.xDim).repeat(thetas.shape[0], 1).reshape(thetas.shape[0], self.xDim, self.xDim).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "term1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(5, context.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_27": {
                "variable": {
                    "value": "term2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(5, context.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MultivariateNormal_35": {
                "variable": {
                    "value": "distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.Tensor(thetas)",
                            "Call"
                        ],
                        [
                            "-10.0 + 20.0 * torch.linspace(0, 1, 1000).to(device)",
                            "BinOp"
                        ],
                        [
                            "-10.0 + 20.0 * torch.rand((1000, 2)).to(device)",
                            "BinOp"
                        ],
                        [
                            "val.reshape(-1, 1).repeat(1, xDim)",
                            "Call"
                        ],
                        [
                            "val.reshape(-1, 1).repeat(1, self.xDim)",
                            "Call"
                        ],
                        [
                            "thetas",
                            "Method Argument"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "49 * torch.eye(2).repeat(thetas.shape[0], 1).reshape(thetas.shape[0], 2, 2)",
                            "BinOp"
                        ],
                        [
                            "49.0 * torch.eye(xDim).repeat(thetas.shape[0], 1).reshape(thetas.shape[0], xDim, xDim).to(device)",
                            "BinOp"
                        ],
                        [
                            "49.0 * torch.eye(self.xDim).repeat(thetas.shape[0], 1).reshape(thetas.shape[0], self.xDim, self.xDim).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_37": {
                "variable": {
                    "value": "ll",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "thetas.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_60": {
                "input": {
                    "value": "term2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((5, thetas.shape[0]))",
                            "Call"
                        ],
                        [
                            "torch.zeros((5, self.thetas.shape[0])).to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros((5, context.shape[0])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_61": {
                "input": {
                    "value": "term1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((5, thetas.shape[0]))",
                            "Call"
                        ],
                        [
                            "torch.zeros((5, self.thetas.shape[0])).to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros((5, context.shape[0])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_63": {
                "input": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(term1, 0) * torch.sum(term2, 0)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(term1, 0) * torch.sum(term2, 0)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(term1, 0) * torch.sum(term2, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_69": {
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_69": {
                "input": {
                    "value": "thetas.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_18": {
                "input": {
                    "value": "term2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((5, thetas.shape[0]))",
                            "Call"
                        ],
                        [
                            "torch.zeros((5, self.thetas.shape[0])).to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros((5, context.shape[0])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_20": {
                "n": {
                    "value": "xDim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "xDim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_20": {
                "input": {
                    "value": "thetas.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "xDim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "xDim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_32": {
                "input": {
                    "value": "term2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((5, thetas.shape[0]))",
                            "Call"
                        ],
                        [
                            "torch.zeros((5, self.thetas.shape[0])).to(device)",
                            "Call"
                        ],
                        [
                            "torch.zeros((5, context.shape[0])).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_34": {
                "n": {
                    "value": "self.xDim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_34": {
                "input": {
                    "value": "thetas.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.xDim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_57": {
                "input": {
                    "value": "(k + 1) * thetas[:, 0] + k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_58": {
                "input": {
                    "value": "(k + 1) * thetas[:, 1] + k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_63": {
                "input": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(term1, 0) * torch.sum(term2, 0)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(term1, 0) * torch.sum(term2, 0)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(term1, 0) * torch.sum(term2, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "linspace_91": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_96": {
                "*size": {
                    "value": "(1000, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cos_15": {
                "input": {
                    "value": "(k + 1) * self.thetas[:, 0] + k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_16": {
                "input": {
                    "value": "(k + 1) * self.thetas[:, 1] + k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_29": {
                "input": {
                    "value": "(k + 1) * context[:, 0] + k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_30": {
                "input": {
                    "value": "(k + 1) * context[:, 1] + k",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "simulations/competitiveLotkaVolterra.py": {
        "torch": {
            "Tensor_142": {
                "variable": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_156": {
                "variable": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_157": {
                "variable": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_164": {
                "variable": {
                    "value": "true_parameter",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_166": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "t_166": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_166": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "numSpecies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "sum_172": {
                "variable": {
                    "value": "observation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "population[:, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_172": {
                "variable": {
                    "value": "observation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "population.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_191": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "t_191": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_191": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "numSpecies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "sum_196": {
                "variable": {
                    "value": "aggregated",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "population[:, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_196": {
                "variable": {
                    "value": "aggregated",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "population.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "variable": {
                    "value": "self.time",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.numTime",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_28": {
                "variable": {
                    "value": "self.population",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(parameters.shape[0], self.numSpecies, self.numTime)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_29": {
                "variable": {
                    "value": "self.reproduction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_42": {
                "variable": {
                    "value": "self.competition",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "parameters.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.numSpecies",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_embed_43": {
                "variable": {
                    "value": "self.competition",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.competition",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_94": {
                "variable": {
                    "value": "self.increment",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.population",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_106": {
                "variable": {
                    "value": "self.sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.population",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultivariateNormal_109": {
                "variable": {
                    "value": "self.distribution",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "self.Sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_115": {
                "variable": {
                    "value": "initial_population",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "t_115": {
                "variable": {
                    "value": "initial_population",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_115": {
                "variable": {
                    "value": "initial_population",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "numSpecies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "sum_126": {
                "variable": {
                    "value": "self.sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.population",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultivariateNormal_130": {
                "variable": {
                    "value": "self.distribution",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "self.Sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_132": {
                "variable": {
                    "value": "ll",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "context.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_169": {
                "*size": {
                    "value": "(true_parameter.shape[0], numSpecies, numTime)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_193": {
                "*size": {
                    "value": "(parameters.shape[0], numSpecies, numTime)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "eye_108": {
                "n": {
                    "value": "self.args.xDim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_108": {
                "input": {
                    "value": "self.population.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.args.xDim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_128": {
                "n": {
                    "value": "self.args.xDim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_128": {
                "input": {
                    "value": "self.population.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.args.xDim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_184": {
                "input": {
                    "value": "population[p, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_206": {
                "input": {
                    "value": "population[p, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_104": {
                "input": {
                    "value": "self.competition[:, species, :] * self.population[:, :, t]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_124": {
                "input": {
                    "value": "self.competition[:, species, :] * self.population[:, :, t]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "simulations/simulators.py": {
        "torch": {
            "Tensor_47": {
                "variable": {
                    "value": "self.max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_49": {
                "variable": {
                    "value": "self.min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_50": {
                "variable": {
                    "value": "self.max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_52": {
                "variable": {
                    "value": "self.min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_53": {
                "variable": {
                    "value": "self.max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_108": {
                "variable": {
                    "value": "initial_population",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "t_108": {
                "variable": {
                    "value": "initial_population",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_108": {
                "variable": {
                    "value": "initial_population",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "numSpecies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "sum_112": {
                "variable": {
                    "value": "aggregated",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "population[:, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "variable": {
                    "value": "aggregated",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "population.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_56": {
                "variable": {
                    "value": "self.min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_57": {
                "variable": {
                    "value": "self.max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_91": {},
            "mean_101": {
                "variable": {
                    "value": "self.observation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.simulator.executeSimulation().to(self.args.device).detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_101": {
                "variable": {
                    "value": "self.observation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_132": {
                "variable": {
                    "value": "self.observation_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "std_133": {
                "variable": {
                    "value": "self.observation_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_59": {
                "variable": {
                    "value": "self.min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_60": {
                "variable": {
                    "value": "self.max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_117": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_62": {
                "variable": {
                    "value": "self.min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_63": {
                "variable": {
                    "value": "self.max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_119": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_65": {
                "variable": {
                    "value": "self.min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_66": {
                "variable": {
                    "value": "self.max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(aggregated[:, idx], torch.Tensor(np.abs(scipy.fft(aggregated.cpu().detach().numpy()))[:, 1:self.args.xDim // 2 + 1]).to(self.args.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(aggregated[:, idx], ss.autoregressiveSummaryStatistics(aggregated.reshape(-1, 1, aggregated.shape[1]), lag=self.args.xDim // 2 - 2, lagStart=0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.Tensor(np.abs(scipy.fft(aggregated.cpu().detach().numpy()))[:, 1:self.args.xDim // 2 + 1]).to(self.args.device), ss.autoregressiveSummaryStatistics(aggregated.reshape(-1, 1, aggregated.shape[1]), lag=self.args.xDim // 2 - 2, lagStart=0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_124": {},
            "Tensor_129": {}
        }
    },
    "simulations/summaryStatistics.py": {
        "torch": {
            "mean_75": {
                "variable": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(data - np.transpose(np.tile(means, (1, data.shape[2])).reshape(data.shape[0], -1, data.shape[1]), (0, 2, 1))) / np.sqrt(np.transpose(np.tile(var, (1, data.shape[2])).reshape(data.shape[0], -1, data.shape[1]), (0, 2, 1)))",
                            "BinOp"
                        ],
                        [
                            "(data - torch.transpose(means.repeat(1, data.shape[2]).reshape(data.shape[0], -1, data.shape[1]), 1, 2)) / torch.sqrt(torch.transpose(var.repeat(1, data.shape[2]).reshape(data.shape[0], -1, data.shape[1]), 1, 2))",
                            "BinOp"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "var_76": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(data - np.transpose(np.tile(means, (1, data.shape[2])).reshape(data.shape[0], -1, data.shape[1]), (0, 2, 1))) / np.sqrt(np.transpose(np.tile(var, (1, data.shape[2])).reshape(data.shape[0], -1, data.shape[1]), (0, 2, 1)))",
                            "BinOp"
                        ],
                        [
                            "(data - torch.transpose(means.repeat(1, data.shape[2]).reshape(data.shape[0], -1, data.shape[1]), 1, 2)) / torch.sqrt(torch.transpose(var.repeat(1, data.shape[2]).reshape(data.shape[0], -1, data.shape[1]), 1, 2))",
                            "BinOp"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(means, torch.log(var + 1.0), autocovariance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_27": {
                "variable": {
                    "value": "sumstats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sumstats, torch.mean(sim_output, axis=1).reshape(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_28": {
                "variable": {
                    "value": "var_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_output[:, :] * sim_output[:, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "autocovariance",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(autocovariance, torch.sum(data[:, :, :-k - lagStart] * data[:, :, k + lagStart:], 2) / (data.shape[2] - 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(res, cross)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_12": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "sumstats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sumstats, autocov(sim_output, lag=k + 1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_78": {
                "input": {
                    "value": "torch.transpose(var.repeat(1, data.shape[2]).reshape(data.shape[0], -1, data.shape[1]), 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_81": {
                "input": {
                    "value": "data[:, :, :-1 - lagStart] * data[:, :, 1 + lagStart:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_16": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(temp, torch.Tensor(np.concatenate((corr, pcorr))).reshape(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_18": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(temp, torch.Tensor(np.concatenate((corr, pcorr))).reshape(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_20": {
                "variable": {
                    "value": "sumstats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sumstats, temp.reshape(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_22": {
                "variable": {
                    "value": "sumstats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sumstats, temp.reshape(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_77": {
                "input": {
                    "value": "means.repeat(1, data.shape[2]).reshape(data.shape[0], -1, data.shape[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_78": {
                "input": {
                    "value": "var.repeat(1, data.shape[2]).reshape(data.shape[0], -1, data.shape[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_85": {
                "input": {
                    "value": "var + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_89": {
                "input": {
                    "value": "data[:, 0, :] * data[:, 1, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_89": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_27": {
                "input": {
                    "value": "sim_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sim_output",
                            "Method Argument"
                        ],
                        [
                            "sim_output",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_27": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_31": {
                "input": {
                    "value": "x[:, lag:] * x[:, :-lag]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_83": {
                "input": {
                    "value": "data[:, :, :-k - lagStart] * data[:, :, k + lagStart:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_16": {},
            "reshape_16": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_18": {},
            "reshape_18": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "train/LikelihoodLearning.py": {
        "torch": {
            "randperm_8": {
                "variable": {
                    "value": "permutation",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "args.simulation_budget_per_round",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_31": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.cat((training_theta, training_x), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randperm_10": {
                "variable": {
                    "value": "permutation",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "thetas.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_21": {
                "variable": {
                    "value": "training_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(training_theta, thetas[permutation[int(args.validationRatio * args.simulation_budget_per_round):]])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_23": {
                "variable": {
                    "value": "training_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(training_x, simulated_output[permutation[int(args.validationRatio * args.simulation_budget_per_round):]])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_25": {
                "variable": {
                    "value": "validation_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(validation_theta, thetas[permutation[:int(args.validationRatio * args.simulation_budget_per_round)]])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_27": {
                "variable": {
                    "value": "validation_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(validation_x, simulated_output[permutation[:int(args.validationRatio * args.simulation_budget_per_round)]])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_32": {
                "tensors": {
                    "value": "(training_theta, training_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train/PosteriorLearning.py": {
        "torch": {
            "randperm_8": {
                "variable": {
                    "value": "permutation",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "args.num_training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_12": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "training_teacher_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "teacher_theta[permutation[int(0.5 * args.num_training):]]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "train/RatioLearning.py": {
        "torch": {
            "randperm_8": {
                "variable": {
                    "value": "permutation",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "args.simulation_budget_per_round",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_31": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.cat((training_theta, training_x), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randperm_10": {
                "variable": {
                    "value": "permutation",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "thetas.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_21": {
                "variable": {
                    "value": "training_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(training_theta, thetas[permutation[int(args.validationRatio * args.simulation_budget_per_round):]])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_23": {
                "variable": {
                    "value": "training_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(training_x, simulated_output[permutation[int(args.validationRatio * args.simulation_budget_per_round):]])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_25": {
                "variable": {
                    "value": "validation_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(validation_theta, thetas[permutation[:int(args.validationRatio * args.simulation_budget_per_round)]])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_27": {
                "variable": {
                    "value": "validation_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(validation_x, simulated_output[permutation[:int(args.validationRatio * args.simulation_budget_per_round)]])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_32": {
                "tensors": {
                    "value": "(training_theta, training_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train/bnaf.py": {
        "torch": {
            "Normal_37": {
                "variable": {
                    "value": "log_p_y_mb",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros_like(y_mb)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.ones_like(y_mb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_37": {
                "variable": {
                    "value": "log_p_y_mb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_167": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ],
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_173": {
                "variable": {
                    "value": "self._weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(out_features, in_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_174": {
                "variable": {
                    "value": "self._diag_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.nn.init.uniform_(torch.Tensor(out_features, 1)).log()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_181": {
                "variable": {
                    "value": "mask_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(out_features, in_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_188": {
                "variable": {
                    "value": "mask_o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(out_features, in_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_63": {
                "variable": {
                    "value": "self.gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.nn.init.normal_(torch.Tensor(1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_196": {
                "variable": {
                    "value": "weight_context",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_202": {
                "variable": {
                    "value": "self._weight_context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(out_features, context_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_202": {
                "variable": {
                    "value": "self._weight_context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_176": {
                "data": {
                    "value": "torch.nn.init.uniform_(torch.Tensor(out_features), -1 / math.sqrt(out_features), 1 / math.sqrt(out_features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_268": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module((inputs, cond_inputs))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softplus_87": {
                "input": {
                    "value": "grad.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_87": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_210": {
                "input": {
                    "value": "self._weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_216": {
                "input": {
                    "value": "w_squared_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(w ** 2).sum(-1, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "logsumexp_239": {
                "input": {
                    "value": "g.unsqueeze(-2) + grad.transpose(-2, -1).unsqueeze(-3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_267": {
                "input": {
                    "value": "-2.0 * inputs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_37": {
                "input": {
                    "value": "y_mb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self(inputs, cond_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_37": {
                "input": {
                    "value": "y_mb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self(inputs, cond_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_90": {
                "input": {
                    "value": "grad.squeeze() + self.gate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_91": {
                "input": {
                    "value": "self.gate",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train/converterNetLikelihoodToNetLikelihoodToEvidenceRatio.py": {
        "torch": {
            "sigmoid_13": {
                "variable": {
                    "value": "dis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.classifier_nn(torch.cat((context, inputs), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_14": {
                "input": {
                    "value": "dis / (1.0 - dis)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_13": {
                "tensors": {
                    "value": "(context, inputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train/flows.py": {
        "torch": {
            "Linear_40": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ],
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ],
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_48": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module(inputs, cond_inputs, mode)",
                            "Call"
                        ],
                        [
                            "module(inputs, cond_inputs, mode)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.linear.weight * self.mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.linear.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.s_trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "act_func()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "self.t_trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "act_func()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_159": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "act_func()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_213": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "act_func()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_339": {
                "variable": {
                    "value": "self.out_to_dsparams",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3 * (num_ds_hidden // num_inputs) * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3 * 1 * num_ds_hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_344": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "act_func()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_404": {
                "variable": {
                    "value": "sigm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_sigm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a * x[:, :, None] + b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_405": {
                "variable": {
                    "value": "x_pre",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w * sigm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_465": {
                "variable": {
                    "value": "self.log_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_466": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_522": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(num_inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_523": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_550": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_inputs, num_inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tril_574": {
                "variable": {
                    "value": "self.L_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(self.W.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_578": {
                "variable": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.linalg.lu(self.W.numpy())",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_579": {
                "variable": {
                    "value": "self.L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(L)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_580": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(U)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_585": {
                "variable": {
                    "value": "self.sign_S",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sign_S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sign(S)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_586": {
                "variable": {
                    "value": "self.log_S",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(log_S)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_588": {
                "variable": {
                    "value": "self.I",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "self.L.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_690": {
                "variable": {
                    "value": "self.scale_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(total_inputs, num_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_694": {
                "variable": {
                    "value": "self.translate_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(total_inputs, num_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.cond_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cond_in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ],
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_117": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module(inputs, cond_inputs, mode)",
                            "Call"
                        ],
                        [
                            "module(inputs, cond_inputs, mode)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_173": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module(inputs, cond_inputs, mode)",
                            "Call"
                        ],
                        [
                            "module(inputs, cond_inputs, mode)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_221": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module(inputs, cond_inputs, mode)",
                            "Call"
                        ],
                        [
                            "module(inputs, cond_inputs, mode)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ELU_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_282": {
                "variable": {
                    "value": "self.out_to_dsparams",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_ds_multiplier * (hid_dim // dim) * num_ds_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3 * num_ds_layers * num_ds_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_352": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module(inputs, cond_inputs, mode)",
                            "Call"
                        ],
                        [
                            "module(inputs, cond_inputs, mode)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_709": {
                "variable": {
                    "value": "masked_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[masked_inputs, cond_inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_714": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scale_net(masked_inputs) * (1 - mask)",
                            "BinOp"
                        ],
                        [
                            "self.scale_net(masked_inputs) * (1 - mask)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_719": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-log_s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_738": {
                "variable": {
                    "value": "logdets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_768": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_20": {
                "start": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ],
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_22": {
                "start": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ],
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_27": {
                "start": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ],
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_111": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.t_trunk(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(a)",
                            "Call"
                        ],
                        [
                            "self.t_trunk(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(a)",
                            "Call"
                        ],
                        [
                            "self.trunk(h).chunk(2, 1)",
                            "Call"
                        ],
                        [
                            "self.trunk(h).chunk(2, 1)",
                            "Call"
                        ],
                        [
                            "self.trunk(h).chunk(2, 1)",
                            "Call"
                        ],
                        [
                            "self.trunk(h).chunk(2, 1)",
                            "Call"
                        ],
                        [
                            "self.trunk(h).chunk(2, 1)",
                            "Call"
                        ],
                        [
                            "self.act_a(dsparams[:, :, 0 * ndim:1 * ndim])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_179": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module(inputs, cond_inputs, mode)",
                            "Call"
                        ],
                        [
                            "module(inputs, cond_inputs, mode)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_247": {
                "ndarray": {
                    "value": "np.zeros(n).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softplus_376": {
                "beta": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(inputs)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(inputs)",
                            "Call"
                        ],
                        [
                            "x * mask + (inputs[:, i_col] * torch.exp(a[:, i_col]) + m[:, i_col]).repeat(inputs.shape[1], 1).transpose(1, 0) * (1 - mask)",
                            "BinOp"
                        ],
                        [
                            "m * (1.0 - torch.exp(a)) + inputs * torch.exp(a)",
                            "BinOp"
                        ],
                        [
                            "inputs.view(inputs.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.sf(x, logdet, params)",
                            "Call"
                        ],
                        [
                            "inputs.view(inputs.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.sf(x, logdet, params)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_378": {
                "dim": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(inputs)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(inputs)",
                            "Call"
                        ],
                        [
                            "x * mask + (inputs[:, i_col] * torch.exp(a[:, i_col]) + m[:, i_col]).repeat(inputs.shape[1], 1).transpose(1, 0) * (1 - mask)",
                            "BinOp"
                        ],
                        [
                            "m * (1.0 - torch.exp(a)) + inputs * torch.exp(a)",
                            "BinOp"
                        ],
                        [
                            "inputs.view(inputs.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.sf(x, logdet, params)",
                            "Call"
                        ],
                        [
                            "inputs.view(inputs.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.sf(x, logdet, params)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_384": {
                "input": {
                    "value": "self.oper(A, summation, axis, True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_406": {
                "input": {
                    "value": "1 - x_pre",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_409": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.t_trunk(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(a)",
                            "Call"
                        ],
                        [
                            "self.t_trunk(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(a)",
                            "Call"
                        ],
                        [
                            "self.trunk(h).chunk(2, 1)",
                            "Call"
                        ],
                        [
                            "self.trunk(h).chunk(2, 1)",
                            "Call"
                        ],
                        [
                            "self.trunk(h).chunk(2, 1)",
                            "Call"
                        ],
                        [
                            "self.trunk(h).chunk(2, 1)",
                            "Call"
                        ],
                        [
                            "self.trunk(h).chunk(2, 1)",
                            "Call"
                        ],
                        [
                            "self.act_a(dsparams[:, :, 0 * ndim:1 * ndim])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_465": {
                "*size": {
                    "value": "num_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_466": {
                "*size": {
                    "value": "num_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_470": {
                "*size": {
                    "value": "num_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_471": {
                "*size": {
                    "value": "num_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_522": {
                "*size": {
                    "value": "num_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_523": {
                "*size": {
                    "value": "num_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tensor_550": {},
            "ones_574": {
                "*size": {
                    "value": "self.W.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_579": {
                "ndarray": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.linalg.lu(self.W.numpy())",
                            "Call"
                        ],
                        [
                            "self.L * self.L_mask + self.I",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_580": {
                "ndarray": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.linalg.lu(self.W.numpy())",
                            "Call"
                        ],
                        [
                            "self.U * self.U_mask + torch.diag(self.sign_S * torch.exp(self.log_S))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_586": {
                "ndarray": {
                    "value": "log_S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.log(abs(S))",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_599": {
                "input": {
                    "value": "self.sign_S * torch.exp(self.log_S)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_691": {
                "in_features": {
                    "value": "total_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_inputs + num_cond_inputs",
                            "BinOp"
                        ],
                        [
                            "num_inputs",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_692": {
                "in_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_693": {
                "in_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_695": {
                "in_features": {
                    "value": "total_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_inputs + num_cond_inputs",
                            "BinOp"
                        ],
                        [
                            "num_inputs",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_696": {
                "in_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_697": {
                "in_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_25": {
                "start": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ],
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_113": {
                "input": {
                    "value": "-a",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_126": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.t_trunk(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(a)",
                            "Call"
                        ],
                        [
                            "self.t_trunk(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(a)",
                            "Call"
                        ],
                        [
                            "self.trunk(h).chunk(2, 1)",
                            "Call"
                        ],
                        [
                            "self.trunk(h).chunk(2, 1)",
                            "Call"
                        ],
                        [
                            "self.trunk(h).chunk(2, 1)",
                            "Call"
                        ],
                        [
                            "self.trunk(h).chunk(2, 1)",
                            "Call"
                        ],
                        [
                            "self.trunk(h).chunk(2, 1)",
                            "Call"
                        ],
                        [
                            "self.act_a(dsparams[:, :, 0 * ndim:1 * ndim])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_250": {
                "ndarray": {
                    "value": "np.ones((n, self.context_dim)).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_383": {
                "input": {
                    "value": "x - A_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softplus_409": {
                "beta": {
                    "value": "pre_sigm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a * x[:, :, None] + b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_412": {
                "input": {
                    "value": "-x_pre + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_424": {
                "input": {
                    "value": "s(inputs) * (1 - s(inputs))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_424": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_427": {
                "input": {
                    "value": "inputs / (1 - inputs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_437": {
                "input": {
                    "value": "inputs / (1 - inputs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_442": {
                "input": {
                    "value": "s(inputs) * (1 - s(inputs))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_442": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_506": {
                "input": {
                    "value": "self.log_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_528": {
                "input": {
                    "value": "1.0 / (inputs.std(0) + 1e-12)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_555": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_625": {
                "*size": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_628": {
                "*size": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_645": {
                "*size": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_648": {
                "*size": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_169": {
                "input": {
                    "value": "-a",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_228": {
                "input": {
                    "value": "a[:, i_col]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_236": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.t_trunk(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(a)",
                            "Call"
                        ],
                        [
                            "self.t_trunk(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(a)",
                            "Call"
                        ],
                        [
                            "self.trunk(h).chunk(2, 1)",
                            "Call"
                        ],
                        [
                            "self.trunk(h).chunk(2, 1)",
                            "Call"
                        ],
                        [
                            "self.trunk(h).chunk(2, 1)",
                            "Call"
                        ],
                        [
                            "self.trunk(h).chunk(2, 1)",
                            "Call"
                        ],
                        [
                            "self.trunk(h).chunk(2, 1)",
                            "Call"
                        ],
                        [
                            "self.act_a(dsparams[:, :, 0 * ndim:1 * ndim])",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_358": {
                "input": {
                    "value": "a[:, i_col]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_softmax_408": {
                "input": {
                    "value": "dsparams[:, :, 2 * ndim:3 * ndim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softplus_408": {
                "beta": {
                    "value": "-pre_sigm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_428": {
                "input": {
                    "value": "inputs - inputs ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_428": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_438": {
                "input": {
                    "value": "inputs - inputs ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_438": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_495": {
                "input": {
                    "value": "self.log_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_534": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inverse_559": {
                "input": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_559": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_600": {
                "input": {
                    "value": "self.log_S",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inverse_607": {
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.P @ L @ U",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_128": {
                "input": {
                    "value": "a[:, i_col]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_537": {
                "input": {
                    "value": "-self.weight",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_496": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_var",
                            "Attribute"
                        ],
                        [
                            "self.running_var",
                            "Attribute"
                        ],
                        [
                            "self.batch_var",
                            "Attribute"
                        ],
                        [
                            "self.running_var",
                            "Attribute"
                        ]
                    ]
                }
            },
            "log_510": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_var",
                            "Attribute"
                        ],
                        [
                            "self.running_var",
                            "Attribute"
                        ],
                        [
                            "self.batch_var",
                            "Attribute"
                        ],
                        [
                            "self.running_var",
                            "Attribute"
                        ]
                    ]
                }
            },
            "isnan_748": {
                "input": {
                    "value": "inputs[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_748": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_751": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module(inputs, cond_inputs, mode)",
                            "Call"
                        ],
                        [
                            "module(inputs, cond_inputs, mode)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_751": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "slogdet_555": {
                "input": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_181": {
                "input": {
                    "value": "a[:, i_col]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "slogdet_559": {
                "input": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train/networks.py": {
        "torch": {
            "Adam_335": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netDiscriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lrLikelihood",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_340": {
                "variable": {
                    "value": "neural_net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nets.MLP(in_shape=(xDim + thetaDim,), out_shape=(1,), hidden_sizes=hidden_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_390": {
                "variable": {
                    "value": "neural_net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_100": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netLikelihood.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lrLikelihood",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "embedding_net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "standardizing_net(batch_theta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_220": {
                "variable": {
                    "value": "embedding_net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "standardizing_net(batch_theta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_252": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ResidualBlock(features=hidden_features, context_features=context_features, activation=activation, dropout_probability=dropout_probability, use_batch_norm=use_batch_norm) for _ in range(num_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_264": {
                "variable": {
                    "value": "self.final_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[hidden_features, hidden_features, hidden_features]",
                            "List"
                        ],
                        [
                            "hidden_features",
                            "Method Argument"
                        ],
                        [
                            "hidden_features",
                            "Method Argument"
                        ],
                        [
                            "hidden_features",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "hidden_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_298": {
                "variable": {
                    "value": "self.linear_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[torch.nn.Linear(features, features) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_301": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_probability",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Identity_349": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_399": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_400": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_419": {
                "variable": {
                    "value": "embedding_net_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "standardizing_net(batch_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_422": {
                "variable": {
                    "value": "embedding_net_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "standardizing_net(batch_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_439": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.embedding_net_x(t[:, :self.dim_x]), self.embedding_net_y(t[:, self.dim_x:self.dim_x + self.dim_y])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_525": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netPosterior.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lrPosterior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_102": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netLikelihood.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lrLikelihood",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_247": {
                "variable": {
                    "value": "self.initial_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features + context_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[hidden_features, hidden_features, hidden_features]",
                            "List"
                        ],
                        [
                            "hidden_features",
                            "Method Argument"
                        ],
                        [
                            "hidden_features",
                            "Method Argument"
                        ],
                        [
                            "hidden_features",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "hidden_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_251": {
                "variable": {
                    "value": "self.initial_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[hidden_features, hidden_features, hidden_features]",
                            "List"
                        ],
                        [
                            "hidden_features",
                            "Method Argument"
                        ],
                        [
                            "hidden_features",
                            "Method Argument"
                        ],
                        [
                            "hidden_features",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "hidden_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_293": {
                "variable": {
                    "value": "self.batch_norm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[torch.nn.BatchNorm1d(features, eps=0.001) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_297": {
                "variable": {
                    "value": "self.context_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "context_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "glu_318": {
                "variable": {
                    "value": "temps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((temps, self.context_layer(context)), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_14": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "args.xDim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Identity_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_270": {
                "tensors": {
                    "value": "(inputs, context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_299": {
                "in_features": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_318": {
                "tensors": {
                    "value": "(temps, self.context_layer(context))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_490": {
                "input": {
                    "value": "torch.abs(simulation.min)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_294": {
                "num_features": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "*size": {
                    "value": "args.thetaDim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_57": {
                "*size": {
                    "value": "args.thetaDim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_490": {
                "input": {
                    "value": "simulation.min",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train/train.py": {
        "torch": {
            "sigmoid_79": {
                "variable": {
                    "value": "likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_classifier_logits(netDiscriminator, theta, x, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_79": {
                "variable": {
                    "value": "likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_91": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multinomial_108": {
                "variable": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(batch_size, batch_size) * (1 - torch.eye(batch_size)) / (batch_size - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "num_atoms - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "atomic_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(theta[:, None, :], contrasting_theta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "variable": {
                    "value": "atomic_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_size * num_atoms",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "theta_and_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(atomic_theta, repeated_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_135": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x.expand(shape[0], num_reps, *shape[1:])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Size([-1]) + x.shape[num_dims:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BCELoss_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_29": {
                "input": {
                    "value": "netLikelihood.log_prob(context=validation_theta, inputs=validation_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-100000000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_106": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_16": {
                "input": {
                    "value": "netLikelihood.log_prob(context=training_theta, inputs=training_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-100000000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_32": {
                "input": {
                    "value": "netLikelihood.condition(validation_theta).log_prob(validation_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-100000000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_106": {
                "n": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_154": {
                "input": {
                    "value": "netPosterior.log_prob(validation_teacher_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-100000000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_156": {
                "input": {
                    "value": "netPosterior.log_probs(validation_teacher_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-100000000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_19": {
                "input": {
                    "value": "netLikelihood.condition(training_theta).log_prob(training_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-100000000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_35": {
                "input": {
                    "value": "netLikelihood.log_probs(context=validation_theta, inputs=validation_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-100000000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_146": {
                "input": {
                    "value": "netPosterior.log_prob(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-100000000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_149": {
                "input": {
                    "value": "netPosterior.log_probs(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-100000000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_22": {
                "input": {
                    "value": "netLikelihood.log_probs(context=training_theta, inputs=training_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-100000000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "trueParameter.py": {
        "torch": {
            "zeros_7": {
                "*size": {
                    "value": "args.thetaDim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_7": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "umnn/lib/dataloader.py": {
        "torch": {
            "DataLoader_120": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.random_split(data, [90000, 10000])",
                            "Call"
                        ],
                        [
                            "torch.utils.data.random_split(data, [50000, 10000])",
                            "Call"
                        ],
                        [
                            "torch.utils.data.random_split(data, [5000, idx.sum() - 5000])",
                            "Call"
                        ],
                        [
                            "torch.utils.data.random_split(data, [50000, 10000])",
                            "Call"
                        ],
                        [
                            "torch.utils.data.random_split(data, [5000, idx.sum() - 5000])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_124": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.random_split(data, [90000, 10000])",
                            "Call"
                        ],
                        [
                            "torch.utils.data.random_split(data, [50000, 10000])",
                            "Call"
                        ],
                        [
                            "torch.utils.data.random_split(data, [5000, idx.sum() - 5000])",
                            "Call"
                        ],
                        [
                            "torch.utils.data.random_split(data, [50000, 10000])",
                            "Call"
                        ],
                        [
                            "torch.utils.data.random_split(data, [5000, idx.sum() - 5000])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_128": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10('./CIFAR10', train=False, download=True, transform=transforms.Compose([AddUniformNoise(0.05), Transpose(), ToTensor()]))",
                            "Call"
                        ],
                        [
                            "datasets.MNIST('./MNIST', train=False, download=True, transform=transforms.Compose([AddUniformNoise(), ToTensor()]))",
                            "Call"
                        ],
                        [
                            "datasets.MNIST('./MNIST', train=False, download=True, transform=transforms.Compose([AddUniformNoise(), ToTensor()]))",
                            "Call"
                        ],
                        [
                            "datasets.MNIST('./MNIST', train=False, download=True, transform=transforms.Compose([Resize(), AddUniformNoise(), ToTensor()]))",
                            "Call"
                        ],
                        [
                            "datasets.MNIST('./MNIST', train=False, download=True, transform=transforms.Compose([Resize(), AddUniformNoise(), ToTensor()]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConcatDataset_22": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[data, data_hflip]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "umnn/lib/transform.py": {
        "torch": {
            "sigmoid_10": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_26": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(samples, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "samples + np.random.uniform(size=samples.shape)",
                            "BinOp"
                        ],
                        [
                            "logit(samples / 256.0, self.alpha)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(samples).float()",
                            "Call"
                        ],
                        [
                            "np.array(samples, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.array(samples, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "umnn/lib/utils.py": {
        "torch": {
            "save_94": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save, 'checkpt-%04d.pth' % epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_106": {
                "variable": {
                    "value": "(m, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_112": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_113": {
                "variable": {
                    "value": "sum_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(value - m)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_110": {
                "input": {
                    "value": "torch.sum(torch.exp(value0), dim=dim, keepdim=keepdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_113": {
                "input": {
                    "value": "value - m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_110": {
                "input": {
                    "value": "torch.exp(value0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_117": {
                "input": {
                    "value": "sum_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.exp(value - m))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_110": {
                "input": {
                    "value": "value0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value - m",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "umnn/lib/visualize_flow.py": {
        "torch": {
            "Tensor_23": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_75": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([xx.reshape(-1, 1), yy.reshape(-1, 1)])",
                            "Call"
                        ],
                        [
                            "np.hstack([xx.reshape(-1, 1), yy.reshape(-1, 1)])",
                            "Call"
                        ],
                        [
                            "np.hstack([xx.reshape(-1, 1), yy.reshape(-1, 1)])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).type(torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_76": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_79": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([xx.reshape(-1, 1), yy.reshape(-1, 1)])",
                            "Call"
                        ],
                        [
                            "torch.Tensor(z)",
                            "Call"
                        ],
                        [
                            "transform(torch.tensor(x).float().to(device))",
                            "Call"
                        ],
                        [
                            "transform(torch.tensor(x).float().to(device))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(z, 0)",
                            "Call"
                        ],
                        [
                            "prior_sample(npts * npts, 2).type(torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "delta_logp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "delta_logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(delta_logp, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_101": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "z.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "zk",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "zk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(zk, 0).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_80": {
                "tensor": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, x.shape[0]).to(torch.int64)",
                            "Call"
                        ],
                        [
                            "torch.arange(0, z.shape[0]).to(torch.int64)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "int(memory ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_102": {
                "tensor": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, x.shape[0]).to(torch.int64)",
                            "Call"
                        ],
                        [
                            "torch.arange(0, z.shape[0]).to(torch.int64)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "int(memory ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([xx.reshape(-1, 1), yy.reshape(-1, 1)])",
                            "Call"
                        ],
                        [
                            "np.hstack([xx.reshape(-1, 1), yy.reshape(-1, 1)])",
                            "Call"
                        ],
                        [
                            "np.hstack([xx.reshape(-1, 1), yy.reshape(-1, 1)])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).type(torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_64": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([xx.reshape(-1, 1), yy.reshape(-1, 1)])",
                            "Call"
                        ],
                        [
                            "np.hstack([xx.reshape(-1, 1), yy.reshape(-1, 1)])",
                            "Call"
                        ],
                        [
                            "np.hstack([xx.reshape(-1, 1), yy.reshape(-1, 1)])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).type(torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "umnn/models/UMNN/MonotonicNN.py": {
        "torch": {
            "Sequential_24": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.net",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.net",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_53": {
                "variable": {
                    "value": "scaling",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out[:, [1]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_9": {
                "tensors": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p.contiguous().view(-1) for p in sequence]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_9": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ELU_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_27": {
                "tensors": {
                    "value": "(x, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(hs, hs[1:])",
                            "Call"
                        ],
                        [
                            "zip(hs, hs[1:])",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(hs, hs[1:])",
                            "Call"
                        ],
                        [
                            "zip(hs, hs[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(hs, hs[1:])",
                            "Call"
                        ],
                        [
                            "zip(hs, hs[1:])",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(hs, hs[1:])",
                            "Call"
                        ],
                        [
                            "zip(hs, hs[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "umnn/models/UMNN/NeuralIntegral.py": {
        "torch": {
            "tensor_22": {
                "variable": {
                    "value": "cc_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lam.T @ W",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "variable": {
                    "value": "steps",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.cos(np.arange(0, nb_steps + 1, 1).reshape(-1, 1) * math.pi / nb_steps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_8": {
                "tensors": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p.contiguous().view(-1) for p in sequence]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_8": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "enable_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_60": {
                "outputs": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "integrand.forward(x, h)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "integrand.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "x_tot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "integrate(x0, nb_steps, (x - x0) / nb_steps, integrand, h, False)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x_tot",
                            "Method Argument"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_61": {
                "outputs": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "integrand.forward(x, h)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "x_tot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "integrate(x0, nb_steps, (x - x0) / nb_steps, integrand, h, False)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x_tot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "umnn/models/UMNN/ParallelNeuralIntegral.py": {
        "torch": {
            "tensor_22": {
                "variable": {
                    "value": "cc_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lam.T @ W",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "variable": {
                    "value": "steps",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.cos(np.arange(0, nb_steps + 1, 1).reshape(-1, 1) * math.pi / nb_steps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_8": {
                "tensors": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p.contiguous().view(-1) for p in sequence]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_8": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "enable_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_70": {
                "outputs": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "integrand.forward(x, h)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "integrand.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "x_tot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_tot * (xT - x0) / 2",
                            "BinOp"
                        ],
                        [
                            "integrate(x0, nb_steps, (x - x0) / nb_steps, integrand, h, False)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x_tot",
                            "Method Argument"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_71": {
                "outputs": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "integrand.forward(x, h)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "x_tot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_tot * (xT - x0) / 2",
                            "BinOp"
                        ],
                        [
                            "integrate(x0, nb_steps, (x - x0) / nb_steps, integrand, h, False)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x_tot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "umnn/models/UMNN/UMNNMAF.py": {
        "torch": {
            "randn_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "W.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_11": {
                "variable": {
                    "value": "self.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "variable": {
                    "value": "self.scaling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(input_size, device=self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_61": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scaling.unsqueeze(0).expand(x.shape[0], -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "variable": {
                    "value": "self.cc_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "lam.T @ W",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "self.steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "np.cos(np.arange(0, nb_steps + 1, 1).reshape(-1, 1) * math.pi / nb_steps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_140": {
                "variable": {
                    "value": "x_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "z.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "z.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_143": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scaling.unsqueeze(0).unsqueeze(1).expand(x.shape[0], x.shape[1], -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_205": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.net",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "eye_206": {
                "variable": {
                    "value": "self.masks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "nnets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nnets",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_215": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_20": {
                "tensors": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p.contiguous().view(-1) for p in sequence]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_20": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_28": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(W.shape[1], 1).to(W.device)",
                            "Call"
                        ],
                        [
                            "W.transpose(0, 1) @ (W @ x_prev)",
                            "BinOp"
                        ],
                        [
                            "x / torch.norm(x)",
                            "BinOp"
                        ],
                        [
                            "z.clone()",
                            "Call"
                        ],
                        [
                            "torch.cat((x, h), 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_30": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(W.shape[1], 1).to(W.device)",
                            "Call"
                        ],
                        [
                            "W.transpose(0, 1) @ (W @ x_prev)",
                            "BinOp"
                        ],
                        [
                            "x / torch.norm(x)",
                            "BinOp"
                        ],
                        [
                            "z.clone()",
                            "Call"
                        ],
                        [
                            "torch.cat((x, h), 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_44": {
                "data": {
                    "value": "math.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "*size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_90": {
                "input": {
                    "value": "jac + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_111": {
                "input": {
                    "value": "jac + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_152": {
                "variable": {
                    "value": "h_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "j in range(self.input_size)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "h.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "z.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_156": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "offset.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_95": {
                "input": {
                    "value": "jac + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_103": {
                "input": {
                    "value": "jac + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_103": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_141": {
                "*size": {
                    "value": "z.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "z.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_169": {
                "variable": {
                    "value": "(_, z_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "z_est[:, :, 0] - z[:, :, j]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_169": {
                "variable": {
                    "value": "(_, z_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_200": {
                "in_features": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(hs, hs[1:])",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(hs, hs[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_102": {
                "input": {
                    "value": "self.pi * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_158": {
                "tensors": {
                    "value": "(x, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log2_119": {
                "input": {
                    "value": "1 - torch.sigmoid(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_137": {
                "*size": {
                    "value": "z.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "nb_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "arange_137": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1 + step / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (nb_step - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_171": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "z.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_119": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(W.shape[1], 1).to(W.device)",
                            "Call"
                        ],
                        [
                            "W.transpose(0, 1) @ (W @ x_prev)",
                            "BinOp"
                        ],
                        [
                            "x / torch.norm(x)",
                            "BinOp"
                        ],
                        [
                            "z.clone()",
                            "Call"
                        ],
                        [
                            "torch.cat((x, h), 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "umnn/models/UMNN/UMNNMAFFlow.py": {
        "torch": {
            "arange_74": {
                "variable": {
                    "value": "inv_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "x.size(1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_87": {
                "variable": {
                    "value": "inv_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "noise.size(1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_98": {
                "variable": {
                    "value": "inv_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "x.size(1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_106": {
                "variable": {
                    "value": "inv_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "x.size(1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_117": {
                "variable": {
                    "value": "inv_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "x.size(1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_129": {
                "variable": {
                    "value": "inv_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "x.size(1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_115": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x / (1.0 - x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "data": {
                    "value": "math.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_92": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noise[:, inv_idx]",
                            "Subscript"
                        ],
                        [
                            "self.nets[net_i].invert(z[:, inv_idx], iter, cond_inputs=cond_inputs)",
                            "Call"
                        ],
                        [
                            "net.forward(x, cond_inputs=cond_inputs)[:, inv_idx]",
                            "Subscript"
                        ],
                        [
                            "z[:, inv_idx]",
                            "Subscript"
                        ],
                        [
                            "x[:, inv_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_134": {
                "input": {
                    "value": "self.pi * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_123": {
                "input": {
                    "value": "self.pi * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log2_142": {
                "input": {
                    "value": "1 - torch.sigmoid(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_142": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.forward(x, cond_inputs=cond_inputs)[:, inv_idx]",
                            "Subscript"
                        ],
                        [
                            "net.forward(x, cond_inputs=cond_inputs)[:, inv_idx]",
                            "Subscript"
                        ],
                        [
                            "net.compute_log_jac_bis(x, cond_inputs=cond_inputs)",
                            "Call"
                        ],
                        [
                            "x[:, inv_idx]",
                            "Subscript"
                        ],
                        [
                            "torch.log(x / (1.0 - x))",
                            "Call"
                        ],
                        [
                            "z",
                            "variable"
                        ],
                        [
                            "net.forward(x, cond_inputs=cond_inputs)[:, inv_idx]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "umnn/models/UMNN/made.py": {
        "torch": {
            "tensor_49": {
                "variable": {
                    "value": "self.pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "math.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.net",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_137": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "z.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_187": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "z.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_218": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "nin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "configs",
                            "variable"
                        ],
                        [
                            "nin",
                            "Method Argument"
                        ],
                        [
                            "nin",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_27": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.mask * self.weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_21": {
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_24": {
                "ndarray": {
                    "value": "mask.astype(np.uint8).T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_125": {
                "input": {
                    "value": "-sigma",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_166": {
                "tensors": {
                    "value": "(cond_inputs, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_172": {
                "tensors": {
                    "value": "(cond_inputs, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_175": {
                "input": {
                    "value": "-sigma",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_117": {
                "input": {
                    "value": "-sigma",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_189": {
                "tensors": {
                    "value": "(cond_inputs, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_225": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(rng.rand(1, D) > 0.5).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_141": {
                "input": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transf[:, self.nin:]",
                            "Subscript"
                        ],
                        [
                            "transf[:, self.nin:]",
                            "Subscript"
                        ],
                        [
                            "transf[:, self.nin + self.i_map[d]]",
                            "Subscript"
                        ],
                        [
                            "transf[:, self.nin:]",
                            "Subscript"
                        ],
                        [
                            "transf[:, self.nin + self.i_map[d]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_191": {
                "input": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transf[:, self.nin:]",
                            "Subscript"
                        ],
                        [
                            "transf[:, self.nin:]",
                            "Subscript"
                        ],
                        [
                            "transf[:, self.nin + self.i_map[d]]",
                            "Subscript"
                        ],
                        [
                            "transf[:, self.nin:]",
                            "Subscript"
                        ],
                        [
                            "transf[:, self.nin + self.i_map[d]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_127": {
                "input": {
                    "value": "self.pi * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_177": {
                "input": {
                    "value": "self.pi * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "umnn/models/UMNN/spectral_normalization.py": {
        "torch": {
            "Normal_12": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "scale": {
                    "value": "4.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_15": {
                "tensors": {
                    "value": "(x1.unsqueeze(1), x2.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_59": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data.new(height).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_60": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data.new(width).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_63": {
                "variable": {
                    "value": "w_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Normal_13": {
                "loc": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "scale": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mv_36": {
                "input": {
                    "value": "torch.t(w.view(height, -1).data)",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "u.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mv_37": {
                "input": {
                    "value": "w.view(height, -1).data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "vec": {
                    "value": "v.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_36": {
                "input": {
                    "value": "w.view(height, -1).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "umnn/models/vae_lib/models/CNFVAE.py": {
        "torch": {
            "zeros_54": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_88": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_89": {
                "variable": {
                    "value": "self.activation_fns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "activation_fns[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_134": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_135": {
                "variable": {
                    "value": "self.activation_fns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "activation_fns[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bmm_142": {
                "variable": {
                    "value": "xu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "u.view(x.shape[0], x.shape[-1], self.rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_143": {
                "variable": {
                    "value": "xuv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(x[:, None], u.view(x.shape[0], x.shape[-1], self.rank))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v.view(x.shape[0], self.rank, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_173": {
                "variable": {
                    "value": "self.activation_fns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "activation_fns[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "ttx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tt, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_241": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_242": {
                "variable": {
                    "value": "self.activation_fns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "activation_fns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_246": {
                "variable": {
                    "value": "ttx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tt, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_318": {
                "variable": {
                    "value": "self.odefuncs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[construct_amortized_odefunc(args, args.z_size, self.amortization_type) for _ in range(args.num_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_355": {
                "variable": {
                    "value": "delta_logp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_381": {
                "modules": {
                    "value": "[nn.Linear(self.h_size, bias_size) for _ in range(args.num_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_391": {
                "modules": {
                    "value": "[nn.Linear(self.h_size, params_size) for _ in range(args.num_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_403": {
                "modules": {
                    "value": "[nn.Linear(self.h_size, weight_size) for _ in range(args.num_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_412": {
                "modules": {
                    "value": "[nn.Linear(self.h_size, weight_size) for _ in range(args.num_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ones_like_178": {
                "input": {
                    "value": "x[:, :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bmm_199": {
                "input": {
                    "value": "ttx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([tt, x], 1)",
                            "Call"
                        ],
                        [
                            "self._pack_inputs(t, x)",
                            "Call"
                        ],
                        [
                            "ttx.view(ttx.size(0), 1, ttx.size(1))",
                            "Call"
                        ],
                        [
                            "torch.cat([tt, x], 1)",
                            "Call"
                        ],
                        [
                            "self._pack_inputs(t, x)",
                            "Call"
                        ],
                        [
                            "ttx.view(ttx.size(0), 1, ttx.size(1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_params.view(weight_params.size(0), in_dim + 1, out_dim)",
                            "Call"
                        ],
                        [
                            "weight_params.view(weight_params.size(0), self.dims[-2] + 1, self.dims[-1])",
                            "Call"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_245": {
                "input": {
                    "value": "x[:, :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bmm_256": {
                "input": {
                    "value": "ttx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([tt, x], 1)",
                            "Call"
                        ],
                        [
                            "self._pack_inputs(t, x)",
                            "Call"
                        ],
                        [
                            "ttx.view(ttx.size(0), 1, ttx.size(1))",
                            "Call"
                        ],
                        [
                            "torch.cat([tt, x], 1)",
                            "Call"
                        ],
                        [
                            "self._pack_inputs(t, x)",
                            "Call"
                        ],
                        [
                            "ttx.view(ttx.size(0), 1, ttx.size(1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_params.view(weight_params.size(0), in_dim + 1, out_dim)",
                            "Call"
                        ],
                        [
                            "weight_params.view(weight_params.size(0), self.dims[-2] + 1, self.dims[-1])",
                            "Call"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_327": {
                "data": {
                    "value": "[0.0, args.time_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_381": {
                "in_features": {
                    "value": "self.h_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bias_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(hidden_dims)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_391": {
                "in_features": {
                    "value": "self.h_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "params_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(sum(in_dims) + sum(out_dims)) * args.rank + sum(out_dims)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_403": {
                "in_features": {
                    "value": "self.h_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "weight_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(weight_dims)",
                            "Call"
                        ],
                        [
                            "concat_layer_num_params(dims[-2], dims[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_412": {
                "in_features": {
                    "value": "self.h_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "weight_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(weight_dims)",
                            "Call"
                        ],
                        [
                            "concat_layer_num_params(dims[-2], dims[-1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "umnn/models/vae_lib/models/VAE.py": {
        "torch": {
            "Linear_189": {
                "variable": {
                    "value": "self.amor_u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows * self.z_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_190": {
                "variable": {
                    "value": "self.amor_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows * self.z_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_191": {
                "variable": {
                    "value": "self.amor_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_267": {
                "variable": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_ortho_vecs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "m": {
                    "value": "self.num_ortho_vecs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "triu_275": {
                "variable": {
                    "value": "triu_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(self.num_ortho_vecs, self.num_ortho_vecs)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_277": {
                "variable": {
                    "value": "diag_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.num_ortho_vecs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_285": {
                "variable": {
                    "value": "self.diag_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_287": {
                "variable": {
                    "value": "self.amor_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows * self.num_ortho_vecs * self.num_ortho_vecs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_289": {
                "variable": {
                    "value": "self.amor_diag1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.q_z_nn_output_dim, self.num_flows * self.num_ortho_vecs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_292": {
                "variable": {
                    "value": "self.amor_diag2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.q_z_nn_output_dim, self.num_flows * self.num_ortho_vecs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_296": {
                "variable": {
                    "value": "self.amor_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows * self.z_size * self.num_ortho_vecs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_297": {
                "variable": {
                    "value": "self.amor_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows * self.num_ortho_vecs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_314": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.view(-1, self.z_size * self.num_ortho_vecs)",
                            "Call"
                        ],
                        [
                            "self.amor_q(h)",
                            "Call"
                        ],
                        [
                            "self.encode(x)",
                            "Call"
                        ],
                        [
                            "q.view(-1, self.z_size)",
                            "Call"
                        ],
                        [
                            "self.amor_q(h)",
                            "Call"
                        ],
                        [
                            "self.encode(x)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "div_315": {
                "variable": {
                    "value": "amat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.view(-1, self.z_size * self.num_ortho_vecs)",
                            "Call"
                        ],
                        [
                            "self.amor_q(h)",
                            "Call"
                        ],
                        [
                            "self.encode(x)",
                            "Call"
                        ],
                        [
                            "q.view(-1, self.z_size)",
                            "Call"
                        ],
                        [
                            "self.amor_q(h)",
                            "Call"
                        ],
                        [
                            "self.encode(x)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(q, p=2, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.norm(q, p=2, dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_431": {
                "variable": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "m": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "triu_439": {
                "variable": {
                    "value": "triu_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(self.z_size, self.z_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_441": {
                "variable": {
                    "value": "diag_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_449": {
                "variable": {
                    "value": "self.diag_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_451": {
                "variable": {
                    "value": "self.amor_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows * self.z_size * self.z_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_453": {
                "variable": {
                    "value": "self.amor_diag1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.q_z_nn_output_dim, self.num_flows * self.z_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_456": {
                "variable": {
                    "value": "self.amor_diag2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.q_z_nn_output_dim, self.num_flows * self.z_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_460": {
                "variable": {
                    "value": "self.amor_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows * self.z_size * self.num_householder",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_462": {
                "variable": {
                    "value": "self.amor_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows * self.z_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_480": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.view(-1, self.z_size * self.num_ortho_vecs)",
                            "Call"
                        ],
                        [
                            "self.amor_q(h)",
                            "Call"
                        ],
                        [
                            "self.encode(x)",
                            "Call"
                        ],
                        [
                            "q.view(-1, self.z_size)",
                            "Call"
                        ],
                        [
                            "self.amor_q(h)",
                            "Call"
                        ],
                        [
                            "self.encode(x)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "div_481": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.view(-1, self.z_size * self.num_ortho_vecs)",
                            "Call"
                        ],
                        [
                            "self.amor_q(h)",
                            "Call"
                        ],
                        [
                            "self.encode(x)",
                            "Call"
                        ],
                        [
                            "q.view(-1, self.z_size)",
                            "Call"
                        ],
                        [
                            "self.amor_q(h)",
                            "Call"
                        ],
                        [
                            "self.encode(x)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(q, p=2, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.norm(q, p=2, dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_484": {
                "variable": {
                    "value": "vvT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "v.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_585": {
                "variable": {
                    "value": "flip_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.z_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "triu_589": {
                "variable": {
                    "value": "triu_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(self.z_size, self.z_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_591": {
                "variable": {
                    "value": "diag_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_599": {
                "variable": {
                    "value": "self.diag_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_601": {
                "variable": {
                    "value": "self.amor_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows * self.z_size * self.z_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_603": {
                "variable": {
                    "value": "self.amor_diag1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.q_z_nn_output_dim, self.num_flows * self.z_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_606": {
                "variable": {
                    "value": "self.amor_diag2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.q_z_nn_output_dim, self.num_flows * self.z_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_610": {
                "variable": {
                    "value": "self.amor_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows * self.z_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_697": {
                "variable": {
                    "value": "self.h_context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.h_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_750": {
                "variable": {
                    "value": "self.h_context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.h_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "q_z_nn",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedConv2d(self.input_size[0], 32, 5, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "q_z_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "q_z_var",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(256, self.z_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "p_x_nn",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedConvTranspose2d(self.z_size, 64, self.last_kernel_size, 1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "p_x_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, self.input_size[0], 1, 1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_323": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "amat.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "amat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(q, norm)",
                            "Call"
                        ],
                        [
                            "amat.resize(dim0, self.z_size, self.num_ortho_vecs)",
                            "Call"
                        ],
                        [
                            "torch.bmm(amat, tmp)",
                            "Call"
                        ],
                        [
                            "amat.view(-1, self.num_flows, self.z_size, self.num_ortho_vecs)",
                            "Call"
                        ],
                        [
                            "amat.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self._eye - 2 * vvT",
                            "BinOp"
                        ],
                        [
                            "amat.view(-1, self.num_householder, self.z_size, self.z_size)",
                            "Call"
                        ],
                        [
                            "tmp.view(-1, self.num_flows, self.z_size, self.z_size)",
                            "Call"
                        ],
                        [
                            "amat.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_326": {
                "variable": {
                    "value": "amat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "amat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(q, norm)",
                            "Call"
                        ],
                        [
                            "amat.resize(dim0, self.z_size, self.num_ortho_vecs)",
                            "Call"
                        ],
                        [
                            "torch.bmm(amat, tmp)",
                            "Call"
                        ],
                        [
                            "amat.view(-1, self.num_flows, self.z_size, self.num_ortho_vecs)",
                            "Call"
                        ],
                        [
                            "amat.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self._eye - 2 * vvT",
                            "BinOp"
                        ],
                        [
                            "amat.view(-1, self.num_householder, self.z_size, self.z_size)",
                            "Call"
                        ],
                        [
                            "tmp.view(-1, self.num_flows, self.z_size, self.z_size)",
                            "Call"
                        ],
                        [
                            "amat.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(amat.transpose(2, 1), amat)",
                            "Call"
                        ],
                        [
                            "self._eye - tmp",
                            "BinOp"
                        ],
                        [
                            "self._eye + 0.5 * tmp",
                            "BinOp"
                        ],
                        [
                            "amat[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.bmm(amat[:, k], tmp)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_330": {
                "variable": {
                    "value": "norms2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(test, p=2, dim=2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_331": {
                "variable": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norms2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.norm(test, p=2, dim=2) ** 2, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_332": {
                "variable": {
                    "value": "max_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(norms2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_493": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "amat[:, k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(amat.transpose(2, 1), amat)",
                            "Call"
                        ],
                        [
                            "self._eye - tmp",
                            "BinOp"
                        ],
                        [
                            "self._eye + 0.5 * tmp",
                            "BinOp"
                        ],
                        [
                            "amat[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.bmm(amat[:, k], tmp)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "q_z_nn",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedConv2d(self.input_size[0], 32, 5, 1, 2, activation=act)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "q_z_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "q_z_var",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(256, self.z_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "p_x_nn",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "GatedConvTranspose2d(self.z_size, 64, self.last_kernel_size, 1, 0, activation=act)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "p_x_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, 256, 5, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_275": {
                "*size": {
                    "value": "self.num_ortho_vecs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_ortho_vecs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_290": {
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows * self.num_ortho_vecs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_293": {
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows * self.num_ortho_vecs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_439": {
                "*size": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_454": {
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows * self.z_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_457": {
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows * self.z_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_589": {
                "*size": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_604": {
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows * self.z_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_607": {
                "in_features": {
                    "value": "self.q_z_nn_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_flows * self.z_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_754": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softplus_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.input_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_329": {
                "input": {
                    "value": "amat.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "amat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(q, norm)",
                            "Call"
                        ],
                        [
                            "amat.resize(dim0, self.z_size, self.num_ortho_vecs)",
                            "Call"
                        ],
                        [
                            "torch.bmm(amat, tmp)",
                            "Call"
                        ],
                        [
                            "amat.view(-1, self.num_flows, self.z_size, self.num_ortho_vecs)",
                            "Call"
                        ],
                        [
                            "amat.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self._eye - 2 * vvT",
                            "BinOp"
                        ],
                        [
                            "amat.view(-1, self.num_householder, self.z_size, self.z_size)",
                            "Call"
                        ],
                        [
                            "tmp.view(-1, self.num_flows, self.z_size, self.z_size)",
                            "Call"
                        ],
                        [
                            "amat.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_78": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softplus_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Hardtanh_78": {
                "min_val": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "max_val": {
                    "value": "7.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_113": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.input_size[0] * num_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_330": {
                "input": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(amat.transpose(2, 1), amat) - self._eye",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "umnn/models/vae_lib/models/flows.py": {
        "torch": {
            "Tanh_28": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_29": {
                "variable": {
                    "value": "self.softplus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_53": {
                "variable": {
                    "value": "uw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_55": {
                "variable": {
                    "value": "w_norm_sq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_65": {
                "variable": {
                    "value": "log_det_jacobian",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(1 + torch.bmm(psi, u_hat))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tanh_82": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "triu_84": {
                "variable": {
                    "value": "triu_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(num_ortho_vecs, num_ortho_vecs)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_84": {
                "variable": {
                    "value": "triu_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_85": {
                "variable": {
                    "value": "diag_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_ortho_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_ortho_vecs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_122": {
                "variable": {
                    "value": "qr2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_ortho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_ortho",
                            "Method Argument"
                        ],
                        [
                            "q_ortho",
                            "Method Argument"
                        ],
                        [
                            "q_ortho",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "r2_hat.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_123": {
                "variable": {
                    "value": "qr1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_ortho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_ortho",
                            "Method Argument"
                        ],
                        [
                            "q_ortho",
                            "Method Argument"
                        ],
                        [
                            "q_ortho",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "r1_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r1",
                            "variable"
                        ]
                    ]
                }
            },
            "Tanh_158": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_160": {
                "variable": {
                    "value": "diag_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "z_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_size",
                            "Method Argument"
                        ],
                        [
                            "z_size",
                            "Method Argument"
                        ],
                        [
                            "z_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_199": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h(r2qzb)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "r1.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_261": {
                "variable": {
                    "value": "flip_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.z_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ParameterList_285": {
                "variable": {
                    "value": "self.param_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.param_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_267": {
                "variable": {
                    "value": "z_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*arch_z",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_272": {
                "variable": {
                    "value": "zh_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*arch_zh",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sigmoid_299": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow[3](h) + self.forget_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_59": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "zk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zk.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "zk.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "zk.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "zk",
                            "Method Argument"
                        ],
                        [
                            "zk",
                            "Method Argument"
                        ],
                        [
                            "zk",
                            "Method Argument"
                        ],
                        [
                            "zk",
                            "Method Argument"
                        ],
                        [
                            "zk",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_65": {
                "input": {
                    "value": "1 + torch.bmm(psi, u_hat)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_125": {
                "input": {
                    "value": "zk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zk.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "zk.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "zk.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "zk",
                            "Method Argument"
                        ],
                        [
                            "zk",
                            "Method Argument"
                        ],
                        [
                            "zk",
                            "Method Argument"
                        ],
                        [
                            "zk",
                            "Method Argument"
                        ],
                        [
                            "zk",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "qr2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q_ortho, r2_hat.transpose(2, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_126": {
                "input": {
                    "value": "self.h(r2qzb)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "qr1.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_198": {
                "input": {
                    "value": "z_per",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zk[:, :, permute_z]",
                            "Subscript"
                        ],
                        [
                            "zk",
                            "variable"
                        ]
                    ]
                },
                "mat2": {
                    "value": "r2.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_278": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_301": {
                "input": {
                    "value": "gate.log().view(gate.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_65": {
                "input": {
                    "value": "psi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w * self.der_h(wzb)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u + (m_uw - uw) * w.transpose(2, 1) / w_norm_sq",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_84": {
                "*size": {
                    "value": "num_ortho_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_ortho_vecs",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_ortho_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_ortho_vecs",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "umnn/models/vae_lib/models/layers.py": {
        "torch": {
            "Sigmoid_23": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sigmoid_48": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_50": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_53": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_82": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_87": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.build_mask()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_152": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features, in_features, *self.size_kernel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_157": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.build_mask()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_196": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.mask * self.weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_84": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_154": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "umnn/models/vae_lib/optimization/loss.py": {
        "torch": {
            "BCELoss_24": {
                "variable": {
                    "value": "reconstruction_function",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_36": {
                "variable": {
                    "value": "summed_logs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_q_z0 - log_p_zk",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_39": {
                "variable": {
                    "value": "summed_ldj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ldj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ldj.view(ldj.size(0), -1).sum(-1)",
                            "Call"
                        ],
                        [
                            "ldj",
                            "Method Argument"
                        ],
                        [
                            "ldj",
                            "Method Argument"
                        ],
                        [
                            "ldj",
                            "Method Argument"
                        ],
                        [
                            "ldj",
                            "Method Argument"
                        ],
                        [
                            "ldj",
                            "Method Argument"
                        ],
                        [
                            "ldj",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_84": {
                "variable": {
                    "value": "summed_logs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_q_z0 - log_p_zk",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_87": {
                "variable": {
                    "value": "summed_ldj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ldj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ldj.view(ldj.size(0), -1).sum(-1)",
                            "Call"
                        ],
                        [
                            "ldj",
                            "Method Argument"
                        ],
                        [
                            "ldj",
                            "Method Argument"
                        ],
                        [
                            "ldj",
                            "Method Argument"
                        ],
                        [
                            "ldj",
                            "Method Argument"
                        ],
                        [
                            "ldj",
                            "Method Argument"
                        ],
                        [
                            "ldj",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_185": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.contiguous().view(n, c, 1, -1)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_212": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.contiguous().view(n, c, 1, -1)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x * (num_classes - 1)).long()",
                            "Call"
                        ],
                        [
                            "(x * (num_classes - 1)).long()",
                            "Call"
                        ],
                        [
                            "target.contiguous().view(n, 1, -1)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "size_average",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-100",
                            "Method Argument"
                        ],
                        [
                            "-100",
                            "Method Argument"
                        ]
                    ]
                },
                "reduce": {
                    "value": "reduce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "nll_loss_216": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.contiguous().view(n, c, 1, -1)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x * (num_classes - 1)).long()",
                            "Call"
                        ],
                        [
                            "(x * (num_classes - 1)).long()",
                            "Call"
                        ],
                        [
                            "target.contiguous().view(n, 1, -1)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "size_average",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-100",
                            "Method Argument"
                        ],
                        [
                            "-100",
                            "Method Argument"
                        ]
                    ]
                },
                "reduce": {
                    "value": "reduce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "nll_loss_230": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.contiguous().view(n, c, 1, -1)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x * (num_classes - 1)).long()",
                            "Call"
                        ],
                        [
                            "(x * (num_classes - 1)).long()",
                            "Call"
                        ],
                        [
                            "target.contiguous().view(n, 1, -1)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "size_average",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-100",
                            "Method Argument"
                        ],
                        [
                            "-100",
                            "Method Argument"
                        ]
                    ]
                },
                "reduce": {
                    "value": "reduce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "umnn/models/vae_lib/optimization/training.py": {
        "torch": {
            "bernoulli_29": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.cuda()",
                            "Call"
                        ],
                        [
                            "torch.bernoulli(data)",
                            "Call"
                        ],
                        [
                            "data.view(-1, *args.input_size)",
                            "Call"
                        ],
                        [
                            "data_loader",
                            "variable"
                        ],
                        [
                            "data.cuda()",
                            "Call"
                        ],
                        [
                            "data.view(-1, *args.input_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "umnn/models/vae_lib/utils/distributions.py": {
        "torch": {
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_57": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean",
                            "Method Argument"
                        ],
                        [
                            "mean",
                            "Method Argument"
                        ],
                        [
                            "mean",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "MIN_EPSILON",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "float"
                        ]
                    ]
                },
                "max": {
                    "value": "MAX_EPSILON",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - 1e-05",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reciprocal_31": {
                "input": {
                    "value": "2.0 * log_var.exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_33": {
                "input": {
                    "value": "2.0 * PI",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_22": {
                "input": {
                    "value": "log_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.5 * (log_var + (x - mean) * (x - mean) * log_var.exp().reciprocal())",
                            "BinOp"
                        ],
                        [
                            "-(x - mean) * (x - mean)",
                            "BinOp"
                        ],
                        [
                            "log_norm + -0.5 * torch.log(2.0 * PI)",
                            "BinOp"
                        ],
                        [
                            "-0.5 * x * x",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_24": {
                "input": {
                    "value": "log_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.5 * (log_var + (x - mean) * (x - mean) * log_var.exp().reciprocal())",
                            "BinOp"
                        ],
                        [
                            "-(x - mean) * (x - mean)",
                            "BinOp"
                        ],
                        [
                            "log_norm + -0.5 * torch.log(2.0 * PI)",
                            "BinOp"
                        ],
                        [
                            "-0.5 * x * x",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_37": {
                "input": {
                    "value": "log_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.5 * (log_var + (x - mean) * (x - mean) * log_var.exp().reciprocal())",
                            "BinOp"
                        ],
                        [
                            "-(x - mean) * (x - mean)",
                            "BinOp"
                        ],
                        [
                            "log_norm + -0.5 * torch.log(2.0 * PI)",
                            "BinOp"
                        ],
                        [
                            "-0.5 * x * x",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_39": {
                "input": {
                    "value": "log_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.5 * (log_var + (x - mean) * (x - mean) * log_var.exp().reciprocal())",
                            "BinOp"
                        ],
                        [
                            "-(x - mean) * (x - mean)",
                            "BinOp"
                        ],
                        [
                            "log_norm + -0.5 * torch.log(2.0 * PI)",
                            "BinOp"
                        ],
                        [
                            "-0.5 * x * x",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_49": {
                "input": {
                    "value": "log_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.5 * (log_var + (x - mean) * (x - mean) * log_var.exp().reciprocal())",
                            "BinOp"
                        ],
                        [
                            "-(x - mean) * (x - mean)",
                            "BinOp"
                        ],
                        [
                            "log_norm + -0.5 * torch.log(2.0 * PI)",
                            "BinOp"
                        ],
                        [
                            "-0.5 * x * x",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_51": {
                "input": {
                    "value": "log_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.5 * (log_var + (x - mean) * (x - mean) * log_var.exp().reciprocal())",
                            "BinOp"
                        ],
                        [
                            "-(x - mean) * (x - mean)",
                            "BinOp"
                        ],
                        [
                            "log_norm + -0.5 * torch.log(2.0 * PI)",
                            "BinOp"
                        ],
                        [
                            "-0.5 * x * x",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_58": {
                "input": {
                    "value": "1.0 - probs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_61": {
                "input": {
                    "value": "log_bern",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * torch.log(probs) + (1.0 - x) * torch.log(1.0 - probs)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_63": {
                "input": {
                    "value": "log_bern",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * torch.log(probs) + (1.0 - x) * torch.log(1.0 - probs)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "umnn/models/vae_lib/utils/load_data.py": {
        "torch": {
            "TensorDataset_45": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_46": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_48": {
                "variable": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_val).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_49": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_51": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_test).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_52": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_92": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_train).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_93": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_95": {
                "variable": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_val).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_96": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_98": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_test).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_99": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_143": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_144": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_146": {
                "variable": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_val).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_147": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_149": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_test).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_150": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_179": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_180": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train).float(), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_train), torch.from_numpy(y_train))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_182": {
                "variable": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_val).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_183": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_val).float(), torch.from_numpy(y_val))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_185": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(x_test).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_186": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "data_utils.TensorDataset(torch.from_numpy(x_test).float(), torch.from_numpy(y_test))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "ndarray": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "caltech_raw['train_labels']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_48": {
                "ndarray": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "caltech_raw['val_labels']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_51": {
                "ndarray": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "caltech_raw['test_labels']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_92": {
                "ndarray": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "caltech_raw['train_labels']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_95": {
                "ndarray": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "caltech_raw['val_labels']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_98": {
                "ndarray": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "caltech_raw['test_labels']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_143": {
                "ndarray": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "caltech_raw['train_labels']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_146": {
                "ndarray": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "caltech_raw['val_labels']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_149": {
                "ndarray": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "caltech_raw['test_labels']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_179": {
                "ndarray": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_train.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "caltech_raw['train_labels']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_182": {
                "ndarray": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_val.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "caltech_raw['val_labels']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_185": {
                "ndarray": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_test.shape[0], 1))",
                            "Call"
                        ],
                        [
                            "caltech_raw['test_labels']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    }
}