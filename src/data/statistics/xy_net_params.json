{
    "run_utils/callbacks/base.py": {
        "sklearn": {},
        "torch": {
            "save_97": {
                "obj": {
                    "value": "net_checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "'%s/%s_epoch=%d.tar' % (state.log_dir, net_name, state.curr_epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_150": {
                "obj": {
                    "value": "net_checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "'%s/%s_best=[%s].tar' % (state.log_dir, net_name, self.metric_name)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "convert_chkpt_tf2pytorch.py": {
        "torch": {
            "from_numpy_30": {
                "variable": {
                    "value": "pt[upsample2x.unpool_mat]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ones((2, 2), dtype='float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_28": {
                "variable": {
                    "value": "pt[pt_k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tf_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.transpose(tf_v, [3, 2, 0, 1])",
                            "Call"
                        ],
                        [
                            "np.transpose(tf_v, [3, 2, 0, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "save_32": {
                "obj": {
                    "value": "pt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{'desc': pt}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "pt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "dataloader/infer_loader.py": {
        "torch": {}
    },
    "dataloader/train_loader.py": {
        "torch": {}
    },
    "infer/base.py": {
        "torch": {
            "DataParallel_69": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_creator(**self.method['model_args'])",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "net.to('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_65": {
                "f": {
                    "value": "self.method['model_path']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "infer/tile.py": {
        "torch": {
            "DataLoader_289": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SerializeFileList(cache_image_list, cache_patch_info_list, self.patch_input_shape)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.nr_inference_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "infer/wsi.py": {
        "torch": {
            "DataLoader_269": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SerializeArray('%s/cache_chunk.npy' % self.cache_path, patch_top_left_list, self.patch_input_shape)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.nr_inference_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/hovernet/net_desc.py": {
        "torch": {
            "Sequential_35": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict(module_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "self.conv_bot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "u3",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict(module_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "u2",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict(module_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "u1",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict(module_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "u0",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict(module_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('u3', u3), ('u2', u2), ('u1', u1), ('u0', u0)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleDict_78": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "OrderedDict([('np', create_decoder_branch(ksize=ksize, out_ch=2)), ('hv', create_decoder_branch(ksize=ksize, out_ch=2))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleDict_87": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "OrderedDict([('tp', create_decoder_branch(ksize=ksize, out_ch=nr_types)), ('np', create_decoder_branch(ksize=ksize, out_ch=2)), ('hv', create_decoder_branch(ksize=ksize, out_ch=2))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "input_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_108": {
                "mode": {
                    "value": "not self.freeze",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5 if mode == 'original' else 3",
                            "IfExp"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5 if mode == 'original' else 3",
                            "IfExp"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5 if mode == 'original' else 3",
                            "IfExp"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/hovernet/net_utils.py": {
        "torch": {
            "pad_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, padding, 'constant', 0)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pad_val, pad_val, pad_val, pad_val)",
                            "Tuple"
                        ],
                        [
                            "(pad_val_start, pad_val_end, pad_val_start, pad_val_end)",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_92": {
                "variable": {
                    "value": "self.units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "self.blk_bna",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('bn', nn.BatchNorm2d(unit_in_ch, eps=1e-05)), ('relu', nn.ReLU(inplace=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_174": {
                "variable": {
                    "value": "self.units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_234": {
                "variable": {
                    "value": "self.blk_bna",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('bn', nn.BatchNorm2d(unit_in_ch, eps=1e-05)), ('relu', nn.ReLU(inplace=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensordot_291": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, padding, 'constant', 0)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.unpool_mat.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "prev_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_feat, new_feat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_230": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "unit_ch[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_280": {
                "ndarray": {
                    "value": "np.ones((2, 2), dtype='float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "*args": {
                    "value": "OrderedDict([('preact_bna/bn', nn.BatchNorm2d(unit_in_ch, eps=1e-05)), ('preact_bna/relu', nn.ReLU(inplace=True)), ('conv1', nn.Conv2d(unit_in_ch, unit_ch[0], unit_ksize[0], stride=1, padding=0, bias=False)), ('conv1/bn', nn.BatchNorm2d(unit_ch[0], eps=1e-05)), ('conv1/relu', nn.ReLU(inplace=True)), ('conv2', nn.Conv2d(unit_ch[0], unit_ch[1], unit_ksize[1], groups=split, stride=1, padding=0, bias=False))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_226": {
                "*args": {
                    "value": "OrderedDict(unit_layer)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_177": {
                "num_features": {
                    "value": "unit_in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Name"
                        ],
                        [
                            "unit_in_ch + unit_ch[1]",
                            "BinOp"
                        ],
                        [
                            "in_ch",
                            "Name"
                        ],
                        [
                            "unit_ch[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_178": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_181": {
                "in_channels": {
                    "value": "unit_in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Name"
                        ],
                        [
                            "unit_in_ch + unit_ch[1]",
                            "BinOp"
                        ],
                        [
                            "in_ch",
                            "Name"
                        ],
                        [
                            "unit_ch[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "unit_ch[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "unit_ksize[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_190": {
                "num_features": {
                    "value": "unit_ch[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_191": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_200": {
                "in_channels": {
                    "value": "unit_ch[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "unit_ch[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "unit_ksize[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride if idx == 0 else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_209": {
                "num_features": {
                    "value": "unit_ch[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_210": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_213": {
                "in_channels": {
                    "value": "unit_ch[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "unit_ch[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "unit_ksize[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_259": {
                "mode": {
                    "value": "not freeze",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_135": {
                "num_features": {
                    "value": "unit_in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Name"
                        ],
                        [
                            "unit_in_ch + unit_ch[1]",
                            "BinOp"
                        ],
                        [
                            "in_ch",
                            "Name"
                        ],
                        [
                            "unit_ch[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_136": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_237": {
                "num_features": {
                    "value": "unit_in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Name"
                        ],
                        [
                            "unit_in_ch + unit_ch[1]",
                            "BinOp"
                        ],
                        [
                            "in_ch",
                            "Name"
                        ],
                        [
                            "unit_ch[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_238": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_98": {
                "num_features": {
                    "value": "unit_in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Name"
                        ],
                        [
                            "unit_in_ch + unit_ch[1]",
                            "BinOp"
                        ],
                        [
                            "in_ch",
                            "Name"
                        ],
                        [
                            "unit_ch[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "in_channels": {
                    "value": "unit_in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Name"
                        ],
                        [
                            "unit_in_ch + unit_ch[1]",
                            "BinOp"
                        ],
                        [
                            "in_ch",
                            "Name"
                        ],
                        [
                            "unit_ch[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "unit_ch[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "unit_ksize[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_111": {
                "num_features": {
                    "value": "unit_ch[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_112": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "in_channels": {
                    "value": "unit_ch[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "unit_ch[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "unit_ksize[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "groups": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/hovernet/opt.py": {
        "torch": {
            "StepLR_45": {
                "optimizer": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "step_size": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                }
            },
            "StepLR_79": {
                "optimizer": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "step_size": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/hovernet/run_desc.py": {
        "torch": {
            "one_hot_41": {
                "variable": {
                    "value": "true_np_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_data['np_map']",
                            "Subscript"
                        ],
                        [
                            "true_np.to('cuda').type(torch.int64)",
                            "Call"
                        ],
                        [
                            "batch_data['np_map']",
                            "Subscript"
                        ],
                        [
                            "torch.squeeze(true_np).type(torch.int64)",
                            "Call"
                        ],
                        [
                            "raw_data['true_np']",
                            "Subscript"
                        ],
                        [
                            "np.array([true_np[idx] for idx in selected_idx])",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_62": {
                "variable": {
                    "value": "pred_dict[np]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_dict['np']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randint_88": {
                "variable": {
                    "value": "sample_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "true_np.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "squeeze_128": {
                "variable": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_data['np_map']",
                            "Subscript"
                        ],
                        [
                            "true_np.to('cuda').type(torch.int64)",
                            "Call"
                        ],
                        [
                            "batch_data['np_map']",
                            "Subscript"
                        ],
                        [
                            "torch.squeeze(true_np).type(torch.int64)",
                            "Call"
                        ],
                        [
                            "raw_data['true_np']",
                            "Subscript"
                        ],
                        [
                            "np.array([true_np[idx] for idx in selected_idx])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_129": {
                "variable": {
                    "value": "true_hv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_hv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_data['hv_map']",
                            "Subscript"
                        ],
                        [
                            "true_hv.to('cuda').type(torch.float32)",
                            "Call"
                        ],
                        [
                            "batch_data['hv_map']",
                            "Subscript"
                        ],
                        [
                            "torch.squeeze(true_hv).type(torch.float32)",
                            "Call"
                        ],
                        [
                            "raw_data['true_hv']",
                            "Subscript"
                        ],
                        [
                            "np.array([true_hv[idx] for idx in selected_idx])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_49": {
                "variable": {
                    "value": "true_tp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_tp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_data['tp_map']",
                            "Subscript"
                        ],
                        [
                            "torch.squeeze(true_tp).to('cuda').type(torch.int64)",
                            "Call"
                        ],
                        [
                            "batch_data['tp_map']",
                            "Subscript"
                        ],
                        [
                            "torch.squeeze(true_tp).type(torch.int64)",
                            "Call"
                        ],
                        [
                            "raw_data['true_tp']",
                            "Subscript"
                        ],
                        [
                            "np.array([true_tp[idx] for idx in selected_idx])",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_50": {
                "variable": {
                    "value": "true_tp_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "true_tp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_data['tp_map']",
                            "Subscript"
                        ],
                        [
                            "torch.squeeze(true_tp).to('cuda').type(torch.int64)",
                            "Call"
                        ],
                        [
                            "batch_data['tp_map']",
                            "Subscript"
                        ],
                        [
                            "torch.squeeze(true_tp).type(torch.int64)",
                            "Call"
                        ],
                        [
                            "raw_data['true_tp']",
                            "Subscript"
                        ],
                        [
                            "np.array([true_tp[idx] for idx in selected_idx])",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "model.module.nr_types",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_64": {
                "variable": {
                    "value": "pred_dict[tp]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_dict['tp']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_138": {
                "variable": {
                    "value": "true_tp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_tp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_data['tp_map']",
                            "Subscript"
                        ],
                        [
                            "torch.squeeze(true_tp).to('cuda').type(torch.int64)",
                            "Call"
                        ],
                        [
                            "batch_data['tp_map']",
                            "Subscript"
                        ],
                        [
                            "torch.squeeze(true_tp).type(torch.int64)",
                            "Call"
                        ],
                        [
                            "raw_data['true_tp']",
                            "Subscript"
                        ],
                        [
                            "np.array([true_tp[idx] for idx in selected_idx])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_194": {
                "variable": {
                    "value": "pred_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(pred_dict.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_149": {
                "variable": {
                    "value": "type_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_dict['tp']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_150": {
                "variable": {
                    "value": "type_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "type_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(pred_dict['tp'], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.argmax(type_map, dim=-1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "type_map.type(torch.float32)",
                            "Call"
                        ],
                        [
                            "F.softmax(pred_dict['tp'], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.argmax(type_map, dim=-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "type_map.type(torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_190": {
                "variable": {
                    "value": "type_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_dict['tp']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_191": {
                "variable": {
                    "value": "type_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "type_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(pred_dict['tp'], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.argmax(type_map, dim=-1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "type_map.type(torch.float32)",
                            "Call"
                        ],
                        [
                            "F.softmax(pred_dict['tp'], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.argmax(type_map, dim=-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "type_map.type(torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_147": {
                "input": {
                    "value": "pred_dict['np']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_188": {
                "input": {
                    "value": "pred_dict['np']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/hovernet/targets.py": {
        "torch": {}
    },
    "models/hovernet/utils.py": {
        "torch": {
            "clamp_69": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred / torch.sum(pred, -1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(pred, epsilon, 1.0 - epsilon)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-07",
                            "Constant"
                        ]
                    ]
                },
                "max": {
                    "value": "1.0 - epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_78": {
                "variable": {
                    "value": "inse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred * true",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "(0, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_79": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred / torch.sum(pred, -1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(pred, epsilon, 1.0 - epsilon)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "(0, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_80": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "(0, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_82": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.sum(true * torch.log(pred), -1, keepdim=True)",
                            "UnaryOp"
                        ],
                        [
                            "loss.mean() if reduction == 'mean' else loss.sum()",
                            "IfExp"
                        ],
                        [
                            "1.0 - (2.0 * inse + smooth) / (l + r + smooth)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss)",
                            "Call"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "(loss * loss).mean()",
                            "Call"
                        ],
                        [
                            "pred_grad - true_grad",
                            "BinOp"
                        ],
                        [
                            "focus * (loss * loss)",
                            "BinOp"
                        ],
                        [
                            "loss.sum() / (focus.sum() + 1e-08)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_165": {
                "variable": {
                    "value": "focus",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[focus, focus]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_128": {
                "variable": {
                    "value": "h_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-size // 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "size // 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_135": {
                "variable": {
                    "value": "v_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-size // 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "size // 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "meshgrid_142": {
                "variable": {
                    "value": "(h, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "h_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(-size // 2 + 1, size // 2 + 1, dtype=torch.float32, device='cuda', requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "v_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(-size // 2 + 1, size // 2 + 1, dtype=torch.float32, device='cuda', requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_158": {
                "variable": {
                    "value": "h_dh_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hv[..., 0].unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h / (h * h + v * v + 1e-15)",
                            "BinOp"
                        ],
                        [
                            "kernel_h.view(1, 1, 5, 5)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_159": {
                "variable": {
                    "value": "v_dv_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hv[..., 1].unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v / (h * h + v * v + 1e-15)",
                            "BinOp"
                        ],
                        [
                            "kernel_v.view(1, 1, 5, 5)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "dhv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_dh_ch, v_dv_ch]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_67": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred / torch.sum(pred, -1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(pred, epsilon, 1.0 - epsilon)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_70": {
                "input": {
                    "value": "true * torch.log(pred)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_70": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred / torch.sum(pred, -1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(pred, epsilon, 1.0 - epsilon)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "run_infer.py": {
        "torch": {
            "device_count_116": {
                "variable": {
                    "value": "nr_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "run_train.py": {
        "torch": {
            "DataLoader_124": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "input_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FileLoader(file_list, mode=run_mode, with_type=self.type_classification, setup_augmentor=nr_procs == 0, target_gen=target_gen, **self.shape_info[run_mode])",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "nr_procs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nr_procs if not self.debug else 0",
                            "IfExp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size * self.nr_gpus",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "run_mode == 'train'",
                    "type": "Compare",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "run_mode == 'train'",
                    "type": "Compare",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_count_276": {
                "variable": {
                    "value": "self.nr_gpus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_218": {
                "variable": {
                    "value": "net_desc",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net_desc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_info['desc']()",
                            "Call"
                        ],
                        [
                            "DataParallel(net_desc)",
                            "Call"
                        ],
                        [
                            "net_desc.to('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_194": {
                "f": {
                    "value": "pretrained_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_info['pretrained']",
                            "Subscript"
                        ],
                        [
                            "get_last_chkpt_path(prev_log_dir, net_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_57": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "2 ** 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_200": {
                "ndarray": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_203": {
                "f": {
                    "value": "pretrained_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_info['pretrained']",
                            "Subscript"
                        ],
                        [
                            "get_last_chkpt_path(prev_log_dir, net_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "run_utils/utils.py": {
        "torch": {
            "manual_seed_44": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed or random.randint(1, 10000)",
                            "BoolOp"
                        ]
                    ]
                }
            },
            "manual_seed_45": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed or random.randint(1, 10000)",
                            "BoolOp"
                        ]
                    ]
                }
            },
            "device_78": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_128": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*in_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "prod_113": {
                "input": {
                    "value": "torch.LongTensor(list(module.weight.size()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_116": {
                "input": {
                    "value": "torch.LongTensor(list(module.bias.size()))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}