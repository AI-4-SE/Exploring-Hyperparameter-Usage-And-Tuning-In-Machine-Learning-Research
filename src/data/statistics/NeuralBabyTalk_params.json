{
    "main.py": {
        "tensorflow": {
            "Summary_32": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=key, simple_value=value)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FileWriter_271": {
                "logdir": {
                    "value": "opt.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_214": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataLoader(opt, split='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_218": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataLoader(opt, split=opt.val_split)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_253": {
                "variable": {
                    "value": "opt.fg_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset.fg_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_254": {
                "variable": {
                    "value": "opt.glove_fg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset.glove_fg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_255": {
                "variable": {
                    "value": "opt.glove_clss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset.glove_clss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_256": {
                "variable": {
                    "value": "opt.glove_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset.glove_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_257": {
                "variable": {
                    "value": "opt.st2towidx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset.st2towidx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_308": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AttModel.TopDownModel(opt)",
                            "Call"
                        ],
                        [
                            "AttModel.Att2in2Model(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_326": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': opt.learning_rate, 'weight_decay': opt.weight_decay, 'betas': (opt.optim_alpha, opt.optim_beta)}]",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_328": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': opt.learning_rate, 'weight_decay': opt.weight_decay, 'betas': (opt.optim_alpha, opt.optim_beta)}]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_289": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.start_from, 'model-best.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.start_from, 'model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "Adamax_330": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': opt.learning_rate, 'weight_decay': opt.weight_decay, 'betas': (opt.optim_alpha, opt.optim_beta)}]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_365": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.checkpoint_path, 'model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.checkpoint_path, 'model-best.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_367": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.checkpoint_path, 'model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.checkpoint_path, 'model-best.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_391": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.checkpoint_path, 'model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.checkpoint_path, 'model-best.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_393": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.checkpoint_path, 'model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.checkpoint_path, 'model-best.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "demo.py": {
        "torch": {
            "DataLoader_206": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataLoader(opt, split='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_241": {
                "variable": {
                    "value": "opt.fg_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset_val.fg_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_242": {
                "variable": {
                    "value": "opt.glove_fg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset_val.glove_fg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_243": {
                "variable": {
                    "value": "opt.glove_clss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset_val.glove_clss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_244": {
                "variable": {
                    "value": "opt.st2towidx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset_val.st2towidx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_263": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.start_from, 'model-best.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.start_from, 'model.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "misc/AttModel.py": {
        "torch": {
            "Linear_20": {
                "variable": {
                    "value": "self.h2att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.alpha_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_34": {
                "variable": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att + att_h",
                            "BinOp"
                        ],
                        [
                            "F.tanh(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, self.att_hid_size)",
                            "Call"
                        ],
                        [
                            "self.alpha_net(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, att_size)",
                            "Call"
                        ],
                        [
                            "att + att_h",
                            "BinOp"
                        ],
                        [
                            "F.tanh(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, self.att_hid_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_40": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att + att_h",
                            "BinOp"
                        ],
                        [
                            "F.tanh(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, self.att_hid_size)",
                            "Call"
                        ],
                        [
                            "self.alpha_net(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, att_size)",
                            "Call"
                        ],
                        [
                            "att + att_h",
                            "BinOp"
                        ],
                        [
                            "F.tanh(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, self.att_hid_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_42": {
                "variable": {
                    "value": "att_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "att_feats_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_feats.view(-1, att_size, self.rnn_size)",
                            "Call"
                        ],
                        [
                            "att_feats.view(-1, att_size, self.rnn_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_42": {
                "variable": {
                    "value": "att_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.h2att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.alpha_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_68": {
                "variable": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att + att_h",
                            "BinOp"
                        ],
                        [
                            "F.tanh(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, self.att_hid_size)",
                            "Call"
                        ],
                        [
                            "self.alpha_net(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, att_size)",
                            "Call"
                        ],
                        [
                            "att + att_h",
                            "BinOp"
                        ],
                        [
                            "F.tanh(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, self.att_hid_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_75": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hAflat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.alpha_net(dot)",
                            "Call"
                        ],
                        [
                            "hAflat.view(-1, att_size)",
                            "Call"
                        ],
                        [
                            "self.alpha_net(hA.view(-1, self.att_hid_size))",
                            "Call"
                        ],
                        [
                            "hAflat.view(-1, roi_num + 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_77": {
                "variable": {
                    "value": "att_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "att_feats_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_feats.view(-1, att_size, self.rnn_size)",
                            "Call"
                        ],
                        [
                            "att_feats.view(-1, att_size, self.rnn_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_77": {
                "variable": {
                    "value": "att_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.f_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "self.f_fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.h_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.alpha_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_107": {
                "variable": {
                    "value": "fake_region",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.f_fc1(fake_region.view(-1, self.rnn_size))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "self.inplace",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "img_all_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_region_embed.view(-1, 1, self.att_hid_size), conv_feat_embed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_113": {
                "variable": {
                    "value": "hA",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_all_embed + h_out_embed.view(-1, 1, self.att_hid_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LSTMCell_127": {
                "variable": {
                    "value": "self.att_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "opt.input_encoding_size + opt.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_130": {
                "variable": {
                    "value": "self.lang_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "opt.rnn_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_135": {
                "variable": {
                    "value": "self.i2h_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt.rnn_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_136": {
                "variable": {
                    "value": "self.h2h_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "att_lstm_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fc_feats, xt]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "lang_lstm_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att + att2, h_att]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_148": {
                "variable": {
                    "value": "ada_gate_point",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.i2h_2(lang_lstm_input) + self.h2h_2(state[0][1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_150": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_lang",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lang_lstm(lang_lstm_input, (state[0][1], state[1][1]))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_151": {
                "variable": {
                    "value": "fake_box",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ada_gate_point * F.tanh(state[1][1])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_170": {
                "variable": {
                    "value": "self.a2c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_171": {
                "variable": {
                    "value": "self.a2c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "self.i2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "6 * self.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_173": {
                "variable": {
                    "value": "self.h2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "6 * self.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_174": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_175": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_187": {
                "variable": {
                    "value": "sigmoid_chunk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigmoid_chunk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_input_sums.narrow(1, 0, 4 * self.rnn_size)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(sigmoid_chunk)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_196": {
                "variable": {
                    "value": "in_transform",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_transform.narrow(1, 0, self.rnn_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_231": {
                "variable": {
                    "value": "self.bn_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(opt.rnn_size + opt.rnn_size, opt.rnn_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_236": {
                "variable": {
                    "value": "self.fg_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(opt.rnn_size + opt.rnn_size, opt.rnn_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_242": {
                "variable": {
                    "value": "self.fg_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "opt.glove_fg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_246": {
                "variable": {
                    "value": "self.fg_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "opt.fg_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_263": {
                "variable": {
                    "value": "pool_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rnn_outs, pool_feats)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_264": {
                "variable": {
                    "value": "bn_logprob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_fc(pool_feats)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_269": {
                "variable": {
                    "value": "fg_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fg_out.view(-1, 300)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.fg_emb.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_273": {
                "variable": {
                    "value": "fg_logprob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.beta * fg_score",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_153": {
                "tensors": {
                    "value": "[c_att, c_lang]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_200": {
                "input": {
                    "value": "next_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forget_gate * state[1][-1] + in_gate * in_transform",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_201": {
                "input": {
                    "value": "next_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forget_gate * state[1][-1] + in_gate * in_transform",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_231": {
                "in_features": {
                    "value": "opt.rnn_size + opt.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_233": {
                "p": {
                    "value": "opt.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_234": {
                "in_features": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_236": {
                "in_features": {
                    "value": "opt.rnn_size + opt.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_238": {
                "p": {
                    "value": "opt.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_239": {
                "in_features": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_151": {
                "input": {
                    "value": "state[1][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "misc/CaptionModel.py": {
        "torch": {
            "zeros_113": {
                "variable": {
                    "value": "beam_logprobs_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.get('beam_size', 5)",
                            "Call"
                        ],
                        [
                            "int(opt.get('beam_size', 5) / len(tags))",
                            "Call"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_351": {
                "variable": {
                    "value": "beam_logprobs_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_fsm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(tags)",
                            "Call"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "len(tags)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.get('beam_size', 5)",
                            "Call"
                        ],
                        [
                            "int(opt.get('beam_size', 5) / len(tags))",
                            "Call"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sort_36": {
                "variable": {
                    "value": "(ys, ix)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobsf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logprobs.data.cpu()",
                            "Call"
                        ],
                        [
                            "logprobs.view(num_fsm, beam_size, -1).data.cpu()",
                            "Call"
                        ],
                        [
                            "logprobsf",
                            "Method Argument"
                        ],
                        [
                            "logprobsf",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_123": {
                "variable": {
                    "value": "det_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "det_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(det_prob, dim=1)",
                            "Call"
                        ],
                        [
                            "self.core(xt, beam_fc_feats, beam_conv_feats, beam_p_conv_feats, beam_pool_feats, beam_p_pool_feats, beam_att_mask, beam_pnt_mask_list[-1], state)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(det_prob, dim=1)",
                            "Call"
                        ],
                        [
                            "self.core(xt, beam_fc_feats, beam_conv_feats, beam_p_conv_feats, beam_pool_feats, beam_p_pool_feats, beam_att_mask, beam_pnt_mask_list[-1], state)",
                            "Call"
                        ],
                        [
                            "det_prob",
                            "Method Argument"
                        ],
                        [
                            "det_prob",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_124": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(rnn_output)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[decoded, prob_det]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_174": {
                "variable": {
                    "value": "(slp_bn, it_bn)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_logprob.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_175": {
                "variable": {
                    "value": "(slp_fg, it_fg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "fg_logprob.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_242": {
                "variable": {
                    "value": "(ys, ix)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobsf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logprobs.data.cpu()",
                            "Call"
                        ],
                        [
                            "logprobs.view(num_fsm, beam_size, -1).data.cpu()",
                            "Call"
                        ],
                        [
                            "logprobsf",
                            "Method Argument"
                        ],
                        [
                            "logprobsf",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_362": {
                "variable": {
                    "value": "det_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "det_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(det_prob, dim=1)",
                            "Call"
                        ],
                        [
                            "self.core(xt, beam_fc_feats, beam_conv_feats, beam_p_conv_feats, beam_pool_feats, beam_p_pool_feats, beam_att_mask, beam_pnt_mask_list[-1], state)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(det_prob, dim=1)",
                            "Call"
                        ],
                        [
                            "self.core(xt, beam_fc_feats, beam_conv_feats, beam_p_conv_feats, beam_pool_feats, beam_p_pool_feats, beam_att_mask, beam_pnt_mask_list[-1], state)",
                            "Call"
                        ],
                        [
                            "det_prob",
                            "Method Argument"
                        ],
                        [
                            "det_prob",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_363": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(rnn_output)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_367": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[decoded, prob_det]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_417": {
                "variable": {
                    "value": "(slp_bn, it_bn)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_logprob.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_418": {
                "variable": {
                    "value": "(slp_fg, it_fg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "fg_logprob.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_254": {
                "variable": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beam_seq[0][s] != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "misc/bak.py": {
        "torch": {
            "zeros_113": {
                "variable": {
                    "value": "beam_logprobs_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.get('beam_size', 5)",
                            "Call"
                        ],
                        [
                            "opt.get('beam_size', 5)",
                            "Call"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_362": {
                "variable": {
                    "value": "beam_logprobs_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "fsm_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(tags)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.get('beam_size', 5)",
                            "Call"
                        ],
                        [
                            "opt.get('beam_size', 5)",
                            "Call"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sort_36": {
                "variable": {
                    "value": "(ys, ix)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobsf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "logprobsf",
                            "Method Argument"
                        ],
                        [
                            "logprobsf",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_123": {
                "variable": {
                    "value": "det_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "det_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(det_prob, dim=1)",
                            "Call"
                        ],
                        [
                            "self.core(xt, beam_fc_feats, beam_conv_feats, beam_p_conv_feats, beam_pool_feats, beam_p_pool_feats, beam_att_mask, beam_pnt_mask_list[-1], state)",
                            "Call"
                        ],
                        [
                            "{(): det_prob}",
                            "Dict"
                        ],
                        [
                            "self.core(xt, beam_fc_feats, beam_conv_feats, beam_p_conv_feats, beam_pool_feats, beam_p_pool_feats, beam_att_mask, beam_pnt_mask_list[-1], state)",
                            "Call"
                        ],
                        [
                            "det_prob",
                            "Method Argument"
                        ],
                        [
                            "det_prob",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_124": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(rnn_output)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[decoded, prob_det]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_174": {
                "variable": {
                    "value": "(slp_bn, it_bn)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_logprob.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_175": {
                "variable": {
                    "value": "(slp_fg, it_fg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "fg_logprob.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_255": {
                "variable": {
                    "value": "(ys, ix)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobsf[tags[s]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_379": {
                "variable": {
                    "value": "det_prob[tag]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "det_prob[tag]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_380": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(rnn_output[tag])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_385": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[decoded, prob_det]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_435": {
                "variable": {
                    "value": "(slp_bn, it_bn)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_logprob.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_436": {
                "variable": {
                    "value": "(slp_fg, it_fg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "fg_logprob.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_259": {
                "variable": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beam_seq[0][s] != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "misc/bbox_transform.py": {
        "torch": {
            "log_28": {
                "variable": {
                    "value": "targets_dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / ex_widths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_29": {
                "variable": {
                    "value": "targets_dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / ex_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_31": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dw, targets_dh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_72": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dw, targets_dh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_51": {
                "variable": {
                    "value": "targets_dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / ex_widths.view(1, -1).expand_as(gt_widths)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_52": {
                "variable": {
                    "value": "targets_dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / ex_heights.view(1, -1).expand_as(gt_heights)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_67": {
                "variable": {
                    "value": "targets_dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / ex_widths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_68": {
                "variable": {
                    "value": "targets_dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / ex_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_155": {
                "input": {
                    "value": "boxes[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_156": {
                "input": {
                    "value": "boxes[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_159": {
                "input": {
                    "value": "boxes[:, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_160": {
                "input": {
                    "value": "boxes[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_201": {
                "input": {
                    "value": "boxes[:, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_202": {
                "input": {
                    "value": "boxes[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_205": {
                "input": {
                    "value": "boxes[:, :, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_206": {
                "input": {
                    "value": "boxes[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_240": {
                "input": {
                    "value": "boxes[:, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_241": {
                "input": {
                    "value": "boxes[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_244": {
                "input": {
                    "value": "boxes[:, :, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_245": {
                "input": {
                    "value": "boxes[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "misc/dataloader_coco.py": {
        "torch": {
            "from_numpy_356": {
                "variable": {
                    "value": "input_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([self.seq_per_img, self.seq_length + 1, 4])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(input_seq).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_357": {
                "variable": {
                    "value": "gt_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([10, self.seq_length])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(gt_seq).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_358": {
                "variable": {
                    "value": "pad_proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pad_proposals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((self.max_proposal, 6))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pad_proposals).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_359": {
                "variable": {
                    "value": "pad_box_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pad_box_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((self.seq_per_img, self.max_gt_box, self.seq_length + 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pad_box_mask).byte()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_360": {
                "variable": {
                    "value": "pad_gt_bboxs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pad_gt_bboxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((self.max_gt_box, 5))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pad_gt_bboxs).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_367": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.info['images'][ix]",
                            "Subscript"
                        ],
                        [
                            "Image.open(os.path.join(self.opt.image_path, file_path)).convert('RGB')",
                            "Call"
                        ],
                        [
                            "self.Resize(img)",
                            "Call"
                        ],
                        [
                            "self.RandomCropWithBbox(img, proposals, gt_bboxs)",
                            "Call"
                        ],
                        [
                            "np.array(img, dtype='float32')",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1].copy()",
                            "Call"
                        ],
                        [
                            "img - self.vgg_pixel_mean",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(img)",
                            "Call"
                        ],
                        [
                            "img.permute(2, 0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.ToTensor(img)",
                            "Call"
                        ],
                        [
                            "self.res_Normalize(img)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "misc/dataloader_flickr30k.py": {
        "torch": {
            "from_numpy_305": {
                "variable": {
                    "value": "input_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([self.seq_per_img, self.seq_length + 1, 4])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(input_seq).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_306": {
                "variable": {
                    "value": "gt_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([10, self.seq_length])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(gt_seq).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_307": {
                "variable": {
                    "value": "pad_proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pad_proposals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((self.max_proposal, 6))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pad_proposals).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_308": {
                "variable": {
                    "value": "pad_box_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pad_box_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((self.seq_per_img, self.max_gt_box, self.seq_length + 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pad_box_mask).byte()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_309": {
                "variable": {
                    "value": "pad_gt_bboxs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pad_gt_bboxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((self.max_gt_box, 5))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pad_gt_bboxs).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_317": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.info['images'][ix]",
                            "Subscript"
                        ],
                        [
                            "Image.open(os.path.join(self.opt.image_path, file_path)).convert('RGB')",
                            "Call"
                        ],
                        [
                            "self.Resize(img)",
                            "Call"
                        ],
                        [
                            "self.RandomCropWithBbox(img, proposals, gt_bboxs)",
                            "Call"
                        ],
                        [
                            "np.array(img, dtype='float32')",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1].copy()",
                            "Call"
                        ],
                        [
                            "img - self.vgg_pixel_mean",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(img)",
                            "Call"
                        ],
                        [
                            "img.permute(2, 0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.ToTensor(img)",
                            "Call"
                        ],
                        [
                            "self.res_Normalize(img)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "misc/dataloader_hdf.py": {
        "torch": {}
    },
    "misc/eval_utils.py": {
        "torch": {
            "from_numpy_95": {
                "ndarray": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.sample(fc_feats, att_feats, eval_kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_84": {
                "ndarray": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.sample(fc_feats, att_feats, eval_kwargs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "misc/model.py": {
        "torch": {
            "Sequential_62": {
                "variable": {
                    "value": "self.det_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Embedding(self.detect_size + 1, 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.loc_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(5, 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Embedding(self.vocab_size + self.detect_size + 1, self.input_encoding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.fc_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.fc_feat_size, self.rnn_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.att_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.att_feat_size, self.rnn_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.pool_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.pool_feat_size, self.rnn_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.ctx2att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self.ctx2pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "pool_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pool_feats, loc_feats, label_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_255": {
                "variable": {
                    "value": "rnn_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in rnn_output]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_256": {
                "variable": {
                    "value": "det_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in det_output]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "roi_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in roi_labels]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_259": {
                "variable": {
                    "value": "det_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "det_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat([_.unsqueeze(1) for _ in det_output], 1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(det_output, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_260": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.beta * self.logit(rnn_output)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_328": {
                "variable": {
                    "value": "pool_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pool_feats, loc_feats, label_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_460": {
                "variable": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in seq]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_461": {
                "variable": {
                    "value": "seqLogprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in seqLogprobs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_462": {
                "variable": {
                    "value": "bn_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in bn_seq]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_463": {
                "variable": {
                    "value": "bnLogprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in bnLogprobs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_464": {
                "variable": {
                    "value": "fg_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in fg_seq]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_465": {
                "variable": {
                    "value": "fgLogprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in fgLogprobs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_542": {
                "variable": {
                    "value": "pool_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pool_feats, loc_feats, label_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_451": {
                "variable": {
                    "value": "det_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "det_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.core(xt, fc_feats, conv_feats, p_conv_feats, pool_feats, p_pool_feats, pnt_mask, pnt_mask, state)",
                            "Call"
                        ],
                        [
                            "self.core(xt, fc_feats, conv_feats, p_conv_feats, pool_feats, p_pool_feats, att_mask, pnt_mask_list[-1], state)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(det_prob, dim=1)",
                            "Call"
                        ],
                        [
                            "self.core(xt, beam_fc_feats, beam_conv_feats, beam_p_conv_feats, beam_pool_feats, beam_p_pool_feats, beam_pnt_mask, beam_pnt_mask, state)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_452": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.beta * self.logit(rnn_output)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_457": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[decoded, prob_det]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_62": {
                "num_embeddings": {
                    "value": "self.detect_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_66": {
                "in_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_70": {
                "num_embeddings": {
                    "value": "self.vocab_size + self.detect_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_72": {
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "in_features": {
                    "value": "self.fc_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_76": {
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "in_features": {
                    "value": "self.att_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_80": {
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "in_features": {
                    "value": "self.pool_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_84": {
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_234": {
                "variable": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[-1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_365": {
                "variable": {
                    "value": "(sampleLogprobs, it)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_373": {
                "variable": {
                    "value": "it",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(outputs[-1].data)",
                            "Call"
                        ],
                        [
                            "torch.exp(logprobs.data)",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(logprobs.data, temperature))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_412": {
                "variable": {
                    "value": "(slp_bn, it_bn)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_logprob.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_413": {
                "variable": {
                    "value": "(slp_fg, it_fg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "fg_logprob.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_422": {
                "variable": {
                    "value": "it_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_prob_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(bn_logprob.data)",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(bn_logprob.data, temperature))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_423": {
                "variable": {
                    "value": "it_fg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fg_prob_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(fg_logprob.data)",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(fg_logprob.data, temperature))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_135": {
                "ndarray": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_self_critical_reward(gen_result[:3], greedy_result[:3], gt_seq, num[:, 0])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(reward).type_as(img.data).float())",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_369": {
                "variable": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_372": {
                "variable": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(logprobs.data, temperature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_416": {
                "variable": {
                    "value": "bn_prob_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_logprob.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_417": {
                "variable": {
                    "value": "fg_prob_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fg_logprob.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_419": {
                "variable": {
                    "value": "bn_prob_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(bn_logprob.data, temperature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_420": {
                "variable": {
                    "value": "fg_prob_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(fg_logprob.data, temperature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multinomial_235": {
                "input": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(outputs[-1].data)",
                            "Call"
                        ],
                        [
                            "torch.exp(logprobs.data)",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(logprobs.data, temperature))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_235": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "sample_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_mask.nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_372": {
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.get('temperature', 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_419": {
                "input": {
                    "value": "bn_logprob.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.get('temperature', 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_420": {
                "input": {
                    "value": "fg_logprob.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.get('temperature', 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_340": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.size(0)",
                            "Call"
                        ],
                        [
                            "img.size(0)",
                            "Call"
                        ],
                        [
                            "ppls.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_341": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.size(0)",
                            "Call"
                        ],
                        [
                            "img.size(0)",
                            "Call"
                        ],
                        [
                            "ppls.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_561": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.get('beam_size', 1)",
                            "Call"
                        ],
                        [
                            "opt.get('beam_size', 10)",
                            "Call"
                        ],
                        [
                            "len(tags) * opt.get('beam_size', 3)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_562": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.get('beam_size', 1)",
                            "Call"
                        ],
                        [
                            "opt.get('beam_size', 10)",
                            "Call"
                        ],
                        [
                            "len(tags) * opt.get('beam_size', 3)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "misc/resnet.py": {
        "torch": {
            "Conv2d_28": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_39": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_109": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_110": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_111": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_116": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_117": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_261": {
                "variable": {
                    "value": "self.cnn_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_142": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_238": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_133": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "misc/rewards.py": {
        "torch": {}
    },
    "misc/utils.py": {
        "torch": {
            "max_521": {
                "variable": {
                    "value": "(max_overlaps, gt_assignment)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps_copy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "overlaps.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_554": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "affine_grid_562": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size((rois.size(0), 1, grid_size, grid_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "seq_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(seq.new(seq.size(0), 1).fill_(1).byte(), seq.gt(0)[:, :-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_218": {
                "variable": {
                    "value": "txt_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[txt_mask.new(txt_mask.size(0), 1).fill_(1), txt_mask[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_226": {
                "variable": {
                    "value": "txt_select",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "txt_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "txt_input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1) - 1",
                            "BinOp"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_267": {
                "variable": {
                    "value": "select",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(-1, input.size(2))",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1) - 1",
                            "BinOp"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_249": {
                "variable": {
                    "value": "select",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.view(-1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "Variable(new_target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_192": {
                "input": {
                    "value": "seqLogprobs * reward",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mask": {
                    "value": "seq_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((seq.new(seq.size(0), 1).fill_(1).byte(), seq.gt(0)[:, :-1]), 1).view(-1)",
                            "Call"
                        ],
                        [
                            "Variable(seq_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_193": {
                "input": {
                    "value": "seq_mask.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "masked_select_199": {
                "input": {
                    "value": "bnLogprobs * reward",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mask": {
                    "value": "bn_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fg_seq.gt(0).view(-1)",
                            "Call"
                        ],
                        [
                            "Variable(bn_mask)",
                            "Call"
                        ],
                        [
                            "target.data.ne(-1)",
                            "Call"
                        ],
                        [
                            "Variable(bn_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_200": {
                "input": {
                    "value": "bn_mask.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "masked_select_203": {
                "input": {
                    "value": "fgLogprobs * reward",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mask": {
                    "value": "bn_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fg_seq.gt(0).view(-1)",
                            "Call"
                        ],
                        [
                            "Variable(bn_mask)",
                            "Call"
                        ],
                        [
                            "target.data.ne(-1)",
                            "Call"
                        ],
                        [
                            "Variable(bn_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_204": {
                "input": {
                    "value": "bn_mask.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "masked_select_221": {
                "input": {
                    "value": "vis_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vis_input",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "vis_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(target.data > self.vocab_size).view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_229": {
                "input": {
                    "value": "txt_select",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(txt_input, 1, target)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "txt_mask.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_246": {
                "input": {
                    "value": "bn_mask.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_273": {
                "input": {
                    "value": "attr_mask.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "masked_select_251": {
                "input": {
                    "value": "select",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(input.view(-1, 2), 1, Variable(new_target))",
                            "Call"
                        ],
                        [
                            "torch.gather(input, 1, target)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "bn_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fg_seq.gt(0).view(-1)",
                            "Call"
                        ],
                        [
                            "Variable(bn_mask)",
                            "Call"
                        ],
                        [
                            "target.data.ne(-1)",
                            "Call"
                        ],
                        [
                            "Variable(bn_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_252": {
                "input": {
                    "value": "bn_mask.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "masked_select_274": {
                "input": {
                    "value": "select",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(input.view(-1, 2), 1, Variable(new_target))",
                            "Call"
                        ],
                        [
                            "torch.gather(input, 1, target)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "attr_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.data.gt(0)",
                            "Call"
                        ],
                        [
                            "Variable(attr_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_275": {
                "input": {
                    "value": "attr_mask.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_231": {
                "input": {
                    "value": "vis_mask.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "misc/vgg16.py": {
        "torch": {
            "Sequential_26": {
                "variable": {
                    "value": "vgg.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg.classifier._modules.values())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_28": {
                "variable": {
                    "value": "self.pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.cnn_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg.features._modules.values())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_31": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pooling/roi_align/_ext/roi_align/__init__.py": {
        "torch": {}
    },
    "pooling/roi_align/build.py": {
        "torch": {
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pooling/roi_align/functions/roi_align.py": {
        "torch": {}
    },
    "pooling/roi_align/modules/roi_align.py": {
        "torch": {
            "avg_pool2d_29": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale)(features, rois)",
                            "Call"
                        ],
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale)(features, rois)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_42": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale)(features, rois)",
                            "Call"
                        ],
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale)(features, rois)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "prepro/prepro_dic_coco.py": {
        "torch": {}
    },
    "prepro/prepro_dic_flickr.py": {
        "torch": {}
    },
    "tools/pycider/pyciderevalcap/ciderD/ciderD.py": {
        "torch": {}
    },
    "tools/pycider/pyciderevalcap/ciderD/ciderD_scorer.py": {
        "torch": {}
    }
}