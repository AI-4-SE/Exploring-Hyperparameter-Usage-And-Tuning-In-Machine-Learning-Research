{
    "core/checkpoint.py": {
        "torch": {
            "save_35": {
                "obj": {
                    "value": "outdict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fname_template.format(step)",
                            "Call"
                        ],
                        [
                            "self.fname_template.format(step)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_42": {
                "variable": {
                    "value": "module_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fname_template.format(step)",
                            "Call"
                        ],
                        [
                            "self.fname_template.format(step)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_44": {
                "variable": {
                    "value": "module_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fname_template.format(step)",
                            "Call"
                        ],
                        [
                            "self.fname_template.format(step)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_44": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "core/data_loader.py": {
        "torch": {
            "WeightedRandomSampler_85": {
                "weights": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_weights[labels]",
                            "Subscript"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "len(weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_115": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(root, transform)",
                            "Call"
                        ],
                        [
                            "ReferenceDataset(root, transform)",
                            "Call"
                        ],
                        [
                            "DefaultDataset(root, transform=transform)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root, transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_make_balanced_sampler(dataset.targets)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_144": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(root, transform)",
                            "Call"
                        ],
                        [
                            "ReferenceDataset(root, transform)",
                            "Call"
                        ],
                        [
                            "DefaultDataset(root, transform=transform)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root, transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_163": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(root, transform)",
                            "Call"
                        ],
                        [
                            "ReferenceDataset(root, transform)",
                            "Call"
                        ],
                        [
                            "DefaultDataset(root, transform=transform)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root, transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_175": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "randn_198": {
                "variable": {
                    "value": "z_trg",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_199": {
                "variable": {
                    "value": "z_trg2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "core/model.py": {
        "torch": {
            "DataParallel_284": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Generator(args.img_size, args.style_dim, w_hpf=args.w_hpf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_285": {
                "variable": {
                    "value": "mapping_network",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "MappingNetwork(args.latent_dim, args.style_dim, args.num_domains)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_286": {
                "variable": {
                    "value": "style_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "StyleEncoder(args.img_size, args.style_dim, args.num_domains)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_287": {
                "variable": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Discriminator(args.img_size, args.num_domains)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_70": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "style_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "chunk_76": {
                "variable": {
                    "value": "(gamma, beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(s)",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), h.size(1), 1, 1)",
                            "Call"
                        ],
                        [
                            "self.shared(z)",
                            "Call"
                        ],
                        [
                            "self.shared(x)",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_141": {
                "variable": {
                    "value": "self.from_rgb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_142": {
                "variable": {
                    "value": "self.encode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_143": {
                "variable": {
                    "value": "self.decode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_144": {
                "variable": {
                    "value": "self.to_rgb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.InstanceNorm2d(dim_in, affine=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_199": {
                "variable": {
                    "value": "self.shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_201": {
                "variable": {
                    "value": "self.unshared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_216": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._residual(x, s)",
                            "Call"
                        ],
                        [
                            "(out + self._shortcut(x)) / math.sqrt(2)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "out + [layer(h)]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(out, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(out, dim=1)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "out[idx, y]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_238": {
                "variable": {
                    "value": "self.shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_240": {
                "variable": {
                    "value": "self.unshared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_250": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._residual(x, s)",
                            "Call"
                        ],
                        [
                            "(out + self._shortcut(x)) / math.sqrt(2)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "out + [layer(h)]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(out, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(out, dim=1)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "out[idx, y]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_273": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "DataParallel_301": {
                "variable": {
                    "value": "fan",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "FAN(fname_pretrained=args.wing_path).eval()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_24": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_37": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_38": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_46": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1x1(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.norm2(x)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self._shortcut(x) + self._residual(x)",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1x1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x, s)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm2(x, s)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "block(x, s)",
                            "Call"
                        ],
                        [
                            "x + self.hpf(mask * cache[x.size(2)])",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1x1(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.norm2(x)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self._shortcut(x) + self._residual(x)",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1x1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x, s)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm2(x, s)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "block(x, s)",
                            "Call"
                        ],
                        [
                            "x + self.hpf(mask * cache[x.size(2)])",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_82": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "variable": {
                    "value": "self.conv1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_100": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1x1(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.norm2(x)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self._shortcut(x) + self._residual(x)",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1x1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x, s)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm2(x, s)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "block(x, s)",
                            "Call"
                        ],
                        [
                            "x + self.hpf(mask * cache[x.size(2)])",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_109": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1x1(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.norm2(x)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self._shortcut(x) + self._residual(x)",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1x1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x, s)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm2(x, s)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "block(x, s)",
                            "Call"
                        ],
                        [
                            "x + self.hpf(mask * cache[x.size(2)])",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_133": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1x1(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.norm2(x)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self._shortcut(x) + self._residual(x)",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1x1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x, s)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm2(x, s)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "block(x, s)",
                            "Call"
                        ],
                        [
                            "x + self.hpf(mask * cache[x.size(2)])",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.filter.unsqueeze(0).unsqueeze(1).repeat(x.size(1), 1, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_170": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_145": {
                "num_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_146": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_147": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_185": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks[0] if x.size(2) in [32] else masks[1]",
                            "IfExp"
                        ],
                        [
                            "F.interpolate(mask, size=x.size(2), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_194": {
                "in_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_227": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_235": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_236": {
                "in_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_237": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_261": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_269": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_270": {
                "in_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_271": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_272": {
                "in_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_domains",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_127": {
                "data": {
                    "value": "[[-1, -1, -1], [-1, 8.0, -1], [-1, -1, -1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_197": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_203": {
                "*args": {
                    "value": "nn.Linear(512, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_242": {
                "in_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "style_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_203": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_205": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_207": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_209": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "style_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "core/solver.py": {
        "torch": {
            "mean_245": {
                "variable": {
                    "value": "loss_sty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(s_pred - s_trg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_254": {
                "variable": {
                    "value": "loss_ds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(x_fake - x_fake2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_260": {
                "variable": {
                    "value": "loss_cyc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(x_rec - x_real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_like_277": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_278": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full_like(logits, fill_value=target)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_32": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "lerp_272": {
                "variable": {
                    "value": "param_test.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end": {
                    "value": "param_test.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.999",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_245": {
                "input": {
                    "value": "s_pred - s_trg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_254": {
                "input": {
                    "value": "x_fake - x_fake2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_260": {
                "input": {
                    "value": "x_rec - x_real",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_285": {
                "outputs": {
                    "value": "d_out.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_47": {
                "variable": {
                    "value": "self.optims[net]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "self.nets[net].parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.f_lr if net == 'mapping_network' else args.lr",
                    "type": "IfExp",
                    "possible_values": []
                },
                "betas": {
                    "value": "[args.beta1, args.beta2]",
                    "type": "List",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "core/utils.py": {
        "torch": {
            "cat_72": {
                "variable": {
                    "value": "x_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_src, x_ref, x_fake, x_rec]",
                            "List"
                        ],
                        [
                            "torch.cat(x_concat, dim=0)",
                            "Call"
                        ],
                        [
                            "[x_src]",
                            "List"
                        ],
                        [
                            "torch.cat(x_concat, dim=0)",
                            "Call"
                        ],
                        [
                            "x_concat + [x_fake_with_ref]",
                            "BinOp"
                        ],
                        [
                            "[x_src_with_wb]",
                            "List"
                        ],
                        [
                            "torch.cat(x_concat, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "x_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_src, x_ref, x_fake, x_rec]",
                            "List"
                        ],
                        [
                            "torch.cat(x_concat, dim=0)",
                            "Call"
                        ],
                        [
                            "[x_src]",
                            "List"
                        ],
                        [
                            "torch.cat(x_concat, dim=0)",
                            "Call"
                        ],
                        [
                            "x_concat + [x_fake_with_ref]",
                            "BinOp"
                        ],
                        [
                            "[x_src_with_wb]",
                            "List"
                        ],
                        [
                            "torch.cat(x_concat, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_104": {
                "variable": {
                    "value": "wb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "x_src_with_wb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[wb, x_src]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "x_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_src, x_ref, x_fake, x_rec]",
                            "List"
                        ],
                        [
                            "torch.cat(x_concat, dim=0)",
                            "Call"
                        ],
                        [
                            "[x_src]",
                            "List"
                        ],
                        [
                            "torch.cat(x_concat, dim=0)",
                            "Call"
                        ],
                        [
                            "x_concat + [x_fake_with_ref]",
                            "BinOp"
                        ],
                        [
                            "[x_src_with_wb]",
                            "List"
                        ],
                        [
                            "torch.cat(x_concat, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_136": {
                "variable": {
                    "value": "z_trg_list",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.num_outs_per_domain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "args.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(frames)",
                            "Call"
                        ],
                        [
                            "torch.cat([slided, interpolated], dim=3).cpu()",
                            "Call"
                        ],
                        [
                            "interpolate(nets, args, x_src, s_prev, s_next).cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_189": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "entries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([x_src.cpu(), x_fake.cpu()], dim=2)",
                            "Call"
                        ],
                        [
                            "[x_prev, x_next]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_278": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images * 0.5 + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_85": {
                "variable": {
                    "value": "z_many",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_trg_list[0].size(1)",
                            "Call"
                        ],
                        [
                            "z_list[0].size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_88": {
                "variable": {
                    "value": "s_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_many",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nets.mapping_network(z_many, y_many)",
                            "Call"
                        ],
                        [
                            "nets.mapping_network(z_many, y_many)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "x_fake_with_ref",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_ref[i:i + 1], x_fake]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lerp_167": {
                "variable": {
                    "value": "s_ref",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "s_next",
                            "Name"
                        ],
                        [
                            "s_next",
                            "Name"
                        ],
                        [
                            "s_next",
                            "Name"
                        ]
                    ]
                },
                "end": {
                    "value": "s_next",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alphas",
                            "Name"
                        ]
                    ]
                }
            },
            "cat_169": {
                "variable": {
                    "value": "entries",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_src.cpu(), x_fake.cpu()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[slided, interpolated]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_232": {
                "variable": {
                    "value": "z_many",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_trg_list[0].size(1)",
                            "Call"
                        ],
                        [
                            "z_list[0].size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_235": {
                "variable": {
                    "value": "s_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_many",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nets.mapping_network(z_many, y_many)",
                            "Call"
                        ],
                        [
                            "nets.mapping_network(z_many, y_many)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "lerp_93": {
                "variable": {
                    "value": "s_trg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_avg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(s_many, dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "s_avg.repeat(N, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(s_many, dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "s_avg.repeat(x_src.size(0), 1)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "s_trg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nets.mapping_network(z_trg, y_trg)",
                            "Call"
                        ],
                        [
                            "torch.lerp(s_avg, s_trg, psi)",
                            "Call"
                        ],
                        [
                            "nets.mapping_network(z_trg, y_trg)",
                            "Call"
                        ],
                        [
                            "torch.lerp(s_avg, s_trg, psi)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "psi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.5, 0.7, 1.0]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_134": {
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_188": {
                "*size": {
                    "value": "(T, C, H * 2, W + margin)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_223": {
                "tensors": {
                    "value": "video",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tensor2ndarray255(torch.cat(video))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tensor2ndarray255(torch.cat(video))",
                            "Call"
                        ]
                    ]
                }
            },
            "lerp_240": {
                "variable": {
                    "value": "s_trg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_avg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(s_many, dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "s_avg.repeat(N, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(s_many, dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "s_avg.repeat(x_src.size(0), 1)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "s_trg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nets.mapping_network(z_trg, y_trg)",
                            "Call"
                        ],
                        [
                            "torch.lerp(s_avg, s_trg, psi)",
                            "Call"
                        ],
                        [
                            "nets.mapping_network(z_trg, y_trg)",
                            "Call"
                        ],
                        [
                            "torch.lerp(s_avg, s_trg, psi)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "psi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.5, 0.7, 1.0]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_258": {
                "tensors": {
                    "value": "video",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tensor2ndarray255(torch.cat(video))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tensor2ndarray255(torch.cat(video))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "core/wing.py": {
        "torch": {
            "max_28": {
                "variable": {
                    "value": "(max, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "hm.view(hm.size(0), hm.size(1), hm.size(2) * hm.size(3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_464": {
                "variable": {
                    "value": "head",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "abs(N)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_465": {
                "variable": {
                    "value": "tail",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "H - N",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_475": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[head, tail]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_512": {
                "variable": {
                    "value": "zero_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.arange(0, index_map.chin.start), torch.arange(index_map.chin.end, 33), torch.LongTensor([index_map.eyebrowsedges.start, index_map.eyebrowsedges.end, index_map.lipedges.start, index_map.lipedges.end])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_535": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transform(image).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "truncate(x)",
                            "Call"
                        ],
                        [
                            "normalize(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x), True)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(self.conv2(x), 2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=256, mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_536": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deepcopy(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x2, dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_72": {
                "variable": {
                    "value": "low1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_82": {
                "variable": {
                    "value": "up2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "low3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "low2",
                            "Name"
                        ],
                        [
                            "self._modules['b3_' + str(level)](low3)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_96": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "x_and_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, coords]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_142": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels + 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_154": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_157": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(out_planes / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_159": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(out_planes / 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_172": {
                "variable": {
                    "value": "out1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out1, True)",
                            "Call"
                        ],
                        [
                            "self.conv1(out1)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_176": {
                "variable": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn2(out1)",
                            "Call"
                        ],
                        [
                            "F.relu(out2, True)",
                            "Call"
                        ],
                        [
                            "self.conv2(out2)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_180": {
                "variable": {
                    "value": "out3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn3(out2)",
                            "Call"
                        ],
                        [
                            "F.relu(out3, True)",
                            "Call"
                        ],
                        [
                            "self.conv3(out3)",
                            "Call"
                        ],
                        [
                            "torch.cat((out1, out2, out3), 1)",
                            "Call"
                        ],
                        [
                            "out3 + residual",
                            "BinOp"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "out3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out1, out2, out3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_200": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_227": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_228": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_237": {
                "variable": {
                    "value": "ll",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._modules['bn_end0'](self._modules['conv_last0'](ll))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_251": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transform(image).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "truncate(x)",
                            "Call"
                        ],
                        [
                            "normalize(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x), True)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(self.conv2(x), 2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=256, mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_292": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "where_451": {
                "condition": {
                    "value": "x < thres",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transform(image).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "truncate(x)",
                            "Call"
                        ],
                        [
                            "normalize(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x), True)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(self.conv2(x), 2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=256, mode='bilinear')",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_469": {
                "variable": {
                    "value": "tail",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "abs(N)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_472": {
                "variable": {
                    "value": "tail",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "H - N",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_99": {
                "variable": {
                    "value": "x_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_99": {
                "variable": {
                    "value": "x_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_100": {
                "variable": {
                    "value": "y_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_100": {
                "variable": {
                    "value": "y_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_103": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_coords, y_coords]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_121": {
                "variable": {
                    "value": "boundary_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "heatmap[:, -1:, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_122": {
                "variable": {
                    "value": "zero_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.x_coords",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_123": {
                "variable": {
                    "value": "xx_boundary_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "boundary_channel > 0.05",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "zero_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(self.x_coords)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_124": {
                "variable": {
                    "value": "yy_boundary_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "boundary_channel > 0.05",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "zero_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(self.x_coords)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_125": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[coords, xx_boundary_channel, yy_boundary_channel]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_164": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(in_planes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_217": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fnames",
                            "Name"
                        ]
                    ]
                }
            },
            "load_219": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fnames",
                            "Name"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_243": {
                "variable": {
                    "value": "tmp_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self._modules['l0'](ll)",
                            "Call"
                        ],
                        [
                            "F.relu(tmp_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_257": {
                "variable": {
                    "value": "heatmaps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "heatmaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[-1][:, :-1, :, :]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(heatmaps, scale_factor=scale_factor, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "preprocess(heatmaps)",
                            "Call"
                        ],
                        [
                            "self.get_heatmap(x, b_preprocess=False)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(2) // heatmaps.size(2)",
                            "BinOp"
                        ],
                        [
                            "x.size(2) // heatmaps.size(2)",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_442": {
                "input": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(N * C, -1)",
                            "Call"
                        ],
                        [
                            "(x_ - min_val) / (max_val - min_val + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_443": {
                "input": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(N * C, -1)",
                            "Call"
                        ],
                        [
                            "(x_ - min_val) / (max_val - min_val + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_451": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transform(image).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "truncate(x)",
                            "Call"
                        ],
                        [
                            "normalize(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x), True)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(self.conv2(x), 2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=256, mode='bilinear')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_106": {
                "variable": {
                    "value": "rr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(x_coords, 2) + torch.pow(y_coords, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[coords, rr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_208": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_209": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_210": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_landmarks + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_271": {
                "tensors": {
                    "value": "landmarks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "landmarks + np.array([W // 4, H // 4])",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(landmarks) * scale_factor",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_468": {
                "start": {
                    "value": "H - N",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_471": {
                "start": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "abs(N)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_512": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "index_map.chin.start",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_513": {
                "start": {
                    "value": "index_map.chin.end",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end": {
                    "value": "33",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_164": {
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_165": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_166": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "permute_287": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_292": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_219": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pow_106": {
                "input": {
                    "value": "y_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(width).unsqueeze(0).expand(height, width).float()",
                            "Call"
                        ],
                        [
                            "y_coords / (width - 1) * 2 - 1",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_107": {
                "input": {
                    "value": "rr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.pow(x_coords, 2) + torch.pow(y_coords, 2))",
                            "Call"
                        ],
                        [
                            "(rr / torch.max(rr)).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "manual_seed_35": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/eval.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "y_trg",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[trg_idx] * N",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_72": {
                "variable": {
                    "value": "z_trg",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_src.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "args.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/fid.py": {
        "torch": {
            "device_65": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "inception.Conv2d_1a_3x3",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.block2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "inception.Conv2d_3b_1x1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.block3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "inception.Mixed_5b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.block4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "inception.Mixed_7a",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "actvs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "actvs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(actvs, dim=0).cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_34": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_37": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_46": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "metrics/lpips.py": {
        "torch": {
            "device_88": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "mean_97": {
                "variable": {
                    "value": "lpips_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(lpips_values, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_53": {
                "variable": {
                    "value": "self.lpips_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[-0.03, -0.088, -0.188]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.458, 0.448, 0.45]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rsqrt_17": {
                "input": {
                    "value": "torch.sum(x ** 2, dim=1, keepdim=True) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_64": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "metrics/lpips_weights.ckpt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_66": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "metrics/lpips_weights.ckpt",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_97": {
                "tensors": {
                    "value": "lpips_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_42": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_81": {
                "input": {
                    "value": "conv1x1((x_fmap - y_fmap) ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_17": {
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_67": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}