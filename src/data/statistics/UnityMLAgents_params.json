{
    "ml-agents/mlagents/trainers/bc/models.py": {
        "tensorflow": {
            "placeholder_13": {
                "variable": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_14": {
                "variable": {
                    "value": "hidden_reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_streams[0]",
                            "Subscript"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_54": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_17": {
                "variable": {
                    "value": "self.memory_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.m_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "recurrent_in",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_20": {
                "variable": {
                    "value": "self.memory_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.memory_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "recurrent_out",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_32": {
                "variable": {
                    "value": "self.action_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.nn.softmax(branch) for branch in policy_branches]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "action_probs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "self.action_masks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, sum(self.act_size)]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "action_masks",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_38": {
                "variable": {
                    "value": "self.sample_action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.sample_action_float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.true_action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, len(policy_branches)]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "teacher_action",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_40": {
                "variable": {
                    "value": "self.action_oh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.one_hot(self.true_action[:, i], self.act_size[i]) for i in range(len(self.act_size))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_42": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-tf.log(self.action_probs + 1e-10) * self.action_oh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_43": {
                "variable": {
                    "value": "self.action_percent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(tf.cast(tf.argmax(self.action_probs, axis=1), tf.int32), self.sample_action), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_46": {
                "variable": {
                    "value": "self.policy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden_reg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dropout(hidden, self.dropout_rate)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.act_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "pre_action",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "c_layers.variance_scaling_initializer(factor=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_48": {
                "variable": {
                    "value": "self.clipped_sample_action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t": {
                    "value": "self.policy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_49": {
                "variable": {
                    "value": "self.sample_action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.clipped_sample_action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "action",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "self.true_action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.act_size[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "teacher_action",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_51": {
                "variable": {
                    "value": "self.clipped_true_action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t": {
                    "value": "self.true_action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_52": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(self.clipped_true_action, self.sample_action)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_16": {
                "initial_value": {
                    "value": "self.m_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "memory_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_37": {
                "input": {
                    "value": "normalized_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "action",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_36": {
                "values": {
                    "value": "policy_branches",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_43": {
                "x": {
                    "value": "tf.equal(tf.cast(tf.argmax(self.action_probs, axis=1), tf.int32), self.sample_action)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squared_difference_52": {
                "x": {
                    "value": "self.clipped_true_action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.sample_action",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_26": {
                "inputs": {
                    "value": "hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_streams[0]",
                            "Subscript"
                        ]
                    ]
                },
                "units": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.act_size",
                            "Attribute"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "c_layers.variance_scaling_initializer(factor=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_33": {
                "logits": {
                    "value": "branch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "one_hot_41": {
                "indices": {
                    "value": "self.true_action[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.act_size[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_44": {
                "x": {
                    "value": "tf.cast(tf.argmax(self.action_probs, axis=1), tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.sample_action",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_42": {
                "x": {
                    "value": "self.action_probs + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_44": {
                "x": {
                    "value": "tf.argmax(self.action_probs, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_44": {
                "input": {
                    "value": "self.action_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ml-agents/mlagents/trainers/bc/trainer.py": {
        "tensorflow": {
            "FileWriter_46": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.summary_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ml-agents/mlagents/trainers/models.py": {
        "tensorflow": {
            "placeholder_19": {
                "variable": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_20": {
                "variable": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sequence_length",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_21": {
                "variable": {
                    "value": "self.mask_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "masks",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_22": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.mask_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_45": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_46": {
                "variable": {
                    "value": "increment_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', trainable=False, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.add(global_step, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "visual_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, o_size_h, o_size_w, c_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'vector_observation'",
                            "MethodArgument"
                        ],
                        [
                            "'lstm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_82": {
                "variable": {
                    "value": "self.vector_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.vec_obs_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'vector_observation'",
                            "MethodArgument"
                        ],
                        [
                            "'lstm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_102": {
                "variable": {
                    "value": "mean_current_observation",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "vector_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assign_107": {
                "variable": {
                    "value": "update_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "new_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.running_mean + (mean_current_observation - self.running_mean) / tf.cast(tf.add(self.global_step, 1), tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_108": {
                "variable": {
                    "value": "update_variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.running_variance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "new_variance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.running_variance + (mean_current_observation - new_mean) * (mean_current_observation - self.running_mean)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_174": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.multinomial(tf.log(normalized_probs[k]), 1) for k in range(len(action_size))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_238": {
                "variable": {
                    "value": "lstm_input_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, sequence_length, s_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_239": {
                "variable": {
                    "value": "memory_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "memory_in[:, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, m_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_248": {
                "variable": {
                    "value": "recurrent_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "recurrent_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(recurrent_output, shape=[-1, _half_point])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, _half_point]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_276": {
                "variable": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden_policy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_streams[0]",
                            "Subscript"
                        ]
                    ]
                },
                "units": {
                    "value": "self.act_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "c_layers.variance_scaling_initializer(factor=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_279": {
                "variable": {
                    "value": "log_sigma_sq",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "log_sigma_squared",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.act_size[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_282": {
                "variable": {
                    "value": "sigma_sq",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "log_sigma_sq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('log_sigma_squared', [self.act_size[0]], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_284": {
                "variable": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.act_size[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "epsilon",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_288": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "output_post",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.clip_by_value(self.output_pre, -3, 3) / 3",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "action",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stop_gradient_289": {
                "variable": {
                    "value": "self.selected_actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "output_post",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.clip_by_value(self.output_pre, -3, 3) / 3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "identity_295": {
                "variable": {
                    "value": "self.all_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "all_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-0.5 * tf.square(tf.stop_gradient(self.output_pre) - mu) / sigma_sq - 0.5 * tf.log(2.0 * np.pi) - 0.5 * log_sigma_sq",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "action_probs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_299": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden_value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_streams[1]",
                            "Subscript"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_300": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(hidden_value, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(hidden, 1, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "value_estimate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_302": {
                "variable": {
                    "value": "self.all_old_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.act_size[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "old_probabilities",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_306": {
                "variable": {
                    "value": "self.log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.identity(self.all_log_probs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_307": {
                "variable": {
                    "value": "self.old_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.identity(self.all_old_log_probs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_338": {
                "variable": {
                    "value": "self.all_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch for branch in policy_branches]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "action_probs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_340": {
                "variable": {
                    "value": "self.action_masks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, sum(self.act_size)]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "action_masks",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_344": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.multinomial(tf.log(normalized_probs[k]), 1) for k in range(len(action_size))], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_345": {
                "variable": {
                    "value": "self.normalized_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "action",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_347": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden",
                    "type": "Call",
                    "possible_values": [
                        [
                            "observation_input",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(hidden, h_size, activation=activation, reuse=reuse, name='hidden_{}'.format(i), kernel_initializer=c_layers.variance_scaling_initializer(1.0))",
                            "Call"
                        ],
                        [
                            "c_layers.flatten(conv2)",
                            "Call"
                        ],
                        [
                            "hidden_streams[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([hidden, prev_action_oh], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_348": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(hidden_value, 1, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(hidden, 1, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "value_estimate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_350": {
                "variable": {
                    "value": "self.action_holder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, len(policy_branches)]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "action_holder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_352": {
                "variable": {
                    "value": "self.action_oh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.one_hot(self.action_holder[:, i], self.act_size[i]) for i in range(len(self.act_size))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stop_gradient_354": {
                "variable": {
                    "value": "self.selected_actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.action_oh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_356": {
                "variable": {
                    "value": "self.all_old_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, sum(self.act_size)]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "old_probabilities",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_363": {
                "variable": {
                    "value": "self.entropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack([tf.nn.softmax_cross_entropy_with_logits_v2(labels=tf.nn.softmax(self.all_log_probs[:, action_idx[i]:action_idx[i + 1]]), logits=self.all_log_probs[:, action_idx[i]:action_idx[i + 1]]) for i in range(len(self.act_size))], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_369": {
                "variable": {
                    "value": "self.log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack([-tf.nn.softmax_cross_entropy_with_logits_v2(labels=self.action_oh[:, action_idx[i]:action_idx[i + 1]], logits=normalized_logits[:, action_idx[i]:action_idx[i + 1]]) for i in range(len(self.act_size))], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_375": {
                "variable": {
                    "value": "self.old_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack([-tf.nn.softmax_cross_entropy_with_logits_v2(labels=self.action_oh[:, action_idx[i]:action_idx[i + 1]], logits=old_normalized_logits[:, action_idx[i]:action_idx[i + 1]]) for i in range(len(self.act_size))], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_14": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Variable_33": {
                "initial_value": {
                    "value": "int(brain.vector_action_space_type == 'continuous')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "is_continuous_control",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_35": {
                "initial_value": {
                    "value": "self._version_number_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "version_number",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_36": {
                "initial_value": {
                    "value": "self.m_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "memory_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_52": {
                "x": {
                    "value": "input_activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.sigmoid(input_activation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_85": {
                "variable": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "running_mean",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.vec_obs_size]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_88": {
                "variable": {
                    "value": "self.running_variance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "running_variance",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.vec_obs_size]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_94": {
                "variable": {
                    "value": "self.normalized_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t": {
                    "value": "(self.vector_in - self.running_mean) / tf.sqrt(self.running_variance / (tf.cast(self.global_step, tf.float32) + 1))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "normalized_state",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_146": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[8, 8]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "conv_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_148": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(image_input, 16, kernel_size=[8, 8], strides=[4, 4], activation=tf.nn.elu, reuse=reuse, name='conv_1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "conv_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_150": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, 32, kernel_size=[4, 4], strides=[2, 2], activation=tf.nn.elu, reuse=reuse, name='conv_2')",
                            "Call"
                        ]
                    ]
                }
            },
            "BasicLSTMCell_242": {
                "variable": {
                    "value": "rnn_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "_half_point",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(m_size / 2)",
                            "Call"
                        ],
                        [
                            "int(self.m_size / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTMStateTuple_243": {
                "variable": {
                    "value": "lstm_vector_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "c": {
                    "value": "memory_in[:, :_half_point]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "h": {
                    "value": "memory_in[:, _half_point:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dynamic_rnn_245": {
                "variable": {
                    "value": "(recurrent_output, lstm_state_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "rnn_cell",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.BasicLSTMCell(_half_point)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "lstm_input_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input_state, shape=[-1, sequence_length, s_size])",
                            "Call"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "lstm_vector_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMStateTuple(memory_in[:, :_half_point], memory_in[:, _half_point:])",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_260": {
                "variable": {
                    "value": "self.memory_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.m_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "recurrent_in",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_270": {
                "variable": {
                    "value": "self.memory_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[memory_policy_out, memory_value_out]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "recurrent_out",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_320": {
                "variable": {
                    "value": "self.prev_action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, len(self.act_size)]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "prev_action",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_322": {
                "variable": {
                    "value": "prev_action_oh",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.one_hot(self.prev_action[:, i], self.act_size[i]) for i in range(len(self.act_size))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_325": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hidden, prev_action_oh]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_327": {
                "variable": {
                    "value": "self.memory_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.m_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "recurrent_in",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_331": {
                "variable": {
                    "value": "self.memory_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "memory_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "recurrent_out",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_38": {
                "initial_value": {
                    "value": "self.act_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "action_output_shape",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_40": {
                "initial_value": {
                    "value": "sum(self.act_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "action_output_shape",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_46": {
                "x": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', trainable=False, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_52": {
                "x": {
                    "value": "input_activation",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dense_127": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden",
                    "type": "Call",
                    "possible_values": [
                        [
                            "observation_input",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(hidden, h_size, activation=activation, reuse=reuse, name='hidden_{}'.format(i), kernel_initializer=c_layers.variance_scaling_initializer(1.0))",
                            "Call"
                        ],
                        [
                            "c_layers.flatten(conv2)",
                            "Call"
                        ],
                        [
                            "hidden_streams[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([hidden, prev_action_oh], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'hidden_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "c_layers.variance_scaling_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_152": {
                "name_or_scope": {
                    "value": "scope + '/' + 'flat_encoding'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_169": {
                "x": {
                    "value": "tf.nn.softmax(branches_logits[k]) + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "branch_masks[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "divide_172": {
                "x": {
                    "value": "raw_probs[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_sum(raw_probs[k], axis=1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_175": {
                "values": {
                    "value": "[tf.log(normalized_probs[k] + 1e-10) for k in range(len(action_size))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_208": {
                "variable": {
                    "value": "hidden_visual",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "visual_encoders",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_216": {
                "variable": {
                    "value": "final_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hidden_visual, hidden_state]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_241": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'vector_observation'",
                            "MethodArgument"
                        ],
                        [
                            "'lstm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_249": {
                "values": {
                    "value": "[lstm_state_out.c, lstm_state_out.h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_287": {
                "t": {
                    "value": "self.output_pre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_297": {
                "input_tensor": {
                    "value": "tf.log(2 * np.pi * np.e) + log_sigma_sq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "identity_306": {
                "input": {
                    "value": "self.all_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_307": {
                "input": {
                    "value": "self.all_old_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_363": {
                "values": {
                    "value": "[tf.nn.softmax_cross_entropy_with_logits_v2(labels=tf.nn.softmax(self.all_log_probs[:, action_idx[i]:action_idx[i + 1]]), logits=self.all_log_probs[:, action_idx[i]:action_idx[i + 1]]) for i in range(len(self.act_size))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_369": {
                "values": {
                    "value": "[-tf.nn.softmax_cross_entropy_with_logits_v2(labels=self.action_oh[:, action_idx[i]:action_idx[i + 1]], logits=normalized_logits[:, action_idx[i]:action_idx[i + 1]]) for i in range(len(self.act_size))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_375": {
                "values": {
                    "value": "[-tf.nn.softmax_cross_entropy_with_logits_v2(labels=self.action_oh[:, action_idx[i]:action_idx[i + 1]], logits=old_normalized_logits[:, action_idx[i]:action_idx[i + 1]]) for i in range(len(self.act_size))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_104": {
                "x": {
                    "value": "tf.add(self.global_step, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_172": {
                "input_tensor": {
                    "value": "raw_probs[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multinomial_174": {
                "logits": {
                    "value": "tf.log(normalized_probs[k])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_initializer_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_286": {
                "x": {
                    "value": "sigma_sq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(log_sigma_sq)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_335": {
                "inputs": {
                    "value": "hidden",
                    "type": "Call",
                    "possible_values": [
                        [
                            "observation_input",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(hidden, h_size, activation=activation, reuse=reuse, name='hidden_{}'.format(i), kernel_initializer=c_layers.variance_scaling_initializer(1.0))",
                            "Call"
                        ],
                        [
                            "c_layers.flatten(conv2)",
                            "Call"
                        ],
                        [
                            "hidden_streams[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([hidden, prev_action_oh], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.act_size",
                            "Attribute"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "c_layers.variance_scaling_initializer(factor=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_353": {
                "indices": {
                    "value": "self.action_holder[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.act_size[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_initializer_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_initializer_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_94": {
                "x": {
                    "value": "self.running_variance / (tf.cast(self.global_step, tf.float32) + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_104": {
                "x": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_169": {
                "logits": {
                    "value": "branches_logits[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_174": {
                "x": {
                    "value": "normalized_probs[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_175": {
                "x": {
                    "value": "normalized_probs[k] + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_293": {
                "x": {
                    "value": "2.0 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_297": {
                "x": {
                    "value": "2 * np.pi * np.e",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "one_hot_323": {
                "indices": {
                    "value": "self.prev_action[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.act_size[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_364": {
                "labels": {
                    "value": "tf.nn.softmax(self.all_log_probs[:, action_idx[i]:action_idx[i + 1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.all_log_probs[:, action_idx[i]:action_idx[i + 1]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_292": {
                "x": {
                    "value": "tf.stop_gradient(self.output_pre) - mu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_370": {
                "labels": {
                    "value": "self.action_oh[:, action_idx[i]:action_idx[i + 1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "normalized_logits[:, action_idx[i]:action_idx[i + 1]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_376": {
                "labels": {
                    "value": "self.action_oh[:, action_idx[i]:action_idx[i + 1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "old_normalized_logits[:, action_idx[i]:action_idx[i + 1]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_365": {
                "logits": {
                    "value": "self.all_log_probs[:, action_idx[i]:action_idx[i + 1]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_95": {
                "x": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_292": {
                "input": {
                    "value": "self.output_pre",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ml-agents/mlagents/trainers/policy.py": {
        "tensorflow": {
            "Graph_47": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_48": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_50": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_66": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "self.keep_checkpoints",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_67": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_72": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "self.keep_checkpoints",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_74": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_172": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "write_graph_162": {
                "graph_or_graph_def": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "raw_graph_def.pb",
                    "type": "Constant",
                    "possible_values": []
                },
                "as_text": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ml-agents/mlagents/trainers/ppo/models.py": {
        "tensorflow": {
            "Variable_51": {
                "variable": {
                    "value": "last_reward",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "last_reward",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "new_reward",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "new_reward",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assign_53": {
                "variable": {
                    "value": "update_reward",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "last_reward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='last_reward', trainable=False, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "new_reward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=[], dtype=tf.float32, name='new_reward')",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_112": {
                "variable": {
                    "value": "encoded_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "encoded_state_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_113": {
                "variable": {
                    "value": "encoded_next_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "encoded_next_state_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_123": {
                "variable": {
                    "value": "combined_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[encoded_state, encoded_next_state]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_124": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "combined_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([encoded_state, encoded_next_state], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([encoded_state, self.selected_actions], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.swish",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_143": {
                "variable": {
                    "value": "combined_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[encoded_state, self.selected_actions]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_144": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "combined_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([encoded_state, encoded_next_state], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([encoded_state, self.selected_actions], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.swish",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_146": {
                "variable": {
                    "value": "pred_next_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(combined_input, 256, activation=self.swish)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(combined_input, 256, activation=self.swish)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.curiosity_enc_size * (self.vis_obs_size + int(self.vec_obs_size > 0))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_150": {
                "variable": {
                    "value": "self.intrinsic_reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t": {
                    "value": "self.curiosity_strength * squared_difference",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_151": {
                "variable": {
                    "value": "self.forward_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.dynamic_partition(squared_difference, self.mask, 2)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "placeholder_165": {
                "variable": {
                    "value": "self.returns_holder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "discounted_rewards",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_166": {
                "variable": {
                    "value": "self.advantage",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "advantages",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "polynomial_decay_167": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "max_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5000000.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "end_learning_rate": {
                    "value": "1e-10",
                    "type": "Constant",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_169": {
                "variable": {
                    "value": "self.old_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "old_value_estimates",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "polynomial_decay_171": {
                "variable": {
                    "value": "decay_epsilon",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "max_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5000000.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "end_learning_rate": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "polynomial_decay_172": {
                "variable": {
                    "value": "decay_beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "max_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5000000.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "end_learning_rate": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_173": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squared_difference_178": {
                "variable": {
                    "value": "v_opt_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.returns_holder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_sum(value, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squared_difference_179": {
                "variable": {
                    "value": "v_opt_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.returns_holder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "clipped_value_estimate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.old_value + tf.clip_by_value(tf.reduce_sum(value, axis=1) - self.old_value, -decay_epsilon, decay_epsilon)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_180": {
                "variable": {
                    "value": "self.value_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.dynamic_partition(tf.maximum(v_opt_a, v_opt_b), self.mask, 2)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_185": {
                "variable": {
                    "value": "r_theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "probs - old_probs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_89": {
                "variable": {
                    "value": "hidden_visual",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "visual_encoders",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_90": {
                "variable": {
                    "value": "hidden_next_visual",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "next_visual_encoders",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_97": {
                "variable": {
                    "value": "self.next_vector_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.vec_obs_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "next_vector_observation",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_126": {
                "variable": {
                    "value": "pred_action",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(combined_input, 256, activation=self.swish)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(combined_input, 256, activation=self.swish)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.act_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_127": {
                "variable": {
                    "value": "squared_difference",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(pred_action, self.selected_actions)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_128": {
                "variable": {
                    "value": "self.inverse_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.dynamic_partition(squared_difference, self.mask, 2)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_130": {
                "variable": {
                    "value": "pred_action",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.layers.dense(hidden, self.act_size[i], activation=tf.nn.softmax) for i in range(len(self.act_size))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_133": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-tf.log(pred_action + 1e-10) * self.selected_actions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_134": {
                "variable": {
                    "value": "self.inverse_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.dynamic_partition(cross_entropy, self.mask, 2)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_149": {
                "input_tensor": {
                    "value": "tf.squared_difference(pred_next_state, encoded_next_state)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_175": {
                "t": {
                    "value": "tf.reduce_sum(value, axis=1) - self.old_value",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-decay_epsilon",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "decay_epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.polynomial_decay(epsilon, self.global_step, max_step, 0.1, power=1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_178": {
                "input_tensor": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_187": {
                "t": {
                    "value": "r_theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(probs - old_probs)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1.0 - decay_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 + decay_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_188": {
                "input_tensor": {
                    "value": "tf.dynamic_partition(tf.minimum(p_opt_a, p_opt_b), self.mask, 2)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_36": {
                "input": {
                    "value": "tf.reshape(self.value, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squared_difference_127": {
                "x": {
                    "value": "pred_action",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(hidden, self.act_size[0], activation=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.layers.dense(hidden, self.act_size[i], activation=tf.nn.softmax) for i in range(len(self.act_size))], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.selected_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squared_difference_149": {
                "x": {
                    "value": "pred_next_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(hidden, self.curiosity_enc_size * (self.vis_obs_size + int(self.vec_obs_size > 0)), activation=None)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "encoded_next_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(encoded_next_state_list, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "dynamic_partition_151": {
                "data": {
                    "value": "squared_difference",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.squared_difference(pred_action, self.selected_actions), axis=1)",
                            "Call"
                        ],
                        [
                            "0.5 * tf.reduce_sum(tf.squared_difference(pred_next_state, encoded_next_state), axis=1)",
                            "BinOp"
                        ]
                    ]
                },
                "partitions": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_partitions": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dynamic_partition_180": {
                "data": {
                    "value": "tf.maximum(v_opt_a, v_opt_b)",
                    "type": "Call",
                    "possible_values": []
                },
                "partitions": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_partitions": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_190": {
                "input_tensor": {
                    "value": "tf.dynamic_partition(entropy, self.mask, 2)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_36": {
                "tensor": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dynamic_partition_128": {
                "data": {
                    "value": "squared_difference",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.squared_difference(pred_action, self.selected_actions), axis=1)",
                            "Call"
                        ],
                        [
                            "0.5 * tf.reduce_sum(tf.squared_difference(pred_next_state, encoded_next_state), axis=1)",
                            "BinOp"
                        ]
                    ]
                },
                "partitions": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_partitions": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_131": {
                "inputs": {
                    "value": "hidden",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(combined_input, 256, activation=self.swish)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(combined_input, 256, activation=self.swish)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.act_size[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softmax",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_partition_134": {
                "data": {
                    "value": "cross_entropy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(-tf.log(pred_action + 1e-10) * self.selected_actions, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "partitions": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_partitions": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_175": {
                "input_tensor": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_180": {
                "x": {
                    "value": "v_opt_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squared_difference(self.returns_holder, tf.reduce_sum(value, axis=1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "v_opt_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squared_difference(self.returns_holder, clipped_value_estimate)",
                            "Call"
                        ]
                    ]
                }
            },
            "dynamic_partition_188": {
                "data": {
                    "value": "tf.minimum(p_opt_a, p_opt_b)",
                    "type": "Call",
                    "possible_values": []
                },
                "partitions": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_partitions": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_133": {
                "x": {
                    "value": "pred_action + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_188": {
                "x": {
                    "value": "p_opt_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "r_theta * self.advantage",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "p_opt_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.clip_by_value(r_theta, 1.0 - decay_epsilon, 1.0 + decay_epsilon) * self.advantage",
                            "BinOp"
                        ]
                    ]
                }
            },
            "dynamic_partition_191": {
                "data": {
                    "value": "entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "partitions": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_partitions": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ml-agents/mlagents/trainers/ppo/trainer.py": {
        "tensorflow": {
            "FileWriter_63": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.summary_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ml-agents/mlagents/trainers/tensorflow_to_barracuda.py": {
        "tensorflow": {
            "GraphDef_926": {
                "variable": {
                    "value": "i_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ml-agents/mlagents/trainers/trainer.py": {
        "tensorflow": {
            "Summary_172": {
                "variable": {
                    "value": "summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "text_191": {
                "variable": {
                    "value": "s_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "key",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.stats",
                            "Attribute"
                        ]
                    ]
                },
                "data": {
                    "value": "tf.convert_to_tensor([[str(x), str(input_dict[x])] for x in input_dict])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_191": {
                "value": {
                    "value": "[[str(x), str(input_dict[x])] for x in input_dict]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "ml-agents/mlagents/trainers/trainer_controller.py": {
        "tensorflow": {
            "set_random_seed_60": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reset_default_graph_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ml-agents/tests/trainers/test_bc.py": {
        "tensorflow": {
            "reset_default_graph_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_58": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_80": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_104": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_130": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "FakeGraphScope",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_75": {
                "name_or_scope": {
                    "value": "FakeGraphScope",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "FakeGraphScope",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_125": {
                "name_or_scope": {
                    "value": "FakeGraphScope",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ml-agents/tests/trainers/test_ppo.py": {
        "tensorflow": {
            "reset_default_graph_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_308": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_74": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_99": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_125": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_152": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_177": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_204": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_229": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_256": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_277": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_283": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_309": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_315": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "FakeGraphScope",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "FakeGraphScope",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "FakeGraphScope",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "FakeGraphScope",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_171": {
                "name_or_scope": {
                    "value": "FakeGraphScope",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "FakeGraphScope",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_224": {
                "name_or_scope": {
                    "value": "FakeGraphScope",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_251": {
                "name_or_scope": {
                    "value": "FakeGraphScope",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_278": {
                "name_or_scope": {
                    "value": "FakeGraphScope",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_310": {
                "name_or_scope": {
                    "value": "FakeGraphScope",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}