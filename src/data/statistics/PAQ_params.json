{
    "paq/generation/answer_extractor/extractors.py": {
        "torch": {
            "tensor_122": {
                "variable": {
                    "value": "input_features[input_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "input_features['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_123": {
                "variable": {
                    "value": "input_features[token_type_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "input_features['token_type_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "variable": {
                    "value": "input_features[attention_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "input_features['attention_mask']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_92": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "paq/generation/answer_extractor/span2D_model.py": {
        "torch": {
            "Linear_59": {
                "variable": {
                    "value": "self.start_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.span_output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.end_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.span_output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.span_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "prev_out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.span_output_size * 2",
                            "BinOp"
                        ],
                        [
                            "cur_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "span_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(start_hidden, end_hidden)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_136": {
                "variable": {
                    "value": "span_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bi,bj->bij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "triu_137": {
                "variable": {
                    "value": "span_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "span_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "all_span_masks[feature_index]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.einsum('bi,bj->bij', attention_mask, attention_mask)",
                            "Call"
                        ],
                        [
                            "torch.triu(span_masks)",
                            "Call"
                        ],
                        [
                            "torch.tril(span_masks, diagonal=self.max_answer_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "tril_138": {
                "variable": {
                    "value": "span_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "span_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "all_span_masks[feature_index]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.einsum('bi,bj->bij', attention_mask, attention_mask)",
                            "Call"
                        ],
                        [
                            "torch.triu(span_masks)",
                            "Call"
                        ],
                        [
                            "torch.tril(span_masks, diagonal=self.max_answer_length)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "self.max_answer_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_67": {
                "variable": {
                    "value": "self.output_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_141": {
                "variable": {
                    "value": "span_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "span_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "all_span_logits[feature_index]",
                            "Subscript"
                        ],
                        [
                            "span_logits + -100 * (1 - span_masks)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.span_outputs(span_hidden)",
                            "Call"
                        ],
                        [
                            "span_logits.squeeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_155": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "span_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "all_span_masks[feature_index]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.einsum('bi,bj->bij', attention_mask, attention_mask)",
                            "Call"
                        ],
                        [
                            "torch.triu(span_masks)",
                            "Call"
                        ],
                        [
                            "torch.tril(span_masks, diagonal=self.max_answer_length)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "in_features": {
                    "value": "prev_out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.span_output_size * 2",
                            "BinOp"
                        ],
                        [
                            "cur_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "cur_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlp_sizes",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "paq/generation/filtering/filterer.py": {
        "torch": {
            "SequentialSampler_187": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "src.data.Dataset(examples, self.n_docs)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_188": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "src.data.Dataset(examples, self.n_docs)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.collator",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_104": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_167": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "paq/generation/passage_scorer/scorer.py": {
        "torch": {
            "device_69": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_softmax_92": {
                "input": {
                    "value": "scores.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "paq/generation/question_generator/generator.py": {
        "torch": {}
    },
    "paq/paq_utils.py": {
        "torch": {
            "cat_143": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "load_128": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_161": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_154": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_165": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "size + m.shape[0]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "m.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "paq/rerankers/rerank.py": {
        "torch": {
            "is_available_20": {
                "variable": {
                    "value": "CUDA",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "paq/retrievers/build_index.py": {
        "torch": {
            "cat_35": {
                "variable": {
                    "value": "vector_sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sqrt_48": {
                "variable": {
                    "value": "aux_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_phi - phis",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vectors, aux_dim.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "to_add",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "chunks_to_add",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_106": {
                "variable": {
                    "value": "to_add",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "chunks_to_add",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "paq/retrievers/embed.py": {
        "torch": {
            "is_available_18": {
                "variable": {
                    "value": "CUDA",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_57": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_71": {
                "obj": {
                    "value": "mat.half()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_file_name + f'.{job_num}'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "paq/retrievers/retrieve.py": {
        "torch": {
            "is_available_20": {
                "variable": {
                    "value": "CUDA",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_38": {
                "variable": {
                    "value": "sims",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "queries[mb:mb + n_queries_to_parallelize].float()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "index.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "aux_query_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[query_batch, aux_dim.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "paq/retrievers/retriever_utils.py": {
        "torch": {
            "load_26": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_name_or_path, 'pytorch_model.bin')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_58": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_name_or_path, 'pytorch_model.bin')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_26": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "proj_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "state[bias_key].shape[0]",
                            "Subscript"
                        ],
                        [
                            "_get_proj_dim_from_model_path(model_name_or_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_58": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}